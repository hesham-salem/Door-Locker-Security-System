
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  000021da  0000226e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000049  008000be  008000be  000022cc  2**0
                  ALLOC
  3 .stab         00002838  00000000  00000000  000022cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000138e  00000000  00000000  00004b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005e92  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005ea4  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00005ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  0000640e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000068f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  0000690f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__vector_6>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__vector_9>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__vector_19>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x471>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d4 e0       	ldi	r29, 0x04	; 4
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	ea ed       	ldi	r30, 0xDA	; 218
      ea:	f1 e2       	ldi	r31, 0x21	; 33
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	ae 3b       	cpi	r26, 0xBE	; 190
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	21 e0       	ldi	r18, 0x01	; 1
      fa:	ae eb       	ldi	r26, 0xBE	; 190
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a7 30       	cpi	r26, 0x07	; 7
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 8a 00 	call	0x114	; 0x114 <main>
     10c:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <main>:
  uint8 password_stored_flag=0;
uint8 set_password_now_flag =0;
  uint8 i=0;

int main(void)
{
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	c1 58       	subi	r28, 0x81	; 129
     122:	d1 09       	sbc	r29, r1
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	f8 94       	cli
     128:	de bf       	out	0x3e, r29	; 62
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	cd bf       	out	0x3d, r28	; 61
	uint8 str[20];
	uint8 data;
	/* UART intial */
	UART_configurationType UART_config ;
			UART_config.buadRate=9600;
     12e:	9e 01       	movw	r18, r28
     130:	27 59       	subi	r18, 0x97	; 151
     132:	3f 4f       	sbci	r19, 0xFF	; 255
     134:	80 e8       	ldi	r24, 0x80	; 128
     136:	95 e2       	ldi	r25, 0x25	; 37
     138:	a0 e0       	ldi	r26, 0x00	; 0
     13a:	b0 e0       	ldi	r27, 0x00	; 0
     13c:	f9 01       	movw	r30, r18
     13e:	81 83       	std	Z+1, r24	; 0x01
     140:	92 83       	std	Z+2, r25	; 0x02
     142:	a3 83       	std	Z+3, r26	; 0x03
     144:	b4 83       	std	Z+4, r27	; 0x04
		UART_config.character_size=8;
     146:	ce 01       	movw	r24, r28
     148:	87 59       	subi	r24, 0x97	; 151
     14a:	9f 4f       	sbci	r25, 0xFF	; 255
     14c:	28 e0       	ldi	r18, 0x08	; 8
     14e:	fc 01       	movw	r30, r24
     150:	20 83       	st	Z, r18
		strcpy(UART_config.mode,"double speed");
     152:	ce 01       	movw	r24, r28
     154:	87 59       	subi	r24, 0x97	; 151
     156:	9f 4f       	sbci	r25, 0xFF	; 255
     158:	05 96       	adiw	r24, 0x05	; 5
     15a:	2d e0       	ldi	r18, 0x0D	; 13
     15c:	e0 e6       	ldi	r30, 0x60	; 96
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	dc 01       	movw	r26, r24
     162:	01 90       	ld	r0, Z+
     164:	0d 92       	st	X+, r0
     166:	2a 95       	dec	r18
     168:	e1 f7       	brne	.-8      	; 0x162 <main+0x4e>
		UART_init(&UART_config);
     16a:	ce 01       	movw	r24, r28
     16c:	87 59       	subi	r24, 0x97	; 151
     16e:	9f 4f       	sbci	r25, 0xFF	; 255
     170:	0e 94 de 0a 	call	0x15bc	; 0x15bc <UART_init>
	//	UART_init();
 /*eeprom intial */
		EEPROM_init();
     174:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <EEPROM_init>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	a8 ec       	ldi	r26, 0xC8	; 200
     17e:	b2 e4       	ldi	r27, 0x42	; 66
     180:	8d 8b       	std	Y+21, r24	; 0x15
     182:	9e 8b       	std	Y+22, r25	; 0x16
     184:	af 8b       	std	Y+23, r26	; 0x17
     186:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	4a ef       	ldi	r20, 0xFA	; 250
     18e:	54 e4       	ldi	r21, 0x44	; 68
     190:	6d 89       	ldd	r22, Y+21	; 0x15
     192:	7e 89       	ldd	r23, Y+22	; 0x16
     194:	8f 89       	ldd	r24, Y+23	; 0x17
     196:	98 8d       	ldd	r25, Y+24	; 0x18
     198:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__mulsf3>
     19c:	dc 01       	movw	r26, r24
     19e:	cb 01       	movw	r24, r22
     1a0:	89 8f       	std	Y+25, r24	; 0x19
     1a2:	9a 8f       	std	Y+26, r25	; 0x1a
     1a4:	ab 8f       	std	Y+27, r26	; 0x1b
     1a6:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
     1a8:	20 e0       	ldi	r18, 0x00	; 0
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	40 e8       	ldi	r20, 0x80	; 128
     1ae:	5f e3       	ldi	r21, 0x3F	; 63
     1b0:	69 8d       	ldd	r22, Y+25	; 0x19
     1b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     1b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1b8:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__cmpsf2>
     1bc:	88 23       	and	r24, r24
     1be:	2c f4       	brge	.+10     	; 0x1ca <main+0xb6>
		__ticks = 1;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	9e 8f       	std	Y+30, r25	; 0x1e
     1c6:	8d 8f       	std	Y+29, r24	; 0x1d
     1c8:	3f c0       	rjmp	.+126    	; 0x248 <main+0x134>
	else if (__tmp > 65535)
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	3f ef       	ldi	r19, 0xFF	; 255
     1ce:	4f e7       	ldi	r20, 0x7F	; 127
     1d0:	57 e4       	ldi	r21, 0x47	; 71
     1d2:	69 8d       	ldd	r22, Y+25	; 0x19
     1d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     1d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1da:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__gesf2>
     1de:	18 16       	cp	r1, r24
     1e0:	4c f5       	brge	.+82     	; 0x234 <main+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e2       	ldi	r20, 0x20	; 32
     1e8:	51 e4       	ldi	r21, 0x41	; 65
     1ea:	6d 89       	ldd	r22, Y+21	; 0x15
     1ec:	7e 89       	ldd	r23, Y+22	; 0x16
     1ee:	8f 89       	ldd	r24, Y+23	; 0x17
     1f0:	98 8d       	ldd	r25, Y+24	; 0x18
     1f2:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__mulsf3>
     1f6:	dc 01       	movw	r26, r24
     1f8:	cb 01       	movw	r24, r22
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	9e 8f       	std	Y+30, r25	; 0x1e
     208:	8d 8f       	std	Y+29, r24	; 0x1d
     20a:	0f c0       	rjmp	.+30     	; 0x22a <main+0x116>
     20c:	88 ec       	ldi	r24, 0xC8	; 200
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	98 a3       	std	Y+32, r25	; 0x20
     212:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     214:	8f 8d       	ldd	r24, Y+31	; 0x1f
     216:	98 a1       	ldd	r25, Y+32	; 0x20
     218:	01 97       	sbiw	r24, 0x01	; 1
     21a:	f1 f7       	brne	.-4      	; 0x218 <main+0x104>
     21c:	98 a3       	std	Y+32, r25	; 0x20
     21e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     220:	8d 8d       	ldd	r24, Y+29	; 0x1d
     222:	9e 8d       	ldd	r25, Y+30	; 0x1e
     224:	01 97       	sbiw	r24, 0x01	; 1
     226:	9e 8f       	std	Y+30, r25	; 0x1e
     228:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     22a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     22c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     22e:	89 2b       	or	r24, r25
     230:	69 f7       	brne	.-38     	; 0x20c <main+0xf8>
     232:	14 c0       	rjmp	.+40     	; 0x25c <main+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     234:	69 8d       	ldd	r22, Y+25	; 0x19
     236:	7a 8d       	ldd	r23, Y+26	; 0x1a
     238:	8b 8d       	ldd	r24, Y+27	; 0x1b
     23a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     23c:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fixunssfsi>
     240:	dc 01       	movw	r26, r24
     242:	cb 01       	movw	r24, r22
     244:	9e 8f       	std	Y+30, r25	; 0x1e
     246:	8d 8f       	std	Y+29, r24	; 0x1d
     248:	8d 8d       	ldd	r24, Y+29	; 0x1d
     24a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     24c:	9a a3       	std	Y+34, r25	; 0x22
     24e:	89 a3       	std	Y+33, r24	; 0x21
     250:	89 a1       	ldd	r24, Y+33	; 0x21
     252:	9a a1       	ldd	r25, Y+34	; 0x22
     254:	01 97       	sbiw	r24, 0x01	; 1
     256:	f1 f7       	brne	.-4      	; 0x254 <main+0x140>
     258:	9a a3       	std	Y+34, r25	; 0x22
     25a:	89 a3       	std	Y+33, r24	; 0x21
    {
 	   	_delay_ms(100);


    	    	// first time user enter the password
    	EEPROM_readByte(0x0011,&password_stored_flag);
     25c:	66 ee       	ldi	r22, 0xE6	; 230
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	81 e1       	ldi	r24, 0x11	; 17
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 c6 04 	call	0x98c	; 0x98c <EEPROM_readByte>
    	if((password_stored_flag ==0xAA)&&(i<3)&&(set_password_now_flag==0))
     268:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <password_stored_flag>
     26c:	8a 3a       	cpi	r24, 0xAA	; 170
     26e:	09 f0       	breq	.+2      	; 0x272 <main+0x15e>
     270:	86 c1       	rjmp	.+780    	; 0x57e <__stack+0x11f>
     272:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <i>
     276:	83 30       	cpi	r24, 0x03	; 3
     278:	08 f0       	brcs	.+2      	; 0x27c <main+0x168>
     27a:	81 c1       	rjmp	.+770    	; 0x57e <__stack+0x11f>
     27c:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <set_password_now_flag>
     280:	88 23       	and	r24, r24
     282:	09 f0       	breq	.+2      	; 0x286 <main+0x172>
     284:	7c c1       	rjmp	.+760    	; 0x57e <__stack+0x11f>
    		 {
    		UART_sendByte('d');
     286:	84 e6       	ldi	r24, 0x64	; 100
     288:	0e 94 6f 0c 	call	0x18de	; 0x18de <UART_sendByte>
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	a0 e2       	ldi	r26, 0x20	; 32
     292:	b1 e4       	ldi	r27, 0x41	; 65
     294:	89 87       	std	Y+9, r24	; 0x09
     296:	9a 87       	std	Y+10, r25	; 0x0a
     298:	ab 87       	std	Y+11, r26	; 0x0b
     29a:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	4a ef       	ldi	r20, 0xFA	; 250
     2a2:	54 e4       	ldi	r21, 0x44	; 68
     2a4:	69 85       	ldd	r22, Y+9	; 0x09
     2a6:	7a 85       	ldd	r23, Y+10	; 0x0a
     2a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     2aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     2ac:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__mulsf3>
     2b0:	dc 01       	movw	r26, r24
     2b2:	cb 01       	movw	r24, r22
     2b4:	8f ab       	std	Y+55, r24	; 0x37
     2b6:	98 af       	std	Y+56, r25	; 0x38
     2b8:	a9 af       	std	Y+57, r26	; 0x39
     2ba:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	40 e8       	ldi	r20, 0x80	; 128
     2c2:	5f e3       	ldi	r21, 0x3F	; 63
     2c4:	6f a9       	ldd	r22, Y+55	; 0x37
     2c6:	78 ad       	ldd	r23, Y+56	; 0x38
     2c8:	89 ad       	ldd	r24, Y+57	; 0x39
     2ca:	9a ad       	ldd	r25, Y+58	; 0x3a
     2cc:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__cmpsf2>
     2d0:	88 23       	and	r24, r24
     2d2:	2c f4       	brge	.+10     	; 0x2de <main+0x1ca>
		__ticks = 1;
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	9c af       	std	Y+60, r25	; 0x3c
     2da:	8b af       	std	Y+59, r24	; 0x3b
     2dc:	3f c0       	rjmp	.+126    	; 0x35c <main+0x248>
	else if (__tmp > 65535)
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	3f ef       	ldi	r19, 0xFF	; 255
     2e2:	4f e7       	ldi	r20, 0x7F	; 127
     2e4:	57 e4       	ldi	r21, 0x47	; 71
     2e6:	6f a9       	ldd	r22, Y+55	; 0x37
     2e8:	78 ad       	ldd	r23, Y+56	; 0x38
     2ea:	89 ad       	ldd	r24, Y+57	; 0x39
     2ec:	9a ad       	ldd	r25, Y+58	; 0x3a
     2ee:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__gesf2>
     2f2:	18 16       	cp	r1, r24
     2f4:	4c f5       	brge	.+82     	; 0x348 <main+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	40 e2       	ldi	r20, 0x20	; 32
     2fc:	51 e4       	ldi	r21, 0x41	; 65
     2fe:	69 85       	ldd	r22, Y+9	; 0x09
     300:	7a 85       	ldd	r23, Y+10	; 0x0a
     302:	8b 85       	ldd	r24, Y+11	; 0x0b
     304:	9c 85       	ldd	r25, Y+12	; 0x0c
     306:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__mulsf3>
     30a:	dc 01       	movw	r26, r24
     30c:	cb 01       	movw	r24, r22
     30e:	bc 01       	movw	r22, r24
     310:	cd 01       	movw	r24, r26
     312:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fixunssfsi>
     316:	dc 01       	movw	r26, r24
     318:	cb 01       	movw	r24, r22
     31a:	9c af       	std	Y+60, r25	; 0x3c
     31c:	8b af       	std	Y+59, r24	; 0x3b
     31e:	0f c0       	rjmp	.+30     	; 0x33e <main+0x22a>
     320:	88 ec       	ldi	r24, 0xC8	; 200
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	9e af       	std	Y+62, r25	; 0x3e
     326:	8d af       	std	Y+61, r24	; 0x3d
     328:	8d ad       	ldd	r24, Y+61	; 0x3d
     32a:	9e ad       	ldd	r25, Y+62	; 0x3e
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <main+0x218>
     330:	9e af       	std	Y+62, r25	; 0x3e
     332:	8d af       	std	Y+61, r24	; 0x3d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     334:	8b ad       	ldd	r24, Y+59	; 0x3b
     336:	9c ad       	ldd	r25, Y+60	; 0x3c
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	9c af       	std	Y+60, r25	; 0x3c
     33c:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     33e:	8b ad       	ldd	r24, Y+59	; 0x3b
     340:	9c ad       	ldd	r25, Y+60	; 0x3c
     342:	89 2b       	or	r24, r25
     344:	69 f7       	brne	.-38     	; 0x320 <main+0x20c>
     346:	1e c0       	rjmp	.+60     	; 0x384 <main+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     348:	6f a9       	ldd	r22, Y+55	; 0x37
     34a:	78 ad       	ldd	r23, Y+56	; 0x38
     34c:	89 ad       	ldd	r24, Y+57	; 0x39
     34e:	9a ad       	ldd	r25, Y+58	; 0x3a
     350:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fixunssfsi>
     354:	dc 01       	movw	r26, r24
     356:	cb 01       	movw	r24, r22
     358:	9c af       	std	Y+60, r25	; 0x3c
     35a:	8b af       	std	Y+59, r24	; 0x3b
     35c:	2b ad       	ldd	r18, Y+59	; 0x3b
     35e:	3c ad       	ldd	r19, Y+60	; 0x3c
     360:	ce 01       	movw	r24, r28
     362:	cf 96       	adiw	r24, 0x3f	; 63
     364:	fc 01       	movw	r30, r24
     366:	31 83       	std	Z+1, r19	; 0x01
     368:	20 83       	st	Z, r18
     36a:	ce 01       	movw	r24, r28
     36c:	cf 96       	adiw	r24, 0x3f	; 63
     36e:	fc 01       	movw	r30, r24
     370:	80 81       	ld	r24, Z
     372:	91 81       	ldd	r25, Z+1	; 0x01
     374:	01 97       	sbiw	r24, 0x01	; 1
     376:	f1 f7       	brne	.-4      	; 0x374 <main+0x260>
     378:	9e 01       	movw	r18, r28
     37a:	21 5c       	subi	r18, 0xC1	; 193
     37c:	3f 4f       	sbci	r19, 0xFF	; 255
     37e:	f9 01       	movw	r30, r18
     380:	91 83       	std	Z+1, r25	; 0x01
     382:	80 83       	st	Z, r24
     	   	_delay_ms(10);

    	    	UART_receiveString(enter_password_stored);
     384:	82 ed       	ldi	r24, 0xD2	; 210
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 c0 0c 	call	0x1980	; 0x1980 <UART_receiveString>
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	a0 e2       	ldi	r26, 0x20	; 32
     392:	b1 e4       	ldi	r27, 0x41	; 65
     394:	8d 87       	std	Y+13, r24	; 0x0d
     396:	9e 87       	std	Y+14, r25	; 0x0e
     398:	af 87       	std	Y+15, r26	; 0x0f
     39a:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	4a ef       	ldi	r20, 0xFA	; 250
     3a2:	54 e4       	ldi	r21, 0x44	; 68
     3a4:	6d 85       	ldd	r22, Y+13	; 0x0d
     3a6:	7e 85       	ldd	r23, Y+14	; 0x0e
     3a8:	8f 85       	ldd	r24, Y+15	; 0x0f
     3aa:	98 89       	ldd	r25, Y+16	; 0x10
     3ac:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__mulsf3>
     3b0:	dc 01       	movw	r26, r24
     3b2:	cb 01       	movw	r24, r22
     3b4:	8d a7       	std	Y+45, r24	; 0x2d
     3b6:	9e a7       	std	Y+46, r25	; 0x2e
     3b8:	af a7       	std	Y+47, r26	; 0x2f
     3ba:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	40 e8       	ldi	r20, 0x80	; 128
     3c2:	5f e3       	ldi	r21, 0x3F	; 63
     3c4:	6d a5       	ldd	r22, Y+45	; 0x2d
     3c6:	7e a5       	ldd	r23, Y+46	; 0x2e
     3c8:	8f a5       	ldd	r24, Y+47	; 0x2f
     3ca:	98 a9       	ldd	r25, Y+48	; 0x30
     3cc:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__cmpsf2>
     3d0:	88 23       	and	r24, r24
     3d2:	2c f4       	brge	.+10     	; 0x3de <main+0x2ca>
		__ticks = 1;
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	9a ab       	std	Y+50, r25	; 0x32
     3da:	89 ab       	std	Y+49, r24	; 0x31
     3dc:	3f c0       	rjmp	.+126    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
	else if (__tmp > 65535)
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	3f ef       	ldi	r19, 0xFF	; 255
     3e2:	4f e7       	ldi	r20, 0x7F	; 127
     3e4:	57 e4       	ldi	r21, 0x47	; 71
     3e6:	6d a5       	ldd	r22, Y+45	; 0x2d
     3e8:	7e a5       	ldd	r23, Y+46	; 0x2e
     3ea:	8f a5       	ldd	r24, Y+47	; 0x2f
     3ec:	98 a9       	ldd	r25, Y+48	; 0x30
     3ee:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__gesf2>
     3f2:	18 16       	cp	r1, r24
     3f4:	4c f5       	brge	.+82     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e2       	ldi	r20, 0x20	; 32
     3fc:	51 e4       	ldi	r21, 0x41	; 65
     3fe:	6d 85       	ldd	r22, Y+13	; 0x0d
     400:	7e 85       	ldd	r23, Y+14	; 0x0e
     402:	8f 85       	ldd	r24, Y+15	; 0x0f
     404:	98 89       	ldd	r25, Y+16	; 0x10
     406:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__mulsf3>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	bc 01       	movw	r22, r24
     410:	cd 01       	movw	r24, r26
     412:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fixunssfsi>
     416:	dc 01       	movw	r26, r24
     418:	cb 01       	movw	r24, r22
     41a:	9a ab       	std	Y+50, r25	; 0x32
     41c:	89 ab       	std	Y+49, r24	; 0x31
     41e:	0f c0       	rjmp	.+30     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     420:	88 ec       	ldi	r24, 0xC8	; 200
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	9c ab       	std	Y+52, r25	; 0x34
     426:	8b ab       	std	Y+51, r24	; 0x33
     428:	8b a9       	ldd	r24, Y+51	; 0x33
     42a:	9c a9       	ldd	r25, Y+52	; 0x34
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	f1 f7       	brne	.-4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     430:	9c ab       	std	Y+52, r25	; 0x34
     432:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     434:	89 a9       	ldd	r24, Y+49	; 0x31
     436:	9a a9       	ldd	r25, Y+50	; 0x32
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	9a ab       	std	Y+50, r25	; 0x32
     43c:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     43e:	89 a9       	ldd	r24, Y+49	; 0x31
     440:	9a a9       	ldd	r25, Y+50	; 0x32
     442:	89 2b       	or	r24, r25
     444:	69 f7       	brne	.-38     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     446:	14 c0       	rjmp	.+40     	; 0x470 <__stack+0x11>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     448:	6d a5       	ldd	r22, Y+45	; 0x2d
     44a:	7e a5       	ldd	r23, Y+46	; 0x2e
     44c:	8f a5       	ldd	r24, Y+47	; 0x2f
     44e:	98 a9       	ldd	r25, Y+48	; 0x30
     450:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fixunssfsi>
     454:	dc 01       	movw	r26, r24
     456:	cb 01       	movw	r24, r22
     458:	9a ab       	std	Y+50, r25	; 0x32
     45a:	89 ab       	std	Y+49, r24	; 0x31
     45c:	89 a9       	ldd	r24, Y+49	; 0x31
     45e:	9a a9       	ldd	r25, Y+50	; 0x32
     460:	9e ab       	std	Y+54, r25	; 0x36
     462:	8d ab       	std	Y+53, r24	; 0x35
     464:	8d a9       	ldd	r24, Y+53	; 0x35
     466:	9e a9       	ldd	r25, Y+54	; 0x36
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <__stack+0x9>
     46c:	9e ab       	std	Y+54, r25	; 0x36
     46e:	8d ab       	std	Y+53, r24	; 0x35
    	   	_delay_ms(10);
    		EEPROM_readString(0x0512, check_password_stored);
     470:	6e eb       	ldi	r22, 0xBE	; 190
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	82 e1       	ldi	r24, 0x12	; 18
     476:	95 e0       	ldi	r25, 0x05	; 5
     478:	0e 94 dd 05 	call	0xbba	; 0xbba <EEPROM_readString>
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	a0 e2       	ldi	r26, 0x20	; 32
     482:	b1 e4       	ldi	r27, 0x41	; 65
     484:	89 83       	std	Y+1, r24	; 0x01
     486:	9a 83       	std	Y+2, r25	; 0x02
     488:	ab 83       	std	Y+3, r26	; 0x03
     48a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	4a ef       	ldi	r20, 0xFA	; 250
     492:	54 e4       	ldi	r21, 0x44	; 68
     494:	69 81       	ldd	r22, Y+1	; 0x01
     496:	7a 81       	ldd	r23, Y+2	; 0x02
     498:	8b 81       	ldd	r24, Y+3	; 0x03
     49a:	9c 81       	ldd	r25, Y+4	; 0x04
     49c:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__mulsf3>
     4a0:	dc 01       	movw	r26, r24
     4a2:	cb 01       	movw	r24, r22
     4a4:	8b a3       	std	Y+35, r24	; 0x23
     4a6:	9c a3       	std	Y+36, r25	; 0x24
     4a8:	ad a3       	std	Y+37, r26	; 0x25
     4aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	40 e8       	ldi	r20, 0x80	; 128
     4b2:	5f e3       	ldi	r21, 0x3F	; 63
     4b4:	6b a1       	ldd	r22, Y+35	; 0x23
     4b6:	7c a1       	ldd	r23, Y+36	; 0x24
     4b8:	8d a1       	ldd	r24, Y+37	; 0x25
     4ba:	9e a1       	ldd	r25, Y+38	; 0x26
     4bc:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__cmpsf2>
     4c0:	88 23       	and	r24, r24
     4c2:	2c f4       	brge	.+10     	; 0x4ce <__stack+0x6f>
		__ticks = 1;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	98 a7       	std	Y+40, r25	; 0x28
     4ca:	8f a3       	std	Y+39, r24	; 0x27
     4cc:	3f c0       	rjmp	.+126    	; 0x54c <__stack+0xed>
	else if (__tmp > 65535)
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	3f ef       	ldi	r19, 0xFF	; 255
     4d2:	4f e7       	ldi	r20, 0x7F	; 127
     4d4:	57 e4       	ldi	r21, 0x47	; 71
     4d6:	6b a1       	ldd	r22, Y+35	; 0x23
     4d8:	7c a1       	ldd	r23, Y+36	; 0x24
     4da:	8d a1       	ldd	r24, Y+37	; 0x25
     4dc:	9e a1       	ldd	r25, Y+38	; 0x26
     4de:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__gesf2>
     4e2:	18 16       	cp	r1, r24
     4e4:	4c f5       	brge	.+82     	; 0x538 <__stack+0xd9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	40 e2       	ldi	r20, 0x20	; 32
     4ec:	51 e4       	ldi	r21, 0x41	; 65
     4ee:	69 81       	ldd	r22, Y+1	; 0x01
     4f0:	7a 81       	ldd	r23, Y+2	; 0x02
     4f2:	8b 81       	ldd	r24, Y+3	; 0x03
     4f4:	9c 81       	ldd	r25, Y+4	; 0x04
     4f6:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__mulsf3>
     4fa:	dc 01       	movw	r26, r24
     4fc:	cb 01       	movw	r24, r22
     4fe:	bc 01       	movw	r22, r24
     500:	cd 01       	movw	r24, r26
     502:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fixunssfsi>
     506:	dc 01       	movw	r26, r24
     508:	cb 01       	movw	r24, r22
     50a:	98 a7       	std	Y+40, r25	; 0x28
     50c:	8f a3       	std	Y+39, r24	; 0x27
     50e:	0f c0       	rjmp	.+30     	; 0x52e <__stack+0xcf>
     510:	88 ec       	ldi	r24, 0xC8	; 200
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	9a a7       	std	Y+42, r25	; 0x2a
     516:	89 a7       	std	Y+41, r24	; 0x29
     518:	89 a5       	ldd	r24, Y+41	; 0x29
     51a:	9a a5       	ldd	r25, Y+42	; 0x2a
     51c:	01 97       	sbiw	r24, 0x01	; 1
     51e:	f1 f7       	brne	.-4      	; 0x51c <__stack+0xbd>
     520:	9a a7       	std	Y+42, r25	; 0x2a
     522:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     524:	8f a1       	ldd	r24, Y+39	; 0x27
     526:	98 a5       	ldd	r25, Y+40	; 0x28
     528:	01 97       	sbiw	r24, 0x01	; 1
     52a:	98 a7       	std	Y+40, r25	; 0x28
     52c:	8f a3       	std	Y+39, r24	; 0x27
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     52e:	8f a1       	ldd	r24, Y+39	; 0x27
     530:	98 a5       	ldd	r25, Y+40	; 0x28
     532:	89 2b       	or	r24, r25
     534:	69 f7       	brne	.-38     	; 0x510 <__stack+0xb1>
     536:	14 c0       	rjmp	.+40     	; 0x560 <__stack+0x101>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     538:	6b a1       	ldd	r22, Y+35	; 0x23
     53a:	7c a1       	ldd	r23, Y+36	; 0x24
     53c:	8d a1       	ldd	r24, Y+37	; 0x25
     53e:	9e a1       	ldd	r25, Y+38	; 0x26
     540:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fixunssfsi>
     544:	dc 01       	movw	r26, r24
     546:	cb 01       	movw	r24, r22
     548:	98 a7       	std	Y+40, r25	; 0x28
     54a:	8f a3       	std	Y+39, r24	; 0x27
     54c:	8f a1       	ldd	r24, Y+39	; 0x27
     54e:	98 a5       	ldd	r25, Y+40	; 0x28
     550:	9c a7       	std	Y+44, r25	; 0x2c
     552:	8b a7       	std	Y+43, r24	; 0x2b
     554:	8b a5       	ldd	r24, Y+43	; 0x2b
     556:	9c a5       	ldd	r25, Y+44	; 0x2c
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <__stack+0xf9>
     55c:	9c a7       	std	Y+44, r25	; 0x2c
     55e:	8b a7       	std	Y+43, r24	; 0x2b
    	    		_delay_ms(10);
    		if(strcmp(enter_password_stored,check_password_stored))
     560:	6e eb       	ldi	r22, 0xBE	; 190
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	82 ed       	ldi	r24, 0xD2	; 210
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
     56c:	89 2b       	or	r24, r25
     56e:	09 f4       	brne	.+2      	; 0x572 <__stack+0x113>
     570:	b1 c1       	rjmp	.+866    	; 0x8d4 <__stack+0x475>
    		{
        	//	UART_sendByte('w');
        				i++;
     572:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <i>
     576:	8f 5f       	subi	r24, 0xFF	; 255
     578:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <i>

    	    	UART_receiveString(enter_password_stored);
    	   	_delay_ms(10);
    		EEPROM_readString(0x0512, check_password_stored);
    	    		_delay_ms(10);
    		if(strcmp(enter_password_stored,check_password_stored))
     57c:	ab c1       	rjmp	.+854    	; 0x8d4 <__stack+0x475>
    		{
        	//	UART_sendByte('w');
        				i++;
    		 }
    		 }
    	else if((password_stored_flag ==0xAA)&&(i>=3)&&(set_password_now_flag==0))
     57e:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <password_stored_flag>
     582:	8a 3a       	cpi	r24, 0xAA	; 170
     584:	61 f4       	brne	.+24     	; 0x59e <__stack+0x13f>
     586:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <i>
     58a:	83 30       	cpi	r24, 0x03	; 3
     58c:	40 f0       	brcs	.+16     	; 0x59e <__stack+0x13f>
     58e:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <set_password_now_flag>
     592:	88 23       	and	r24, r24
     594:	21 f4       	brne	.+8      	; 0x59e <__stack+0x13f>
    		UART_sendByte('B');
     596:	82 e4       	ldi	r24, 0x42	; 66
     598:	0e 94 6f 0c 	call	0x18de	; 0x18de <UART_sendByte>
     59c:	9b c1       	rjmp	.+822    	; 0x8d4 <__stack+0x475>

    	else if((password_stored_flag !=0xAA)&&(set_password_now_flag==0))
     59e:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <password_stored_flag>
     5a2:	8a 3a       	cpi	r24, 0xAA	; 170
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <__stack+0x149>
     5a6:	e8 cd       	rjmp	.-1072   	; 0x178 <main+0x64>
     5a8:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <set_password_now_flag>
     5ac:	88 23       	and	r24, r24
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <__stack+0x153>
     5b0:	e3 cd       	rjmp	.-1082   	; 0x178 <main+0x64>
    	{
        	UART_sendByte('s');
     5b2:	83 e7       	ldi	r24, 0x73	; 115
     5b4:	0e 94 6f 0c 	call	0x18de	; 0x18de <UART_sendByte>
    	UART_receiveString(password_stored);
     5b8:	8d ee       	ldi	r24, 0xED	; 237
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 c0 0c 	call	0x1980	; 0x1980 <UART_receiveString>
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	a8 ec       	ldi	r26, 0xC8	; 200
     5c6:	b2 e4       	ldi	r27, 0x42	; 66
     5c8:	89 8b       	std	Y+17, r24	; 0x11
     5ca:	9a 8b       	std	Y+18, r25	; 0x12
     5cc:	ab 8b       	std	Y+19, r26	; 0x13
     5ce:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5d0:	8e 01       	movw	r16, r28
     5d2:	05 5b       	subi	r16, 0xB5	; 181
     5d4:	1f 4f       	sbci	r17, 0xFF	; 255
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	4a ef       	ldi	r20, 0xFA	; 250
     5dc:	54 e4       	ldi	r21, 0x44	; 68
     5de:	69 89       	ldd	r22, Y+17	; 0x11
     5e0:	7a 89       	ldd	r23, Y+18	; 0x12
     5e2:	8b 89       	ldd	r24, Y+19	; 0x13
     5e4:	9c 89       	ldd	r25, Y+20	; 0x14
     5e6:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__mulsf3>
     5ea:	dc 01       	movw	r26, r24
     5ec:	cb 01       	movw	r24, r22
     5ee:	f8 01       	movw	r30, r16
     5f0:	80 83       	st	Z, r24
     5f2:	91 83       	std	Z+1, r25	; 0x01
     5f4:	a2 83       	std	Z+2, r26	; 0x02
     5f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     5f8:	ce 01       	movw	r24, r28
     5fa:	85 5b       	subi	r24, 0xB5	; 181
     5fc:	9f 4f       	sbci	r25, 0xFF	; 255
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	40 e8       	ldi	r20, 0x80	; 128
     604:	5f e3       	ldi	r21, 0x3F	; 63
     606:	fc 01       	movw	r30, r24
     608:	60 81       	ld	r22, Z
     60a:	71 81       	ldd	r23, Z+1	; 0x01
     60c:	82 81       	ldd	r24, Z+2	; 0x02
     60e:	93 81       	ldd	r25, Z+3	; 0x03
     610:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__cmpsf2>
     614:	88 23       	and	r24, r24
     616:	4c f4       	brge	.+18     	; 0x62a <__stack+0x1cb>
		__ticks = 1;
     618:	ce 01       	movw	r24, r28
     61a:	81 5b       	subi	r24, 0xB1	; 177
     61c:	9f 4f       	sbci	r25, 0xFF	; 255
     61e:	21 e0       	ldi	r18, 0x01	; 1
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	fc 01       	movw	r30, r24
     624:	31 83       	std	Z+1, r19	; 0x01
     626:	20 83       	st	Z, r18
     628:	69 c0       	rjmp	.+210    	; 0x6fc <__stack+0x29d>
	else if (__tmp > 65535)
     62a:	ce 01       	movw	r24, r28
     62c:	85 5b       	subi	r24, 0xB5	; 181
     62e:	9f 4f       	sbci	r25, 0xFF	; 255
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	3f ef       	ldi	r19, 0xFF	; 255
     634:	4f e7       	ldi	r20, 0x7F	; 127
     636:	57 e4       	ldi	r21, 0x47	; 71
     638:	fc 01       	movw	r30, r24
     63a:	60 81       	ld	r22, Z
     63c:	71 81       	ldd	r23, Z+1	; 0x01
     63e:	82 81       	ldd	r24, Z+2	; 0x02
     640:	93 81       	ldd	r25, Z+3	; 0x03
     642:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__gesf2>
     646:	18 16       	cp	r1, r24
     648:	0c f0       	brlt	.+2      	; 0x64c <__stack+0x1ed>
     64a:	46 c0       	rjmp	.+140    	; 0x6d8 <__stack+0x279>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	40 e2       	ldi	r20, 0x20	; 32
     652:	51 e4       	ldi	r21, 0x41	; 65
     654:	69 89       	ldd	r22, Y+17	; 0x11
     656:	7a 89       	ldd	r23, Y+18	; 0x12
     658:	8b 89       	ldd	r24, Y+19	; 0x13
     65a:	9c 89       	ldd	r25, Y+20	; 0x14
     65c:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__mulsf3>
     660:	dc 01       	movw	r26, r24
     662:	cb 01       	movw	r24, r22
     664:	8e 01       	movw	r16, r28
     666:	01 5b       	subi	r16, 0xB1	; 177
     668:	1f 4f       	sbci	r17, 0xFF	; 255
     66a:	bc 01       	movw	r22, r24
     66c:	cd 01       	movw	r24, r26
     66e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fixunssfsi>
     672:	dc 01       	movw	r26, r24
     674:	cb 01       	movw	r24, r22
     676:	f8 01       	movw	r30, r16
     678:	91 83       	std	Z+1, r25	; 0x01
     67a:	80 83       	st	Z, r24
     67c:	24 c0       	rjmp	.+72     	; 0x6c6 <__stack+0x267>
     67e:	ce 01       	movw	r24, r28
     680:	8f 5a       	subi	r24, 0xAF	; 175
     682:	9f 4f       	sbci	r25, 0xFF	; 255
     684:	28 ec       	ldi	r18, 0xC8	; 200
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	fc 01       	movw	r30, r24
     68a:	31 83       	std	Z+1, r19	; 0x01
     68c:	20 83       	st	Z, r18
     68e:	ce 01       	movw	r24, r28
     690:	8f 5a       	subi	r24, 0xAF	; 175
     692:	9f 4f       	sbci	r25, 0xFF	; 255
     694:	fc 01       	movw	r30, r24
     696:	80 81       	ld	r24, Z
     698:	91 81       	ldd	r25, Z+1	; 0x01
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <__stack+0x23b>
     69e:	9e 01       	movw	r18, r28
     6a0:	2f 5a       	subi	r18, 0xAF	; 175
     6a2:	3f 4f       	sbci	r19, 0xFF	; 255
     6a4:	f9 01       	movw	r30, r18
     6a6:	91 83       	std	Z+1, r25	; 0x01
     6a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6aa:	ce 01       	movw	r24, r28
     6ac:	81 5b       	subi	r24, 0xB1	; 177
     6ae:	9f 4f       	sbci	r25, 0xFF	; 255
     6b0:	9e 01       	movw	r18, r28
     6b2:	21 5b       	subi	r18, 0xB1	; 177
     6b4:	3f 4f       	sbci	r19, 0xFF	; 255
     6b6:	f9 01       	movw	r30, r18
     6b8:	20 81       	ld	r18, Z
     6ba:	31 81       	ldd	r19, Z+1	; 0x01
     6bc:	21 50       	subi	r18, 0x01	; 1
     6be:	31 09       	sbc	r19, r1
     6c0:	fc 01       	movw	r30, r24
     6c2:	31 83       	std	Z+1, r19	; 0x01
     6c4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6c6:	ce 01       	movw	r24, r28
     6c8:	81 5b       	subi	r24, 0xB1	; 177
     6ca:	9f 4f       	sbci	r25, 0xFF	; 255
     6cc:	fc 01       	movw	r30, r24
     6ce:	80 81       	ld	r24, Z
     6d0:	91 81       	ldd	r25, Z+1	; 0x01
     6d2:	89 2b       	or	r24, r25
     6d4:	a1 f6       	brne	.-88     	; 0x67e <__stack+0x21f>
     6d6:	2c c0       	rjmp	.+88     	; 0x730 <__stack+0x2d1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6d8:	8e 01       	movw	r16, r28
     6da:	01 5b       	subi	r16, 0xB1	; 177
     6dc:	1f 4f       	sbci	r17, 0xFF	; 255
     6de:	ce 01       	movw	r24, r28
     6e0:	85 5b       	subi	r24, 0xB5	; 181
     6e2:	9f 4f       	sbci	r25, 0xFF	; 255
     6e4:	fc 01       	movw	r30, r24
     6e6:	60 81       	ld	r22, Z
     6e8:	71 81       	ldd	r23, Z+1	; 0x01
     6ea:	82 81       	ldd	r24, Z+2	; 0x02
     6ec:	93 81       	ldd	r25, Z+3	; 0x03
     6ee:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fixunssfsi>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	f8 01       	movw	r30, r16
     6f8:	91 83       	std	Z+1, r25	; 0x01
     6fa:	80 83       	st	Z, r24
     6fc:	ce 01       	movw	r24, r28
     6fe:	8d 5a       	subi	r24, 0xAD	; 173
     700:	9f 4f       	sbci	r25, 0xFF	; 255
     702:	9e 01       	movw	r18, r28
     704:	21 5b       	subi	r18, 0xB1	; 177
     706:	3f 4f       	sbci	r19, 0xFF	; 255
     708:	f9 01       	movw	r30, r18
     70a:	20 81       	ld	r18, Z
     70c:	31 81       	ldd	r19, Z+1	; 0x01
     70e:	fc 01       	movw	r30, r24
     710:	31 83       	std	Z+1, r19	; 0x01
     712:	20 83       	st	Z, r18
     714:	ce 01       	movw	r24, r28
     716:	8d 5a       	subi	r24, 0xAD	; 173
     718:	9f 4f       	sbci	r25, 0xFF	; 255
     71a:	fc 01       	movw	r30, r24
     71c:	80 81       	ld	r24, Z
     71e:	91 81       	ldd	r25, Z+1	; 0x01
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <__stack+0x2c1>
     724:	9e 01       	movw	r18, r28
     726:	2d 5a       	subi	r18, 0xAD	; 173
     728:	3f 4f       	sbci	r19, 0xFF	; 255
     72a:	f9 01       	movw	r30, r18
     72c:	91 83       	std	Z+1, r25	; 0x01
     72e:	80 83       	st	Z, r24
        	_delay_ms(100);
    	EEPROM_writeString(0x0512,password_stored);
     730:	6d ee       	ldi	r22, 0xED	; 237
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	82 e1       	ldi	r24, 0x12	; 18
     736:	95 e0       	ldi	r25, 0x05	; 5
     738:	0e 94 24 05 	call	0xa48	; 0xa48 <EEPROM_writeString>
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	a0 e2       	ldi	r26, 0x20	; 32
     742:	b1 e4       	ldi	r27, 0x41	; 65
     744:	8d 83       	std	Y+5, r24	; 0x05
     746:	9e 83       	std	Y+6, r25	; 0x06
     748:	af 83       	std	Y+7, r26	; 0x07
     74a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     74c:	8e 01       	movw	r16, r28
     74e:	0f 5b       	subi	r16, 0xBF	; 191
     750:	1f 4f       	sbci	r17, 0xFF	; 255
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	4a ef       	ldi	r20, 0xFA	; 250
     758:	54 e4       	ldi	r21, 0x44	; 68
     75a:	6d 81       	ldd	r22, Y+5	; 0x05
     75c:	7e 81       	ldd	r23, Y+6	; 0x06
     75e:	8f 81       	ldd	r24, Y+7	; 0x07
     760:	98 85       	ldd	r25, Y+8	; 0x08
     762:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__mulsf3>
     766:	dc 01       	movw	r26, r24
     768:	cb 01       	movw	r24, r22
     76a:	f8 01       	movw	r30, r16
     76c:	80 83       	st	Z, r24
     76e:	91 83       	std	Z+1, r25	; 0x01
     770:	a2 83       	std	Z+2, r26	; 0x02
     772:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     774:	ce 01       	movw	r24, r28
     776:	8f 5b       	subi	r24, 0xBF	; 191
     778:	9f 4f       	sbci	r25, 0xFF	; 255
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 e8       	ldi	r20, 0x80	; 128
     780:	5f e3       	ldi	r21, 0x3F	; 63
     782:	fc 01       	movw	r30, r24
     784:	60 81       	ld	r22, Z
     786:	71 81       	ldd	r23, Z+1	; 0x01
     788:	82 81       	ldd	r24, Z+2	; 0x02
     78a:	93 81       	ldd	r25, Z+3	; 0x03
     78c:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__cmpsf2>
     790:	88 23       	and	r24, r24
     792:	4c f4       	brge	.+18     	; 0x7a6 <__stack+0x347>
		__ticks = 1;
     794:	ce 01       	movw	r24, r28
     796:	8b 5b       	subi	r24, 0xBB	; 187
     798:	9f 4f       	sbci	r25, 0xFF	; 255
     79a:	21 e0       	ldi	r18, 0x01	; 1
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	fc 01       	movw	r30, r24
     7a0:	31 83       	std	Z+1, r19	; 0x01
     7a2:	20 83       	st	Z, r18
     7a4:	69 c0       	rjmp	.+210    	; 0x878 <__stack+0x419>
	else if (__tmp > 65535)
     7a6:	ce 01       	movw	r24, r28
     7a8:	8f 5b       	subi	r24, 0xBF	; 191
     7aa:	9f 4f       	sbci	r25, 0xFF	; 255
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	3f ef       	ldi	r19, 0xFF	; 255
     7b0:	4f e7       	ldi	r20, 0x7F	; 127
     7b2:	57 e4       	ldi	r21, 0x47	; 71
     7b4:	fc 01       	movw	r30, r24
     7b6:	60 81       	ld	r22, Z
     7b8:	71 81       	ldd	r23, Z+1	; 0x01
     7ba:	82 81       	ldd	r24, Z+2	; 0x02
     7bc:	93 81       	ldd	r25, Z+3	; 0x03
     7be:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__gesf2>
     7c2:	18 16       	cp	r1, r24
     7c4:	0c f0       	brlt	.+2      	; 0x7c8 <__stack+0x369>
     7c6:	46 c0       	rjmp	.+140    	; 0x854 <__stack+0x3f5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	40 e2       	ldi	r20, 0x20	; 32
     7ce:	51 e4       	ldi	r21, 0x41	; 65
     7d0:	6d 81       	ldd	r22, Y+5	; 0x05
     7d2:	7e 81       	ldd	r23, Y+6	; 0x06
     7d4:	8f 81       	ldd	r24, Y+7	; 0x07
     7d6:	98 85       	ldd	r25, Y+8	; 0x08
     7d8:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__mulsf3>
     7dc:	dc 01       	movw	r26, r24
     7de:	cb 01       	movw	r24, r22
     7e0:	8e 01       	movw	r16, r28
     7e2:	0b 5b       	subi	r16, 0xBB	; 187
     7e4:	1f 4f       	sbci	r17, 0xFF	; 255
     7e6:	bc 01       	movw	r22, r24
     7e8:	cd 01       	movw	r24, r26
     7ea:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fixunssfsi>
     7ee:	dc 01       	movw	r26, r24
     7f0:	cb 01       	movw	r24, r22
     7f2:	f8 01       	movw	r30, r16
     7f4:	91 83       	std	Z+1, r25	; 0x01
     7f6:	80 83       	st	Z, r24
     7f8:	24 c0       	rjmp	.+72     	; 0x842 <__stack+0x3e3>
     7fa:	ce 01       	movw	r24, r28
     7fc:	89 5b       	subi	r24, 0xB9	; 185
     7fe:	9f 4f       	sbci	r25, 0xFF	; 255
     800:	28 ec       	ldi	r18, 0xC8	; 200
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	fc 01       	movw	r30, r24
     806:	31 83       	std	Z+1, r19	; 0x01
     808:	20 83       	st	Z, r18
     80a:	ce 01       	movw	r24, r28
     80c:	89 5b       	subi	r24, 0xB9	; 185
     80e:	9f 4f       	sbci	r25, 0xFF	; 255
     810:	fc 01       	movw	r30, r24
     812:	80 81       	ld	r24, Z
     814:	91 81       	ldd	r25, Z+1	; 0x01
     816:	01 97       	sbiw	r24, 0x01	; 1
     818:	f1 f7       	brne	.-4      	; 0x816 <__stack+0x3b7>
     81a:	9e 01       	movw	r18, r28
     81c:	29 5b       	subi	r18, 0xB9	; 185
     81e:	3f 4f       	sbci	r19, 0xFF	; 255
     820:	f9 01       	movw	r30, r18
     822:	91 83       	std	Z+1, r25	; 0x01
     824:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     826:	ce 01       	movw	r24, r28
     828:	8b 5b       	subi	r24, 0xBB	; 187
     82a:	9f 4f       	sbci	r25, 0xFF	; 255
     82c:	9e 01       	movw	r18, r28
     82e:	2b 5b       	subi	r18, 0xBB	; 187
     830:	3f 4f       	sbci	r19, 0xFF	; 255
     832:	f9 01       	movw	r30, r18
     834:	20 81       	ld	r18, Z
     836:	31 81       	ldd	r19, Z+1	; 0x01
     838:	21 50       	subi	r18, 0x01	; 1
     83a:	31 09       	sbc	r19, r1
     83c:	fc 01       	movw	r30, r24
     83e:	31 83       	std	Z+1, r19	; 0x01
     840:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     842:	ce 01       	movw	r24, r28
     844:	8b 5b       	subi	r24, 0xBB	; 187
     846:	9f 4f       	sbci	r25, 0xFF	; 255
     848:	fc 01       	movw	r30, r24
     84a:	80 81       	ld	r24, Z
     84c:	91 81       	ldd	r25, Z+1	; 0x01
     84e:	89 2b       	or	r24, r25
     850:	a1 f6       	brne	.-88     	; 0x7fa <__stack+0x39b>
     852:	2c c0       	rjmp	.+88     	; 0x8ac <__stack+0x44d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     854:	8e 01       	movw	r16, r28
     856:	0b 5b       	subi	r16, 0xBB	; 187
     858:	1f 4f       	sbci	r17, 0xFF	; 255
     85a:	ce 01       	movw	r24, r28
     85c:	8f 5b       	subi	r24, 0xBF	; 191
     85e:	9f 4f       	sbci	r25, 0xFF	; 255
     860:	fc 01       	movw	r30, r24
     862:	60 81       	ld	r22, Z
     864:	71 81       	ldd	r23, Z+1	; 0x01
     866:	82 81       	ldd	r24, Z+2	; 0x02
     868:	93 81       	ldd	r25, Z+3	; 0x03
     86a:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fixunssfsi>
     86e:	dc 01       	movw	r26, r24
     870:	cb 01       	movw	r24, r22
     872:	f8 01       	movw	r30, r16
     874:	91 83       	std	Z+1, r25	; 0x01
     876:	80 83       	st	Z, r24
     878:	ce 01       	movw	r24, r28
     87a:	87 5b       	subi	r24, 0xB7	; 183
     87c:	9f 4f       	sbci	r25, 0xFF	; 255
     87e:	9e 01       	movw	r18, r28
     880:	2b 5b       	subi	r18, 0xBB	; 187
     882:	3f 4f       	sbci	r19, 0xFF	; 255
     884:	f9 01       	movw	r30, r18
     886:	20 81       	ld	r18, Z
     888:	31 81       	ldd	r19, Z+1	; 0x01
     88a:	fc 01       	movw	r30, r24
     88c:	31 83       	std	Z+1, r19	; 0x01
     88e:	20 83       	st	Z, r18
     890:	ce 01       	movw	r24, r28
     892:	87 5b       	subi	r24, 0xB7	; 183
     894:	9f 4f       	sbci	r25, 0xFF	; 255
     896:	fc 01       	movw	r30, r24
     898:	80 81       	ld	r24, Z
     89a:	91 81       	ldd	r25, Z+1	; 0x01
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <__stack+0x43d>
     8a0:	9e 01       	movw	r18, r28
     8a2:	27 5b       	subi	r18, 0xB7	; 183
     8a4:	3f 4f       	sbci	r19, 0xFF	; 255
     8a6:	f9 01       	movw	r30, r18
     8a8:	91 83       	std	Z+1, r25	; 0x01
     8aa:	80 83       	st	Z, r24
    	_delay_ms(10);
    	EEPROM_writeByte(0X0011,0xAA);
     8ac:	6a ea       	ldi	r22, 0xAA	; 170
     8ae:	81 e1       	ldi	r24, 0x11	; 17
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 88 04 	call	0x910	; 0x910 <EEPROM_writeByte>
    	password_stored_flag=0xAA;
     8b6:	8a ea       	ldi	r24, 0xAA	; 170
     8b8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <password_stored_flag>
    	set_password_now_flag=0xAA;
     8bc:	8a ea       	ldi	r24, 0xAA	; 170
     8be:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <set_password_now_flag>
    	if(UART_receiveByte()==13)
     8c2:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <UART_receiveByte>
     8c6:	8d 30       	cpi	r24, 0x0D	; 13
     8c8:	09 f0       	breq	.+2      	; 0x8cc <__stack+0x46d>
     8ca:	56 cc       	rjmp	.-1876   	; 0x178 <main+0x64>
    		i=i+0; //temp
     8cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <i>
     8d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <i>
    	}

    }
     8d4:	51 cc       	rjmp	.-1886   	; 0x178 <main+0x64>

000008d6 <EEPROM_init>:
#include "i2c.h"
#include "external_eeprom.h"

TWI_configurationType TWI_config;
void EEPROM_init(void)
{
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
	TWI_config.baudRate=400000;
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	9a e1       	ldi	r25, 0x1A	; 26
     8e2:	a6 e0       	ldi	r26, 0x06	; 6
     8e4:	b0 e0       	ldi	r27, 0x00	; 0
     8e6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <TWI_config>
     8ea:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <TWI_config+0x1>
     8ee:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <TWI_config+0x2>
     8f2:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <TWI_config+0x3>
	TWI_config.prescasler=0;
     8f6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <TWI_config+0x4>
	TWI_config.slave_address=0b00001011;
     8fa:	8b e0       	ldi	r24, 0x0B	; 11
     8fc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <TWI_config+0x5>

TWI_init(&TWI_config);
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	0e 94 27 06 	call	0xc4e	; 0xc4e <TWI_init>
}
     908:	00 00       	nop
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	00 d0       	rcall	.+0      	; 0x916 <EEPROM_writeByte+0x6>
     916:	1f 92       	push	r1
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
     91c:	9a 83       	std	Y+2, r25	; 0x02
     91e:	89 83       	std	Y+1, r24	; 0x01
     920:	6b 83       	std	Y+3, r22	; 0x03

	TWI_start();
     922:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_start>
	if(TWI_getStatus()!=TW_START)
     926:	0e 94 1e 07 	call	0xe3c	; 0xe3c <TWI_getStatus>
     92a:	88 30       	cpi	r24, 0x08	; 8
     92c:	11 f0       	breq	.+4      	; 0x932 <EEPROM_writeByte+0x22>
	return 1;
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	27 c0       	rjmp	.+78     	; 0x980 <EEPROM_writeByte+0x70>

	TWI_write((uint8)(0xA0|((u16addr&0X0700)>>7)));
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	9a 81       	ldd	r25, Y+2	; 0x02
     936:	88 27       	eor	r24, r24
     938:	97 70       	andi	r25, 0x07	; 7
     93a:	88 0f       	add	r24, r24
     93c:	89 2f       	mov	r24, r25
     93e:	88 1f       	adc	r24, r24
     940:	99 0b       	sbc	r25, r25
     942:	91 95       	neg	r25
     944:	80 6a       	ori	r24, 0xA0	; 160
     946:	0e 94 d4 06 	call	0xda8	; 0xda8 <TWI_write>
	if(TWI_getStatus()!=TW_MT_SLA_W_ACK)
     94a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <TWI_getStatus>
     94e:	88 31       	cpi	r24, 0x18	; 24
     950:	11 f0       	breq	.+4      	; 0x956 <EEPROM_writeByte+0x46>
		return 2;
     952:	82 e0       	ldi	r24, 0x02	; 2
     954:	15 c0       	rjmp	.+42     	; 0x980 <EEPROM_writeByte+0x70>


	TWI_write((uint8)u16addr);
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	0e 94 d4 06 	call	0xda8	; 0xda8 <TWI_write>
	if(TWI_getStatus()!=TW_MT_DATA_ACK)
     95c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <TWI_getStatus>
     960:	88 32       	cpi	r24, 0x28	; 40
     962:	11 f0       	breq	.+4      	; 0x968 <EEPROM_writeByte+0x58>
			return 0x80;
     964:	80 e8       	ldi	r24, 0x80	; 128
     966:	0c c0       	rjmp	.+24     	; 0x980 <EEPROM_writeByte+0x70>


	TWI_write(u8data);
     968:	8b 81       	ldd	r24, Y+3	; 0x03
     96a:	0e 94 d4 06 	call	0xda8	; 0xda8 <TWI_write>
	if(TWI_getStatus()!=TW_MT_DATA_ACK)
     96e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <TWI_getStatus>
     972:	88 32       	cpi	r24, 0x28	; 40
     974:	11 f0       	breq	.+4      	; 0x97a <EEPROM_writeByte+0x6a>
			return 4;
     976:	84 e0       	ldi	r24, 0x04	; 4
     978:	03 c0       	rjmp	.+6      	; 0x980 <EEPROM_writeByte+0x70>

	TWI_stop();
     97a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <TWI_stop>
	return 5;
     97e:	85 e0       	ldi	r24, 0x05	; 5
}
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	00 d0       	rcall	.+0      	; 0x992 <EEPROM_readByte+0x6>
     992:	00 d0       	rcall	.+0      	; 0x994 <EEPROM_readByte+0x8>
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	9a 83       	std	Y+2, r25	; 0x02
     99a:	89 83       	std	Y+1, r24	; 0x01
     99c:	7c 83       	std	Y+4, r23	; 0x04
     99e:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
     9a0:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_start>
		if(TWI_getStatus()!=TW_START)
     9a4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <TWI_getStatus>
     9a8:	88 30       	cpi	r24, 0x08	; 8
     9aa:	11 f0       	breq	.+4      	; 0x9b0 <EEPROM_readByte+0x24>
		return ERROR;
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	45 c0       	rjmp	.+138    	; 0xa3a <EEPROM_readByte+0xae>

		TWI_write((uint8)(0xA0|((u16addr&0X0700)>>7)));
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	9a 81       	ldd	r25, Y+2	; 0x02
     9b4:	88 27       	eor	r24, r24
     9b6:	97 70       	andi	r25, 0x07	; 7
     9b8:	88 0f       	add	r24, r24
     9ba:	89 2f       	mov	r24, r25
     9bc:	88 1f       	adc	r24, r24
     9be:	99 0b       	sbc	r25, r25
     9c0:	91 95       	neg	r25
     9c2:	80 6a       	ori	r24, 0xA0	; 160
     9c4:	0e 94 d4 06 	call	0xda8	; 0xda8 <TWI_write>
		if(TWI_getStatus()!=TW_MT_SLA_W_ACK)
     9c8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <TWI_getStatus>
     9cc:	88 31       	cpi	r24, 0x18	; 24
     9ce:	11 f0       	breq	.+4      	; 0x9d4 <EEPROM_readByte+0x48>
			return ERROR;
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	33 c0       	rjmp	.+102    	; 0xa3a <EEPROM_readByte+0xae>


		TWI_write((uint8)u16addr);
     9d4:	89 81       	ldd	r24, Y+1	; 0x01
     9d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <TWI_write>
		if(TWI_getStatus()!=TW_MT_DATA_ACK)
     9da:	0e 94 1e 07 	call	0xe3c	; 0xe3c <TWI_getStatus>
     9de:	88 32       	cpi	r24, 0x28	; 40
     9e0:	11 f0       	breq	.+4      	; 0x9e6 <EEPROM_readByte+0x5a>
				return ERROR;
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	2a c0       	rjmp	.+84     	; 0xa3a <EEPROM_readByte+0xae>


		//TWI_write(u8data);
		//if(TWI_getStatus()!=TW_MT_DATA_ACK)
			//	return ERROR;
		TWI_start();
     9e6:	0e 94 b3 06 	call	0xd66	; 0xd66 <TWI_start>
		if(TWI_getStatus()!=TW_REP_START)
     9ea:	0e 94 1e 07 	call	0xe3c	; 0xe3c <TWI_getStatus>
     9ee:	80 31       	cpi	r24, 0x10	; 16
     9f0:	11 f0       	breq	.+4      	; 0x9f6 <EEPROM_readByte+0x6a>
						return ERROR;
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	22 c0       	rjmp	.+68     	; 0xa3a <EEPROM_readByte+0xae>

		TWI_write((uint8)((0xA0)|((u16addr&0X0700)>>7)|1));
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	9a 81       	ldd	r25, Y+2	; 0x02
     9fa:	88 27       	eor	r24, r24
     9fc:	97 70       	andi	r25, 0x07	; 7
     9fe:	88 0f       	add	r24, r24
     a00:	89 2f       	mov	r24, r25
     a02:	88 1f       	adc	r24, r24
     a04:	99 0b       	sbc	r25, r25
     a06:	91 95       	neg	r25
     a08:	81 6a       	ori	r24, 0xA1	; 161
     a0a:	0e 94 d4 06 	call	0xda8	; 0xda8 <TWI_write>
		if(TWI_getStatus()!=TW_MT_SLA_R_ACK)
     a0e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <TWI_getStatus>
     a12:	80 34       	cpi	r24, 0x40	; 64
     a14:	11 f0       	breq	.+4      	; 0xa1a <EEPROM_readByte+0x8e>
						return ERROR;
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	10 c0       	rjmp	.+32     	; 0xa3a <EEPROM_readByte+0xae>


			*u8data=TWI_read_with_NACK();
     a1a:	0e 94 07 07 	call	0xe0e	; 0xe0e <TWI_read_with_NACK>
     a1e:	28 2f       	mov	r18, r24
     a20:	8b 81       	ldd	r24, Y+3	; 0x03
     a22:	9c 81       	ldd	r25, Y+4	; 0x04
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18
			if(TWI_getStatus()!=TW_MR_DATA_NACK)
     a28:	0e 94 1e 07 	call	0xe3c	; 0xe3c <TWI_getStatus>
     a2c:	88 35       	cpi	r24, 0x58	; 88
     a2e:	11 f0       	breq	.+4      	; 0xa34 <EEPROM_readByte+0xa8>
					return ERROR;
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	03 c0       	rjmp	.+6      	; 0xa3a <EEPROM_readByte+0xae>

			TWI_stop();
     a34:	0e 94 c7 06 	call	0xd8e	; 0xd8e <TWI_stop>
			return SUCCESS;
     a38:	81 e0       	ldi	r24, 0x01	; 1

}
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <EEPROM_writeString>:
uint8 EEPROM_writeString(uint16 u16addr, uint8* str)
{
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
     a50:	63 97       	sbiw	r28, 0x13	; 19
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	de bf       	out	0x3e, r29	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	cd bf       	out	0x3d, r28	; 61
     a5c:	99 8b       	std	Y+17, r25	; 0x11
     a5e:	88 8b       	std	Y+16, r24	; 0x10
     a60:	7b 8b       	std	Y+19, r23	; 0x13
     a62:	6a 8b       	std	Y+18, r22	; 0x12

	uint8 i=0;
     a64:	19 82       	std	Y+1, r1	; 0x01
	for( i=0;str[i]!='\0';i++)
     a66:	19 82       	std	Y+1, r1	; 0x01
     a68:	88 c0       	rjmp	.+272    	; 0xb7a <EEPROM_writeString+0x132>
{


	EEPROM_writeByte(u16addr+i,str[i]);
     a6a:	89 81       	ldd	r24, Y+1	; 0x01
     a6c:	88 2f       	mov	r24, r24
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	2a 89       	ldd	r18, Y+18	; 0x12
     a72:	3b 89       	ldd	r19, Y+19	; 0x13
     a74:	82 0f       	add	r24, r18
     a76:	93 1f       	adc	r25, r19
     a78:	fc 01       	movw	r30, r24
     a7a:	40 81       	ld	r20, Z
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
     a7e:	28 2f       	mov	r18, r24
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	88 89       	ldd	r24, Y+16	; 0x10
     a84:	99 89       	ldd	r25, Y+17	; 0x11
     a86:	82 0f       	add	r24, r18
     a88:	93 1f       	adc	r25, r19
     a8a:	64 2f       	mov	r22, r20
     a8c:	0e 94 88 04 	call	0x910	; 0x910 <EEPROM_writeByte>
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e2       	ldi	r26, 0x20	; 32
     a96:	b1 e4       	ldi	r27, 0x41	; 65
     a98:	8a 83       	std	Y+2, r24	; 0x02
     a9a:	9b 83       	std	Y+3, r25	; 0x03
     a9c:	ac 83       	std	Y+4, r26	; 0x04
     a9e:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	4a ef       	ldi	r20, 0xFA	; 250
     aa6:	54 e4       	ldi	r21, 0x44	; 68
     aa8:	6a 81       	ldd	r22, Y+2	; 0x02
     aaa:	7b 81       	ldd	r23, Y+3	; 0x03
     aac:	8c 81       	ldd	r24, Y+4	; 0x04
     aae:	9d 81       	ldd	r25, Y+5	; 0x05
     ab0:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__mulsf3>
     ab4:	dc 01       	movw	r26, r24
     ab6:	cb 01       	movw	r24, r22
     ab8:	8e 83       	std	Y+6, r24	; 0x06
     aba:	9f 83       	std	Y+7, r25	; 0x07
     abc:	a8 87       	std	Y+8, r26	; 0x08
     abe:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	40 e8       	ldi	r20, 0x80	; 128
     ac6:	5f e3       	ldi	r21, 0x3F	; 63
     ac8:	6e 81       	ldd	r22, Y+6	; 0x06
     aca:	7f 81       	ldd	r23, Y+7	; 0x07
     acc:	88 85       	ldd	r24, Y+8	; 0x08
     ace:	99 85       	ldd	r25, Y+9	; 0x09
     ad0:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__cmpsf2>
     ad4:	88 23       	and	r24, r24
     ad6:	2c f4       	brge	.+10     	; 0xae2 <EEPROM_writeString+0x9a>
		__ticks = 1;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	9b 87       	std	Y+11, r25	; 0x0b
     ade:	8a 87       	std	Y+10, r24	; 0x0a
     ae0:	3f c0       	rjmp	.+126    	; 0xb60 <EEPROM_writeString+0x118>
	else if (__tmp > 65535)
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	3f ef       	ldi	r19, 0xFF	; 255
     ae6:	4f e7       	ldi	r20, 0x7F	; 127
     ae8:	57 e4       	ldi	r21, 0x47	; 71
     aea:	6e 81       	ldd	r22, Y+6	; 0x06
     aec:	7f 81       	ldd	r23, Y+7	; 0x07
     aee:	88 85       	ldd	r24, Y+8	; 0x08
     af0:	99 85       	ldd	r25, Y+9	; 0x09
     af2:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__gesf2>
     af6:	18 16       	cp	r1, r24
     af8:	4c f5       	brge	.+82     	; 0xb4c <EEPROM_writeString+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e2       	ldi	r20, 0x20	; 32
     b00:	51 e4       	ldi	r21, 0x41	; 65
     b02:	6a 81       	ldd	r22, Y+2	; 0x02
     b04:	7b 81       	ldd	r23, Y+3	; 0x03
     b06:	8c 81       	ldd	r24, Y+4	; 0x04
     b08:	9d 81       	ldd	r25, Y+5	; 0x05
     b0a:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__mulsf3>
     b0e:	dc 01       	movw	r26, r24
     b10:	cb 01       	movw	r24, r22
     b12:	bc 01       	movw	r22, r24
     b14:	cd 01       	movw	r24, r26
     b16:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fixunssfsi>
     b1a:	dc 01       	movw	r26, r24
     b1c:	cb 01       	movw	r24, r22
     b1e:	9b 87       	std	Y+11, r25	; 0x0b
     b20:	8a 87       	std	Y+10, r24	; 0x0a
     b22:	0f c0       	rjmp	.+30     	; 0xb42 <EEPROM_writeString+0xfa>
     b24:	88 ec       	ldi	r24, 0xC8	; 200
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	9d 87       	std	Y+13, r25	; 0x0d
     b2a:	8c 87       	std	Y+12, r24	; 0x0c
     b2c:	8c 85       	ldd	r24, Y+12	; 0x0c
     b2e:	9d 85       	ldd	r25, Y+13	; 0x0d
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	f1 f7       	brne	.-4      	; 0xb30 <EEPROM_writeString+0xe8>
     b34:	9d 87       	std	Y+13, r25	; 0x0d
     b36:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b38:	8a 85       	ldd	r24, Y+10	; 0x0a
     b3a:	9b 85       	ldd	r25, Y+11	; 0x0b
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	9b 87       	std	Y+11, r25	; 0x0b
     b40:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b42:	8a 85       	ldd	r24, Y+10	; 0x0a
     b44:	9b 85       	ldd	r25, Y+11	; 0x0b
     b46:	89 2b       	or	r24, r25
     b48:	69 f7       	brne	.-38     	; 0xb24 <EEPROM_writeString+0xdc>
     b4a:	14 c0       	rjmp	.+40     	; 0xb74 <EEPROM_writeString+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b4c:	6e 81       	ldd	r22, Y+6	; 0x06
     b4e:	7f 81       	ldd	r23, Y+7	; 0x07
     b50:	88 85       	ldd	r24, Y+8	; 0x08
     b52:	99 85       	ldd	r25, Y+9	; 0x09
     b54:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fixunssfsi>
     b58:	dc 01       	movw	r26, r24
     b5a:	cb 01       	movw	r24, r22
     b5c:	9b 87       	std	Y+11, r25	; 0x0b
     b5e:	8a 87       	std	Y+10, r24	; 0x0a
     b60:	8a 85       	ldd	r24, Y+10	; 0x0a
     b62:	9b 85       	ldd	r25, Y+11	; 0x0b
     b64:	9f 87       	std	Y+15, r25	; 0x0f
     b66:	8e 87       	std	Y+14, r24	; 0x0e
     b68:	8e 85       	ldd	r24, Y+14	; 0x0e
     b6a:	9f 85       	ldd	r25, Y+15	; 0x0f
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	f1 f7       	brne	.-4      	; 0xb6c <EEPROM_writeString+0x124>
     b70:	9f 87       	std	Y+15, r25	; 0x0f
     b72:	8e 87       	std	Y+14, r24	; 0x0e
}
uint8 EEPROM_writeString(uint16 u16addr, uint8* str)
{

	uint8 i=0;
	for( i=0;str[i]!='\0';i++)
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	8f 5f       	subi	r24, 0xFF	; 255
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	88 2f       	mov	r24, r24
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	2a 89       	ldd	r18, Y+18	; 0x12
     b82:	3b 89       	ldd	r19, Y+19	; 0x13
     b84:	82 0f       	add	r24, r18
     b86:	93 1f       	adc	r25, r19
     b88:	fc 01       	movw	r30, r24
     b8a:	80 81       	ld	r24, Z
     b8c:	88 23       	and	r24, r24
     b8e:	09 f0       	breq	.+2      	; 0xb92 <EEPROM_writeString+0x14a>
     b90:	6c cf       	rjmp	.-296    	; 0xa6a <EEPROM_writeString+0x22>
	EEPROM_writeByte(u16addr+i,str[i]);
	_delay_ms(10);

}

	EEPROM_writeByte(u16addr+i,'\0');
     b92:	89 81       	ldd	r24, Y+1	; 0x01
     b94:	28 2f       	mov	r18, r24
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	88 89       	ldd	r24, Y+16	; 0x10
     b9a:	99 89       	ldd	r25, Y+17	; 0x11
     b9c:	82 0f       	add	r24, r18
     b9e:	93 1f       	adc	r25, r19
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	0e 94 88 04 	call	0x910	; 0x910 <EEPROM_writeByte>


}
     ba6:	00 00       	nop
     ba8:	63 96       	adiw	r28, 0x13	; 19
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	cd bf       	out	0x3d, r28	; 61
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	08 95       	ret

00000bba <EEPROM_readString>:
uint8 EEPROM_readString(uint16 u16addr, uint8 *str)
{
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <EEPROM_readString+0x6>
     bc0:	00 d0       	rcall	.+0      	; 0xbc2 <EEPROM_readString+0x8>
     bc2:	1f 92       	push	r1
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	9b 83       	std	Y+3, r25	; 0x03
     bca:	8a 83       	std	Y+2, r24	; 0x02
     bcc:	7d 83       	std	Y+5, r23	; 0x05
     bce:	6c 83       	std	Y+4, r22	; 0x04

	uint8 i = 0;
     bd0:	19 82       	std	Y+1, r1	; 0x01
		EEPROM_readByte(u16addr, &str[i]);
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	88 2f       	mov	r24, r24
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	2c 81       	ldd	r18, Y+4	; 0x04
     bda:	3d 81       	ldd	r19, Y+5	; 0x05
     bdc:	28 0f       	add	r18, r24
     bde:	39 1f       	adc	r19, r25
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	9b 81       	ldd	r25, Y+3	; 0x03
     be4:	b9 01       	movw	r22, r18
     be6:	0e 94 c6 04 	call	0x98c	; 0x98c <EEPROM_readByte>
		while(str[i]!='\0')
     bea:	14 c0       	rjmp	.+40     	; 0xc14 <EEPROM_readString+0x5a>
		{u16addr++;
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	9b 81       	ldd	r25, Y+3	; 0x03
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	9b 83       	std	Y+3, r25	; 0x03
     bf4:	8a 83       	std	Y+2, r24	; 0x02
			i++;
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	89 83       	std	Y+1, r24	; 0x01
			EEPROM_readByte(u16addr, &str[i]);
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	88 2f       	mov	r24, r24
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	2c 81       	ldd	r18, Y+4	; 0x04
     c04:	3d 81       	ldd	r19, Y+5	; 0x05
     c06:	28 0f       	add	r18, r24
     c08:	39 1f       	adc	r19, r25
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	9b 81       	ldd	r25, Y+3	; 0x03
     c0e:	b9 01       	movw	r22, r18
     c10:	0e 94 c6 04 	call	0x98c	; 0x98c <EEPROM_readByte>
uint8 EEPROM_readString(uint16 u16addr, uint8 *str)
{

	uint8 i = 0;
		EEPROM_readByte(u16addr, &str[i]);
		while(str[i]!='\0')
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	88 2f       	mov	r24, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	2c 81       	ldd	r18, Y+4	; 0x04
     c1c:	3d 81       	ldd	r19, Y+5	; 0x05
     c1e:	82 0f       	add	r24, r18
     c20:	93 1f       	adc	r25, r19
     c22:	fc 01       	movw	r30, r24
     c24:	80 81       	ld	r24, Z
     c26:	88 23       	and	r24, r24
     c28:	09 f7       	brne	.-62     	; 0xbec <EEPROM_readString+0x32>
		{u16addr++;
			i++;
			EEPROM_readByte(u16addr, &str[i]);
		}
		str[i]='\0';
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	88 2f       	mov	r24, r24
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	2c 81       	ldd	r18, Y+4	; 0x04
     c32:	3d 81       	ldd	r19, Y+5	; 0x05
     c34:	82 0f       	add	r24, r18
     c36:	93 1f       	adc	r25, r19
     c38:	fc 01       	movw	r30, r24
     c3a:	10 82       	st	Z, r1

}
     c3c:	00 00       	nop
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	08 95       	ret

00000c4e <TWI_init>:
 *      Author: hesham
 */
#include"i2c.h"

void TWI_init(const TWI_configurationType *config)
{
     c4e:	cf 92       	push	r12
     c50:	df 92       	push	r13
     c52:	ef 92       	push	r14
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <TWI_init+0x12>
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01
	//TWBR=0X02;//buad rate
	TWBR=((float)F_CPU/config->baudRate +16)/(2*pow(4,config->prescasler));
     c68:	00 e2       	ldi	r16, 0x20	; 32
     c6a:	10 e0       	ldi	r17, 0x00	; 0
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	9a 81       	ldd	r25, Y+2	; 0x02
     c70:	fc 01       	movw	r30, r24
     c72:	80 81       	ld	r24, Z
     c74:	91 81       	ldd	r25, Z+1	; 0x01
     c76:	a2 81       	ldd	r26, Z+2	; 0x02
     c78:	b3 81       	ldd	r27, Z+3	; 0x03
     c7a:	bc 01       	movw	r22, r24
     c7c:	cd 01       	movw	r24, r26
     c7e:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__floatunsisf>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	9c 01       	movw	r18, r24
     c88:	ad 01       	movw	r20, r26
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	74 e2       	ldi	r23, 0x24	; 36
     c8e:	84 ef       	ldi	r24, 0xF4	; 244
     c90:	9a e4       	ldi	r25, 0x4A	; 74
     c92:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__divsf3>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	40 e8       	ldi	r20, 0x80	; 128
     ca0:	51 e4       	ldi	r21, 0x41	; 65
     ca2:	bc 01       	movw	r22, r24
     ca4:	cd 01       	movw	r24, r26
     ca6:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__addsf3>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	6c 01       	movw	r12, r24
     cb0:	7d 01       	movw	r14, r26
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	9a 81       	ldd	r25, Y+2	; 0x02
     cb6:	fc 01       	movw	r30, r24
     cb8:	84 81       	ldd	r24, Z+4	; 0x04
     cba:	88 2f       	mov	r24, r24
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	a0 e0       	ldi	r26, 0x00	; 0
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	bc 01       	movw	r22, r24
     cc4:	cd 01       	movw	r24, r26
     cc6:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__floatunsisf>
     cca:	dc 01       	movw	r26, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	9c 01       	movw	r18, r24
     cd0:	ad 01       	movw	r20, r26
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	80 e8       	ldi	r24, 0x80	; 128
     cd8:	90 e4       	ldi	r25, 0x40	; 64
     cda:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <pow>
     cde:	dc 01       	movw	r26, r24
     ce0:	cb 01       	movw	r24, r22
     ce2:	9c 01       	movw	r18, r24
     ce4:	ad 01       	movw	r20, r26
     ce6:	bc 01       	movw	r22, r24
     ce8:	cd 01       	movw	r24, r26
     cea:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__addsf3>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	9c 01       	movw	r18, r24
     cf4:	ad 01       	movw	r20, r26
     cf6:	c7 01       	movw	r24, r14
     cf8:	b6 01       	movw	r22, r12
     cfa:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__divsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	bc 01       	movw	r22, r24
     d04:	cd 01       	movw	r24, r26
     d06:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <__fixunssfsi>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	f8 01       	movw	r30, r16
     d10:	80 83       	st	Z, r24
	TWSR=0X00; //prescaler
     d12:	81 e2       	ldi	r24, 0x21	; 33
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	fc 01       	movw	r30, r24
     d18:	10 82       	st	Z, r1
	TWSR=config->prescasler;
     d1a:	81 e2       	ldi	r24, 0x21	; 33
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	29 81       	ldd	r18, Y+1	; 0x01
     d20:	3a 81       	ldd	r19, Y+2	; 0x02
     d22:	f9 01       	movw	r30, r18
     d24:	24 81       	ldd	r18, Z+4	; 0x04
     d26:	fc 01       	movw	r30, r24
     d28:	20 83       	st	Z, r18
	 TWAR=config->slave_address<<1;// adress+ other bit
     d2a:	82 e2       	ldi	r24, 0x22	; 34
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	29 81       	ldd	r18, Y+1	; 0x01
     d30:	3a 81       	ldd	r19, Y+2	; 0x02
     d32:	f9 01       	movw	r30, r18
     d34:	25 81       	ldd	r18, Z+5	; 0x05
     d36:	22 0f       	add	r18, r18
     d38:	fc 01       	movw	r30, r24
     d3a:	20 83       	st	Z, r18
	TWCR|=(1<<TWEN);// دائما فى الاخر
     d3c:	86 e5       	ldi	r24, 0x56	; 86
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	26 e5       	ldi	r18, 0x56	; 86
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	f9 01       	movw	r30, r18
     d46:	20 81       	ld	r18, Z
     d48:	24 60       	ori	r18, 0x04	; 4
     d4a:	fc 01       	movw	r30, r24
     d4c:	20 83       	st	Z, r18

}
     d4e:	00 00       	nop
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	ff 90       	pop	r15
     d5e:	ef 90       	pop	r14
     d60:	df 90       	pop	r13
     d62:	cf 90       	pop	r12
     d64:	08 95       	ret

00000d66 <TWI_start>:
void TWI_start(void)
{
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
	//make enable again to force other bits in the register to be zero
	//start bit and clear done flag
TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     d6e:	86 e5       	ldi	r24, 0x56	; 86
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	24 ea       	ldi	r18, 0xA4	; 164
     d74:	fc 01       	movw	r30, r24
     d76:	20 83       	st	Z, r18
while(BIT_IS_CLEAR(TWCR,TWINT));// WAIT acation done
     d78:	00 00       	nop
     d7a:	86 e5       	ldi	r24, 0x56	; 86
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	fc 01       	movw	r30, r24
     d80:	80 81       	ld	r24, Z
     d82:	88 23       	and	r24, r24
     d84:	d4 f7       	brge	.-12     	; 0xd7a <TWI_start+0x14>
}
     d86:	00 00       	nop
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	08 95       	ret

00000d8e <TWI_stop>:
void TWI_stop(void)
{
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     d96:	86 e5       	ldi	r24, 0x56	; 86
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	24 e9       	ldi	r18, 0x94	; 148
     d9c:	fc 01       	movw	r30, r24
     d9e:	20 83       	st	Z, r18

//NO NEED TO WAIT twint flag
}
     da0:	00 00       	nop
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <TWI_write>:
void TWI_write(uint8 data)
{
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	1f 92       	push	r1
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	89 83       	std	Y+1, r24	; 0x01

	TWDR=data;
     db4:	83 e2       	ldi	r24, 0x23	; 35
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	29 81       	ldd	r18, Y+1	; 0x01
     dba:	fc 01       	movw	r30, r24
     dbc:	20 83       	st	Z, r18

	TWCR=(1<<TWINT)|(1<<TWEN);
     dbe:	86 e5       	ldi	r24, 0x56	; 86
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	24 e8       	ldi	r18, 0x84	; 132
     dc4:	fc 01       	movw	r30, r24
     dc6:	20 83       	st	Z, r18

	while(BIT_IS_CLEAR(TWCR,TWINT));
     dc8:	00 00       	nop
     dca:	86 e5       	ldi	r24, 0x56	; 86
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	fc 01       	movw	r30, r24
     dd0:	80 81       	ld	r24, Z
     dd2:	88 23       	and	r24, r24
     dd4:	d4 f7       	brge	.-12     	; 0xdca <TWI_write+0x22>

}
     dd6:	00 00       	nop
     dd8:	0f 90       	pop	r0
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	08 95       	ret

00000de0 <TWI_read_with_ACK>:
uint8 TWI_read_with_ACK(void)
{
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
     de8:	86 e5       	ldi	r24, 0x56	; 86
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	24 ec       	ldi	r18, 0xC4	; 196
     dee:	fc 01       	movw	r30, r24
     df0:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(TWCR,TWINT));
     df2:	00 00       	nop
     df4:	86 e5       	ldi	r24, 0x56	; 86
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	fc 01       	movw	r30, r24
     dfa:	80 81       	ld	r24, Z
     dfc:	88 23       	and	r24, r24
     dfe:	d4 f7       	brge	.-12     	; 0xdf4 <TWI_read_with_ACK+0x14>
	//CLEAR flag before or after
	return TWDR;
     e00:	83 e2       	ldi	r24, 0x23	; 35
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	fc 01       	movw	r30, r24
     e06:	80 81       	ld	r24, Z
}
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	08 95       	ret

00000e0e <TWI_read_with_NACK>:

uint8 TWI_read_with_NACK(void)
{
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN);
     e16:	86 e5       	ldi	r24, 0x56	; 86
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	24 e8       	ldi	r18, 0x84	; 132
     e1c:	fc 01       	movw	r30, r24
     e1e:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(TWCR,TWINT));
     e20:	00 00       	nop
     e22:	86 e5       	ldi	r24, 0x56	; 86
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	fc 01       	movw	r30, r24
     e28:	80 81       	ld	r24, Z
     e2a:	88 23       	and	r24, r24
     e2c:	d4 f7       	brge	.-12     	; 0xe22 <TWI_read_with_NACK+0x14>
	//CLEAR flag before or after
	return TWDR;
     e2e:	83 e2       	ldi	r24, 0x23	; 35
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	fc 01       	movw	r30, r24
     e34:	80 81       	ld	r24, Z
}
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <TWI_getStatus>:
uint8 TWI_getStatus()
{
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
	return TWSR&0XF8;
     e44:	81 e2       	ldi	r24, 0x21	; 33
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	fc 01       	movw	r30, r24
     e4a:	80 81       	ld	r24, Z
     e4c:	88 7f       	andi	r24, 0xF8	; 248
}
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	08 95       	ret

00000e54 <__vector_19>:

#include"timer.h"
static volatile  void(*g_callBackPtr)(void)= NULL_PTR;
static volatile TIMER_configurationType * configPtr;
ISR(TIMER0_COMP_vect)
{
     e54:	1f 92       	push	r1
     e56:	0f 92       	push	r0
     e58:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e5c:	0f 92       	push	r0
     e5e:	11 24       	eor	r1, r1
     e60:	2f 93       	push	r18
     e62:	3f 93       	push	r19
     e64:	4f 93       	push	r20
     e66:	5f 93       	push	r21
     e68:	6f 93       	push	r22
     e6a:	7f 93       	push	r23
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	af 93       	push	r26
     e72:	bf 93       	push	r27
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
     e80:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <g_callBackPtr>
     e84:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <g_callBackPtr+0x1>
     e88:	89 2b       	or	r24, r25
     e8a:	31 f0       	breq	.+12     	; 0xe98 <__vector_19+0x44>
		g_callBackPtr();
     e8c:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <g_callBackPtr>
     e90:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <g_callBackPtr+0x1>
     e94:	fc 01       	movw	r30, r24
     e96:	09 95       	icall

}
     e98:	00 00       	nop
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	ff 91       	pop	r31
     ea0:	ef 91       	pop	r30
     ea2:	bf 91       	pop	r27
     ea4:	af 91       	pop	r26
     ea6:	9f 91       	pop	r25
     ea8:	8f 91       	pop	r24
     eaa:	7f 91       	pop	r23
     eac:	6f 91       	pop	r22
     eae:	5f 91       	pop	r21
     eb0:	4f 91       	pop	r20
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	0f 90       	pop	r0
     eb8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ebc:	0f 90       	pop	r0
     ebe:	1f 90       	pop	r1
     ec0:	18 95       	reti

00000ec2 <__vector_9>:
ISR(TIMER0_OVF_vect)
{
     ec2:	1f 92       	push	r1
     ec4:	0f 92       	push	r0
     ec6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     eca:	0f 92       	push	r0
     ecc:	11 24       	eor	r1, r1
     ece:	2f 93       	push	r18
     ed0:	3f 93       	push	r19
     ed2:	4f 93       	push	r20
     ed4:	5f 93       	push	r21
     ed6:	6f 93       	push	r22
     ed8:	7f 93       	push	r23
     eda:	8f 93       	push	r24
     edc:	9f 93       	push	r25
     ede:	af 93       	push	r26
     ee0:	bf 93       	push	r27
     ee2:	ef 93       	push	r30
     ee4:	ff 93       	push	r31
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
     eee:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <g_callBackPtr>
     ef2:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <g_callBackPtr+0x1>
     ef6:	89 2b       	or	r24, r25
     ef8:	31 f0       	breq	.+12     	; 0xf06 <__vector_9+0x44>
		g_callBackPtr();
     efa:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <g_callBackPtr>
     efe:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <g_callBackPtr+0x1>
     f02:	fc 01       	movw	r30, r24
     f04:	09 95       	icall

}
     f06:	00 00       	nop
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	ff 91       	pop	r31
     f0e:	ef 91       	pop	r30
     f10:	bf 91       	pop	r27
     f12:	af 91       	pop	r26
     f14:	9f 91       	pop	r25
     f16:	8f 91       	pop	r24
     f18:	7f 91       	pop	r23
     f1a:	6f 91       	pop	r22
     f1c:	5f 91       	pop	r21
     f1e:	4f 91       	pop	r20
     f20:	3f 91       	pop	r19
     f22:	2f 91       	pop	r18
     f24:	0f 90       	pop	r0
     f26:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f2a:	0f 90       	pop	r0
     f2c:	1f 90       	pop	r1
     f2e:	18 95       	reti

00000f30 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
     f30:	1f 92       	push	r1
     f32:	0f 92       	push	r0
     f34:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f38:	0f 92       	push	r0
     f3a:	11 24       	eor	r1, r1
     f3c:	2f 93       	push	r18
     f3e:	3f 93       	push	r19
     f40:	4f 93       	push	r20
     f42:	5f 93       	push	r21
     f44:	6f 93       	push	r22
     f46:	7f 93       	push	r23
     f48:	8f 93       	push	r24
     f4a:	9f 93       	push	r25
     f4c:	af 93       	push	r26
     f4e:	bf 93       	push	r27
     f50:	ef 93       	push	r30
     f52:	ff 93       	push	r31
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
     f5c:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <g_callBackPtr>
     f60:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <g_callBackPtr+0x1>
     f64:	89 2b       	or	r24, r25
     f66:	31 f0       	breq	.+12     	; 0xf74 <__vector_6+0x44>
			g_callBackPtr();
     f68:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <g_callBackPtr>
     f6c:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <g_callBackPtr+0x1>
     f70:	fc 01       	movw	r30, r24
     f72:	09 95       	icall
}
     f74:	00 00       	nop
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	ff 91       	pop	r31
     f7c:	ef 91       	pop	r30
     f7e:	bf 91       	pop	r27
     f80:	af 91       	pop	r26
     f82:	9f 91       	pop	r25
     f84:	8f 91       	pop	r24
     f86:	7f 91       	pop	r23
     f88:	6f 91       	pop	r22
     f8a:	5f 91       	pop	r21
     f8c:	4f 91       	pop	r20
     f8e:	3f 91       	pop	r19
     f90:	2f 91       	pop	r18
     f92:	0f 90       	pop	r0
     f94:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti

00000f9e <TIMER_init>:
void TIMER_init( TIMER_configurationType * config)
{configPtr=config;
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <TIMER_init+0x6>
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	9a 83       	std	Y+2, r25	; 0x02
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <configPtr+0x1>
     fb4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <configPtr>
	if(config->timerNumber==0)
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	fc 01       	movw	r30, r24
     fbe:	80 81       	ld	r24, Z
     fc0:	88 23       	and	r24, r24
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <TIMER_init+0x28>
     fc4:	22 c1       	rjmp	.+580    	; 0x120a <TIMER_init+0x26c>
	{
		TCCR0=0;
     fc6:	83 e5       	ldi	r24, 0x53	; 83
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	fc 01       	movw	r30, r24
     fcc:	10 82       	st	Z, r1
	switch(config->prescaler)
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	fc 01       	movw	r30, r24
     fd4:	85 89       	ldd	r24, Z+21	; 0x15
     fd6:	96 89       	ldd	r25, Z+22	; 0x16
     fd8:	80 34       	cpi	r24, 0x40	; 64
     fda:	91 05       	cpc	r25, r1
     fdc:	c1 f0       	breq	.+48     	; 0x100e <TIMER_init+0x70>
     fde:	81 34       	cpi	r24, 0x41	; 65
     fe0:	91 05       	cpc	r25, r1
     fe2:	18 f4       	brcc	.+6      	; 0xfea <TIMER_init+0x4c>
     fe4:	08 97       	sbiw	r24, 0x08	; 8
     fe6:	49 f0       	breq	.+18     	; 0xffa <TIMER_init+0x5c>
     fe8:	30 c0       	rjmp	.+96     	; 0x104a <TIMER_init+0xac>
     fea:	81 15       	cp	r24, r1
     fec:	f1 e0       	ldi	r31, 0x01	; 1
     fee:	9f 07       	cpc	r25, r31
     ff0:	c1 f0       	breq	.+48     	; 0x1022 <TIMER_init+0x84>
     ff2:	81 15       	cp	r24, r1
     ff4:	94 40       	sbci	r25, 0x04	; 4
     ff6:	f9 f0       	breq	.+62     	; 0x1036 <TIMER_init+0x98>
     ff8:	28 c0       	rjmp	.+80     	; 0x104a <TIMER_init+0xac>
	{
	case 8:
		TCCR0|=(1<<CS01);
     ffa:	83 e5       	ldi	r24, 0x53	; 83
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	23 e5       	ldi	r18, 0x53	; 83
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	f9 01       	movw	r30, r18
    1004:	20 81       	ld	r18, Z
    1006:	22 60       	ori	r18, 0x02	; 2
    1008:	fc 01       	movw	r30, r24
    100a:	20 83       	st	Z, r18
		break;
    100c:	27 c0       	rjmp	.+78     	; 0x105c <TIMER_init+0xbe>
	case 64:
			TCCR0|=(1<<CS00)|(1<<CS01);
    100e:	83 e5       	ldi	r24, 0x53	; 83
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	23 e5       	ldi	r18, 0x53	; 83
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	f9 01       	movw	r30, r18
    1018:	20 81       	ld	r18, Z
    101a:	23 60       	ori	r18, 0x03	; 3
    101c:	fc 01       	movw	r30, r24
    101e:	20 83       	st	Z, r18
			break;
    1020:	1d c0       	rjmp	.+58     	; 0x105c <TIMER_init+0xbe>
	case 256:
			TCCR0|=(1<<CS02);
    1022:	83 e5       	ldi	r24, 0x53	; 83
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	23 e5       	ldi	r18, 0x53	; 83
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	f9 01       	movw	r30, r18
    102c:	20 81       	ld	r18, Z
    102e:	24 60       	ori	r18, 0x04	; 4
    1030:	fc 01       	movw	r30, r24
    1032:	20 83       	st	Z, r18
			break;
    1034:	13 c0       	rjmp	.+38     	; 0x105c <TIMER_init+0xbe>
	case 1024:
			TCCR0|=(1<<CS00)|(1<<CS02);
    1036:	83 e5       	ldi	r24, 0x53	; 83
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	23 e5       	ldi	r18, 0x53	; 83
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	f9 01       	movw	r30, r18
    1040:	20 81       	ld	r18, Z
    1042:	25 60       	ori	r18, 0x05	; 5
    1044:	fc 01       	movw	r30, r24
    1046:	20 83       	st	Z, r18
			break;
    1048:	09 c0       	rjmp	.+18     	; 0x105c <TIMER_init+0xbe>
	default:
			TCCR0|=(1<<CS00);
    104a:	83 e5       	ldi	r24, 0x53	; 83
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	23 e5       	ldi	r18, 0x53	; 83
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	f9 01       	movw	r30, r18
    1054:	20 81       	ld	r18, Z
    1056:	21 60       	ori	r18, 0x01	; 1
    1058:	fc 01       	movw	r30, r24
    105a:	20 83       	st	Z, r18

		}

	if(!strcmp(config->mode,"compare"))
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	9a 81       	ldd	r25, Y+2	; 0x02
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	6d e6       	ldi	r22, 0x6D	; 109
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    106a:	89 2b       	or	r24, r25
    106c:	09 f0       	breq	.+2      	; 0x1070 <TIMER_init+0xd2>
    106e:	62 c0       	rjmp	.+196    	; 0x1134 <TIMER_init+0x196>
	{	TCCR0|=(1<<FOC0)|(1<<WGM01);
    1070:	83 e5       	ldi	r24, 0x53	; 83
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	23 e5       	ldi	r18, 0x53	; 83
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	f9 01       	movw	r30, r18
    107a:	20 81       	ld	r18, Z
    107c:	28 68       	ori	r18, 0x88	; 136
    107e:	fc 01       	movw	r30, r24
    1080:	20 83       	st	Z, r18

		if(!strcmp(config->compareMatchMode,"toggle"))
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	47 96       	adiw	r24, 0x17	; 23
    1088:	65 e7       	ldi	r22, 0x75	; 117
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    1090:	89 2b       	or	r24, r25
    1092:	99 f4       	brne	.+38     	; 0x10ba <TIMER_init+0x11c>
		{
		TCCR0|=(1<<COM00);
    1094:	83 e5       	ldi	r24, 0x53	; 83
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	23 e5       	ldi	r18, 0x53	; 83
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	f9 01       	movw	r30, r18
    109e:	20 81       	ld	r18, Z
    10a0:	20 61       	ori	r18, 0x10	; 16
    10a2:	fc 01       	movw	r30, r24
    10a4:	20 83       	st	Z, r18
		SET_BIT(DDRB,3);
    10a6:	87 e3       	ldi	r24, 0x37	; 55
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	27 e3       	ldi	r18, 0x37	; 55
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	f9 01       	movw	r30, r18
    10b0:	20 81       	ld	r18, Z
    10b2:	28 60       	ori	r18, 0x08	; 8
    10b4:	fc 01       	movw	r30, r24
    10b6:	20 83       	st	Z, r18
    10b8:	37 c0       	rjmp	.+110    	; 0x1128 <TIMER_init+0x18a>
		}
		else if(!strcmp(config->compareMatchMode,"clear"))
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	47 96       	adiw	r24, 0x17	; 23
    10c0:	6c e7       	ldi	r22, 0x7C	; 124
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    10c8:	89 2b       	or	r24, r25
    10ca:	99 f4       	brne	.+38     	; 0x10f2 <TIMER_init+0x154>
			{
			TCCR0|=(1<<COM01);
    10cc:	83 e5       	ldi	r24, 0x53	; 83
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	23 e5       	ldi	r18, 0x53	; 83
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	f9 01       	movw	r30, r18
    10d6:	20 81       	ld	r18, Z
    10d8:	20 62       	ori	r18, 0x20	; 32
    10da:	fc 01       	movw	r30, r24
    10dc:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    10de:	87 e3       	ldi	r24, 0x37	; 55
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	27 e3       	ldi	r18, 0x37	; 55
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	f9 01       	movw	r30, r18
    10e8:	20 81       	ld	r18, Z
    10ea:	28 60       	ori	r18, 0x08	; 8
    10ec:	fc 01       	movw	r30, r24
    10ee:	20 83       	st	Z, r18
    10f0:	1b c0       	rjmp	.+54     	; 0x1128 <TIMER_init+0x18a>

			}
		else if(!strcmp(config->compareMatchMode,"set"))
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	9a 81       	ldd	r25, Y+2	; 0x02
    10f6:	47 96       	adiw	r24, 0x17	; 23
    10f8:	62 e8       	ldi	r22, 0x82	; 130
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    1100:	89 2b       	or	r24, r25
    1102:	91 f4       	brne	.+36     	; 0x1128 <TIMER_init+0x18a>
			{
			TCCR0|=(1<<COM01)|(1<<COM00);
    1104:	83 e5       	ldi	r24, 0x53	; 83
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	23 e5       	ldi	r18, 0x53	; 83
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	f9 01       	movw	r30, r18
    110e:	20 81       	ld	r18, Z
    1110:	20 63       	ori	r18, 0x30	; 48
    1112:	fc 01       	movw	r30, r24
    1114:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    1116:	87 e3       	ldi	r24, 0x37	; 55
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	27 e3       	ldi	r18, 0x37	; 55
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	f9 01       	movw	r30, r18
    1120:	20 81       	ld	r18, Z
    1122:	28 60       	ori	r18, 0x08	; 8
    1124:	fc 01       	movw	r30, r24
    1126:	20 83       	st	Z, r18

			}
		//enable interrupt
		TIMSK=(1<<OCIE0);
    1128:	89 e5       	ldi	r24, 0x59	; 89
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	22 e0       	ldi	r18, 0x02	; 2
    112e:	fc 01       	movw	r30, r24
    1130:	20 83       	st	Z, r18
    1132:	6b c0       	rjmp	.+214    	; 0x120a <TIMER_init+0x26c>

	}
	else if(!strcmp(config->mode,"normal"))
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	01 96       	adiw	r24, 0x01	; 1
    113a:	66 e8       	ldi	r22, 0x86	; 134
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    1142:	89 2b       	or	r24, r25
    1144:	79 f4       	brne	.+30     	; 0x1164 <TIMER_init+0x1c6>
	{
		TCCR0|=(1<<FOC0);
    1146:	83 e5       	ldi	r24, 0x53	; 83
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	23 e5       	ldi	r18, 0x53	; 83
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	f9 01       	movw	r30, r18
    1150:	20 81       	ld	r18, Z
    1152:	20 68       	ori	r18, 0x80	; 128
    1154:	fc 01       	movw	r30, r24
    1156:	20 83       	st	Z, r18
		TIMSK=(1<<TOIE0);
    1158:	89 e5       	ldi	r24, 0x59	; 89
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	21 e0       	ldi	r18, 0x01	; 1
    115e:	fc 01       	movw	r30, r24
    1160:	20 83       	st	Z, r18
    1162:	53 c0       	rjmp	.+166    	; 0x120a <TIMER_init+0x26c>
	}
	else if(!strcmp(config->mode,"pwm"))
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	9a 81       	ldd	r25, Y+2	; 0x02
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	6d e8       	ldi	r22, 0x8D	; 141
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    1172:	89 2b       	or	r24, r25
    1174:	09 f0       	breq	.+2      	; 0x1178 <TIMER_init+0x1da>
    1176:	49 c0       	rjmp	.+146    	; 0x120a <TIMER_init+0x26c>
	{
		TCCR0 |=(1<<WGM00)|(1<<WGM01);
    1178:	83 e5       	ldi	r24, 0x53	; 83
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	23 e5       	ldi	r18, 0x53	; 83
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	f9 01       	movw	r30, r18
    1182:	20 81       	ld	r18, Z
    1184:	28 64       	ori	r18, 0x48	; 72
    1186:	fc 01       	movw	r30, r24
    1188:	20 83       	st	Z, r18
		if(!strcmp(config->pwmMode,"inverting"))
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	8b 96       	adiw	r24, 0x2b	; 43
    1190:	61 e9       	ldi	r22, 0x91	; 145
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    1198:	89 2b       	or	r24, r25
    119a:	e1 f4       	brne	.+56     	; 0x11d4 <TIMER_init+0x236>
				{
				TCCR0|=(1<<COM00);
    119c:	83 e5       	ldi	r24, 0x53	; 83
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	23 e5       	ldi	r18, 0x53	; 83
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	f9 01       	movw	r30, r18
    11a6:	20 81       	ld	r18, Z
    11a8:	20 61       	ori	r18, 0x10	; 16
    11aa:	fc 01       	movw	r30, r24
    11ac:	20 83       	st	Z, r18
				TCCR0|=(1<<COM01);
    11ae:	83 e5       	ldi	r24, 0x53	; 83
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	23 e5       	ldi	r18, 0x53	; 83
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	f9 01       	movw	r30, r18
    11b8:	20 81       	ld	r18, Z
    11ba:	20 62       	ori	r18, 0x20	; 32
    11bc:	fc 01       	movw	r30, r24
    11be:	20 83       	st	Z, r18
				SET_BIT(DDRB,3);
    11c0:	87 e3       	ldi	r24, 0x37	; 55
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	27 e3       	ldi	r18, 0x37	; 55
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	f9 01       	movw	r30, r18
    11ca:	20 81       	ld	r18, Z
    11cc:	28 60       	ori	r18, 0x08	; 8
    11ce:	fc 01       	movw	r30, r24
    11d0:	20 83       	st	Z, r18
    11d2:	1b c0       	rjmp	.+54     	; 0x120a <TIMER_init+0x26c>
				}
				else if(!strcmp(config->pwmMode,"non-inverting"))
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	9a 81       	ldd	r25, Y+2	; 0x02
    11d8:	8b 96       	adiw	r24, 0x2b	; 43
    11da:	6b e9       	ldi	r22, 0x9B	; 155
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    11de:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    11e2:	89 2b       	or	r24, r25
    11e4:	91 f4       	brne	.+36     	; 0x120a <TIMER_init+0x26c>
					{
					TCCR0|=(1<<COM01);
    11e6:	83 e5       	ldi	r24, 0x53	; 83
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	23 e5       	ldi	r18, 0x53	; 83
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	f9 01       	movw	r30, r18
    11f0:	20 81       	ld	r18, Z
    11f2:	20 62       	ori	r18, 0x20	; 32
    11f4:	fc 01       	movw	r30, r24
    11f6:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    11f8:	87 e3       	ldi	r24, 0x37	; 55
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	27 e3       	ldi	r18, 0x37	; 55
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	f9 01       	movw	r30, r18
    1202:	20 81       	ld	r18, Z
    1204:	28 60       	ori	r18, 0x08	; 8
    1206:	fc 01       	movw	r30, r24
    1208:	20 83       	st	Z, r18

	}

	}
	///
	if(config->timerNumber==1)
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	9a 81       	ldd	r25, Y+2	; 0x02
    120e:	fc 01       	movw	r30, r24
    1210:	80 81       	ld	r24, Z
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	09 f0       	breq	.+2      	; 0x1218 <TIMER_init+0x27a>
    1216:	30 c1       	rjmp	.+608    	; 0x1478 <TIMER_init+0x4da>
		{
			TCCR1A=0;
    1218:	8f e4       	ldi	r24, 0x4F	; 79
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	fc 01       	movw	r30, r24
    121e:	10 82       	st	Z, r1
			TCCR1B=0;
    1220:	8e e4       	ldi	r24, 0x4E	; 78
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	fc 01       	movw	r30, r24
    1226:	10 82       	st	Z, r1

		switch(config->prescaler)
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
    122c:	fc 01       	movw	r30, r24
    122e:	85 89       	ldd	r24, Z+21	; 0x15
    1230:	96 89       	ldd	r25, Z+22	; 0x16
    1232:	80 34       	cpi	r24, 0x40	; 64
    1234:	91 05       	cpc	r25, r1
    1236:	c1 f0       	breq	.+48     	; 0x1268 <TIMER_init+0x2ca>
    1238:	81 34       	cpi	r24, 0x41	; 65
    123a:	91 05       	cpc	r25, r1
    123c:	18 f4       	brcc	.+6      	; 0x1244 <TIMER_init+0x2a6>
    123e:	08 97       	sbiw	r24, 0x08	; 8
    1240:	49 f0       	breq	.+18     	; 0x1254 <TIMER_init+0x2b6>
    1242:	30 c0       	rjmp	.+96     	; 0x12a4 <TIMER_init+0x306>
    1244:	81 15       	cp	r24, r1
    1246:	f1 e0       	ldi	r31, 0x01	; 1
    1248:	9f 07       	cpc	r25, r31
    124a:	c1 f0       	breq	.+48     	; 0x127c <TIMER_init+0x2de>
    124c:	81 15       	cp	r24, r1
    124e:	94 40       	sbci	r25, 0x04	; 4
    1250:	f9 f0       	breq	.+62     	; 0x1290 <TIMER_init+0x2f2>
    1252:	28 c0       	rjmp	.+80     	; 0x12a4 <TIMER_init+0x306>
		{
		case 8:
			TCCR1B|=(1<<CS11);
    1254:	8e e4       	ldi	r24, 0x4E	; 78
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	2e e4       	ldi	r18, 0x4E	; 78
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	f9 01       	movw	r30, r18
    125e:	20 81       	ld	r18, Z
    1260:	22 60       	ori	r18, 0x02	; 2
    1262:	fc 01       	movw	r30, r24
    1264:	20 83       	st	Z, r18
			break;
    1266:	27 c0       	rjmp	.+78     	; 0x12b6 <TIMER_init+0x318>
		case 64:
				TCCR1B|=(1<<CS10)|(1<<CS11);
    1268:	8e e4       	ldi	r24, 0x4E	; 78
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	2e e4       	ldi	r18, 0x4E	; 78
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	f9 01       	movw	r30, r18
    1272:	20 81       	ld	r18, Z
    1274:	23 60       	ori	r18, 0x03	; 3
    1276:	fc 01       	movw	r30, r24
    1278:	20 83       	st	Z, r18
				break;
    127a:	1d c0       	rjmp	.+58     	; 0x12b6 <TIMER_init+0x318>
		case 256:
				TCCR1B|=(1<<CS12);
    127c:	8e e4       	ldi	r24, 0x4E	; 78
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	2e e4       	ldi	r18, 0x4E	; 78
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	f9 01       	movw	r30, r18
    1286:	20 81       	ld	r18, Z
    1288:	24 60       	ori	r18, 0x04	; 4
    128a:	fc 01       	movw	r30, r24
    128c:	20 83       	st	Z, r18
				break;
    128e:	13 c0       	rjmp	.+38     	; 0x12b6 <TIMER_init+0x318>
		case 1024:
				TCCR1B|=(1<<CS10)|(1<<CS12);
    1290:	8e e4       	ldi	r24, 0x4E	; 78
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	2e e4       	ldi	r18, 0x4E	; 78
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	f9 01       	movw	r30, r18
    129a:	20 81       	ld	r18, Z
    129c:	25 60       	ori	r18, 0x05	; 5
    129e:	fc 01       	movw	r30, r24
    12a0:	20 83       	st	Z, r18
				break;
    12a2:	09 c0       	rjmp	.+18     	; 0x12b6 <TIMER_init+0x318>
		default:
				TCCR1B|=(1<<CS10);
    12a4:	8e e4       	ldi	r24, 0x4E	; 78
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	2e e4       	ldi	r18, 0x4E	; 78
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	f9 01       	movw	r30, r18
    12ae:	20 81       	ld	r18, Z
    12b0:	21 60       	ori	r18, 0x01	; 1
    12b2:	fc 01       	movw	r30, r24
    12b4:	20 83       	st	Z, r18

			}
//FOR A
		if(!strcmp(config->mode,"compare"))
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	6d e6       	ldi	r22, 0x6D	; 109
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    12c4:	89 2b       	or	r24, r25
    12c6:	09 f0       	breq	.+2      	; 0x12ca <TIMER_init+0x32c>
    12c8:	6b c0       	rjmp	.+214    	; 0x13a0 <TIMER_init+0x402>
		{	TCCR1A|=(1<<FOC1A);
    12ca:	8f e4       	ldi	r24, 0x4F	; 79
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	2f e4       	ldi	r18, 0x4F	; 79
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	f9 01       	movw	r30, r18
    12d4:	20 81       	ld	r18, Z
    12d6:	28 60       	ori	r18, 0x08	; 8
    12d8:	fc 01       	movw	r30, r24
    12da:	20 83       	st	Z, r18
			TCCR1B|=(1<<WGM12);
    12dc:	8e e4       	ldi	r24, 0x4E	; 78
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	2e e4       	ldi	r18, 0x4E	; 78
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	f9 01       	movw	r30, r18
    12e6:	20 81       	ld	r18, Z
    12e8:	28 60       	ori	r18, 0x08	; 8
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
			if(!strcmp(config->compareMatchMode,"toggle"))
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	9a 81       	ldd	r25, Y+2	; 0x02
    12f2:	47 96       	adiw	r24, 0x17	; 23
    12f4:	65 e7       	ldi	r22, 0x75	; 117
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    12fc:	89 2b       	or	r24, r25
    12fe:	99 f4       	brne	.+38     	; 0x1326 <TIMER_init+0x388>
			{
			TCCR1A|=(1<<COM1A0);
    1300:	8f e4       	ldi	r24, 0x4F	; 79
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	2f e4       	ldi	r18, 0x4F	; 79
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	f9 01       	movw	r30, r18
    130a:	20 81       	ld	r18, Z
    130c:	20 64       	ori	r18, 0x40	; 64
    130e:	fc 01       	movw	r30, r24
    1310:	20 83       	st	Z, r18
			SET_BIT(DDRD,5);
    1312:	81 e3       	ldi	r24, 0x31	; 49
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	21 e3       	ldi	r18, 0x31	; 49
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f9 01       	movw	r30, r18
    131c:	20 81       	ld	r18, Z
    131e:	20 62       	ori	r18, 0x20	; 32
    1320:	fc 01       	movw	r30, r24
    1322:	20 83       	st	Z, r18
    1324:	37 c0       	rjmp	.+110    	; 0x1394 <TIMER_init+0x3f6>
			}
			else if(!strcmp(config->compareMatchMode,"clear"))
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	9a 81       	ldd	r25, Y+2	; 0x02
    132a:	47 96       	adiw	r24, 0x17	; 23
    132c:	6c e7       	ldi	r22, 0x7C	; 124
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    1334:	89 2b       	or	r24, r25
    1336:	99 f4       	brne	.+38     	; 0x135e <TIMER_init+0x3c0>
				{
				TCCR1A|=(1<<COM1A1);
    1338:	8f e4       	ldi	r24, 0x4F	; 79
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	2f e4       	ldi	r18, 0x4F	; 79
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	f9 01       	movw	r30, r18
    1342:	20 81       	ld	r18, Z
    1344:	20 68       	ori	r18, 0x80	; 128
    1346:	fc 01       	movw	r30, r24
    1348:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    134a:	81 e3       	ldi	r24, 0x31	; 49
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	21 e3       	ldi	r18, 0x31	; 49
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	f9 01       	movw	r30, r18
    1354:	20 81       	ld	r18, Z
    1356:	20 62       	ori	r18, 0x20	; 32
    1358:	fc 01       	movw	r30, r24
    135a:	20 83       	st	Z, r18
    135c:	1b c0       	rjmp	.+54     	; 0x1394 <TIMER_init+0x3f6>

				}
			else if(!strcmp(config->compareMatchMode,"set"))
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	47 96       	adiw	r24, 0x17	; 23
    1364:	62 e8       	ldi	r22, 0x82	; 130
    1366:	70 e0       	ldi	r23, 0x00	; 0
    1368:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    136c:	89 2b       	or	r24, r25
    136e:	91 f4       	brne	.+36     	; 0x1394 <TIMER_init+0x3f6>
				{
				TCCR1A|=(1<<COM1A1)|(1<<COM1A0);
    1370:	8f e4       	ldi	r24, 0x4F	; 79
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	2f e4       	ldi	r18, 0x4F	; 79
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	f9 01       	movw	r30, r18
    137a:	20 81       	ld	r18, Z
    137c:	20 6c       	ori	r18, 0xC0	; 192
    137e:	fc 01       	movw	r30, r24
    1380:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    1382:	81 e3       	ldi	r24, 0x31	; 49
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	21 e3       	ldi	r18, 0x31	; 49
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	f9 01       	movw	r30, r18
    138c:	20 81       	ld	r18, Z
    138e:	20 62       	ori	r18, 0x20	; 32
    1390:	fc 01       	movw	r30, r24
    1392:	20 83       	st	Z, r18

				}
			//enable interrupt
			TIMSK=(1<<OCIE1A);
    1394:	89 e5       	ldi	r24, 0x59	; 89
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	20 e1       	ldi	r18, 0x10	; 16
    139a:	fc 01       	movw	r30, r24
    139c:	20 83       	st	Z, r18
    139e:	6b c0       	rjmp	.+214    	; 0x1476 <TIMER_init+0x4d8>

		}
		else if(!strcmp(config->mode,"normal"))
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	9a 81       	ldd	r25, Y+2	; 0x02
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	66 e8       	ldi	r22, 0x86	; 134
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    13ae:	89 2b       	or	r24, r25
    13b0:	79 f4       	brne	.+30     	; 0x13d0 <TIMER_init+0x432>
		{
			TCCR0|=(1<<FOC0);
    13b2:	83 e5       	ldi	r24, 0x53	; 83
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	23 e5       	ldi	r18, 0x53	; 83
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	f9 01       	movw	r30, r18
    13bc:	20 81       	ld	r18, Z
    13be:	20 68       	ori	r18, 0x80	; 128
    13c0:	fc 01       	movw	r30, r24
    13c2:	20 83       	st	Z, r18
			TIMSK=(1<<TOIE0);
    13c4:	89 e5       	ldi	r24, 0x59	; 89
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	21 e0       	ldi	r18, 0x01	; 1
    13ca:	fc 01       	movw	r30, r24
    13cc:	20 83       	st	Z, r18
    13ce:	53 c0       	rjmp	.+166    	; 0x1476 <TIMER_init+0x4d8>
		}
		else if(!strcmp(config->mode,"pwm"))
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	9a 81       	ldd	r25, Y+2	; 0x02
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	6d e8       	ldi	r22, 0x8D	; 141
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    13de:	89 2b       	or	r24, r25
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <TIMER_init+0x446>
    13e2:	49 c0       	rjmp	.+146    	; 0x1476 <TIMER_init+0x4d8>
		{
			TCCR0 |=(1<<WGM00)|(1<<WGM01);
    13e4:	83 e5       	ldi	r24, 0x53	; 83
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	23 e5       	ldi	r18, 0x53	; 83
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	f9 01       	movw	r30, r18
    13ee:	20 81       	ld	r18, Z
    13f0:	28 64       	ori	r18, 0x48	; 72
    13f2:	fc 01       	movw	r30, r24
    13f4:	20 83       	st	Z, r18
			if(!strcmp(config->pwmMode,"inverting"))
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	8b 96       	adiw	r24, 0x2b	; 43
    13fc:	61 e9       	ldi	r22, 0x91	; 145
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    1404:	89 2b       	or	r24, r25
    1406:	e1 f4       	brne	.+56     	; 0x1440 <TIMER_init+0x4a2>
					{
					TCCR0|=(1<<COM00);
    1408:	83 e5       	ldi	r24, 0x53	; 83
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	23 e5       	ldi	r18, 0x53	; 83
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	f9 01       	movw	r30, r18
    1412:	20 81       	ld	r18, Z
    1414:	20 61       	ori	r18, 0x10	; 16
    1416:	fc 01       	movw	r30, r24
    1418:	20 83       	st	Z, r18
					TCCR0|=(1<<COM01);
    141a:	83 e5       	ldi	r24, 0x53	; 83
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	23 e5       	ldi	r18, 0x53	; 83
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	f9 01       	movw	r30, r18
    1424:	20 81       	ld	r18, Z
    1426:	20 62       	ori	r18, 0x20	; 32
    1428:	fc 01       	movw	r30, r24
    142a:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    142c:	87 e3       	ldi	r24, 0x37	; 55
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	27 e3       	ldi	r18, 0x37	; 55
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	f9 01       	movw	r30, r18
    1436:	20 81       	ld	r18, Z
    1438:	28 60       	ori	r18, 0x08	; 8
    143a:	fc 01       	movw	r30, r24
    143c:	20 83       	st	Z, r18
    143e:	1b c0       	rjmp	.+54     	; 0x1476 <TIMER_init+0x4d8>
					}
					else if(!strcmp(config->pwmMode,"non-inverting"))
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	8b 96       	adiw	r24, 0x2b	; 43
    1446:	6b e9       	ldi	r22, 0x9B	; 155
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    144e:	89 2b       	or	r24, r25
    1450:	91 f4       	brne	.+36     	; 0x1476 <TIMER_init+0x4d8>
						{
						TCCR0|=(1<<COM01);
    1452:	83 e5       	ldi	r24, 0x53	; 83
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	23 e5       	ldi	r18, 0x53	; 83
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	f9 01       	movw	r30, r18
    145c:	20 81       	ld	r18, Z
    145e:	20 62       	ori	r18, 0x20	; 32
    1460:	fc 01       	movw	r30, r24
    1462:	20 83       	st	Z, r18
						SET_BIT(DDRB,3);
    1464:	87 e3       	ldi	r24, 0x37	; 55
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	27 e3       	ldi	r18, 0x37	; 55
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	f9 01       	movw	r30, r18
    146e:	20 81       	ld	r18, Z
    1470:	28 60       	ori	r18, 0x08	; 8
    1472:	fc 01       	movw	r30, r24
    1474:	20 83       	st	Z, r18
	//TCCR0=(1<<FOC0)|(1<<COM00)|(1<<CS00)|(1<<CS02);


	//enable

	sei();
    1476:	78 94       	sei
}
}
    1478:	00 00       	nop
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	08 95       	ret

00001484 <TIMER_setCompare>:

void TIMER_setCompare(uint16 compareValue)
{
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	00 d0       	rcall	.+0      	; 0x148a <TIMER_setCompare+0x6>
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	9a 83       	std	Y+2, r25	; 0x02
    1490:	89 83       	std	Y+1, r24	; 0x01
	switch (configPtr->timerNumber)
    1492:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <configPtr>
    1496:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <configPtr+0x1>
    149a:	fc 01       	movw	r30, r24
    149c:	80 81       	ld	r24, Z
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	19 f0       	breq	.+6      	; 0x14ac <TIMER_setCompare+0x28>
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	59 f0       	breq	.+22     	; 0x14c0 <TIMER_setCompare+0x3c>
	case 1:
		TCNT1=0;
		OCR1A=compareValue;
		break;
	}
}
    14aa:	17 c0       	rjmp	.+46     	; 0x14da <TIMER_setCompare+0x56>
void TIMER_setCompare(uint16 compareValue)
{
	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=0;
    14ac:	82 e5       	ldi	r24, 0x52	; 82
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	fc 01       	movw	r30, r24
    14b2:	10 82       	st	Z, r1
		OCR0=compareValue;
    14b4:	8c e5       	ldi	r24, 0x5C	; 92
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	29 81       	ldd	r18, Y+1	; 0x01
    14ba:	fc 01       	movw	r30, r24
    14bc:	20 83       	st	Z, r18
		break;
    14be:	0d c0       	rjmp	.+26     	; 0x14da <TIMER_setCompare+0x56>
	case 1:
		TCNT1=0;
    14c0:	8c e4       	ldi	r24, 0x4C	; 76
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	fc 01       	movw	r30, r24
    14c6:	11 82       	std	Z+1, r1	; 0x01
    14c8:	10 82       	st	Z, r1
		OCR1A=compareValue;
    14ca:	8a e4       	ldi	r24, 0x4A	; 74
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	29 81       	ldd	r18, Y+1	; 0x01
    14d0:	3a 81       	ldd	r19, Y+2	; 0x02
    14d2:	fc 01       	movw	r30, r24
    14d4:	31 83       	std	Z+1, r19	; 0x01
    14d6:	20 83       	st	Z, r18
		break;
    14d8:	00 00       	nop
	}
}
    14da:	00 00       	nop
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	08 95       	ret

000014e6 <TIMER_setNormal>:
void TIMER_setNormal(uint8 initValue)

{
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	1f 92       	push	r1
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	89 83       	std	Y+1, r24	; 0x01

	switch (configPtr->timerNumber)
    14f2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <configPtr>
    14f6:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <configPtr+0x1>
    14fa:	fc 01       	movw	r30, r24
    14fc:	80 81       	ld	r24, Z
    14fe:	88 2f       	mov	r24, r24
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	19 f0       	breq	.+6      	; 0x150c <TIMER_setNormal+0x26>
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	39 f0       	breq	.+14     	; 0x1518 <TIMER_setNormal+0x32>
		TCNT1=initValue;
		break;


}
}
    150a:	0f c0       	rjmp	.+30     	; 0x152a <TIMER_setNormal+0x44>
{

	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=initValue;
    150c:	82 e5       	ldi	r24, 0x52	; 82
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	29 81       	ldd	r18, Y+1	; 0x01
    1512:	fc 01       	movw	r30, r24
    1514:	20 83       	st	Z, r18
		break;
    1516:	09 c0       	rjmp	.+18     	; 0x152a <TIMER_setNormal+0x44>
	case 1:
		TCNT1=initValue;
    1518:	8c e4       	ldi	r24, 0x4C	; 76
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	29 81       	ldd	r18, Y+1	; 0x01
    151e:	22 2f       	mov	r18, r18
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	fc 01       	movw	r30, r24
    1524:	31 83       	std	Z+1, r19	; 0x01
    1526:	20 83       	st	Z, r18
		break;
    1528:	00 00       	nop


}
}
    152a:	00 00       	nop
    152c:	0f 90       	pop	r0
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	08 95       	ret

00001534 <TIMER_setpwm>:
void TIMER_setpwm(uint8 dutyCycle)
{
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	1f 92       	push	r1
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
    1540:	82 e5       	ldi	r24, 0x52	; 82
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	fc 01       	movw	r30, r24
    1546:	10 82       	st	Z, r1
	OCR0=dutyCycle;
    1548:	8c e5       	ldi	r24, 0x5C	; 92
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	29 81       	ldd	r18, Y+1	; 0x01
    154e:	fc 01       	movw	r30, r24
    1550:	20 83       	st	Z, r18
}
    1552:	00 00       	nop
    1554:	0f 90       	pop	r0
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

0000155c <TIMER_setCallBackPtr>:
void TIMER_setCallBackPtr(void(*a_ptr)(void))
{
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	00 d0       	rcall	.+0      	; 0x1562 <TIMER_setCallBackPtr+0x6>
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	9a 83       	std	Y+2, r25	; 0x02
    1568:	89 83       	std	Y+1, r24	; 0x01
g_callBackPtr=a_ptr;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	9a 81       	ldd	r25, Y+2	; 0x02
    156e:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <g_callBackPtr+0x1>
    1572:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <g_callBackPtr>
}
    1576:	00 00       	nop
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	08 95       	ret

00001582 <TIMER_stop>:
void TIMER_stop()
{
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
	switch (configPtr->timerNumber)
    158a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <configPtr>
    158e:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <configPtr+0x1>
    1592:	fc 01       	movw	r30, r24
    1594:	80 81       	ld	r24, Z
    1596:	88 2f       	mov	r24, r24
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	89 2b       	or	r24, r25
    159c:	51 f4       	brne	.+20     	; 0x15b2 <TIMER_stop+0x30>

{
case 0:
	TCCR0&=~(1<<CS00)&~(1<<CS01)&~(1<<CS02);
    159e:	83 e5       	ldi	r24, 0x53	; 83
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	23 e5       	ldi	r18, 0x53	; 83
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	f9 01       	movw	r30, r18
    15a8:	20 81       	ld	r18, Z
    15aa:	28 7f       	andi	r18, 0xF8	; 248
    15ac:	fc 01       	movw	r30, r24
    15ae:	20 83       	st	Z, r18
	break;
    15b0:	01 c0       	rjmp	.+2      	; 0x15b4 <TIMER_stop+0x32>
case 1:
	break;
    15b2:	00 00       	nop

}
}
    15b4:	00 00       	nop
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	08 95       	ret

000015bc <UART_init>:
 *      Author: hesham
 */
#include"uart.h"

void UART_init(UART_configurationType * config)
{UCSRA=0;
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <UART_init+0xa>
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	9a 83       	std	Y+2, r25	; 0x02
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	8b e2       	ldi	r24, 0x2B	; 43
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	fc 01       	movw	r30, r24
    15d4:	10 82       	st	Z, r1
UCSRB=0;
    15d6:	8a e2       	ldi	r24, 0x2A	; 42
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	fc 01       	movw	r30, r24
    15dc:	10 82       	st	Z, r1
UCSRC=0;
    15de:	80 e4       	ldi	r24, 0x40	; 64
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	fc 01       	movw	r30, r24
    15e4:	10 82       	st	Z, r1
/* enables */
	if(!strcmp(config->mode,"normal"))
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	05 96       	adiw	r24, 0x05	; 5
    15ec:	69 ea       	ldi	r22, 0xA9	; 169
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    15f4:	89 2b       	or	r24, r25
    15f6:	09 f0       	breq	.+2      	; 0x15fa <UART_init+0x3e>
    15f8:	60 c0       	rjmp	.+192    	; 0x16ba <UART_init+0xfe>
	{
CLEAR_BIT(UCSRA,U2X);
    15fa:	8b e2       	ldi	r24, 0x2B	; 43
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	2b e2       	ldi	r18, 0x2B	; 43
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	f9 01       	movw	r30, r18
    1604:	20 81       	ld	r18, Z
    1606:	2d 7f       	andi	r18, 0xFD	; 253
    1608:	fc 01       	movw	r30, r24
    160a:	20 83       	st	Z, r18
UBRRL=((F_CPU /(16*config->buadRate))-1);
    160c:	09 e2       	ldi	r16, 0x29	; 41
    160e:	10 e0       	ldi	r17, 0x00	; 0
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	9a 81       	ldd	r25, Y+2	; 0x02
    1614:	fc 01       	movw	r30, r24
    1616:	81 81       	ldd	r24, Z+1	; 0x01
    1618:	92 81       	ldd	r25, Z+2	; 0x02
    161a:	a3 81       	ldd	r26, Z+3	; 0x03
    161c:	b4 81       	ldd	r27, Z+4	; 0x04
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	aa 1f       	adc	r26, r26
    1624:	bb 1f       	adc	r27, r27
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	aa 1f       	adc	r26, r26
    162c:	bb 1f       	adc	r27, r27
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	aa 1f       	adc	r26, r26
    1634:	bb 1f       	adc	r27, r27
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	aa 1f       	adc	r26, r26
    163c:	bb 1f       	adc	r27, r27
    163e:	9c 01       	movw	r18, r24
    1640:	ad 01       	movw	r20, r26
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	92 e1       	ldi	r25, 0x12	; 18
    1646:	aa e7       	ldi	r26, 0x7A	; 122
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__udivmodsi4>
    1652:	da 01       	movw	r26, r20
    1654:	c9 01       	movw	r24, r18
    1656:	81 50       	subi	r24, 0x01	; 1
    1658:	f8 01       	movw	r30, r16
    165a:	80 83       	st	Z, r24
UBRRH=((F_CPU /(16*config->buadRate))-1)>>8;
    165c:	00 e4       	ldi	r16, 0x40	; 64
    165e:	10 e0       	ldi	r17, 0x00	; 0
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	9a 81       	ldd	r25, Y+2	; 0x02
    1664:	fc 01       	movw	r30, r24
    1666:	81 81       	ldd	r24, Z+1	; 0x01
    1668:	92 81       	ldd	r25, Z+2	; 0x02
    166a:	a3 81       	ldd	r26, Z+3	; 0x03
    166c:	b4 81       	ldd	r27, Z+4	; 0x04
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	aa 1f       	adc	r26, r26
    1674:	bb 1f       	adc	r27, r27
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	aa 1f       	adc	r26, r26
    167c:	bb 1f       	adc	r27, r27
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	aa 1f       	adc	r26, r26
    1684:	bb 1f       	adc	r27, r27
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	aa 1f       	adc	r26, r26
    168c:	bb 1f       	adc	r27, r27
    168e:	9c 01       	movw	r18, r24
    1690:	ad 01       	movw	r20, r26
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	92 e1       	ldi	r25, 0x12	; 18
    1696:	aa e7       	ldi	r26, 0x7A	; 122
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__udivmodsi4>
    16a2:	da 01       	movw	r26, r20
    16a4:	c9 01       	movw	r24, r18
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	a1 09       	sbc	r26, r1
    16aa:	b1 09       	sbc	r27, r1
    16ac:	89 2f       	mov	r24, r25
    16ae:	9a 2f       	mov	r25, r26
    16b0:	ab 2f       	mov	r26, r27
    16b2:	bb 27       	eor	r27, r27
    16b4:	f8 01       	movw	r30, r16
    16b6:	80 83       	st	Z, r24
    16b8:	61 c0       	rjmp	.+194    	; 0x177c <UART_init+0x1c0>


	}
	else if(!strcmp(config->mode,"double speed"))
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	9a 81       	ldd	r25, Y+2	; 0x02
    16be:	05 96       	adiw	r24, 0x05	; 5
    16c0:	60 eb       	ldi	r22, 0xB0	; 176
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <strcmp>
    16c8:	89 2b       	or	r24, r25
    16ca:	09 f0       	breq	.+2      	; 0x16ce <UART_init+0x112>
    16cc:	57 c0       	rjmp	.+174    	; 0x177c <UART_init+0x1c0>
	{
		SET_BIT(UCSRA,U2X);
    16ce:	8b e2       	ldi	r24, 0x2B	; 43
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	2b e2       	ldi	r18, 0x2B	; 43
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	f9 01       	movw	r30, r18
    16d8:	20 81       	ld	r18, Z
    16da:	22 60       	ori	r18, 0x02	; 2
    16dc:	fc 01       	movw	r30, r24
    16de:	20 83       	st	Z, r18
		UBRRL=((F_CPU /(8*config->buadRate))-1);
    16e0:	09 e2       	ldi	r16, 0x29	; 41
    16e2:	10 e0       	ldi	r17, 0x00	; 0
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	9a 81       	ldd	r25, Y+2	; 0x02
    16e8:	fc 01       	movw	r30, r24
    16ea:	81 81       	ldd	r24, Z+1	; 0x01
    16ec:	92 81       	ldd	r25, Z+2	; 0x02
    16ee:	a3 81       	ldd	r26, Z+3	; 0x03
    16f0:	b4 81       	ldd	r27, Z+4	; 0x04
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	aa 1f       	adc	r26, r26
    16f8:	bb 1f       	adc	r27, r27
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	aa 1f       	adc	r26, r26
    1700:	bb 1f       	adc	r27, r27
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	aa 1f       	adc	r26, r26
    1708:	bb 1f       	adc	r27, r27
    170a:	9c 01       	movw	r18, r24
    170c:	ad 01       	movw	r20, r26
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	92 e1       	ldi	r25, 0x12	; 18
    1712:	aa e7       	ldi	r26, 0x7A	; 122
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__udivmodsi4>
    171e:	da 01       	movw	r26, r20
    1720:	c9 01       	movw	r24, r18
    1722:	81 50       	subi	r24, 0x01	; 1
    1724:	f8 01       	movw	r30, r16
    1726:	80 83       	st	Z, r24
		UBRRH=((F_CPU /(8*config->buadRate))-1)>>8;
    1728:	00 e4       	ldi	r16, 0x40	; 64
    172a:	10 e0       	ldi	r17, 0x00	; 0
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	9a 81       	ldd	r25, Y+2	; 0x02
    1730:	fc 01       	movw	r30, r24
    1732:	81 81       	ldd	r24, Z+1	; 0x01
    1734:	92 81       	ldd	r25, Z+2	; 0x02
    1736:	a3 81       	ldd	r26, Z+3	; 0x03
    1738:	b4 81       	ldd	r27, Z+4	; 0x04
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	aa 1f       	adc	r26, r26
    1740:	bb 1f       	adc	r27, r27
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	aa 1f       	adc	r26, r26
    1748:	bb 1f       	adc	r27, r27
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	aa 1f       	adc	r26, r26
    1750:	bb 1f       	adc	r27, r27
    1752:	9c 01       	movw	r18, r24
    1754:	ad 01       	movw	r20, r26
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	92 e1       	ldi	r25, 0x12	; 18
    175a:	aa e7       	ldi	r26, 0x7A	; 122
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	bc 01       	movw	r22, r24
    1760:	cd 01       	movw	r24, r26
    1762:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__udivmodsi4>
    1766:	da 01       	movw	r26, r20
    1768:	c9 01       	movw	r24, r18
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	a1 09       	sbc	r26, r1
    176e:	b1 09       	sbc	r27, r1
    1770:	89 2f       	mov	r24, r25
    1772:	9a 2f       	mov	r25, r26
    1774:	ab 2f       	mov	r26, r27
    1776:	bb 27       	eor	r27, r27
    1778:	f8 01       	movw	r30, r16
    177a:	80 83       	st	Z, r24

	}


/* TO enable writing on Register UCSRC (used for define the frame )as it has the same address with UBRR register */
SET_BIT(UCSRC,URSEL);
    177c:	80 e4       	ldi	r24, 0x40	; 64
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	20 e4       	ldi	r18, 0x40	; 64
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	f9 01       	movw	r30, r18
    1786:	20 81       	ld	r18, Z
    1788:	20 68       	ori	r18, 0x80	; 128
    178a:	fc 01       	movw	r30, r24
    178c:	20 83       	st	Z, r18
/* the UART frame parameters*/
/* character size */
//SET_BIT(UCSRC,UCSZ0);
//SET_BIT(UCSRC,UCSZ1);
switch(config->character_size)
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	9a 81       	ldd	r25, Y+2	; 0x02
    1792:	fc 01       	movw	r30, r24
    1794:	80 81       	ld	r24, Z
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	86 30       	cpi	r24, 0x06	; 6
    179c:	91 05       	cpc	r25, r1
    179e:	f9 f0       	breq	.+62     	; 0x17de <UART_init+0x222>
    17a0:	87 30       	cpi	r24, 0x07	; 7
    17a2:	91 05       	cpc	r25, r1
    17a4:	1c f4       	brge	.+6      	; 0x17ac <UART_init+0x1f0>
    17a6:	05 97       	sbiw	r24, 0x05	; 5
    17a8:	39 f0       	breq	.+14     	; 0x17b8 <UART_init+0x1fc>
    17aa:	5b c0       	rjmp	.+182    	; 0x1862 <UART_init+0x2a6>
    17ac:	87 30       	cpi	r24, 0x07	; 7
    17ae:	91 05       	cpc	r25, r1
    17b0:	49 f1       	breq	.+82     	; 0x1804 <UART_init+0x248>
    17b2:	09 97       	sbiw	r24, 0x09	; 9
    17b4:	d1 f1       	breq	.+116    	; 0x182a <UART_init+0x26e>
    17b6:	55 c0       	rjmp	.+170    	; 0x1862 <UART_init+0x2a6>
{
case 5:
	CLEAR_BIT(UCSRC,UCSZ0);
    17b8:	80 e4       	ldi	r24, 0x40	; 64
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	20 e4       	ldi	r18, 0x40	; 64
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	f9 01       	movw	r30, r18
    17c2:	20 81       	ld	r18, Z
    17c4:	2d 7f       	andi	r18, 0xFD	; 253
    17c6:	fc 01       	movw	r30, r24
    17c8:	20 83       	st	Z, r18
	CLEAR_BIT(UCSRC,UCSZ1);
    17ca:	80 e4       	ldi	r24, 0x40	; 64
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	20 e4       	ldi	r18, 0x40	; 64
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	f9 01       	movw	r30, r18
    17d4:	20 81       	ld	r18, Z
    17d6:	2b 7f       	andi	r18, 0xFB	; 251
    17d8:	fc 01       	movw	r30, r24
    17da:	20 83       	st	Z, r18
	break;
    17dc:	54 c0       	rjmp	.+168    	; 0x1886 <UART_init+0x2ca>

case 6:
	CLEAR_BIT(UCSRC,UCSZ0);
    17de:	80 e4       	ldi	r24, 0x40	; 64
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	20 e4       	ldi	r18, 0x40	; 64
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	f9 01       	movw	r30, r18
    17e8:	20 81       	ld	r18, Z
    17ea:	2d 7f       	andi	r18, 0xFD	; 253
    17ec:	fc 01       	movw	r30, r24
    17ee:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    17f0:	80 e4       	ldi	r24, 0x40	; 64
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	20 e4       	ldi	r18, 0x40	; 64
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	f9 01       	movw	r30, r18
    17fa:	20 81       	ld	r18, Z
    17fc:	24 60       	ori	r18, 0x04	; 4
    17fe:	fc 01       	movw	r30, r24
    1800:	20 83       	st	Z, r18
	break;
    1802:	41 c0       	rjmp	.+130    	; 0x1886 <UART_init+0x2ca>
case 7:
	CLEAR_BIT(UCSRC,UCSZ1);
    1804:	80 e4       	ldi	r24, 0x40	; 64
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	20 e4       	ldi	r18, 0x40	; 64
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	f9 01       	movw	r30, r18
    180e:	20 81       	ld	r18, Z
    1810:	2b 7f       	andi	r18, 0xFB	; 251
    1812:	fc 01       	movw	r30, r24
    1814:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ0);
    1816:	80 e4       	ldi	r24, 0x40	; 64
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	20 e4       	ldi	r18, 0x40	; 64
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	f9 01       	movw	r30, r18
    1820:	20 81       	ld	r18, Z
    1822:	22 60       	ori	r18, 0x02	; 2
    1824:	fc 01       	movw	r30, r24
    1826:	20 83       	st	Z, r18
		break;
    1828:	2e c0       	rjmp	.+92     	; 0x1886 <UART_init+0x2ca>
case 9:
	SET_BIT(UCSRC,UCSZ0);
    182a:	80 e4       	ldi	r24, 0x40	; 64
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	20 e4       	ldi	r18, 0x40	; 64
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	f9 01       	movw	r30, r18
    1834:	20 81       	ld	r18, Z
    1836:	22 60       	ori	r18, 0x02	; 2
    1838:	fc 01       	movw	r30, r24
    183a:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    183c:	80 e4       	ldi	r24, 0x40	; 64
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	20 e4       	ldi	r18, 0x40	; 64
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	f9 01       	movw	r30, r18
    1846:	20 81       	ld	r18, Z
    1848:	24 60       	ori	r18, 0x04	; 4
    184a:	fc 01       	movw	r30, r24
    184c:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ2);
    184e:	80 e4       	ldi	r24, 0x40	; 64
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	20 e4       	ldi	r18, 0x40	; 64
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	f9 01       	movw	r30, r18
    1858:	20 81       	ld	r18, Z
    185a:	24 60       	ori	r18, 0x04	; 4
    185c:	fc 01       	movw	r30, r24
    185e:	20 83       	st	Z, r18


	break;
    1860:	12 c0       	rjmp	.+36     	; 0x1886 <UART_init+0x2ca>

default :
	//SET_BIT(UCSRC,URSEL);
	SET_BIT(UCSRC,UCSZ0);
    1862:	80 e4       	ldi	r24, 0x40	; 64
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	20 e4       	ldi	r18, 0x40	; 64
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	f9 01       	movw	r30, r18
    186c:	20 81       	ld	r18, Z
    186e:	22 60       	ori	r18, 0x02	; 2
    1870:	fc 01       	movw	r30, r24
    1872:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    1874:	80 e4       	ldi	r24, 0x40	; 64
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	20 e4       	ldi	r18, 0x40	; 64
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	f9 01       	movw	r30, r18
    187e:	20 81       	ld	r18, Z
    1880:	24 60       	ori	r18, 0x04	; 4
    1882:	fc 01       	movw	r30, r24
    1884:	20 83       	st	Z, r18
/* write on UBRR instead of ucsrc register */
//CLEAR_BIT(UCSRC,URSEL);//---------------------------------------<<<<
/* writing the baud rate prescaler */
//UBRRL=12;
//UBRRH=12>>8;
SET_BIT(UCSRB,RXEN);
    1886:	8a e2       	ldi	r24, 0x2A	; 42
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	2a e2       	ldi	r18, 0x2A	; 42
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	f9 01       	movw	r30, r18
    1890:	20 81       	ld	r18, Z
    1892:	20 61       	ori	r18, 0x10	; 16
    1894:	fc 01       	movw	r30, r24
    1896:	20 83       	st	Z, r18
SET_BIT(UCSRB,TXEN);
    1898:	8a e2       	ldi	r24, 0x2A	; 42
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	2a e2       	ldi	r18, 0x2A	; 42
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	f9 01       	movw	r30, r18
    18a2:	20 81       	ld	r18, Z
    18a4:	28 60       	ori	r18, 0x08	; 8
    18a6:	fc 01       	movw	r30, r24
    18a8:	20 83       	st	Z, r18
}
    18aa:	00 00       	nop
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	08 95       	ret

000018ba <UART_receiveByte>:

uint8 UART_receiveByte(void)
{
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)); /* wait until RXC  flag be 1 it means that there is data not read */
    18c2:	00 00       	nop
    18c4:	8b e2       	ldi	r24, 0x2B	; 43
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	fc 01       	movw	r30, r24
    18ca:	80 81       	ld	r24, Z
    18cc:	88 23       	and	r24, r24
    18ce:	d4 f7       	brge	.-12     	; 0x18c4 <UART_receiveByte+0xa>

	return UDR;/* read and return RXC flag to zero */
    18d0:	8c e2       	ldi	r24, 0x2C	; 44
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	fc 01       	movw	r30, r24
    18d6:	80 81       	ld	r24, Z
}
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	08 95       	ret

000018de <UART_sendByte>:
void UART_sendByte(const uint8 data)
{
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	1f 92       	push	r1
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
    18ea:	8c e2       	ldi	r24, 0x2C	; 44
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	29 81       	ldd	r18, Y+1	; 0x01
    18f0:	fc 01       	movw	r30, r24
    18f2:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(UCSRA,TXC));//wait until send data txc =1;
    18f4:	00 00       	nop
    18f6:	8b e2       	ldi	r24, 0x2B	; 43
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	fc 01       	movw	r30, r24
    18fc:	80 81       	ld	r24, Z
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	80 74       	andi	r24, 0x40	; 64
    1904:	99 27       	eor	r25, r25
    1906:	89 2b       	or	r24, r25
    1908:	b1 f3       	breq	.-20     	; 0x18f6 <UART_sendByte+0x18>
	SET_BIT(UCSRA,TXC); //clear the flag as it doesnt clear automatically as ISR
    190a:	8b e2       	ldi	r24, 0x2B	; 43
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	2b e2       	ldi	r18, 0x2B	; 43
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	f9 01       	movw	r30, r18
    1914:	20 81       	ld	r18, Z
    1916:	20 64       	ori	r18, 0x40	; 64
    1918:	fc 01       	movw	r30, r24
    191a:	20 83       	st	Z, r18
	//while(BIT_IS_CLEAR(UCSRA,UDRE)){}
		/* Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now */
	//	UDR = data;
}
    191c:	00 00       	nop
    191e:	0f 90       	pop	r0
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	08 95       	ret

00001926 <UART_sendString>:
void UART_sendString(uint8 *str)
{
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	00 d0       	rcall	.+0      	; 0x192c <UART_sendString+0x6>
    192c:	1f 92       	push	r1
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	9b 83       	std	Y+3, r25	; 0x03
    1934:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1936:	19 82       	std	Y+1, r1	; 0x01
		while(str[i] != '\0')
    1938:	0e c0       	rjmp	.+28     	; 0x1956 <UART_sendString+0x30>
		{
			UART_sendByte(str[i]);
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	88 2f       	mov	r24, r24
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	2a 81       	ldd	r18, Y+2	; 0x02
    1942:	3b 81       	ldd	r19, Y+3	; 0x03
    1944:	82 0f       	add	r24, r18
    1946:	93 1f       	adc	r25, r19
    1948:	fc 01       	movw	r30, r24
    194a:	80 81       	ld	r24, Z
    194c:	0e 94 6f 0c 	call	0x18de	; 0x18de <UART_sendByte>
			i++;
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	8f 5f       	subi	r24, 0xFF	; 255
    1954:	89 83       	std	Y+1, r24	; 0x01
	//	UDR = data;
}
void UART_sendString(uint8 *str)
{
	uint8 i = 0;
		while(str[i] != '\0')
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	88 2f       	mov	r24, r24
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	2a 81       	ldd	r18, Y+2	; 0x02
    195e:	3b 81       	ldd	r19, Y+3	; 0x03
    1960:	82 0f       	add	r24, r18
    1962:	93 1f       	adc	r25, r19
    1964:	fc 01       	movw	r30, r24
    1966:	80 81       	ld	r24, Z
    1968:	88 23       	and	r24, r24
    196a:	39 f7       	brne	.-50     	; 0x193a <UART_sendString+0x14>
		{
			UART_sendByte(str[i]);
			i++;
		}
	UART_sendByte('#');
    196c:	83 e2       	ldi	r24, 0x23	; 35
    196e:	0e 94 6f 0c 	call	0x18de	; 0x18de <UART_sendByte>

}
    1972:	00 00       	nop
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	08 95       	ret

00001980 <UART_receiveString>:
void UART_receiveString(uint8 *str)
{
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	00 d0       	rcall	.+0      	; 0x198a <UART_receiveString+0xa>
    198a:	1f 92       	push	r1
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	9b 83       	std	Y+3, r25	; 0x03
    1992:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1994:	19 82       	std	Y+1, r1	; 0x01
		str[i] = UART_receiveByte();
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	88 2f       	mov	r24, r24
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	2a 81       	ldd	r18, Y+2	; 0x02
    199e:	3b 81       	ldd	r19, Y+3	; 0x03
    19a0:	89 01       	movw	r16, r18
    19a2:	08 0f       	add	r16, r24
    19a4:	19 1f       	adc	r17, r25
    19a6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <UART_receiveByte>
    19aa:	f8 01       	movw	r30, r16
    19ac:	80 83       	st	Z, r24
		while(str[i] != '#')
    19ae:	0f c0       	rjmp	.+30     	; 0x19ce <UART_receiveString+0x4e>
		{
			i++;
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	8f 5f       	subi	r24, 0xFF	; 255
    19b4:	89 83       	std	Y+1, r24	; 0x01
			str[i] = UART_receiveByte();
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	88 2f       	mov	r24, r24
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	2a 81       	ldd	r18, Y+2	; 0x02
    19be:	3b 81       	ldd	r19, Y+3	; 0x03
    19c0:	89 01       	movw	r16, r18
    19c2:	08 0f       	add	r16, r24
    19c4:	19 1f       	adc	r17, r25
    19c6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <UART_receiveByte>
    19ca:	f8 01       	movw	r30, r16
    19cc:	80 83       	st	Z, r24
}
void UART_receiveString(uint8 *str)
{
	uint8 i = 0;
		str[i] = UART_receiveByte();
		while(str[i] != '#')
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	88 2f       	mov	r24, r24
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	2a 81       	ldd	r18, Y+2	; 0x02
    19d6:	3b 81       	ldd	r19, Y+3	; 0x03
    19d8:	82 0f       	add	r24, r18
    19da:	93 1f       	adc	r25, r19
    19dc:	fc 01       	movw	r30, r24
    19de:	80 81       	ld	r24, Z
    19e0:	83 32       	cpi	r24, 0x23	; 35
    19e2:	31 f7       	brne	.-52     	; 0x19b0 <UART_receiveString+0x30>
		{
			i++;
			str[i] = UART_receiveByte();
		}
		str[i] = '\0';
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	2a 81       	ldd	r18, Y+2	; 0x02
    19ec:	3b 81       	ldd	r19, Y+3	; 0x03
    19ee:	82 0f       	add	r24, r18
    19f0:	93 1f       	adc	r25, r19
    19f2:	fc 01       	movw	r30, r24
    19f4:	10 82       	st	Z, r1
}
    19f6:	00 00       	nop
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	0f 91       	pop	r16
    1a06:	08 95       	ret

00001a08 <__udivmodsi4>:
    1a08:	a1 e2       	ldi	r26, 0x21	; 33
    1a0a:	1a 2e       	mov	r1, r26
    1a0c:	aa 1b       	sub	r26, r26
    1a0e:	bb 1b       	sub	r27, r27
    1a10:	fd 01       	movw	r30, r26
    1a12:	0d c0       	rjmp	.+26     	; 0x1a2e <__udivmodsi4_ep>

00001a14 <__udivmodsi4_loop>:
    1a14:	aa 1f       	adc	r26, r26
    1a16:	bb 1f       	adc	r27, r27
    1a18:	ee 1f       	adc	r30, r30
    1a1a:	ff 1f       	adc	r31, r31
    1a1c:	a2 17       	cp	r26, r18
    1a1e:	b3 07       	cpc	r27, r19
    1a20:	e4 07       	cpc	r30, r20
    1a22:	f5 07       	cpc	r31, r21
    1a24:	20 f0       	brcs	.+8      	; 0x1a2e <__udivmodsi4_ep>
    1a26:	a2 1b       	sub	r26, r18
    1a28:	b3 0b       	sbc	r27, r19
    1a2a:	e4 0b       	sbc	r30, r20
    1a2c:	f5 0b       	sbc	r31, r21

00001a2e <__udivmodsi4_ep>:
    1a2e:	66 1f       	adc	r22, r22
    1a30:	77 1f       	adc	r23, r23
    1a32:	88 1f       	adc	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	1a 94       	dec	r1
    1a38:	69 f7       	brne	.-38     	; 0x1a14 <__udivmodsi4_loop>
    1a3a:	60 95       	com	r22
    1a3c:	70 95       	com	r23
    1a3e:	80 95       	com	r24
    1a40:	90 95       	com	r25
    1a42:	9b 01       	movw	r18, r22
    1a44:	ac 01       	movw	r20, r24
    1a46:	bd 01       	movw	r22, r26
    1a48:	cf 01       	movw	r24, r30
    1a4a:	08 95       	ret

00001a4c <__subsf3>:
    1a4c:	50 58       	subi	r21, 0x80	; 128

00001a4e <__addsf3>:
    1a4e:	bb 27       	eor	r27, r27
    1a50:	aa 27       	eor	r26, r26
    1a52:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__addsf3x>
    1a56:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_round>
    1a5a:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__fp_pscA>
    1a5e:	38 f0       	brcs	.+14     	; 0x1a6e <__addsf3+0x20>
    1a60:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__fp_pscB>
    1a64:	20 f0       	brcs	.+8      	; 0x1a6e <__addsf3+0x20>
    1a66:	39 f4       	brne	.+14     	; 0x1a76 <__addsf3+0x28>
    1a68:	9f 3f       	cpi	r25, 0xFF	; 255
    1a6a:	19 f4       	brne	.+6      	; 0x1a72 <__addsf3+0x24>
    1a6c:	26 f4       	brtc	.+8      	; 0x1a76 <__addsf3+0x28>
    1a6e:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__fp_nan>
    1a72:	0e f4       	brtc	.+2      	; 0x1a76 <__addsf3+0x28>
    1a74:	e0 95       	com	r30
    1a76:	e7 fb       	bst	r30, 7
    1a78:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__fp_inf>

00001a7c <__addsf3x>:
    1a7c:	e9 2f       	mov	r30, r25
    1a7e:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fp_split3>
    1a82:	58 f3       	brcs	.-42     	; 0x1a5a <__addsf3+0xc>
    1a84:	ba 17       	cp	r27, r26
    1a86:	62 07       	cpc	r22, r18
    1a88:	73 07       	cpc	r23, r19
    1a8a:	84 07       	cpc	r24, r20
    1a8c:	95 07       	cpc	r25, r21
    1a8e:	20 f0       	brcs	.+8      	; 0x1a98 <__addsf3x+0x1c>
    1a90:	79 f4       	brne	.+30     	; 0x1ab0 <__addsf3x+0x34>
    1a92:	a6 f5       	brtc	.+104    	; 0x1afc <__addsf3x+0x80>
    1a94:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__fp_zero>
    1a98:	0e f4       	brtc	.+2      	; 0x1a9c <__addsf3x+0x20>
    1a9a:	e0 95       	com	r30
    1a9c:	0b 2e       	mov	r0, r27
    1a9e:	ba 2f       	mov	r27, r26
    1aa0:	a0 2d       	mov	r26, r0
    1aa2:	0b 01       	movw	r0, r22
    1aa4:	b9 01       	movw	r22, r18
    1aa6:	90 01       	movw	r18, r0
    1aa8:	0c 01       	movw	r0, r24
    1aaa:	ca 01       	movw	r24, r20
    1aac:	a0 01       	movw	r20, r0
    1aae:	11 24       	eor	r1, r1
    1ab0:	ff 27       	eor	r31, r31
    1ab2:	59 1b       	sub	r21, r25
    1ab4:	99 f0       	breq	.+38     	; 0x1adc <__addsf3x+0x60>
    1ab6:	59 3f       	cpi	r21, 0xF9	; 249
    1ab8:	50 f4       	brcc	.+20     	; 0x1ace <__addsf3x+0x52>
    1aba:	50 3e       	cpi	r21, 0xE0	; 224
    1abc:	68 f1       	brcs	.+90     	; 0x1b18 <__addsf3x+0x9c>
    1abe:	1a 16       	cp	r1, r26
    1ac0:	f0 40       	sbci	r31, 0x00	; 0
    1ac2:	a2 2f       	mov	r26, r18
    1ac4:	23 2f       	mov	r18, r19
    1ac6:	34 2f       	mov	r19, r20
    1ac8:	44 27       	eor	r20, r20
    1aca:	58 5f       	subi	r21, 0xF8	; 248
    1acc:	f3 cf       	rjmp	.-26     	; 0x1ab4 <__addsf3x+0x38>
    1ace:	46 95       	lsr	r20
    1ad0:	37 95       	ror	r19
    1ad2:	27 95       	ror	r18
    1ad4:	a7 95       	ror	r26
    1ad6:	f0 40       	sbci	r31, 0x00	; 0
    1ad8:	53 95       	inc	r21
    1ada:	c9 f7       	brne	.-14     	; 0x1ace <__addsf3x+0x52>
    1adc:	7e f4       	brtc	.+30     	; 0x1afc <__addsf3x+0x80>
    1ade:	1f 16       	cp	r1, r31
    1ae0:	ba 0b       	sbc	r27, r26
    1ae2:	62 0b       	sbc	r22, r18
    1ae4:	73 0b       	sbc	r23, r19
    1ae6:	84 0b       	sbc	r24, r20
    1ae8:	ba f0       	brmi	.+46     	; 0x1b18 <__addsf3x+0x9c>
    1aea:	91 50       	subi	r25, 0x01	; 1
    1aec:	a1 f0       	breq	.+40     	; 0x1b16 <__addsf3x+0x9a>
    1aee:	ff 0f       	add	r31, r31
    1af0:	bb 1f       	adc	r27, r27
    1af2:	66 1f       	adc	r22, r22
    1af4:	77 1f       	adc	r23, r23
    1af6:	88 1f       	adc	r24, r24
    1af8:	c2 f7       	brpl	.-16     	; 0x1aea <__addsf3x+0x6e>
    1afa:	0e c0       	rjmp	.+28     	; 0x1b18 <__addsf3x+0x9c>
    1afc:	ba 0f       	add	r27, r26
    1afe:	62 1f       	adc	r22, r18
    1b00:	73 1f       	adc	r23, r19
    1b02:	84 1f       	adc	r24, r20
    1b04:	48 f4       	brcc	.+18     	; 0x1b18 <__addsf3x+0x9c>
    1b06:	87 95       	ror	r24
    1b08:	77 95       	ror	r23
    1b0a:	67 95       	ror	r22
    1b0c:	b7 95       	ror	r27
    1b0e:	f7 95       	ror	r31
    1b10:	9e 3f       	cpi	r25, 0xFE	; 254
    1b12:	08 f0       	brcs	.+2      	; 0x1b16 <__addsf3x+0x9a>
    1b14:	b0 cf       	rjmp	.-160    	; 0x1a76 <__addsf3+0x28>
    1b16:	93 95       	inc	r25
    1b18:	88 0f       	add	r24, r24
    1b1a:	08 f0       	brcs	.+2      	; 0x1b1e <__addsf3x+0xa2>
    1b1c:	99 27       	eor	r25, r25
    1b1e:	ee 0f       	add	r30, r30
    1b20:	97 95       	ror	r25
    1b22:	87 95       	ror	r24
    1b24:	08 95       	ret

00001b26 <__cmpsf2>:
    1b26:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__fp_cmp>
    1b2a:	08 f4       	brcc	.+2      	; 0x1b2e <__cmpsf2+0x8>
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	08 95       	ret

00001b30 <__divsf3>:
    1b30:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__divsf3x>
    1b34:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_round>
    1b38:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__fp_pscB>
    1b3c:	58 f0       	brcs	.+22     	; 0x1b54 <__divsf3+0x24>
    1b3e:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__fp_pscA>
    1b42:	40 f0       	brcs	.+16     	; 0x1b54 <__divsf3+0x24>
    1b44:	29 f4       	brne	.+10     	; 0x1b50 <__divsf3+0x20>
    1b46:	5f 3f       	cpi	r21, 0xFF	; 255
    1b48:	29 f0       	breq	.+10     	; 0x1b54 <__divsf3+0x24>
    1b4a:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__fp_inf>
    1b4e:	51 11       	cpse	r21, r1
    1b50:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__fp_szero>
    1b54:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__fp_nan>

00001b58 <__divsf3x>:
    1b58:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fp_split3>
    1b5c:	68 f3       	brcs	.-38     	; 0x1b38 <__divsf3+0x8>

00001b5e <__divsf3_pse>:
    1b5e:	99 23       	and	r25, r25
    1b60:	b1 f3       	breq	.-20     	; 0x1b4e <__divsf3+0x1e>
    1b62:	55 23       	and	r21, r21
    1b64:	91 f3       	breq	.-28     	; 0x1b4a <__divsf3+0x1a>
    1b66:	95 1b       	sub	r25, r21
    1b68:	55 0b       	sbc	r21, r21
    1b6a:	bb 27       	eor	r27, r27
    1b6c:	aa 27       	eor	r26, r26
    1b6e:	62 17       	cp	r22, r18
    1b70:	73 07       	cpc	r23, r19
    1b72:	84 07       	cpc	r24, r20
    1b74:	38 f0       	brcs	.+14     	; 0x1b84 <__divsf3_pse+0x26>
    1b76:	9f 5f       	subi	r25, 0xFF	; 255
    1b78:	5f 4f       	sbci	r21, 0xFF	; 255
    1b7a:	22 0f       	add	r18, r18
    1b7c:	33 1f       	adc	r19, r19
    1b7e:	44 1f       	adc	r20, r20
    1b80:	aa 1f       	adc	r26, r26
    1b82:	a9 f3       	breq	.-22     	; 0x1b6e <__divsf3_pse+0x10>
    1b84:	35 d0       	rcall	.+106    	; 0x1bf0 <__divsf3_pse+0x92>
    1b86:	0e 2e       	mov	r0, r30
    1b88:	3a f0       	brmi	.+14     	; 0x1b98 <__divsf3_pse+0x3a>
    1b8a:	e0 e8       	ldi	r30, 0x80	; 128
    1b8c:	32 d0       	rcall	.+100    	; 0x1bf2 <__divsf3_pse+0x94>
    1b8e:	91 50       	subi	r25, 0x01	; 1
    1b90:	50 40       	sbci	r21, 0x00	; 0
    1b92:	e6 95       	lsr	r30
    1b94:	00 1c       	adc	r0, r0
    1b96:	ca f7       	brpl	.-14     	; 0x1b8a <__divsf3_pse+0x2c>
    1b98:	2b d0       	rcall	.+86     	; 0x1bf0 <__divsf3_pse+0x92>
    1b9a:	fe 2f       	mov	r31, r30
    1b9c:	29 d0       	rcall	.+82     	; 0x1bf0 <__divsf3_pse+0x92>
    1b9e:	66 0f       	add	r22, r22
    1ba0:	77 1f       	adc	r23, r23
    1ba2:	88 1f       	adc	r24, r24
    1ba4:	bb 1f       	adc	r27, r27
    1ba6:	26 17       	cp	r18, r22
    1ba8:	37 07       	cpc	r19, r23
    1baa:	48 07       	cpc	r20, r24
    1bac:	ab 07       	cpc	r26, r27
    1bae:	b0 e8       	ldi	r27, 0x80	; 128
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <__divsf3_pse+0x56>
    1bb2:	bb 0b       	sbc	r27, r27
    1bb4:	80 2d       	mov	r24, r0
    1bb6:	bf 01       	movw	r22, r30
    1bb8:	ff 27       	eor	r31, r31
    1bba:	93 58       	subi	r25, 0x83	; 131
    1bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bbe:	3a f0       	brmi	.+14     	; 0x1bce <__divsf3_pse+0x70>
    1bc0:	9e 3f       	cpi	r25, 0xFE	; 254
    1bc2:	51 05       	cpc	r21, r1
    1bc4:	78 f0       	brcs	.+30     	; 0x1be4 <__divsf3_pse+0x86>
    1bc6:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__fp_inf>
    1bca:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__fp_szero>
    1bce:	5f 3f       	cpi	r21, 0xFF	; 255
    1bd0:	e4 f3       	brlt	.-8      	; 0x1bca <__divsf3_pse+0x6c>
    1bd2:	98 3e       	cpi	r25, 0xE8	; 232
    1bd4:	d4 f3       	brlt	.-12     	; 0x1bca <__divsf3_pse+0x6c>
    1bd6:	86 95       	lsr	r24
    1bd8:	77 95       	ror	r23
    1bda:	67 95       	ror	r22
    1bdc:	b7 95       	ror	r27
    1bde:	f7 95       	ror	r31
    1be0:	9f 5f       	subi	r25, 0xFF	; 255
    1be2:	c9 f7       	brne	.-14     	; 0x1bd6 <__divsf3_pse+0x78>
    1be4:	88 0f       	add	r24, r24
    1be6:	91 1d       	adc	r25, r1
    1be8:	96 95       	lsr	r25
    1bea:	87 95       	ror	r24
    1bec:	97 f9       	bld	r25, 7
    1bee:	08 95       	ret
    1bf0:	e1 e0       	ldi	r30, 0x01	; 1
    1bf2:	66 0f       	add	r22, r22
    1bf4:	77 1f       	adc	r23, r23
    1bf6:	88 1f       	adc	r24, r24
    1bf8:	bb 1f       	adc	r27, r27
    1bfa:	62 17       	cp	r22, r18
    1bfc:	73 07       	cpc	r23, r19
    1bfe:	84 07       	cpc	r24, r20
    1c00:	ba 07       	cpc	r27, r26
    1c02:	20 f0       	brcs	.+8      	; 0x1c0c <__divsf3_pse+0xae>
    1c04:	62 1b       	sub	r22, r18
    1c06:	73 0b       	sbc	r23, r19
    1c08:	84 0b       	sbc	r24, r20
    1c0a:	ba 0b       	sbc	r27, r26
    1c0c:	ee 1f       	adc	r30, r30
    1c0e:	88 f7       	brcc	.-30     	; 0x1bf2 <__divsf3_pse+0x94>
    1c10:	e0 95       	com	r30
    1c12:	08 95       	ret

00001c14 <__fixunssfsi>:
    1c14:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__fp_splitA>
    1c18:	88 f0       	brcs	.+34     	; 0x1c3c <__fixunssfsi+0x28>
    1c1a:	9f 57       	subi	r25, 0x7F	; 127
    1c1c:	98 f0       	brcs	.+38     	; 0x1c44 <__fixunssfsi+0x30>
    1c1e:	b9 2f       	mov	r27, r25
    1c20:	99 27       	eor	r25, r25
    1c22:	b7 51       	subi	r27, 0x17	; 23
    1c24:	b0 f0       	brcs	.+44     	; 0x1c52 <__fixunssfsi+0x3e>
    1c26:	e1 f0       	breq	.+56     	; 0x1c60 <__fixunssfsi+0x4c>
    1c28:	66 0f       	add	r22, r22
    1c2a:	77 1f       	adc	r23, r23
    1c2c:	88 1f       	adc	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	1a f0       	brmi	.+6      	; 0x1c38 <__fixunssfsi+0x24>
    1c32:	ba 95       	dec	r27
    1c34:	c9 f7       	brne	.-14     	; 0x1c28 <__fixunssfsi+0x14>
    1c36:	14 c0       	rjmp	.+40     	; 0x1c60 <__fixunssfsi+0x4c>
    1c38:	b1 30       	cpi	r27, 0x01	; 1
    1c3a:	91 f0       	breq	.+36     	; 0x1c60 <__fixunssfsi+0x4c>
    1c3c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__fp_zero>
    1c40:	b1 e0       	ldi	r27, 0x01	; 1
    1c42:	08 95       	ret
    1c44:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__fp_zero>
    1c48:	67 2f       	mov	r22, r23
    1c4a:	78 2f       	mov	r23, r24
    1c4c:	88 27       	eor	r24, r24
    1c4e:	b8 5f       	subi	r27, 0xF8	; 248
    1c50:	39 f0       	breq	.+14     	; 0x1c60 <__fixunssfsi+0x4c>
    1c52:	b9 3f       	cpi	r27, 0xF9	; 249
    1c54:	cc f3       	brlt	.-14     	; 0x1c48 <__fixunssfsi+0x34>
    1c56:	86 95       	lsr	r24
    1c58:	77 95       	ror	r23
    1c5a:	67 95       	ror	r22
    1c5c:	b3 95       	inc	r27
    1c5e:	d9 f7       	brne	.-10     	; 0x1c56 <__fixunssfsi+0x42>
    1c60:	3e f4       	brtc	.+14     	; 0x1c70 <__fixunssfsi+0x5c>
    1c62:	90 95       	com	r25
    1c64:	80 95       	com	r24
    1c66:	70 95       	com	r23
    1c68:	61 95       	neg	r22
    1c6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c70:	08 95       	ret

00001c72 <__floatunsisf>:
    1c72:	e8 94       	clt
    1c74:	09 c0       	rjmp	.+18     	; 0x1c88 <__floatsisf+0x12>

00001c76 <__floatsisf>:
    1c76:	97 fb       	bst	r25, 7
    1c78:	3e f4       	brtc	.+14     	; 0x1c88 <__floatsisf+0x12>
    1c7a:	90 95       	com	r25
    1c7c:	80 95       	com	r24
    1c7e:	70 95       	com	r23
    1c80:	61 95       	neg	r22
    1c82:	7f 4f       	sbci	r23, 0xFF	; 255
    1c84:	8f 4f       	sbci	r24, 0xFF	; 255
    1c86:	9f 4f       	sbci	r25, 0xFF	; 255
    1c88:	99 23       	and	r25, r25
    1c8a:	a9 f0       	breq	.+42     	; 0x1cb6 <__floatsisf+0x40>
    1c8c:	f9 2f       	mov	r31, r25
    1c8e:	96 e9       	ldi	r25, 0x96	; 150
    1c90:	bb 27       	eor	r27, r27
    1c92:	93 95       	inc	r25
    1c94:	f6 95       	lsr	r31
    1c96:	87 95       	ror	r24
    1c98:	77 95       	ror	r23
    1c9a:	67 95       	ror	r22
    1c9c:	b7 95       	ror	r27
    1c9e:	f1 11       	cpse	r31, r1
    1ca0:	f8 cf       	rjmp	.-16     	; 0x1c92 <__floatsisf+0x1c>
    1ca2:	fa f4       	brpl	.+62     	; 0x1ce2 <__floatsisf+0x6c>
    1ca4:	bb 0f       	add	r27, r27
    1ca6:	11 f4       	brne	.+4      	; 0x1cac <__floatsisf+0x36>
    1ca8:	60 ff       	sbrs	r22, 0
    1caa:	1b c0       	rjmp	.+54     	; 0x1ce2 <__floatsisf+0x6c>
    1cac:	6f 5f       	subi	r22, 0xFF	; 255
    1cae:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb4:	16 c0       	rjmp	.+44     	; 0x1ce2 <__floatsisf+0x6c>
    1cb6:	88 23       	and	r24, r24
    1cb8:	11 f0       	breq	.+4      	; 0x1cbe <__floatsisf+0x48>
    1cba:	96 e9       	ldi	r25, 0x96	; 150
    1cbc:	11 c0       	rjmp	.+34     	; 0x1ce0 <__floatsisf+0x6a>
    1cbe:	77 23       	and	r23, r23
    1cc0:	21 f0       	breq	.+8      	; 0x1cca <__floatsisf+0x54>
    1cc2:	9e e8       	ldi	r25, 0x8E	; 142
    1cc4:	87 2f       	mov	r24, r23
    1cc6:	76 2f       	mov	r23, r22
    1cc8:	05 c0       	rjmp	.+10     	; 0x1cd4 <__floatsisf+0x5e>
    1cca:	66 23       	and	r22, r22
    1ccc:	71 f0       	breq	.+28     	; 0x1cea <__floatsisf+0x74>
    1cce:	96 e8       	ldi	r25, 0x86	; 134
    1cd0:	86 2f       	mov	r24, r22
    1cd2:	70 e0       	ldi	r23, 0x00	; 0
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	2a f0       	brmi	.+10     	; 0x1ce2 <__floatsisf+0x6c>
    1cd8:	9a 95       	dec	r25
    1cda:	66 0f       	add	r22, r22
    1cdc:	77 1f       	adc	r23, r23
    1cde:	88 1f       	adc	r24, r24
    1ce0:	da f7       	brpl	.-10     	; 0x1cd8 <__floatsisf+0x62>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	96 95       	lsr	r25
    1ce6:	87 95       	ror	r24
    1ce8:	97 f9       	bld	r25, 7
    1cea:	08 95       	ret

00001cec <__fp_cmp>:
    1cec:	99 0f       	add	r25, r25
    1cee:	00 08       	sbc	r0, r0
    1cf0:	55 0f       	add	r21, r21
    1cf2:	aa 0b       	sbc	r26, r26
    1cf4:	e0 e8       	ldi	r30, 0x80	; 128
    1cf6:	fe ef       	ldi	r31, 0xFE	; 254
    1cf8:	16 16       	cp	r1, r22
    1cfa:	17 06       	cpc	r1, r23
    1cfc:	e8 07       	cpc	r30, r24
    1cfe:	f9 07       	cpc	r31, r25
    1d00:	c0 f0       	brcs	.+48     	; 0x1d32 <__fp_cmp+0x46>
    1d02:	12 16       	cp	r1, r18
    1d04:	13 06       	cpc	r1, r19
    1d06:	e4 07       	cpc	r30, r20
    1d08:	f5 07       	cpc	r31, r21
    1d0a:	98 f0       	brcs	.+38     	; 0x1d32 <__fp_cmp+0x46>
    1d0c:	62 1b       	sub	r22, r18
    1d0e:	73 0b       	sbc	r23, r19
    1d10:	84 0b       	sbc	r24, r20
    1d12:	95 0b       	sbc	r25, r21
    1d14:	39 f4       	brne	.+14     	; 0x1d24 <__fp_cmp+0x38>
    1d16:	0a 26       	eor	r0, r26
    1d18:	61 f0       	breq	.+24     	; 0x1d32 <__fp_cmp+0x46>
    1d1a:	23 2b       	or	r18, r19
    1d1c:	24 2b       	or	r18, r20
    1d1e:	25 2b       	or	r18, r21
    1d20:	21 f4       	brne	.+8      	; 0x1d2a <__fp_cmp+0x3e>
    1d22:	08 95       	ret
    1d24:	0a 26       	eor	r0, r26
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <__fp_cmp+0x3e>
    1d28:	a1 40       	sbci	r26, 0x01	; 1
    1d2a:	a6 95       	lsr	r26
    1d2c:	8f ef       	ldi	r24, 0xFF	; 255
    1d2e:	81 1d       	adc	r24, r1
    1d30:	81 1d       	adc	r24, r1
    1d32:	08 95       	ret

00001d34 <__fp_inf>:
    1d34:	97 f9       	bld	r25, 7
    1d36:	9f 67       	ori	r25, 0x7F	; 127
    1d38:	80 e8       	ldi	r24, 0x80	; 128
    1d3a:	70 e0       	ldi	r23, 0x00	; 0
    1d3c:	60 e0       	ldi	r22, 0x00	; 0
    1d3e:	08 95       	ret

00001d40 <__fp_nan>:
    1d40:	9f ef       	ldi	r25, 0xFF	; 255
    1d42:	80 ec       	ldi	r24, 0xC0	; 192
    1d44:	08 95       	ret

00001d46 <__fp_pscA>:
    1d46:	00 24       	eor	r0, r0
    1d48:	0a 94       	dec	r0
    1d4a:	16 16       	cp	r1, r22
    1d4c:	17 06       	cpc	r1, r23
    1d4e:	18 06       	cpc	r1, r24
    1d50:	09 06       	cpc	r0, r25
    1d52:	08 95       	ret

00001d54 <__fp_pscB>:
    1d54:	00 24       	eor	r0, r0
    1d56:	0a 94       	dec	r0
    1d58:	12 16       	cp	r1, r18
    1d5a:	13 06       	cpc	r1, r19
    1d5c:	14 06       	cpc	r1, r20
    1d5e:	05 06       	cpc	r0, r21
    1d60:	08 95       	ret

00001d62 <__fp_round>:
    1d62:	09 2e       	mov	r0, r25
    1d64:	03 94       	inc	r0
    1d66:	00 0c       	add	r0, r0
    1d68:	11 f4       	brne	.+4      	; 0x1d6e <__fp_round+0xc>
    1d6a:	88 23       	and	r24, r24
    1d6c:	52 f0       	brmi	.+20     	; 0x1d82 <__fp_round+0x20>
    1d6e:	bb 0f       	add	r27, r27
    1d70:	40 f4       	brcc	.+16     	; 0x1d82 <__fp_round+0x20>
    1d72:	bf 2b       	or	r27, r31
    1d74:	11 f4       	brne	.+4      	; 0x1d7a <__fp_round+0x18>
    1d76:	60 ff       	sbrs	r22, 0
    1d78:	04 c0       	rjmp	.+8      	; 0x1d82 <__fp_round+0x20>
    1d7a:	6f 5f       	subi	r22, 0xFF	; 255
    1d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d80:	9f 4f       	sbci	r25, 0xFF	; 255
    1d82:	08 95       	ret

00001d84 <__fp_split3>:
    1d84:	57 fd       	sbrc	r21, 7
    1d86:	90 58       	subi	r25, 0x80	; 128
    1d88:	44 0f       	add	r20, r20
    1d8a:	55 1f       	adc	r21, r21
    1d8c:	59 f0       	breq	.+22     	; 0x1da4 <__fp_splitA+0x10>
    1d8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d90:	71 f0       	breq	.+28     	; 0x1dae <__fp_splitA+0x1a>
    1d92:	47 95       	ror	r20

00001d94 <__fp_splitA>:
    1d94:	88 0f       	add	r24, r24
    1d96:	97 fb       	bst	r25, 7
    1d98:	99 1f       	adc	r25, r25
    1d9a:	61 f0       	breq	.+24     	; 0x1db4 <__fp_splitA+0x20>
    1d9c:	9f 3f       	cpi	r25, 0xFF	; 255
    1d9e:	79 f0       	breq	.+30     	; 0x1dbe <__fp_splitA+0x2a>
    1da0:	87 95       	ror	r24
    1da2:	08 95       	ret
    1da4:	12 16       	cp	r1, r18
    1da6:	13 06       	cpc	r1, r19
    1da8:	14 06       	cpc	r1, r20
    1daa:	55 1f       	adc	r21, r21
    1dac:	f2 cf       	rjmp	.-28     	; 0x1d92 <__fp_split3+0xe>
    1dae:	46 95       	lsr	r20
    1db0:	f1 df       	rcall	.-30     	; 0x1d94 <__fp_splitA>
    1db2:	08 c0       	rjmp	.+16     	; 0x1dc4 <__fp_splitA+0x30>
    1db4:	16 16       	cp	r1, r22
    1db6:	17 06       	cpc	r1, r23
    1db8:	18 06       	cpc	r1, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	f1 cf       	rjmp	.-30     	; 0x1da0 <__fp_splitA+0xc>
    1dbe:	86 95       	lsr	r24
    1dc0:	71 05       	cpc	r23, r1
    1dc2:	61 05       	cpc	r22, r1
    1dc4:	08 94       	sec
    1dc6:	08 95       	ret

00001dc8 <__fp_zero>:
    1dc8:	e8 94       	clt

00001dca <__fp_szero>:
    1dca:	bb 27       	eor	r27, r27
    1dcc:	66 27       	eor	r22, r22
    1dce:	77 27       	eor	r23, r23
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	97 f9       	bld	r25, 7
    1dd4:	08 95       	ret

00001dd6 <__gesf2>:
    1dd6:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__fp_cmp>
    1dda:	08 f4       	brcc	.+2      	; 0x1dde <__gesf2+0x8>
    1ddc:	8f ef       	ldi	r24, 0xFF	; 255
    1dde:	08 95       	ret

00001de0 <__mulsf3>:
    1de0:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__mulsf3x>
    1de4:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_round>
    1de8:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__fp_pscA>
    1dec:	38 f0       	brcs	.+14     	; 0x1dfc <__mulsf3+0x1c>
    1dee:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__fp_pscB>
    1df2:	20 f0       	brcs	.+8      	; 0x1dfc <__mulsf3+0x1c>
    1df4:	95 23       	and	r25, r21
    1df6:	11 f0       	breq	.+4      	; 0x1dfc <__mulsf3+0x1c>
    1df8:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__fp_inf>
    1dfc:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__fp_nan>
    1e00:	11 24       	eor	r1, r1
    1e02:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__fp_szero>

00001e06 <__mulsf3x>:
    1e06:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fp_split3>
    1e0a:	70 f3       	brcs	.-36     	; 0x1de8 <__mulsf3+0x8>

00001e0c <__mulsf3_pse>:
    1e0c:	95 9f       	mul	r25, r21
    1e0e:	c1 f3       	breq	.-16     	; 0x1e00 <__mulsf3+0x20>
    1e10:	95 0f       	add	r25, r21
    1e12:	50 e0       	ldi	r21, 0x00	; 0
    1e14:	55 1f       	adc	r21, r21
    1e16:	62 9f       	mul	r22, r18
    1e18:	f0 01       	movw	r30, r0
    1e1a:	72 9f       	mul	r23, r18
    1e1c:	bb 27       	eor	r27, r27
    1e1e:	f0 0d       	add	r31, r0
    1e20:	b1 1d       	adc	r27, r1
    1e22:	63 9f       	mul	r22, r19
    1e24:	aa 27       	eor	r26, r26
    1e26:	f0 0d       	add	r31, r0
    1e28:	b1 1d       	adc	r27, r1
    1e2a:	aa 1f       	adc	r26, r26
    1e2c:	64 9f       	mul	r22, r20
    1e2e:	66 27       	eor	r22, r22
    1e30:	b0 0d       	add	r27, r0
    1e32:	a1 1d       	adc	r26, r1
    1e34:	66 1f       	adc	r22, r22
    1e36:	82 9f       	mul	r24, r18
    1e38:	22 27       	eor	r18, r18
    1e3a:	b0 0d       	add	r27, r0
    1e3c:	a1 1d       	adc	r26, r1
    1e3e:	62 1f       	adc	r22, r18
    1e40:	73 9f       	mul	r23, r19
    1e42:	b0 0d       	add	r27, r0
    1e44:	a1 1d       	adc	r26, r1
    1e46:	62 1f       	adc	r22, r18
    1e48:	83 9f       	mul	r24, r19
    1e4a:	a0 0d       	add	r26, r0
    1e4c:	61 1d       	adc	r22, r1
    1e4e:	22 1f       	adc	r18, r18
    1e50:	74 9f       	mul	r23, r20
    1e52:	33 27       	eor	r19, r19
    1e54:	a0 0d       	add	r26, r0
    1e56:	61 1d       	adc	r22, r1
    1e58:	23 1f       	adc	r18, r19
    1e5a:	84 9f       	mul	r24, r20
    1e5c:	60 0d       	add	r22, r0
    1e5e:	21 1d       	adc	r18, r1
    1e60:	82 2f       	mov	r24, r18
    1e62:	76 2f       	mov	r23, r22
    1e64:	6a 2f       	mov	r22, r26
    1e66:	11 24       	eor	r1, r1
    1e68:	9f 57       	subi	r25, 0x7F	; 127
    1e6a:	50 40       	sbci	r21, 0x00	; 0
    1e6c:	9a f0       	brmi	.+38     	; 0x1e94 <__mulsf3_pse+0x88>
    1e6e:	f1 f0       	breq	.+60     	; 0x1eac <__mulsf3_pse+0xa0>
    1e70:	88 23       	and	r24, r24
    1e72:	4a f0       	brmi	.+18     	; 0x1e86 <__mulsf3_pse+0x7a>
    1e74:	ee 0f       	add	r30, r30
    1e76:	ff 1f       	adc	r31, r31
    1e78:	bb 1f       	adc	r27, r27
    1e7a:	66 1f       	adc	r22, r22
    1e7c:	77 1f       	adc	r23, r23
    1e7e:	88 1f       	adc	r24, r24
    1e80:	91 50       	subi	r25, 0x01	; 1
    1e82:	50 40       	sbci	r21, 0x00	; 0
    1e84:	a9 f7       	brne	.-22     	; 0x1e70 <__mulsf3_pse+0x64>
    1e86:	9e 3f       	cpi	r25, 0xFE	; 254
    1e88:	51 05       	cpc	r21, r1
    1e8a:	80 f0       	brcs	.+32     	; 0x1eac <__mulsf3_pse+0xa0>
    1e8c:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__fp_inf>
    1e90:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__fp_szero>
    1e94:	5f 3f       	cpi	r21, 0xFF	; 255
    1e96:	e4 f3       	brlt	.-8      	; 0x1e90 <__mulsf3_pse+0x84>
    1e98:	98 3e       	cpi	r25, 0xE8	; 232
    1e9a:	d4 f3       	brlt	.-12     	; 0x1e90 <__mulsf3_pse+0x84>
    1e9c:	86 95       	lsr	r24
    1e9e:	77 95       	ror	r23
    1ea0:	67 95       	ror	r22
    1ea2:	b7 95       	ror	r27
    1ea4:	f7 95       	ror	r31
    1ea6:	e7 95       	ror	r30
    1ea8:	9f 5f       	subi	r25, 0xFF	; 255
    1eaa:	c1 f7       	brne	.-16     	; 0x1e9c <__mulsf3_pse+0x90>
    1eac:	fe 2b       	or	r31, r30
    1eae:	88 0f       	add	r24, r24
    1eb0:	91 1d       	adc	r25, r1
    1eb2:	96 95       	lsr	r25
    1eb4:	87 95       	ror	r24
    1eb6:	97 f9       	bld	r25, 7
    1eb8:	08 95       	ret

00001eba <pow>:
    1eba:	fa 01       	movw	r30, r20
    1ebc:	ee 0f       	add	r30, r30
    1ebe:	ff 1f       	adc	r31, r31
    1ec0:	30 96       	adiw	r30, 0x00	; 0
    1ec2:	21 05       	cpc	r18, r1
    1ec4:	31 05       	cpc	r19, r1
    1ec6:	a1 f1       	breq	.+104    	; 0x1f30 <pow+0x76>
    1ec8:	61 15       	cp	r22, r1
    1eca:	71 05       	cpc	r23, r1
    1ecc:	61 f4       	brne	.+24     	; 0x1ee6 <pow+0x2c>
    1ece:	80 38       	cpi	r24, 0x80	; 128
    1ed0:	bf e3       	ldi	r27, 0x3F	; 63
    1ed2:	9b 07       	cpc	r25, r27
    1ed4:	49 f1       	breq	.+82     	; 0x1f28 <pow+0x6e>
    1ed6:	68 94       	set
    1ed8:	90 38       	cpi	r25, 0x80	; 128
    1eda:	81 05       	cpc	r24, r1
    1edc:	61 f0       	breq	.+24     	; 0x1ef6 <pow+0x3c>
    1ede:	80 38       	cpi	r24, 0x80	; 128
    1ee0:	bf ef       	ldi	r27, 0xFF	; 255
    1ee2:	9b 07       	cpc	r25, r27
    1ee4:	41 f0       	breq	.+16     	; 0x1ef6 <pow+0x3c>
    1ee6:	99 23       	and	r25, r25
    1ee8:	4a f5       	brpl	.+82     	; 0x1f3c <pow+0x82>
    1eea:	ff 3f       	cpi	r31, 0xFF	; 255
    1eec:	e1 05       	cpc	r30, r1
    1eee:	31 05       	cpc	r19, r1
    1ef0:	21 05       	cpc	r18, r1
    1ef2:	19 f1       	breq	.+70     	; 0x1f3a <pow+0x80>
    1ef4:	e8 94       	clt
    1ef6:	08 94       	sec
    1ef8:	e7 95       	ror	r30
    1efa:	d9 01       	movw	r26, r18
    1efc:	aa 23       	and	r26, r26
    1efe:	29 f4       	brne	.+10     	; 0x1f0a <pow+0x50>
    1f00:	ab 2f       	mov	r26, r27
    1f02:	be 2f       	mov	r27, r30
    1f04:	f8 5f       	subi	r31, 0xF8	; 248
    1f06:	d0 f3       	brcs	.-12     	; 0x1efc <pow+0x42>
    1f08:	10 c0       	rjmp	.+32     	; 0x1f2a <pow+0x70>
    1f0a:	ff 5f       	subi	r31, 0xFF	; 255
    1f0c:	70 f4       	brcc	.+28     	; 0x1f2a <pow+0x70>
    1f0e:	a6 95       	lsr	r26
    1f10:	e0 f7       	brcc	.-8      	; 0x1f0a <pow+0x50>
    1f12:	f7 39       	cpi	r31, 0x97	; 151
    1f14:	50 f0       	brcs	.+20     	; 0x1f2a <pow+0x70>
    1f16:	19 f0       	breq	.+6      	; 0x1f1e <pow+0x64>
    1f18:	ff 3a       	cpi	r31, 0xAF	; 175
    1f1a:	38 f4       	brcc	.+14     	; 0x1f2a <pow+0x70>
    1f1c:	9f 77       	andi	r25, 0x7F	; 127
    1f1e:	9f 93       	push	r25
    1f20:	0d d0       	rcall	.+26     	; 0x1f3c <pow+0x82>
    1f22:	0f 90       	pop	r0
    1f24:	07 fc       	sbrc	r0, 7
    1f26:	90 58       	subi	r25, 0x80	; 128
    1f28:	08 95       	ret
    1f2a:	46 f0       	brts	.+16     	; 0x1f3c <pow+0x82>
    1f2c:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__fp_nan>
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	70 e0       	ldi	r23, 0x00	; 0
    1f34:	80 e8       	ldi	r24, 0x80	; 128
    1f36:	9f e3       	ldi	r25, 0x3F	; 63
    1f38:	08 95       	ret
    1f3a:	4f e7       	ldi	r20, 0x7F	; 127
    1f3c:	9f 77       	andi	r25, 0x7F	; 127
    1f3e:	5f 93       	push	r21
    1f40:	4f 93       	push	r20
    1f42:	3f 93       	push	r19
    1f44:	2f 93       	push	r18
    1f46:	0e 94 58 10 	call	0x20b0	; 0x20b0 <log>
    1f4a:	2f 91       	pop	r18
    1f4c:	3f 91       	pop	r19
    1f4e:	4f 91       	pop	r20
    1f50:	5f 91       	pop	r21
    1f52:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__mulsf3>
    1f56:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <exp>
    1f5a:	29 f4       	brne	.+10     	; 0x1f66 <pow+0xac>
    1f5c:	16 f0       	brts	.+4      	; 0x1f62 <pow+0xa8>
    1f5e:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__fp_inf>
    1f62:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__fp_zero>
    1f66:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__fp_nan>

00001f6a <exp>:
    1f6a:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__fp_splitA>
    1f6e:	a8 f3       	brcs	.-22     	; 0x1f5a <pow+0xa0>
    1f70:	96 38       	cpi	r25, 0x86	; 134
    1f72:	a0 f7       	brcc	.-24     	; 0x1f5c <pow+0xa2>
    1f74:	07 f8       	bld	r0, 7
    1f76:	0f 92       	push	r0
    1f78:	e8 94       	clt
    1f7a:	2b e3       	ldi	r18, 0x3B	; 59
    1f7c:	3a ea       	ldi	r19, 0xAA	; 170
    1f7e:	48 eb       	ldi	r20, 0xB8	; 184
    1f80:	5f e7       	ldi	r21, 0x7F	; 127
    1f82:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__mulsf3_pse>
    1f86:	0f 92       	push	r0
    1f88:	0f 92       	push	r0
    1f8a:	0f 92       	push	r0
    1f8c:	4d b7       	in	r20, 0x3d	; 61
    1f8e:	5e b7       	in	r21, 0x3e	; 62
    1f90:	0f 92       	push	r0
    1f92:	0e 94 a0 10 	call	0x2140	; 0x2140 <modf>
    1f96:	e4 e5       	ldi	r30, 0x54	; 84
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__fp_powser>
    1f9e:	4f 91       	pop	r20
    1fa0:	5f 91       	pop	r21
    1fa2:	ef 91       	pop	r30
    1fa4:	ff 91       	pop	r31
    1fa6:	e5 95       	asr	r30
    1fa8:	ee 1f       	adc	r30, r30
    1faa:	ff 1f       	adc	r31, r31
    1fac:	49 f0       	breq	.+18     	; 0x1fc0 <exp+0x56>
    1fae:	fe 57       	subi	r31, 0x7E	; 126
    1fb0:	e0 68       	ori	r30, 0x80	; 128
    1fb2:	44 27       	eor	r20, r20
    1fb4:	ee 0f       	add	r30, r30
    1fb6:	44 1f       	adc	r20, r20
    1fb8:	fa 95       	dec	r31
    1fba:	e1 f7       	brne	.-8      	; 0x1fb4 <exp+0x4a>
    1fbc:	41 95       	neg	r20
    1fbe:	55 0b       	sbc	r21, r21
    1fc0:	0e 94 1a 10 	call	0x2034	; 0x2034 <ldexp>
    1fc4:	0f 90       	pop	r0
    1fc6:	07 fe       	sbrs	r0, 7
    1fc8:	0c 94 0e 10 	jmp	0x201c	; 0x201c <inverse>
    1fcc:	08 95       	ret

00001fce <__fp_powser>:
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	1f 93       	push	r17
    1fd4:	0f 93       	push	r16
    1fd6:	ff 92       	push	r15
    1fd8:	ef 92       	push	r14
    1fda:	df 92       	push	r13
    1fdc:	7b 01       	movw	r14, r22
    1fde:	8c 01       	movw	r16, r24
    1fe0:	68 94       	set
    1fe2:	06 c0       	rjmp	.+12     	; 0x1ff0 <__fp_powser+0x22>
    1fe4:	da 2e       	mov	r13, r26
    1fe6:	ef 01       	movw	r28, r30
    1fe8:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__mulsf3x>
    1fec:	fe 01       	movw	r30, r28
    1fee:	e8 94       	clt
    1ff0:	a5 91       	lpm	r26, Z+
    1ff2:	25 91       	lpm	r18, Z+
    1ff4:	35 91       	lpm	r19, Z+
    1ff6:	45 91       	lpm	r20, Z+
    1ff8:	55 91       	lpm	r21, Z+
    1ffa:	a6 f3       	brts	.-24     	; 0x1fe4 <__fp_powser+0x16>
    1ffc:	ef 01       	movw	r28, r30
    1ffe:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__addsf3x>
    2002:	fe 01       	movw	r30, r28
    2004:	97 01       	movw	r18, r14
    2006:	a8 01       	movw	r20, r16
    2008:	da 94       	dec	r13
    200a:	69 f7       	brne	.-38     	; 0x1fe6 <__fp_powser+0x18>
    200c:	df 90       	pop	r13
    200e:	ef 90       	pop	r14
    2010:	ff 90       	pop	r15
    2012:	0f 91       	pop	r16
    2014:	1f 91       	pop	r17
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <inverse>:
    201c:	9b 01       	movw	r18, r22
    201e:	ac 01       	movw	r20, r24
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	70 e0       	ldi	r23, 0x00	; 0
    2024:	80 e8       	ldi	r24, 0x80	; 128
    2026:	9f e3       	ldi	r25, 0x3F	; 63
    2028:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__divsf3>
    202c:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__fp_inf>
    2030:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__fp_mpack>

00002034 <ldexp>:
    2034:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__fp_splitA>
    2038:	d8 f3       	brcs	.-10     	; 0x2030 <inverse+0x14>
    203a:	99 23       	and	r25, r25
    203c:	c9 f3       	breq	.-14     	; 0x2030 <inverse+0x14>
    203e:	94 0f       	add	r25, r20
    2040:	51 1d       	adc	r21, r1
    2042:	a3 f3       	brvs	.-24     	; 0x202c <inverse+0x10>
    2044:	91 50       	subi	r25, 0x01	; 1
    2046:	50 40       	sbci	r21, 0x00	; 0
    2048:	94 f0       	brlt	.+36     	; 0x206e <ldexp+0x3a>
    204a:	59 f0       	breq	.+22     	; 0x2062 <ldexp+0x2e>
    204c:	88 23       	and	r24, r24
    204e:	32 f0       	brmi	.+12     	; 0x205c <ldexp+0x28>
    2050:	66 0f       	add	r22, r22
    2052:	77 1f       	adc	r23, r23
    2054:	88 1f       	adc	r24, r24
    2056:	91 50       	subi	r25, 0x01	; 1
    2058:	50 40       	sbci	r21, 0x00	; 0
    205a:	c1 f7       	brne	.-16     	; 0x204c <ldexp+0x18>
    205c:	9e 3f       	cpi	r25, 0xFE	; 254
    205e:	51 05       	cpc	r21, r1
    2060:	2c f7       	brge	.-54     	; 0x202c <inverse+0x10>
    2062:	88 0f       	add	r24, r24
    2064:	91 1d       	adc	r25, r1
    2066:	96 95       	lsr	r25
    2068:	87 95       	ror	r24
    206a:	97 f9       	bld	r25, 7
    206c:	08 95       	ret
    206e:	5f 3f       	cpi	r21, 0xFF	; 255
    2070:	ac f0       	brlt	.+42     	; 0x209c <ldexp+0x68>
    2072:	98 3e       	cpi	r25, 0xE8	; 232
    2074:	9c f0       	brlt	.+38     	; 0x209c <ldexp+0x68>
    2076:	bb 27       	eor	r27, r27
    2078:	86 95       	lsr	r24
    207a:	77 95       	ror	r23
    207c:	67 95       	ror	r22
    207e:	b7 95       	ror	r27
    2080:	08 f4       	brcc	.+2      	; 0x2084 <ldexp+0x50>
    2082:	b1 60       	ori	r27, 0x01	; 1
    2084:	93 95       	inc	r25
    2086:	c1 f7       	brne	.-16     	; 0x2078 <ldexp+0x44>
    2088:	bb 0f       	add	r27, r27
    208a:	58 f7       	brcc	.-42     	; 0x2062 <ldexp+0x2e>
    208c:	11 f4       	brne	.+4      	; 0x2092 <ldexp+0x5e>
    208e:	60 ff       	sbrs	r22, 0
    2090:	e8 cf       	rjmp	.-48     	; 0x2062 <ldexp+0x2e>
    2092:	6f 5f       	subi	r22, 0xFF	; 255
    2094:	7f 4f       	sbci	r23, 0xFF	; 255
    2096:	8f 4f       	sbci	r24, 0xFF	; 255
    2098:	9f 4f       	sbci	r25, 0xFF	; 255
    209a:	e3 cf       	rjmp	.-58     	; 0x2062 <ldexp+0x2e>
    209c:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__fp_szero>
    20a0:	16 f0       	brts	.+4      	; 0x20a6 <ldexp+0x72>
    20a2:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__fp_mpack>
    20a6:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__fp_nan>
    20aa:	68 94       	set
    20ac:	0c 94 9a 0e 	jmp	0x1d34	; 0x1d34 <__fp_inf>

000020b0 <log>:
    20b0:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__fp_splitA>
    20b4:	a8 f3       	brcs	.-22     	; 0x20a0 <ldexp+0x6c>
    20b6:	99 23       	and	r25, r25
    20b8:	c1 f3       	breq	.-16     	; 0x20aa <ldexp+0x76>
    20ba:	ae f3       	brts	.-22     	; 0x20a6 <ldexp+0x72>
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	1f 93       	push	r17
    20c2:	0f 93       	push	r16
    20c4:	ff 92       	push	r15
    20c6:	c9 2f       	mov	r28, r25
    20c8:	dd 27       	eor	r29, r29
    20ca:	88 23       	and	r24, r24
    20cc:	2a f0       	brmi	.+10     	; 0x20d8 <log+0x28>
    20ce:	21 97       	sbiw	r28, 0x01	; 1
    20d0:	66 0f       	add	r22, r22
    20d2:	77 1f       	adc	r23, r23
    20d4:	88 1f       	adc	r24, r24
    20d6:	da f7       	brpl	.-10     	; 0x20ce <log+0x1e>
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e8       	ldi	r20, 0x80	; 128
    20de:	5f eb       	ldi	r21, 0xBF	; 191
    20e0:	9f e3       	ldi	r25, 0x3F	; 63
    20e2:	88 39       	cpi	r24, 0x98	; 152
    20e4:	20 f0       	brcs	.+8      	; 0x20ee <log+0x3e>
    20e6:	80 3e       	cpi	r24, 0xE0	; 224
    20e8:	38 f0       	brcs	.+14     	; 0x20f8 <log+0x48>
    20ea:	21 96       	adiw	r28, 0x01	; 1
    20ec:	8f 77       	andi	r24, 0x7F	; 127
    20ee:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__addsf3>
    20f2:	ec e7       	ldi	r30, 0x7C	; 124
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	04 c0       	rjmp	.+8      	; 0x2100 <log+0x50>
    20f8:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <__addsf3>
    20fc:	e9 ea       	ldi	r30, 0xA9	; 169
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__fp_powser>
    2104:	8b 01       	movw	r16, r22
    2106:	be 01       	movw	r22, r28
    2108:	ec 01       	movw	r28, r24
    210a:	fb 2e       	mov	r15, r27
    210c:	6f 57       	subi	r22, 0x7F	; 127
    210e:	71 09       	sbc	r23, r1
    2110:	75 95       	asr	r23
    2112:	77 1f       	adc	r23, r23
    2114:	88 0b       	sbc	r24, r24
    2116:	99 0b       	sbc	r25, r25
    2118:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__floatsisf>
    211c:	28 e1       	ldi	r18, 0x18	; 24
    211e:	32 e7       	ldi	r19, 0x72	; 114
    2120:	41 e3       	ldi	r20, 0x31	; 49
    2122:	5f e3       	ldi	r21, 0x3F	; 63
    2124:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__mulsf3x>
    2128:	af 2d       	mov	r26, r15
    212a:	98 01       	movw	r18, r16
    212c:	ae 01       	movw	r20, r28
    212e:	ff 90       	pop	r15
    2130:	0f 91       	pop	r16
    2132:	1f 91       	pop	r17
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__addsf3x>
    213c:	0c 94 b1 0e 	jmp	0x1d62	; 0x1d62 <__fp_round>

00002140 <modf>:
    2140:	fa 01       	movw	r30, r20
    2142:	dc 01       	movw	r26, r24
    2144:	aa 0f       	add	r26, r26
    2146:	bb 1f       	adc	r27, r27
    2148:	9b 01       	movw	r18, r22
    214a:	ac 01       	movw	r20, r24
    214c:	bf 57       	subi	r27, 0x7F	; 127
    214e:	28 f4       	brcc	.+10     	; 0x215a <modf+0x1a>
    2150:	22 27       	eor	r18, r18
    2152:	33 27       	eor	r19, r19
    2154:	44 27       	eor	r20, r20
    2156:	50 78       	andi	r21, 0x80	; 128
    2158:	20 c0       	rjmp	.+64     	; 0x219a <modf+0x5a>
    215a:	b7 51       	subi	r27, 0x17	; 23
    215c:	90 f4       	brcc	.+36     	; 0x2182 <modf+0x42>
    215e:	ab 2f       	mov	r26, r27
    2160:	00 24       	eor	r0, r0
    2162:	46 95       	lsr	r20
    2164:	37 95       	ror	r19
    2166:	27 95       	ror	r18
    2168:	01 1c       	adc	r0, r1
    216a:	a3 95       	inc	r26
    216c:	d2 f3       	brmi	.-12     	; 0x2162 <modf+0x22>
    216e:	00 20       	and	r0, r0
    2170:	71 f0       	breq	.+28     	; 0x218e <modf+0x4e>
    2172:	22 0f       	add	r18, r18
    2174:	33 1f       	adc	r19, r19
    2176:	44 1f       	adc	r20, r20
    2178:	b3 95       	inc	r27
    217a:	da f3       	brmi	.-10     	; 0x2172 <modf+0x32>
    217c:	0e d0       	rcall	.+28     	; 0x219a <modf+0x5a>
    217e:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__subsf3>
    2182:	61 30       	cpi	r22, 0x01	; 1
    2184:	71 05       	cpc	r23, r1
    2186:	a0 e8       	ldi	r26, 0x80	; 128
    2188:	8a 07       	cpc	r24, r26
    218a:	b9 46       	sbci	r27, 0x69	; 105
    218c:	30 f4       	brcc	.+12     	; 0x219a <modf+0x5a>
    218e:	9b 01       	movw	r18, r22
    2190:	ac 01       	movw	r20, r24
    2192:	66 27       	eor	r22, r22
    2194:	77 27       	eor	r23, r23
    2196:	88 27       	eor	r24, r24
    2198:	90 78       	andi	r25, 0x80	; 128
    219a:	30 96       	adiw	r30, 0x00	; 0
    219c:	21 f0       	breq	.+8      	; 0x21a6 <modf+0x66>
    219e:	20 83       	st	Z, r18
    21a0:	31 83       	std	Z+1, r19	; 0x01
    21a2:	42 83       	std	Z+2, r20	; 0x02
    21a4:	53 83       	std	Z+3, r21	; 0x03
    21a6:	08 95       	ret

000021a8 <__fp_mpack>:
    21a8:	9f 3f       	cpi	r25, 0xFF	; 255
    21aa:	31 f0       	breq	.+12     	; 0x21b8 <__fp_mpack_finite+0xc>

000021ac <__fp_mpack_finite>:
    21ac:	91 50       	subi	r25, 0x01	; 1
    21ae:	20 f4       	brcc	.+8      	; 0x21b8 <__fp_mpack_finite+0xc>
    21b0:	87 95       	ror	r24
    21b2:	77 95       	ror	r23
    21b4:	67 95       	ror	r22
    21b6:	b7 95       	ror	r27
    21b8:	88 0f       	add	r24, r24
    21ba:	91 1d       	adc	r25, r1
    21bc:	96 95       	lsr	r25
    21be:	87 95       	ror	r24
    21c0:	97 f9       	bld	r25, 7
    21c2:	08 95       	ret

000021c4 <strcmp>:
    21c4:	fb 01       	movw	r30, r22
    21c6:	dc 01       	movw	r26, r24
    21c8:	8d 91       	ld	r24, X+
    21ca:	01 90       	ld	r0, Z+
    21cc:	80 19       	sub	r24, r0
    21ce:	01 10       	cpse	r0, r1
    21d0:	d9 f3       	breq	.-10     	; 0x21c8 <strcmp+0x4>
    21d2:	99 0b       	sbc	r25, r25
    21d4:	08 95       	ret

000021d6 <_exit>:
    21d6:	f8 94       	cli

000021d8 <__stop_program>:
    21d8:	ff cf       	rjmp	.-2      	; 0x21d8 <__stop_program>
