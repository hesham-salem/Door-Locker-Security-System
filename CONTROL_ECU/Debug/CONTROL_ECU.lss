
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000283a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  0000283a  000028ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004e  008000c6  008000c6  00002934  2**0
                  ALLOC
  3 .stab         00002ec8  00000000  00000000  00002934  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001530  00000000  00000000  000057fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006d2c  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006d40  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00006d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  000072aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00007791  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  000077ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <__vector_3>
      10:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_4>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__vector_6>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <__vector_8>
      24:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__vector_9>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__vector_19>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x471>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d4 e0       	ldi	r29, 0x04	; 4
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	ea e3       	ldi	r30, 0x3A	; 58
      ea:	f8 e2       	ldi	r31, 0x28	; 40
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a6 3c       	cpi	r26, 0xC6	; 198
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	21 e0       	ldi	r18, 0x01	; 1
      fa:	a6 ec       	ldi	r26, 0xC6	; 198
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a4 31       	cpi	r26, 0x14	; 20
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 8a 00 	call	0x114	; 0x114 <main>
     10c:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <main>:
	void motor_run(void);
	void buzzer_call(void);
	void buzzer(void);

int main(void)
{
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	c0 5c       	subi	r28, 0xC0	; 192
     122:	d1 09       	sbc	r29, r1
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	f8 94       	cli
     128:	de bf       	out	0x3e, r29	; 62
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	cd bf       	out	0x3d, r28	; 61
	uint8 str[20];
	uint8 data;
	/* UART intial */
	UART_configurationType UART_config ;
			UART_config.buadRate=9600;
     12e:	9e 01       	movw	r18, r28
     130:	27 59       	subi	r18, 0x97	; 151
     132:	3f 4f       	sbci	r19, 0xFF	; 255
     134:	80 e8       	ldi	r24, 0x80	; 128
     136:	95 e2       	ldi	r25, 0x25	; 37
     138:	a0 e0       	ldi	r26, 0x00	; 0
     13a:	b0 e0       	ldi	r27, 0x00	; 0
     13c:	f9 01       	movw	r30, r18
     13e:	81 83       	std	Z+1, r24	; 0x01
     140:	92 83       	std	Z+2, r25	; 0x02
     142:	a3 83       	std	Z+3, r26	; 0x03
     144:	b4 83       	std	Z+4, r27	; 0x04
		UART_config.character_size=8;
     146:	ce 01       	movw	r24, r28
     148:	87 59       	subi	r24, 0x97	; 151
     14a:	9f 4f       	sbci	r25, 0xFF	; 255
     14c:	28 e0       	ldi	r18, 0x08	; 8
     14e:	fc 01       	movw	r30, r24
     150:	20 83       	st	Z, r18
		strcpy(UART_config.mode,"double speed");
     152:	ce 01       	movw	r24, r28
     154:	87 59       	subi	r24, 0x97	; 151
     156:	9f 4f       	sbci	r25, 0xFF	; 255
     158:	05 96       	adiw	r24, 0x05	; 5
     15a:	2d e0       	ldi	r18, 0x0D	; 13
     15c:	e1 e6       	ldi	r30, 0x61	; 97
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	dc 01       	movw	r26, r24
     162:	01 90       	ld	r0, Z+
     164:	0d 92       	st	X+, r0
     166:	2a 95       	dec	r18
     168:	e1 f7       	brne	.-8      	; 0x162 <main+0x4e>
		UART_init(&UART_config);
     16a:	ce 01       	movw	r24, r28
     16c:	87 59       	subi	r24, 0x97	; 151
     16e:	9f 4f       	sbci	r25, 0xFF	; 255
     170:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <UART_init>
	//	UART_init();
 /*eeprom intial */
		EEPROM_init();
     174:	0e 94 61 05 	call	0xac2	; 0xac2 <EEPROM_init>
	//	UART_sendString("set");
		//_delay_ms(10);

//timer configuration
		TIMER_configurationType timer_config;
		timer_config.timerNumber=1;
     178:	ce 01       	movw	r24, r28
     17a:	8e 57       	subi	r24, 0x7E	; 126
     17c:	9f 4f       	sbci	r25, 0xFF	; 255
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	fc 01       	movw	r30, r24
     182:	20 83       	st	Z, r18
		strcpy(timer_config.mode,"compare");
     184:	ce 01       	movw	r24, r28
     186:	8e 57       	subi	r24, 0x7E	; 126
     188:	9f 4f       	sbci	r25, 0xFF	; 255
     18a:	01 96       	adiw	r24, 0x01	; 1
     18c:	28 e0       	ldi	r18, 0x08	; 8
     18e:	ee e6       	ldi	r30, 0x6E	; 110
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	dc 01       	movw	r26, r24
     194:	01 90       	ld	r0, Z+
     196:	0d 92       	st	X+, r0
     198:	2a 95       	dec	r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x80>
		timer_config.prescaler=1024;
     19c:	ce 01       	movw	r24, r28
     19e:	8e 57       	subi	r24, 0x7E	; 126
     1a0:	9f 4f       	sbci	r25, 0xFF	; 255
     1a2:	20 e0       	ldi	r18, 0x00	; 0
     1a4:	34 e0       	ldi	r19, 0x04	; 4
     1a6:	fc 01       	movw	r30, r24
     1a8:	36 8b       	std	Z+22, r19	; 0x16
     1aa:	25 8b       	std	Z+21, r18	; 0x15
		TIMER_init(&timer_config);
     1ac:	ce 01       	movw	r24, r28
     1ae:	8e 57       	subi	r24, 0x7E	; 126
     1b0:	9f 4f       	sbci	r25, 0xFF	; 255
     1b2:	0e 94 66 09 	call	0x12cc	; 0x12cc <TIMER_init>
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	a8 ec       	ldi	r26, 0xC8	; 200
     1bc:	b2 e4       	ldi	r27, 0x42	; 66
     1be:	8d 8b       	std	Y+21, r24	; 0x15
     1c0:	9e 8b       	std	Y+22, r25	; 0x16
     1c2:	af 8b       	std	Y+23, r26	; 0x17
     1c4:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	4a ef       	ldi	r20, 0xFA	; 250
     1cc:	54 e4       	ldi	r21, 0x44	; 68
     1ce:	6d 89       	ldd	r22, Y+21	; 0x15
     1d0:	7e 89       	ldd	r23, Y+22	; 0x16
     1d2:	8f 89       	ldd	r24, Y+23	; 0x17
     1d4:	98 8d       	ldd	r25, Y+24	; 0x18
     1d6:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     1da:	dc 01       	movw	r26, r24
     1dc:	cb 01       	movw	r24, r22
     1de:	89 8f       	std	Y+25, r24	; 0x19
     1e0:	9a 8f       	std	Y+26, r25	; 0x1a
     1e2:	ab 8f       	std	Y+27, r26	; 0x1b
     1e4:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	40 e8       	ldi	r20, 0x80	; 128
     1ec:	5f e3       	ldi	r21, 0x3F	; 63
     1ee:	69 8d       	ldd	r22, Y+25	; 0x19
     1f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     1f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1f6:	0e 94 c3 10 	call	0x2186	; 0x2186 <__cmpsf2>
     1fa:	88 23       	and	r24, r24
     1fc:	2c f4       	brge	.+10     	; 0x208 <main+0xf4>
		__ticks = 1;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	9e 8f       	std	Y+30, r25	; 0x1e
     204:	8d 8f       	std	Y+29, r24	; 0x1d
     206:	3f c0       	rjmp	.+126    	; 0x286 <main+0x172>
	else if (__tmp > 65535)
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	3f ef       	ldi	r19, 0xFF	; 255
     20c:	4f e7       	ldi	r20, 0x7F	; 127
     20e:	57 e4       	ldi	r21, 0x47	; 71
     210:	69 8d       	ldd	r22, Y+25	; 0x19
     212:	7a 8d       	ldd	r23, Y+26	; 0x1a
     214:	8b 8d       	ldd	r24, Y+27	; 0x1b
     216:	9c 8d       	ldd	r25, Y+28	; 0x1c
     218:	0e 94 1b 12 	call	0x2436	; 0x2436 <__gesf2>
     21c:	18 16       	cp	r1, r24
     21e:	4c f5       	brge	.+82     	; 0x272 <main+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     220:	20 e0       	ldi	r18, 0x00	; 0
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e2       	ldi	r20, 0x20	; 32
     226:	51 e4       	ldi	r21, 0x41	; 65
     228:	6d 89       	ldd	r22, Y+21	; 0x15
     22a:	7e 89       	ldd	r23, Y+22	; 0x16
     22c:	8f 89       	ldd	r24, Y+23	; 0x17
     22e:	98 8d       	ldd	r25, Y+24	; 0x18
     230:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     234:	dc 01       	movw	r26, r24
     236:	cb 01       	movw	r24, r22
     238:	bc 01       	movw	r22, r24
     23a:	cd 01       	movw	r24, r26
     23c:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixunssfsi>
     240:	dc 01       	movw	r26, r24
     242:	cb 01       	movw	r24, r22
     244:	9e 8f       	std	Y+30, r25	; 0x1e
     246:	8d 8f       	std	Y+29, r24	; 0x1d
     248:	0f c0       	rjmp	.+30     	; 0x268 <main+0x154>
     24a:	88 ec       	ldi	r24, 0xC8	; 200
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	98 a3       	std	Y+32, r25	; 0x20
     250:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     252:	8f 8d       	ldd	r24, Y+31	; 0x1f
     254:	98 a1       	ldd	r25, Y+32	; 0x20
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <main+0x142>
     25a:	98 a3       	std	Y+32, r25	; 0x20
     25c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     25e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     260:	9e 8d       	ldd	r25, Y+30	; 0x1e
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	9e 8f       	std	Y+30, r25	; 0x1e
     266:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     268:	8d 8d       	ldd	r24, Y+29	; 0x1d
     26a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     26c:	89 2b       	or	r24, r25
     26e:	69 f7       	brne	.-38     	; 0x24a <main+0x136>
     270:	14 c0       	rjmp	.+40     	; 0x29a <main+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     272:	69 8d       	ldd	r22, Y+25	; 0x19
     274:	7a 8d       	ldd	r23, Y+26	; 0x1a
     276:	8b 8d       	ldd	r24, Y+27	; 0x1b
     278:	9c 8d       	ldd	r25, Y+28	; 0x1c
     27a:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixunssfsi>
     27e:	dc 01       	movw	r26, r24
     280:	cb 01       	movw	r24, r22
     282:	9e 8f       	std	Y+30, r25	; 0x1e
     284:	8d 8f       	std	Y+29, r24	; 0x1d
     286:	8d 8d       	ldd	r24, Y+29	; 0x1d
     288:	9e 8d       	ldd	r25, Y+30	; 0x1e
     28a:	9a a3       	std	Y+34, r25	; 0x22
     28c:	89 a3       	std	Y+33, r24	; 0x21
     28e:	89 a1       	ldd	r24, Y+33	; 0x21
     290:	9a a1       	ldd	r25, Y+34	; 0x22
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <main+0x17e>
     296:	9a a3       	std	Y+34, r25	; 0x22
     298:	89 a3       	std	Y+33, r24	; 0x21

		while(1)
    {
 	   	_delay_ms(100);

    	EEPROM_readByte(0x0011,&password_stored_flag);
     29a:	6e ee       	ldi	r22, 0xEE	; 238
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	81 e1       	ldi	r24, 0x11	; 17
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 bc 05 	call	0xb78	; 0xb78 <EEPROM_readByte>
    	if(((password_stored_flag ==0xAA)&&(i<3)&&(set_password_now_flag==0))||buzzer_flag)
     2a6:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <password_stored_flag>
     2aa:	8a 3a       	cpi	r24, 0xAA	; 170
     2ac:	41 f4       	brne	.+16     	; 0x2be <main+0x1aa>
     2ae:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <i>
     2b2:	83 30       	cpi	r24, 0x03	; 3
     2b4:	20 f4       	brcc	.+8      	; 0x2be <main+0x1aa>
     2b6:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <set_password_now_flag>
     2ba:	88 23       	and	r24, r24
     2bc:	29 f0       	breq	.+10     	; 0x2c8 <main+0x1b4>
     2be:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <buzzer_flag>
     2c2:	88 23       	and	r24, r24
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <main+0x1b4>
     2c6:	94 c1       	rjmp	.+808    	; 0x5f0 <__stack+0x191>
    		 {
    		UART_sendByte('d');
     2c8:	84 e6       	ldi	r24, 0x64	; 100
     2ca:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <UART_sendByte>
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	a0 e2       	ldi	r26, 0x20	; 32
     2d4:	b1 e4       	ldi	r27, 0x41	; 65
     2d6:	89 87       	std	Y+9, r24	; 0x09
     2d8:	9a 87       	std	Y+10, r25	; 0x0a
     2da:	ab 87       	std	Y+11, r26	; 0x0b
     2dc:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	4a ef       	ldi	r20, 0xFA	; 250
     2e4:	54 e4       	ldi	r21, 0x44	; 68
     2e6:	69 85       	ldd	r22, Y+9	; 0x09
     2e8:	7a 85       	ldd	r23, Y+10	; 0x0a
     2ea:	8b 85       	ldd	r24, Y+11	; 0x0b
     2ec:	9c 85       	ldd	r25, Y+12	; 0x0c
     2ee:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     2f2:	dc 01       	movw	r26, r24
     2f4:	cb 01       	movw	r24, r22
     2f6:	8f ab       	std	Y+55, r24	; 0x37
     2f8:	98 af       	std	Y+56, r25	; 0x38
     2fa:	a9 af       	std	Y+57, r26	; 0x39
     2fc:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	40 e8       	ldi	r20, 0x80	; 128
     304:	5f e3       	ldi	r21, 0x3F	; 63
     306:	6f a9       	ldd	r22, Y+55	; 0x37
     308:	78 ad       	ldd	r23, Y+56	; 0x38
     30a:	89 ad       	ldd	r24, Y+57	; 0x39
     30c:	9a ad       	ldd	r25, Y+58	; 0x3a
     30e:	0e 94 c3 10 	call	0x2186	; 0x2186 <__cmpsf2>
     312:	88 23       	and	r24, r24
     314:	2c f4       	brge	.+10     	; 0x320 <main+0x20c>
		__ticks = 1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	9c af       	std	Y+60, r25	; 0x3c
     31c:	8b af       	std	Y+59, r24	; 0x3b
     31e:	3f c0       	rjmp	.+126    	; 0x39e <main+0x28a>
	else if (__tmp > 65535)
     320:	20 e0       	ldi	r18, 0x00	; 0
     322:	3f ef       	ldi	r19, 0xFF	; 255
     324:	4f e7       	ldi	r20, 0x7F	; 127
     326:	57 e4       	ldi	r21, 0x47	; 71
     328:	6f a9       	ldd	r22, Y+55	; 0x37
     32a:	78 ad       	ldd	r23, Y+56	; 0x38
     32c:	89 ad       	ldd	r24, Y+57	; 0x39
     32e:	9a ad       	ldd	r25, Y+58	; 0x3a
     330:	0e 94 1b 12 	call	0x2436	; 0x2436 <__gesf2>
     334:	18 16       	cp	r1, r24
     336:	4c f5       	brge	.+82     	; 0x38a <main+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	40 e2       	ldi	r20, 0x20	; 32
     33e:	51 e4       	ldi	r21, 0x41	; 65
     340:	69 85       	ldd	r22, Y+9	; 0x09
     342:	7a 85       	ldd	r23, Y+10	; 0x0a
     344:	8b 85       	ldd	r24, Y+11	; 0x0b
     346:	9c 85       	ldd	r25, Y+12	; 0x0c
     348:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     34c:	dc 01       	movw	r26, r24
     34e:	cb 01       	movw	r24, r22
     350:	bc 01       	movw	r22, r24
     352:	cd 01       	movw	r24, r26
     354:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixunssfsi>
     358:	dc 01       	movw	r26, r24
     35a:	cb 01       	movw	r24, r22
     35c:	9c af       	std	Y+60, r25	; 0x3c
     35e:	8b af       	std	Y+59, r24	; 0x3b
     360:	0f c0       	rjmp	.+30     	; 0x380 <main+0x26c>
     362:	88 ec       	ldi	r24, 0xC8	; 200
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	9e af       	std	Y+62, r25	; 0x3e
     368:	8d af       	std	Y+61, r24	; 0x3d
     36a:	8d ad       	ldd	r24, Y+61	; 0x3d
     36c:	9e ad       	ldd	r25, Y+62	; 0x3e
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <main+0x25a>
     372:	9e af       	std	Y+62, r25	; 0x3e
     374:	8d af       	std	Y+61, r24	; 0x3d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     376:	8b ad       	ldd	r24, Y+59	; 0x3b
     378:	9c ad       	ldd	r25, Y+60	; 0x3c
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	9c af       	std	Y+60, r25	; 0x3c
     37e:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     380:	8b ad       	ldd	r24, Y+59	; 0x3b
     382:	9c ad       	ldd	r25, Y+60	; 0x3c
     384:	89 2b       	or	r24, r25
     386:	69 f7       	brne	.-38     	; 0x362 <main+0x24e>
     388:	1e c0       	rjmp	.+60     	; 0x3c6 <main+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     38a:	6f a9       	ldd	r22, Y+55	; 0x37
     38c:	78 ad       	ldd	r23, Y+56	; 0x38
     38e:	89 ad       	ldd	r24, Y+57	; 0x39
     390:	9a ad       	ldd	r25, Y+58	; 0x3a
     392:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixunssfsi>
     396:	dc 01       	movw	r26, r24
     398:	cb 01       	movw	r24, r22
     39a:	9c af       	std	Y+60, r25	; 0x3c
     39c:	8b af       	std	Y+59, r24	; 0x3b
     39e:	2b ad       	ldd	r18, Y+59	; 0x3b
     3a0:	3c ad       	ldd	r19, Y+60	; 0x3c
     3a2:	ce 01       	movw	r24, r28
     3a4:	cf 96       	adiw	r24, 0x3f	; 63
     3a6:	fc 01       	movw	r30, r24
     3a8:	31 83       	std	Z+1, r19	; 0x01
     3aa:	20 83       	st	Z, r18
     3ac:	ce 01       	movw	r24, r28
     3ae:	cf 96       	adiw	r24, 0x3f	; 63
     3b0:	fc 01       	movw	r30, r24
     3b2:	80 81       	ld	r24, Z
     3b4:	91 81       	ldd	r25, Z+1	; 0x01
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <main+0x2a2>
     3ba:	9e 01       	movw	r18, r28
     3bc:	21 5c       	subi	r18, 0xC1	; 193
     3be:	3f 4f       	sbci	r19, 0xFF	; 255
     3c0:	f9 01       	movw	r30, r18
     3c2:	91 83       	std	Z+1, r25	; 0x01
     3c4:	80 83       	st	Z, r24
     	   	_delay_ms(10);

    	    	UART_receiveString(enter_password_stored);
     3c6:	8a ed       	ldi	r24, 0xDA	; 218
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <UART_receiveString>
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	a0 e2       	ldi	r26, 0x20	; 32
     3d4:	b1 e4       	ldi	r27, 0x41	; 65
     3d6:	8d 87       	std	Y+13, r24	; 0x0d
     3d8:	9e 87       	std	Y+14, r25	; 0x0e
     3da:	af 87       	std	Y+15, r26	; 0x0f
     3dc:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	4a ef       	ldi	r20, 0xFA	; 250
     3e4:	54 e4       	ldi	r21, 0x44	; 68
     3e6:	6d 85       	ldd	r22, Y+13	; 0x0d
     3e8:	7e 85       	ldd	r23, Y+14	; 0x0e
     3ea:	8f 85       	ldd	r24, Y+15	; 0x0f
     3ec:	98 89       	ldd	r25, Y+16	; 0x10
     3ee:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     3f2:	dc 01       	movw	r26, r24
     3f4:	cb 01       	movw	r24, r22
     3f6:	8d a7       	std	Y+45, r24	; 0x2d
     3f8:	9e a7       	std	Y+46, r25	; 0x2e
     3fa:	af a7       	std	Y+47, r26	; 0x2f
     3fc:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	40 e8       	ldi	r20, 0x80	; 128
     404:	5f e3       	ldi	r21, 0x3F	; 63
     406:	6d a5       	ldd	r22, Y+45	; 0x2d
     408:	7e a5       	ldd	r23, Y+46	; 0x2e
     40a:	8f a5       	ldd	r24, Y+47	; 0x2f
     40c:	98 a9       	ldd	r25, Y+48	; 0x30
     40e:	0e 94 c3 10 	call	0x2186	; 0x2186 <__cmpsf2>
     412:	88 23       	and	r24, r24
     414:	2c f4       	brge	.+10     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		__ticks = 1;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	9a ab       	std	Y+50, r25	; 0x32
     41c:	89 ab       	std	Y+49, r24	; 0x31
     41e:	3f c0       	rjmp	.+126    	; 0x49e <__stack+0x3f>
	else if (__tmp > 65535)
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	3f ef       	ldi	r19, 0xFF	; 255
     424:	4f e7       	ldi	r20, 0x7F	; 127
     426:	57 e4       	ldi	r21, 0x47	; 71
     428:	6d a5       	ldd	r22, Y+45	; 0x2d
     42a:	7e a5       	ldd	r23, Y+46	; 0x2e
     42c:	8f a5       	ldd	r24, Y+47	; 0x2f
     42e:	98 a9       	ldd	r25, Y+48	; 0x30
     430:	0e 94 1b 12 	call	0x2436	; 0x2436 <__gesf2>
     434:	18 16       	cp	r1, r24
     436:	4c f5       	brge	.+82     	; 0x48a <__stack+0x2b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	40 e2       	ldi	r20, 0x20	; 32
     43e:	51 e4       	ldi	r21, 0x41	; 65
     440:	6d 85       	ldd	r22, Y+13	; 0x0d
     442:	7e 85       	ldd	r23, Y+14	; 0x0e
     444:	8f 85       	ldd	r24, Y+15	; 0x0f
     446:	98 89       	ldd	r25, Y+16	; 0x10
     448:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	bc 01       	movw	r22, r24
     452:	cd 01       	movw	r24, r26
     454:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixunssfsi>
     458:	dc 01       	movw	r26, r24
     45a:	cb 01       	movw	r24, r22
     45c:	9a ab       	std	Y+50, r25	; 0x32
     45e:	89 ab       	std	Y+49, r24	; 0x31
     460:	0f c0       	rjmp	.+30     	; 0x480 <__stack+0x21>
     462:	88 ec       	ldi	r24, 0xC8	; 200
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	9c ab       	std	Y+52, r25	; 0x34
     468:	8b ab       	std	Y+51, r24	; 0x33
     46a:	8b a9       	ldd	r24, Y+51	; 0x33
     46c:	9c a9       	ldd	r25, Y+52	; 0x34
     46e:	01 97       	sbiw	r24, 0x01	; 1
     470:	f1 f7       	brne	.-4      	; 0x46e <__stack+0xf>
     472:	9c ab       	std	Y+52, r25	; 0x34
     474:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     476:	89 a9       	ldd	r24, Y+49	; 0x31
     478:	9a a9       	ldd	r25, Y+50	; 0x32
     47a:	01 97       	sbiw	r24, 0x01	; 1
     47c:	9a ab       	std	Y+50, r25	; 0x32
     47e:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     480:	89 a9       	ldd	r24, Y+49	; 0x31
     482:	9a a9       	ldd	r25, Y+50	; 0x32
     484:	89 2b       	or	r24, r25
     486:	69 f7       	brne	.-38     	; 0x462 <__stack+0x3>
     488:	14 c0       	rjmp	.+40     	; 0x4b2 <__stack+0x53>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     48a:	6d a5       	ldd	r22, Y+45	; 0x2d
     48c:	7e a5       	ldd	r23, Y+46	; 0x2e
     48e:	8f a5       	ldd	r24, Y+47	; 0x2f
     490:	98 a9       	ldd	r25, Y+48	; 0x30
     492:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixunssfsi>
     496:	dc 01       	movw	r26, r24
     498:	cb 01       	movw	r24, r22
     49a:	9a ab       	std	Y+50, r25	; 0x32
     49c:	89 ab       	std	Y+49, r24	; 0x31
     49e:	89 a9       	ldd	r24, Y+49	; 0x31
     4a0:	9a a9       	ldd	r25, Y+50	; 0x32
     4a2:	9e ab       	std	Y+54, r25	; 0x36
     4a4:	8d ab       	std	Y+53, r24	; 0x35
     4a6:	8d a9       	ldd	r24, Y+53	; 0x35
     4a8:	9e a9       	ldd	r25, Y+54	; 0x36
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <__stack+0x4b>
     4ae:	9e ab       	std	Y+54, r25	; 0x36
     4b0:	8d ab       	std	Y+53, r24	; 0x35
    	   	_delay_ms(10);
    		EEPROM_readString(0x0512, check_password_stored);
     4b2:	66 ec       	ldi	r22, 0xC6	; 198
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	82 e1       	ldi	r24, 0x12	; 18
     4b8:	95 e0       	ldi	r25, 0x05	; 5
     4ba:	0e 94 d3 06 	call	0xda6	; 0xda6 <EEPROM_readString>
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	a0 e2       	ldi	r26, 0x20	; 32
     4c4:	b1 e4       	ldi	r27, 0x41	; 65
     4c6:	89 83       	std	Y+1, r24	; 0x01
     4c8:	9a 83       	std	Y+2, r25	; 0x02
     4ca:	ab 83       	std	Y+3, r26	; 0x03
     4cc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	4a ef       	ldi	r20, 0xFA	; 250
     4d4:	54 e4       	ldi	r21, 0x44	; 68
     4d6:	69 81       	ldd	r22, Y+1	; 0x01
     4d8:	7a 81       	ldd	r23, Y+2	; 0x02
     4da:	8b 81       	ldd	r24, Y+3	; 0x03
     4dc:	9c 81       	ldd	r25, Y+4	; 0x04
     4de:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     4e2:	dc 01       	movw	r26, r24
     4e4:	cb 01       	movw	r24, r22
     4e6:	8b a3       	std	Y+35, r24	; 0x23
     4e8:	9c a3       	std	Y+36, r25	; 0x24
     4ea:	ad a3       	std	Y+37, r26	; 0x25
     4ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     4ee:	20 e0       	ldi	r18, 0x00	; 0
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	40 e8       	ldi	r20, 0x80	; 128
     4f4:	5f e3       	ldi	r21, 0x3F	; 63
     4f6:	6b a1       	ldd	r22, Y+35	; 0x23
     4f8:	7c a1       	ldd	r23, Y+36	; 0x24
     4fa:	8d a1       	ldd	r24, Y+37	; 0x25
     4fc:	9e a1       	ldd	r25, Y+38	; 0x26
     4fe:	0e 94 c3 10 	call	0x2186	; 0x2186 <__cmpsf2>
     502:	88 23       	and	r24, r24
     504:	2c f4       	brge	.+10     	; 0x510 <__stack+0xb1>
		__ticks = 1;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	98 a7       	std	Y+40, r25	; 0x28
     50c:	8f a3       	std	Y+39, r24	; 0x27
     50e:	3f c0       	rjmp	.+126    	; 0x58e <__stack+0x12f>
	else if (__tmp > 65535)
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	3f ef       	ldi	r19, 0xFF	; 255
     514:	4f e7       	ldi	r20, 0x7F	; 127
     516:	57 e4       	ldi	r21, 0x47	; 71
     518:	6b a1       	ldd	r22, Y+35	; 0x23
     51a:	7c a1       	ldd	r23, Y+36	; 0x24
     51c:	8d a1       	ldd	r24, Y+37	; 0x25
     51e:	9e a1       	ldd	r25, Y+38	; 0x26
     520:	0e 94 1b 12 	call	0x2436	; 0x2436 <__gesf2>
     524:	18 16       	cp	r1, r24
     526:	4c f5       	brge	.+82     	; 0x57a <__stack+0x11b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	40 e2       	ldi	r20, 0x20	; 32
     52e:	51 e4       	ldi	r21, 0x41	; 65
     530:	69 81       	ldd	r22, Y+1	; 0x01
     532:	7a 81       	ldd	r23, Y+2	; 0x02
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	9c 81       	ldd	r25, Y+4	; 0x04
     538:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     53c:	dc 01       	movw	r26, r24
     53e:	cb 01       	movw	r24, r22
     540:	bc 01       	movw	r22, r24
     542:	cd 01       	movw	r24, r26
     544:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixunssfsi>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
     54c:	98 a7       	std	Y+40, r25	; 0x28
     54e:	8f a3       	std	Y+39, r24	; 0x27
     550:	0f c0       	rjmp	.+30     	; 0x570 <__stack+0x111>
     552:	88 ec       	ldi	r24, 0xC8	; 200
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	9a a7       	std	Y+42, r25	; 0x2a
     558:	89 a7       	std	Y+41, r24	; 0x29
     55a:	89 a5       	ldd	r24, Y+41	; 0x29
     55c:	9a a5       	ldd	r25, Y+42	; 0x2a
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	f1 f7       	brne	.-4      	; 0x55e <__stack+0xff>
     562:	9a a7       	std	Y+42, r25	; 0x2a
     564:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     566:	8f a1       	ldd	r24, Y+39	; 0x27
     568:	98 a5       	ldd	r25, Y+40	; 0x28
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	98 a7       	std	Y+40, r25	; 0x28
     56e:	8f a3       	std	Y+39, r24	; 0x27
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     570:	8f a1       	ldd	r24, Y+39	; 0x27
     572:	98 a5       	ldd	r25, Y+40	; 0x28
     574:	89 2b       	or	r24, r25
     576:	69 f7       	brne	.-38     	; 0x552 <__stack+0xf3>
     578:	14 c0       	rjmp	.+40     	; 0x5a2 <__stack+0x143>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     57a:	6b a1       	ldd	r22, Y+35	; 0x23
     57c:	7c a1       	ldd	r23, Y+36	; 0x24
     57e:	8d a1       	ldd	r24, Y+37	; 0x25
     580:	9e a1       	ldd	r25, Y+38	; 0x26
     582:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixunssfsi>
     586:	dc 01       	movw	r26, r24
     588:	cb 01       	movw	r24, r22
     58a:	98 a7       	std	Y+40, r25	; 0x28
     58c:	8f a3       	std	Y+39, r24	; 0x27
     58e:	8f a1       	ldd	r24, Y+39	; 0x27
     590:	98 a5       	ldd	r25, Y+40	; 0x28
     592:	9c a7       	std	Y+44, r25	; 0x2c
     594:	8b a7       	std	Y+43, r24	; 0x2b
     596:	8b a5       	ldd	r24, Y+43	; 0x2b
     598:	9c a5       	ldd	r25, Y+44	; 0x2c
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	f1 f7       	brne	.-4      	; 0x59a <__stack+0x13b>
     59e:	9c a7       	std	Y+44, r25	; 0x2c
     5a0:	8b a7       	std	Y+43, r24	; 0x2b
    	    		_delay_ms(10);
    		if(!strcmp(enter_password_stored,check_password_stored))
     5a2:	66 ec       	ldi	r22, 0xC6	; 198
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	8a ed       	ldi	r24, 0xDA	; 218
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
     5ae:	89 2b       	or	r24, r25
     5b0:	b1 f4       	brne	.+44     	; 0x5de <__stack+0x17f>
    		{
        		UART_sendByte('w');
     5b2:	87 e7       	ldi	r24, 0x77	; 119
     5b4:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <UART_sendByte>
        		data_temp=UART_receiveByte();
     5b8:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <UART_receiveByte>
     5bc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <data_temp>
        		if(data_temp=='s')
     5c0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <data_temp>
     5c4:	83 37       	cpi	r24, 0x73	; 115
     5c6:	21 f4       	brne	.+8      	; 0x5d0 <__stack+0x171>
        			force_set=1;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <force_set>

    	    	UART_receiveString(enter_password_stored);
    	   	_delay_ms(10);
    		EEPROM_readString(0x0512, check_password_stored);
    	    		_delay_ms(10);
    		if(!strcmp(enter_password_stored,check_password_stored))
     5ce:	28 c0       	rjmp	.+80     	; 0x620 <__stack+0x1c1>
    		{
        		UART_sendByte('w');
        		data_temp=UART_receiveByte();
        		if(data_temp=='s')
        			force_set=1;
        		else if(data_temp=='o')
     5d0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <data_temp>
     5d4:	8f 36       	cpi	r24, 0x6F	; 111
     5d6:	21 f5       	brne	.+72     	; 0x620 <__stack+0x1c1>
        		{
        			 motor_run();
     5d8:	0e 94 ae 04 	call	0x95c	; 0x95c <motor_run>

    	    	UART_receiveString(enter_password_stored);
    	   	_delay_ms(10);
    		EEPROM_readString(0x0512, check_password_stored);
    	    		_delay_ms(10);
    		if(!strcmp(enter_password_stored,check_password_stored))
     5dc:	21 c0       	rjmp	.+66     	; 0x620 <__stack+0x1c1>
        			 motor_run();
        		}
    		 }
    		else
    		{
    			UART_sendByte('u');
     5de:	85 e7       	ldi	r24, 0x75	; 117
     5e0:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <UART_sendByte>
    		        				i++;
     5e4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <i>
     5e8:	8f 5f       	subi	r24, 0xFF	; 255
     5ea:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <i>

    	    	UART_receiveString(enter_password_stored);
    	   	_delay_ms(10);
    		EEPROM_readString(0x0512, check_password_stored);
    	    		_delay_ms(10);
    		if(!strcmp(enter_password_stored,check_password_stored))
     5ee:	18 c0       	rjmp	.+48     	; 0x620 <__stack+0x1c1>
    		{
    			UART_sendByte('u');
    		        				i++;
    		}
    		 }
    	else if((password_stored_flag ==0xAA)&&(i>=3)&&(set_password_now_flag==0)&&block_buzzer_scope)
     5f0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <password_stored_flag>
     5f4:	8a 3a       	cpi	r24, 0xAA	; 170
     5f6:	a9 f4       	brne	.+42     	; 0x622 <__stack+0x1c3>
     5f8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <i>
     5fc:	83 30       	cpi	r24, 0x03	; 3
     5fe:	88 f0       	brcs	.+34     	; 0x622 <__stack+0x1c3>
     600:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <set_password_now_flag>
     604:	88 23       	and	r24, r24
     606:	69 f4       	brne	.+26     	; 0x622 <__stack+0x1c3>
     608:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     60c:	88 23       	and	r24, r24
     60e:	49 f0       	breq	.+18     	; 0x622 <__stack+0x1c3>
    	{
    		UART_sendByte('B');
     610:	82 e4       	ldi	r24, 0x42	; 66
     612:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <UART_sendByte>
    		buzzer();
     616:	0e 94 18 05 	call	0xa30	; 0xa30 <buzzer>
    		block_buzzer_scope=0;
     61a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
     61e:	01 c0       	rjmp	.+2      	; 0x622 <__stack+0x1c3>

    	    	UART_receiveString(enter_password_stored);
    	   	_delay_ms(10);
    		EEPROM_readString(0x0512, check_password_stored);
    	    		_delay_ms(10);
    		if(!strcmp(enter_password_stored,check_password_stored))
     620:	00 00       	nop
    		UART_sendByte('B');
    		buzzer();
    		block_buzzer_scope=0;
    	}

    	if(((password_stored_flag !=0xAA)&&(set_password_now_flag==0))||force_set)
     622:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <password_stored_flag>
     626:	8a 3a       	cpi	r24, 0xAA	; 170
     628:	21 f0       	breq	.+8      	; 0x632 <__stack+0x1d3>
     62a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <set_password_now_flag>
     62e:	88 23       	and	r24, r24
     630:	29 f0       	breq	.+10     	; 0x63c <__stack+0x1dd>
     632:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <force_set>
     636:	88 23       	and	r24, r24
     638:	09 f4       	brne	.+2      	; 0x63c <__stack+0x1dd>
     63a:	bd cd       	rjmp	.-1158   	; 0x1b6 <main+0xa2>
    	{
        	UART_sendByte('s');
     63c:	83 e7       	ldi	r24, 0x73	; 115
     63e:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <UART_sendByte>
    	UART_receiveString(password_stored);
     642:	89 ef       	ldi	r24, 0xF9	; 249
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <UART_receiveString>
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	a8 ec       	ldi	r26, 0xC8	; 200
     650:	b2 e4       	ldi	r27, 0x42	; 66
     652:	89 8b       	std	Y+17, r24	; 0x11
     654:	9a 8b       	std	Y+18, r25	; 0x12
     656:	ab 8b       	std	Y+19, r26	; 0x13
     658:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     65a:	8e 01       	movw	r16, r28
     65c:	05 5b       	subi	r16, 0xB5	; 181
     65e:	1f 4f       	sbci	r17, 0xFF	; 255
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	4a ef       	ldi	r20, 0xFA	; 250
     666:	54 e4       	ldi	r21, 0x44	; 68
     668:	69 89       	ldd	r22, Y+17	; 0x11
     66a:	7a 89       	ldd	r23, Y+18	; 0x12
     66c:	8b 89       	ldd	r24, Y+19	; 0x13
     66e:	9c 89       	ldd	r25, Y+20	; 0x14
     670:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     674:	dc 01       	movw	r26, r24
     676:	cb 01       	movw	r24, r22
     678:	f8 01       	movw	r30, r16
     67a:	80 83       	st	Z, r24
     67c:	91 83       	std	Z+1, r25	; 0x01
     67e:	a2 83       	std	Z+2, r26	; 0x02
     680:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     682:	ce 01       	movw	r24, r28
     684:	85 5b       	subi	r24, 0xB5	; 181
     686:	9f 4f       	sbci	r25, 0xFF	; 255
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	40 e8       	ldi	r20, 0x80	; 128
     68e:	5f e3       	ldi	r21, 0x3F	; 63
     690:	fc 01       	movw	r30, r24
     692:	60 81       	ld	r22, Z
     694:	71 81       	ldd	r23, Z+1	; 0x01
     696:	82 81       	ldd	r24, Z+2	; 0x02
     698:	93 81       	ldd	r25, Z+3	; 0x03
     69a:	0e 94 c3 10 	call	0x2186	; 0x2186 <__cmpsf2>
     69e:	88 23       	and	r24, r24
     6a0:	4c f4       	brge	.+18     	; 0x6b4 <__stack+0x255>
		__ticks = 1;
     6a2:	ce 01       	movw	r24, r28
     6a4:	81 5b       	subi	r24, 0xB1	; 177
     6a6:	9f 4f       	sbci	r25, 0xFF	; 255
     6a8:	21 e0       	ldi	r18, 0x01	; 1
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	fc 01       	movw	r30, r24
     6ae:	31 83       	std	Z+1, r19	; 0x01
     6b0:	20 83       	st	Z, r18
     6b2:	69 c0       	rjmp	.+210    	; 0x786 <__stack+0x327>
	else if (__tmp > 65535)
     6b4:	ce 01       	movw	r24, r28
     6b6:	85 5b       	subi	r24, 0xB5	; 181
     6b8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	3f ef       	ldi	r19, 0xFF	; 255
     6be:	4f e7       	ldi	r20, 0x7F	; 127
     6c0:	57 e4       	ldi	r21, 0x47	; 71
     6c2:	fc 01       	movw	r30, r24
     6c4:	60 81       	ld	r22, Z
     6c6:	71 81       	ldd	r23, Z+1	; 0x01
     6c8:	82 81       	ldd	r24, Z+2	; 0x02
     6ca:	93 81       	ldd	r25, Z+3	; 0x03
     6cc:	0e 94 1b 12 	call	0x2436	; 0x2436 <__gesf2>
     6d0:	18 16       	cp	r1, r24
     6d2:	0c f0       	brlt	.+2      	; 0x6d6 <__stack+0x277>
     6d4:	46 c0       	rjmp	.+140    	; 0x762 <__stack+0x303>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e2       	ldi	r20, 0x20	; 32
     6dc:	51 e4       	ldi	r21, 0x41	; 65
     6de:	69 89       	ldd	r22, Y+17	; 0x11
     6e0:	7a 89       	ldd	r23, Y+18	; 0x12
     6e2:	8b 89       	ldd	r24, Y+19	; 0x13
     6e4:	9c 89       	ldd	r25, Y+20	; 0x14
     6e6:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     6ea:	dc 01       	movw	r26, r24
     6ec:	cb 01       	movw	r24, r22
     6ee:	8e 01       	movw	r16, r28
     6f0:	01 5b       	subi	r16, 0xB1	; 177
     6f2:	1f 4f       	sbci	r17, 0xFF	; 255
     6f4:	bc 01       	movw	r22, r24
     6f6:	cd 01       	movw	r24, r26
     6f8:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixunssfsi>
     6fc:	dc 01       	movw	r26, r24
     6fe:	cb 01       	movw	r24, r22
     700:	f8 01       	movw	r30, r16
     702:	91 83       	std	Z+1, r25	; 0x01
     704:	80 83       	st	Z, r24
     706:	24 c0       	rjmp	.+72     	; 0x750 <__stack+0x2f1>
     708:	ce 01       	movw	r24, r28
     70a:	8f 5a       	subi	r24, 0xAF	; 175
     70c:	9f 4f       	sbci	r25, 0xFF	; 255
     70e:	28 ec       	ldi	r18, 0xC8	; 200
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	fc 01       	movw	r30, r24
     714:	31 83       	std	Z+1, r19	; 0x01
     716:	20 83       	st	Z, r18
     718:	ce 01       	movw	r24, r28
     71a:	8f 5a       	subi	r24, 0xAF	; 175
     71c:	9f 4f       	sbci	r25, 0xFF	; 255
     71e:	fc 01       	movw	r30, r24
     720:	80 81       	ld	r24, Z
     722:	91 81       	ldd	r25, Z+1	; 0x01
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	f1 f7       	brne	.-4      	; 0x724 <__stack+0x2c5>
     728:	9e 01       	movw	r18, r28
     72a:	2f 5a       	subi	r18, 0xAF	; 175
     72c:	3f 4f       	sbci	r19, 0xFF	; 255
     72e:	f9 01       	movw	r30, r18
     730:	91 83       	std	Z+1, r25	; 0x01
     732:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     734:	ce 01       	movw	r24, r28
     736:	81 5b       	subi	r24, 0xB1	; 177
     738:	9f 4f       	sbci	r25, 0xFF	; 255
     73a:	9e 01       	movw	r18, r28
     73c:	21 5b       	subi	r18, 0xB1	; 177
     73e:	3f 4f       	sbci	r19, 0xFF	; 255
     740:	f9 01       	movw	r30, r18
     742:	20 81       	ld	r18, Z
     744:	31 81       	ldd	r19, Z+1	; 0x01
     746:	21 50       	subi	r18, 0x01	; 1
     748:	31 09       	sbc	r19, r1
     74a:	fc 01       	movw	r30, r24
     74c:	31 83       	std	Z+1, r19	; 0x01
     74e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     750:	ce 01       	movw	r24, r28
     752:	81 5b       	subi	r24, 0xB1	; 177
     754:	9f 4f       	sbci	r25, 0xFF	; 255
     756:	fc 01       	movw	r30, r24
     758:	80 81       	ld	r24, Z
     75a:	91 81       	ldd	r25, Z+1	; 0x01
     75c:	89 2b       	or	r24, r25
     75e:	a1 f6       	brne	.-88     	; 0x708 <__stack+0x2a9>
     760:	2c c0       	rjmp	.+88     	; 0x7ba <__stack+0x35b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     762:	8e 01       	movw	r16, r28
     764:	01 5b       	subi	r16, 0xB1	; 177
     766:	1f 4f       	sbci	r17, 0xFF	; 255
     768:	ce 01       	movw	r24, r28
     76a:	85 5b       	subi	r24, 0xB5	; 181
     76c:	9f 4f       	sbci	r25, 0xFF	; 255
     76e:	fc 01       	movw	r30, r24
     770:	60 81       	ld	r22, Z
     772:	71 81       	ldd	r23, Z+1	; 0x01
     774:	82 81       	ldd	r24, Z+2	; 0x02
     776:	93 81       	ldd	r25, Z+3	; 0x03
     778:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixunssfsi>
     77c:	dc 01       	movw	r26, r24
     77e:	cb 01       	movw	r24, r22
     780:	f8 01       	movw	r30, r16
     782:	91 83       	std	Z+1, r25	; 0x01
     784:	80 83       	st	Z, r24
     786:	ce 01       	movw	r24, r28
     788:	8d 5a       	subi	r24, 0xAD	; 173
     78a:	9f 4f       	sbci	r25, 0xFF	; 255
     78c:	9e 01       	movw	r18, r28
     78e:	21 5b       	subi	r18, 0xB1	; 177
     790:	3f 4f       	sbci	r19, 0xFF	; 255
     792:	f9 01       	movw	r30, r18
     794:	20 81       	ld	r18, Z
     796:	31 81       	ldd	r19, Z+1	; 0x01
     798:	fc 01       	movw	r30, r24
     79a:	31 83       	std	Z+1, r19	; 0x01
     79c:	20 83       	st	Z, r18
     79e:	ce 01       	movw	r24, r28
     7a0:	8d 5a       	subi	r24, 0xAD	; 173
     7a2:	9f 4f       	sbci	r25, 0xFF	; 255
     7a4:	fc 01       	movw	r30, r24
     7a6:	80 81       	ld	r24, Z
     7a8:	91 81       	ldd	r25, Z+1	; 0x01
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <__stack+0x34b>
     7ae:	9e 01       	movw	r18, r28
     7b0:	2d 5a       	subi	r18, 0xAD	; 173
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	f9 01       	movw	r30, r18
     7b6:	91 83       	std	Z+1, r25	; 0x01
     7b8:	80 83       	st	Z, r24
        	_delay_ms(100);
    	EEPROM_writeString(0x0512,password_stored);
     7ba:	69 ef       	ldi	r22, 0xF9	; 249
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	82 e1       	ldi	r24, 0x12	; 18
     7c0:	95 e0       	ldi	r25, 0x05	; 5
     7c2:	0e 94 1a 06 	call	0xc34	; 0xc34 <EEPROM_writeString>
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	a0 e2       	ldi	r26, 0x20	; 32
     7cc:	b1 e4       	ldi	r27, 0x41	; 65
     7ce:	8d 83       	std	Y+5, r24	; 0x05
     7d0:	9e 83       	std	Y+6, r25	; 0x06
     7d2:	af 83       	std	Y+7, r26	; 0x07
     7d4:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7d6:	8e 01       	movw	r16, r28
     7d8:	0f 5b       	subi	r16, 0xBF	; 191
     7da:	1f 4f       	sbci	r17, 0xFF	; 255
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	4a ef       	ldi	r20, 0xFA	; 250
     7e2:	54 e4       	ldi	r21, 0x44	; 68
     7e4:	6d 81       	ldd	r22, Y+5	; 0x05
     7e6:	7e 81       	ldd	r23, Y+6	; 0x06
     7e8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ea:	98 85       	ldd	r25, Y+8	; 0x08
     7ec:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     7f0:	dc 01       	movw	r26, r24
     7f2:	cb 01       	movw	r24, r22
     7f4:	f8 01       	movw	r30, r16
     7f6:	80 83       	st	Z, r24
     7f8:	91 83       	std	Z+1, r25	; 0x01
     7fa:	a2 83       	std	Z+2, r26	; 0x02
     7fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     7fe:	ce 01       	movw	r24, r28
     800:	8f 5b       	subi	r24, 0xBF	; 191
     802:	9f 4f       	sbci	r25, 0xFF	; 255
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	40 e8       	ldi	r20, 0x80	; 128
     80a:	5f e3       	ldi	r21, 0x3F	; 63
     80c:	fc 01       	movw	r30, r24
     80e:	60 81       	ld	r22, Z
     810:	71 81       	ldd	r23, Z+1	; 0x01
     812:	82 81       	ldd	r24, Z+2	; 0x02
     814:	93 81       	ldd	r25, Z+3	; 0x03
     816:	0e 94 c3 10 	call	0x2186	; 0x2186 <__cmpsf2>
     81a:	88 23       	and	r24, r24
     81c:	4c f4       	brge	.+18     	; 0x830 <__stack+0x3d1>
		__ticks = 1;
     81e:	ce 01       	movw	r24, r28
     820:	8b 5b       	subi	r24, 0xBB	; 187
     822:	9f 4f       	sbci	r25, 0xFF	; 255
     824:	21 e0       	ldi	r18, 0x01	; 1
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	fc 01       	movw	r30, r24
     82a:	31 83       	std	Z+1, r19	; 0x01
     82c:	20 83       	st	Z, r18
     82e:	69 c0       	rjmp	.+210    	; 0x902 <__stack+0x4a3>
	else if (__tmp > 65535)
     830:	ce 01       	movw	r24, r28
     832:	8f 5b       	subi	r24, 0xBF	; 191
     834:	9f 4f       	sbci	r25, 0xFF	; 255
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	3f ef       	ldi	r19, 0xFF	; 255
     83a:	4f e7       	ldi	r20, 0x7F	; 127
     83c:	57 e4       	ldi	r21, 0x47	; 71
     83e:	fc 01       	movw	r30, r24
     840:	60 81       	ld	r22, Z
     842:	71 81       	ldd	r23, Z+1	; 0x01
     844:	82 81       	ldd	r24, Z+2	; 0x02
     846:	93 81       	ldd	r25, Z+3	; 0x03
     848:	0e 94 1b 12 	call	0x2436	; 0x2436 <__gesf2>
     84c:	18 16       	cp	r1, r24
     84e:	0c f0       	brlt	.+2      	; 0x852 <__stack+0x3f3>
     850:	46 c0       	rjmp	.+140    	; 0x8de <__stack+0x47f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	40 e2       	ldi	r20, 0x20	; 32
     858:	51 e4       	ldi	r21, 0x41	; 65
     85a:	6d 81       	ldd	r22, Y+5	; 0x05
     85c:	7e 81       	ldd	r23, Y+6	; 0x06
     85e:	8f 81       	ldd	r24, Y+7	; 0x07
     860:	98 85       	ldd	r25, Y+8	; 0x08
     862:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     866:	dc 01       	movw	r26, r24
     868:	cb 01       	movw	r24, r22
     86a:	8e 01       	movw	r16, r28
     86c:	0b 5b       	subi	r16, 0xBB	; 187
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	bc 01       	movw	r22, r24
     872:	cd 01       	movw	r24, r26
     874:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixunssfsi>
     878:	dc 01       	movw	r26, r24
     87a:	cb 01       	movw	r24, r22
     87c:	f8 01       	movw	r30, r16
     87e:	91 83       	std	Z+1, r25	; 0x01
     880:	80 83       	st	Z, r24
     882:	24 c0       	rjmp	.+72     	; 0x8cc <__stack+0x46d>
     884:	ce 01       	movw	r24, r28
     886:	89 5b       	subi	r24, 0xB9	; 185
     888:	9f 4f       	sbci	r25, 0xFF	; 255
     88a:	28 ec       	ldi	r18, 0xC8	; 200
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	fc 01       	movw	r30, r24
     890:	31 83       	std	Z+1, r19	; 0x01
     892:	20 83       	st	Z, r18
     894:	ce 01       	movw	r24, r28
     896:	89 5b       	subi	r24, 0xB9	; 185
     898:	9f 4f       	sbci	r25, 0xFF	; 255
     89a:	fc 01       	movw	r30, r24
     89c:	80 81       	ld	r24, Z
     89e:	91 81       	ldd	r25, Z+1	; 0x01
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <__stack+0x441>
     8a4:	9e 01       	movw	r18, r28
     8a6:	29 5b       	subi	r18, 0xB9	; 185
     8a8:	3f 4f       	sbci	r19, 0xFF	; 255
     8aa:	f9 01       	movw	r30, r18
     8ac:	91 83       	std	Z+1, r25	; 0x01
     8ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8b0:	ce 01       	movw	r24, r28
     8b2:	8b 5b       	subi	r24, 0xBB	; 187
     8b4:	9f 4f       	sbci	r25, 0xFF	; 255
     8b6:	9e 01       	movw	r18, r28
     8b8:	2b 5b       	subi	r18, 0xBB	; 187
     8ba:	3f 4f       	sbci	r19, 0xFF	; 255
     8bc:	f9 01       	movw	r30, r18
     8be:	20 81       	ld	r18, Z
     8c0:	31 81       	ldd	r19, Z+1	; 0x01
     8c2:	21 50       	subi	r18, 0x01	; 1
     8c4:	31 09       	sbc	r19, r1
     8c6:	fc 01       	movw	r30, r24
     8c8:	31 83       	std	Z+1, r19	; 0x01
     8ca:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8cc:	ce 01       	movw	r24, r28
     8ce:	8b 5b       	subi	r24, 0xBB	; 187
     8d0:	9f 4f       	sbci	r25, 0xFF	; 255
     8d2:	fc 01       	movw	r30, r24
     8d4:	80 81       	ld	r24, Z
     8d6:	91 81       	ldd	r25, Z+1	; 0x01
     8d8:	89 2b       	or	r24, r25
     8da:	a1 f6       	brne	.-88     	; 0x884 <__stack+0x425>
     8dc:	2c c0       	rjmp	.+88     	; 0x936 <__stack+0x4d7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8de:	8e 01       	movw	r16, r28
     8e0:	0b 5b       	subi	r16, 0xBB	; 187
     8e2:	1f 4f       	sbci	r17, 0xFF	; 255
     8e4:	ce 01       	movw	r24, r28
     8e6:	8f 5b       	subi	r24, 0xBF	; 191
     8e8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ea:	fc 01       	movw	r30, r24
     8ec:	60 81       	ld	r22, Z
     8ee:	71 81       	ldd	r23, Z+1	; 0x01
     8f0:	82 81       	ldd	r24, Z+2	; 0x02
     8f2:	93 81       	ldd	r25, Z+3	; 0x03
     8f4:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixunssfsi>
     8f8:	dc 01       	movw	r26, r24
     8fa:	cb 01       	movw	r24, r22
     8fc:	f8 01       	movw	r30, r16
     8fe:	91 83       	std	Z+1, r25	; 0x01
     900:	80 83       	st	Z, r24
     902:	ce 01       	movw	r24, r28
     904:	87 5b       	subi	r24, 0xB7	; 183
     906:	9f 4f       	sbci	r25, 0xFF	; 255
     908:	9e 01       	movw	r18, r28
     90a:	2b 5b       	subi	r18, 0xBB	; 187
     90c:	3f 4f       	sbci	r19, 0xFF	; 255
     90e:	f9 01       	movw	r30, r18
     910:	20 81       	ld	r18, Z
     912:	31 81       	ldd	r19, Z+1	; 0x01
     914:	fc 01       	movw	r30, r24
     916:	31 83       	std	Z+1, r19	; 0x01
     918:	20 83       	st	Z, r18
     91a:	ce 01       	movw	r24, r28
     91c:	87 5b       	subi	r24, 0xB7	; 183
     91e:	9f 4f       	sbci	r25, 0xFF	; 255
     920:	fc 01       	movw	r30, r24
     922:	80 81       	ld	r24, Z
     924:	91 81       	ldd	r25, Z+1	; 0x01
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	f1 f7       	brne	.-4      	; 0x926 <__stack+0x4c7>
     92a:	9e 01       	movw	r18, r28
     92c:	27 5b       	subi	r18, 0xB7	; 183
     92e:	3f 4f       	sbci	r19, 0xFF	; 255
     930:	f9 01       	movw	r30, r18
     932:	91 83       	std	Z+1, r25	; 0x01
     934:	80 83       	st	Z, r24
    	_delay_ms(10);
    	EEPROM_writeByte(0X0011,0xAA);
     936:	6a ea       	ldi	r22, 0xAA	; 170
     938:	81 e1       	ldi	r24, 0x11	; 17
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 7e 05 	call	0xafc	; 0xafc <EEPROM_writeByte>
    	password_stored_flag=0xAA;
     940:	8a ea       	ldi	r24, 0xAA	; 170
     942:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <password_stored_flag>
    	set_password_now_flag=0xAA;
     946:	8a ea       	ldi	r24, 0xAA	; 170
     948:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <set_password_now_flag>
    	if(UART_receiveByte()=='o')
     94c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <UART_receiveByte>
     950:	8f 36       	cpi	r24, 0x6F	; 111
     952:	09 f0       	breq	.+2      	; 0x956 <__stack+0x4f7>
     954:	30 cc       	rjmp	.-1952   	; 0x1b6 <main+0xa2>
    		 motor_run();
     956:	0e 94 ae 04 	call	0x95c	; 0x95c <motor_run>

    	}

    }
     95a:	2d cc       	rjmp	.-1958   	; 0x1b6 <main+0xa2>

0000095c <motor_run>:
}

void motor_run(void)
{
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62

TIMER_setCompare(8000);
     964:	80 e4       	ldi	r24, 0x40	; 64
     966:	9f e1       	ldi	r25, 0x1F	; 31
     968:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <TIMER_setCompare>
TIMER_setCallBackPtr(change_motor_dirction);
     96c:	8e eb       	ldi	r24, 0xBE	; 190
     96e:	94 e0       	ldi	r25, 0x04	; 4
     970:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <TIMER_setCallBackPtr>


}
     974:	00 00       	nop
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <change_motor_dirction>:
void change_motor_dirction(void)
{
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62

	static uint8 count=0;
	if(count==0)
     984:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <count.1951>
     988:	88 23       	and	r24, r24
     98a:	29 f5       	brne	.+74     	; 0x9d6 <change_motor_dirction+0x5a>
	{
		DDRB|=(1<<0)|(1<<1);
     98c:	87 e3       	ldi	r24, 0x37	; 55
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	27 e3       	ldi	r18, 0x37	; 55
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	f9 01       	movw	r30, r18
     996:	20 81       	ld	r18, Z
     998:	23 60       	ori	r18, 0x03	; 3
     99a:	fc 01       	movw	r30, r24
     99c:	20 83       	st	Z, r18
		PORTB&=~(1<<0)&~(1<<1);
     99e:	88 e3       	ldi	r24, 0x38	; 56
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	28 e3       	ldi	r18, 0x38	; 56
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	f9 01       	movw	r30, r18
     9a8:	20 81       	ld	r18, Z
     9aa:	2c 7f       	andi	r18, 0xFC	; 252
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 83       	st	Z, r18
		CLEAR_BIT(PORTB,1);
     9b0:	88 e3       	ldi	r24, 0x38	; 56
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	28 e3       	ldi	r18, 0x38	; 56
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	f9 01       	movw	r30, r18
     9ba:	20 81       	ld	r18, Z
     9bc:	2d 7f       	andi	r18, 0xFD	; 253
     9be:	fc 01       	movw	r30, r24
     9c0:	20 83       	st	Z, r18
		SET_BIT(PORTB,0);
     9c2:	88 e3       	ldi	r24, 0x38	; 56
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	28 e3       	ldi	r18, 0x38	; 56
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	f9 01       	movw	r30, r18
     9cc:	20 81       	ld	r18, Z
     9ce:	21 60       	ori	r18, 0x01	; 1
     9d0:	fc 01       	movw	r30, r24
     9d2:	20 83       	st	Z, r18
     9d4:	24 c0       	rjmp	.+72     	; 0xa1e <change_motor_dirction+0xa2>
	}
	else if(count>=2)
     9d6:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <count.1951>
     9da:	82 30       	cpi	r24, 0x02	; 2
     9dc:	60 f0       	brcs	.+24     	; 0x9f6 <change_motor_dirction+0x7a>
{
	PORTB&=~(1<<0)&~(1<<1);
     9de:	88 e3       	ldi	r24, 0x38	; 56
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	28 e3       	ldi	r18, 0x38	; 56
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	f9 01       	movw	r30, r18
     9e8:	20 81       	ld	r18, Z
     9ea:	2c 7f       	andi	r18, 0xFC	; 252
     9ec:	fc 01       	movw	r30, r24
     9ee:	20 83       	st	Z, r18

	TIMER_stop();
     9f0:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <TIMER_stop>
     9f4:	14 c0       	rjmp	.+40     	; 0xa1e <change_motor_dirction+0xa2>
}
else
{
	TOGGLE_BIT(PORTB,1);
     9f6:	88 e3       	ldi	r24, 0x38	; 56
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	28 e3       	ldi	r18, 0x38	; 56
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	f9 01       	movw	r30, r18
     a00:	30 81       	ld	r19, Z
     a02:	22 e0       	ldi	r18, 0x02	; 2
     a04:	23 27       	eor	r18, r19
     a06:	fc 01       	movw	r30, r24
     a08:	20 83       	st	Z, r18
	TOGGLE_BIT(PORTB,0);
     a0a:	88 e3       	ldi	r24, 0x38	; 56
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	28 e3       	ldi	r18, 0x38	; 56
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	f9 01       	movw	r30, r18
     a14:	30 81       	ld	r19, Z
     a16:	21 e0       	ldi	r18, 0x01	; 1
     a18:	23 27       	eor	r18, r19
     a1a:	fc 01       	movw	r30, r24
     a1c:	20 83       	st	Z, r18
}
	count++;
     a1e:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <count.1951>
     a22:	8f 5f       	subi	r24, 0xFF	; 255
     a24:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <count.1951>

}
     a28:	00 00       	nop
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <buzzer>:
void buzzer(void)
{
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62

	TIMER_setCompare(60000);
     a38:	80 e6       	ldi	r24, 0x60	; 96
     a3a:	9a ee       	ldi	r25, 0xEA	; 234
     a3c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <TIMER_setCompare>
	TIMER_setCallBackPtr(buzzer_call);
     a40:	88 e2       	ldi	r24, 0x28	; 40
     a42:	95 e0       	ldi	r25, 0x05	; 5
     a44:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <TIMER_setCallBackPtr>
}
     a48:	00 00       	nop
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	08 95       	ret

00000a50 <buzzer_call>:
void buzzer_call(void)
{	static uint8 count=0;
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
if(count==0)
     a58:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <count.1958>
     a5c:	88 23       	and	r24, r24
     a5e:	99 f4       	brne	.+38     	; 0xa86 <buzzer_call+0x36>
{
	SET_BIT(DDRC,5);
     a60:	84 e3       	ldi	r24, 0x34	; 52
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	24 e3       	ldi	r18, 0x34	; 52
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	f9 01       	movw	r30, r18
     a6a:	20 81       	ld	r18, Z
     a6c:	20 62       	ori	r18, 0x20	; 32
     a6e:	fc 01       	movw	r30, r24
     a70:	20 83       	st	Z, r18
		SET_BIT(PORTC,5);
     a72:	85 e3       	ldi	r24, 0x35	; 53
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	25 e3       	ldi	r18, 0x35	; 53
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	f9 01       	movw	r30, r18
     a7c:	20 81       	ld	r18, Z
     a7e:	20 62       	ori	r18, 0x20	; 32
     a80:	fc 01       	movw	r30, r24
     a82:	20 83       	st	Z, r18
     a84:	15 c0       	rjmp	.+42     	; 0xab0 <buzzer_call+0x60>
}


else if(count==8)
     a86:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <count.1958>
     a8a:	88 30       	cpi	r24, 0x08	; 8
     a8c:	89 f4       	brne	.+34     	; 0xab0 <buzzer_call+0x60>
{
	CLEAR_BIT(PORTC,5);
     a8e:	85 e3       	ldi	r24, 0x35	; 53
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	25 e3       	ldi	r18, 0x35	; 53
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	f9 01       	movw	r30, r18
     a98:	20 81       	ld	r18, Z
     a9a:	2f 7d       	andi	r18, 0xDF	; 223
     a9c:	fc 01       	movw	r30, r24
     a9e:	20 83       	st	Z, r18
	buzzer_flag=1;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <buzzer_flag>
	block_buzzer_scope=1;
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	TIMER_stop();
     aac:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <TIMER_stop>
}
count++;
     ab0:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <count.1958>
     ab4:	8f 5f       	subi	r24, 0xFF	; 255
     ab6:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <count.1958>


}
     aba:	00 00       	nop
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	08 95       	ret

00000ac2 <EEPROM_init>:
#include "i2c.h"
#include "external_eeprom.h"

TWI_configurationType TWI_config;
void EEPROM_init(void)
{
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
	TWI_config.baudRate=400000;
     aca:	80 e8       	ldi	r24, 0x80	; 128
     acc:	9a e1       	ldi	r25, 0x1A	; 26
     ace:	a6 e0       	ldi	r26, 0x06	; 6
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TWI_config>
     ad6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <TWI_config+0x1>
     ada:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <TWI_config+0x2>
     ade:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <TWI_config+0x3>
	TWI_config.prescasler=0;
     ae2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <TWI_config+0x4>
	TWI_config.slave_address=0b00001011;
     ae6:	8b e0       	ldi	r24, 0x0B	; 11
     ae8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <TWI_config+0x5>

TWI_init(&TWI_config);
     aec:	8e e0       	ldi	r24, 0x0E	; 14
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	0e 94 1d 07 	call	0xe3a	; 0xe3a <TWI_init>
}
     af4:	00 00       	nop
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	08 95       	ret

00000afc <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	00 d0       	rcall	.+0      	; 0xb02 <EEPROM_writeByte+0x6>
     b02:	1f 92       	push	r1
     b04:	cd b7       	in	r28, 0x3d	; 61
     b06:	de b7       	in	r29, 0x3e	; 62
     b08:	9a 83       	std	Y+2, r25	; 0x02
     b0a:	89 83       	std	Y+1, r24	; 0x01
     b0c:	6b 83       	std	Y+3, r22	; 0x03

	TWI_start();
     b0e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <TWI_start>
	if(TWI_getStatus()!=TW_START)
     b12:	0e 94 10 08 	call	0x1020	; 0x1020 <TWI_getStatus>
     b16:	88 30       	cpi	r24, 0x08	; 8
     b18:	11 f0       	breq	.+4      	; 0xb1e <EEPROM_writeByte+0x22>
	return 1;
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	27 c0       	rjmp	.+78     	; 0xb6c <EEPROM_writeByte+0x70>

	TWI_write((uint8)(0xA0|((u16addr&0X0700)>>7)));
     b1e:	89 81       	ldd	r24, Y+1	; 0x01
     b20:	9a 81       	ldd	r25, Y+2	; 0x02
     b22:	88 27       	eor	r24, r24
     b24:	97 70       	andi	r25, 0x07	; 7
     b26:	88 0f       	add	r24, r24
     b28:	89 2f       	mov	r24, r25
     b2a:	88 1f       	adc	r24, r24
     b2c:	99 0b       	sbc	r25, r25
     b2e:	91 95       	neg	r25
     b30:	80 6a       	ori	r24, 0xA0	; 160
     b32:	0e 94 c6 07 	call	0xf8c	; 0xf8c <TWI_write>
	if(TWI_getStatus()!=TW_MT_SLA_W_ACK)
     b36:	0e 94 10 08 	call	0x1020	; 0x1020 <TWI_getStatus>
     b3a:	88 31       	cpi	r24, 0x18	; 24
     b3c:	11 f0       	breq	.+4      	; 0xb42 <EEPROM_writeByte+0x46>
		return 2;
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	15 c0       	rjmp	.+42     	; 0xb6c <EEPROM_writeByte+0x70>


	TWI_write((uint8)u16addr);
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	0e 94 c6 07 	call	0xf8c	; 0xf8c <TWI_write>
	if(TWI_getStatus()!=TW_MT_DATA_ACK)
     b48:	0e 94 10 08 	call	0x1020	; 0x1020 <TWI_getStatus>
     b4c:	88 32       	cpi	r24, 0x28	; 40
     b4e:	11 f0       	breq	.+4      	; 0xb54 <EEPROM_writeByte+0x58>
			return 0x80;
     b50:	80 e8       	ldi	r24, 0x80	; 128
     b52:	0c c0       	rjmp	.+24     	; 0xb6c <EEPROM_writeByte+0x70>


	TWI_write(u8data);
     b54:	8b 81       	ldd	r24, Y+3	; 0x03
     b56:	0e 94 c6 07 	call	0xf8c	; 0xf8c <TWI_write>
	if(TWI_getStatus()!=TW_MT_DATA_ACK)
     b5a:	0e 94 10 08 	call	0x1020	; 0x1020 <TWI_getStatus>
     b5e:	88 32       	cpi	r24, 0x28	; 40
     b60:	11 f0       	breq	.+4      	; 0xb66 <EEPROM_writeByte+0x6a>
			return 4;
     b62:	84 e0       	ldi	r24, 0x04	; 4
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <EEPROM_writeByte+0x70>

	TWI_stop();
     b66:	0e 94 b9 07 	call	0xf72	; 0xf72 <TWI_stop>
	return 5;
     b6a:	85 e0       	ldi	r24, 0x05	; 5
}
     b6c:	0f 90       	pop	r0
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	08 95       	ret

00000b78 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	00 d0       	rcall	.+0      	; 0xb7e <EEPROM_readByte+0x6>
     b7e:	00 d0       	rcall	.+0      	; 0xb80 <EEPROM_readByte+0x8>
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	9a 83       	std	Y+2, r25	; 0x02
     b86:	89 83       	std	Y+1, r24	; 0x01
     b88:	7c 83       	std	Y+4, r23	; 0x04
     b8a:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
     b8c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <TWI_start>
		if(TWI_getStatus()!=TW_START)
     b90:	0e 94 10 08 	call	0x1020	; 0x1020 <TWI_getStatus>
     b94:	88 30       	cpi	r24, 0x08	; 8
     b96:	11 f0       	breq	.+4      	; 0xb9c <EEPROM_readByte+0x24>
		return ERROR;
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	45 c0       	rjmp	.+138    	; 0xc26 <EEPROM_readByte+0xae>

		TWI_write((uint8)(0xA0|((u16addr&0X0700)>>7)));
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ba0:	88 27       	eor	r24, r24
     ba2:	97 70       	andi	r25, 0x07	; 7
     ba4:	88 0f       	add	r24, r24
     ba6:	89 2f       	mov	r24, r25
     ba8:	88 1f       	adc	r24, r24
     baa:	99 0b       	sbc	r25, r25
     bac:	91 95       	neg	r25
     bae:	80 6a       	ori	r24, 0xA0	; 160
     bb0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <TWI_write>
		if(TWI_getStatus()!=TW_MT_SLA_W_ACK)
     bb4:	0e 94 10 08 	call	0x1020	; 0x1020 <TWI_getStatus>
     bb8:	88 31       	cpi	r24, 0x18	; 24
     bba:	11 f0       	breq	.+4      	; 0xbc0 <EEPROM_readByte+0x48>
			return ERROR;
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	33 c0       	rjmp	.+102    	; 0xc26 <EEPROM_readByte+0xae>


		TWI_write((uint8)u16addr);
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <TWI_write>
		if(TWI_getStatus()!=TW_MT_DATA_ACK)
     bc6:	0e 94 10 08 	call	0x1020	; 0x1020 <TWI_getStatus>
     bca:	88 32       	cpi	r24, 0x28	; 40
     bcc:	11 f0       	breq	.+4      	; 0xbd2 <EEPROM_readByte+0x5a>
				return ERROR;
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	2a c0       	rjmp	.+84     	; 0xc26 <EEPROM_readByte+0xae>


		//TWI_write(u8data);
		//if(TWI_getStatus()!=TW_MT_DATA_ACK)
			//	return ERROR;
		TWI_start();
     bd2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <TWI_start>
		if(TWI_getStatus()!=TW_REP_START)
     bd6:	0e 94 10 08 	call	0x1020	; 0x1020 <TWI_getStatus>
     bda:	80 31       	cpi	r24, 0x10	; 16
     bdc:	11 f0       	breq	.+4      	; 0xbe2 <EEPROM_readByte+0x6a>
						return ERROR;
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	22 c0       	rjmp	.+68     	; 0xc26 <EEPROM_readByte+0xae>

		TWI_write((uint8)((0xA0)|((u16addr&0X0700)>>7)|1));
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	9a 81       	ldd	r25, Y+2	; 0x02
     be6:	88 27       	eor	r24, r24
     be8:	97 70       	andi	r25, 0x07	; 7
     bea:	88 0f       	add	r24, r24
     bec:	89 2f       	mov	r24, r25
     bee:	88 1f       	adc	r24, r24
     bf0:	99 0b       	sbc	r25, r25
     bf2:	91 95       	neg	r25
     bf4:	81 6a       	ori	r24, 0xA1	; 161
     bf6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <TWI_write>
		if(TWI_getStatus()!=TW_MT_SLA_R_ACK)
     bfa:	0e 94 10 08 	call	0x1020	; 0x1020 <TWI_getStatus>
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	11 f0       	breq	.+4      	; 0xc06 <EEPROM_readByte+0x8e>
						return ERROR;
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	10 c0       	rjmp	.+32     	; 0xc26 <EEPROM_readByte+0xae>


			*u8data=TWI_read_with_NACK();
     c06:	0e 94 f9 07 	call	0xff2	; 0xff2 <TWI_read_with_NACK>
     c0a:	28 2f       	mov	r18, r24
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	9c 81       	ldd	r25, Y+4	; 0x04
     c10:	fc 01       	movw	r30, r24
     c12:	20 83       	st	Z, r18
			if(TWI_getStatus()!=TW_MR_DATA_NACK)
     c14:	0e 94 10 08 	call	0x1020	; 0x1020 <TWI_getStatus>
     c18:	88 35       	cpi	r24, 0x58	; 88
     c1a:	11 f0       	breq	.+4      	; 0xc20 <EEPROM_readByte+0xa8>
					return ERROR;
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	03 c0       	rjmp	.+6      	; 0xc26 <EEPROM_readByte+0xae>

			TWI_stop();
     c20:	0e 94 b9 07 	call	0xf72	; 0xf72 <TWI_stop>
			return SUCCESS;
     c24:	81 e0       	ldi	r24, 0x01	; 1

}
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	08 95       	ret

00000c34 <EEPROM_writeString>:
uint8 EEPROM_writeString(uint16 u16addr, uint8* str)
{
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	63 97       	sbiw	r28, 0x13	; 19
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	99 8b       	std	Y+17, r25	; 0x11
     c4a:	88 8b       	std	Y+16, r24	; 0x10
     c4c:	7b 8b       	std	Y+19, r23	; 0x13
     c4e:	6a 8b       	std	Y+18, r22	; 0x12

	uint8 i=0;
     c50:	19 82       	std	Y+1, r1	; 0x01
	for( i=0;str[i]!='\0';i++)
     c52:	19 82       	std	Y+1, r1	; 0x01
     c54:	88 c0       	rjmp	.+272    	; 0xd66 <EEPROM_writeString+0x132>
{


	EEPROM_writeByte(u16addr+i,str[i]);
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	88 2f       	mov	r24, r24
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	2a 89       	ldd	r18, Y+18	; 0x12
     c5e:	3b 89       	ldd	r19, Y+19	; 0x13
     c60:	82 0f       	add	r24, r18
     c62:	93 1f       	adc	r25, r19
     c64:	fc 01       	movw	r30, r24
     c66:	40 81       	ld	r20, Z
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	88 89       	ldd	r24, Y+16	; 0x10
     c70:	99 89       	ldd	r25, Y+17	; 0x11
     c72:	82 0f       	add	r24, r18
     c74:	93 1f       	adc	r25, r19
     c76:	64 2f       	mov	r22, r20
     c78:	0e 94 7e 05 	call	0xafc	; 0xafc <EEPROM_writeByte>
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e2       	ldi	r26, 0x20	; 32
     c82:	b1 e4       	ldi	r27, 0x41	; 65
     c84:	8a 83       	std	Y+2, r24	; 0x02
     c86:	9b 83       	std	Y+3, r25	; 0x03
     c88:	ac 83       	std	Y+4, r26	; 0x04
     c8a:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	4a ef       	ldi	r20, 0xFA	; 250
     c92:	54 e4       	ldi	r21, 0x44	; 68
     c94:	6a 81       	ldd	r22, Y+2	; 0x02
     c96:	7b 81       	ldd	r23, Y+3	; 0x03
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
     c9a:	9d 81       	ldd	r25, Y+5	; 0x05
     c9c:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	8e 83       	std	Y+6, r24	; 0x06
     ca6:	9f 83       	std	Y+7, r25	; 0x07
     ca8:	a8 87       	std	Y+8, r26	; 0x08
     caa:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	40 e8       	ldi	r20, 0x80	; 128
     cb2:	5f e3       	ldi	r21, 0x3F	; 63
     cb4:	6e 81       	ldd	r22, Y+6	; 0x06
     cb6:	7f 81       	ldd	r23, Y+7	; 0x07
     cb8:	88 85       	ldd	r24, Y+8	; 0x08
     cba:	99 85       	ldd	r25, Y+9	; 0x09
     cbc:	0e 94 c3 10 	call	0x2186	; 0x2186 <__cmpsf2>
     cc0:	88 23       	and	r24, r24
     cc2:	2c f4       	brge	.+10     	; 0xcce <EEPROM_writeString+0x9a>
		__ticks = 1;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	9b 87       	std	Y+11, r25	; 0x0b
     cca:	8a 87       	std	Y+10, r24	; 0x0a
     ccc:	3f c0       	rjmp	.+126    	; 0xd4c <EEPROM_writeString+0x118>
	else if (__tmp > 65535)
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	3f ef       	ldi	r19, 0xFF	; 255
     cd2:	4f e7       	ldi	r20, 0x7F	; 127
     cd4:	57 e4       	ldi	r21, 0x47	; 71
     cd6:	6e 81       	ldd	r22, Y+6	; 0x06
     cd8:	7f 81       	ldd	r23, Y+7	; 0x07
     cda:	88 85       	ldd	r24, Y+8	; 0x08
     cdc:	99 85       	ldd	r25, Y+9	; 0x09
     cde:	0e 94 1b 12 	call	0x2436	; 0x2436 <__gesf2>
     ce2:	18 16       	cp	r1, r24
     ce4:	4c f5       	brge	.+82     	; 0xd38 <EEPROM_writeString+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e2       	ldi	r20, 0x20	; 32
     cec:	51 e4       	ldi	r21, 0x41	; 65
     cee:	6a 81       	ldd	r22, Y+2	; 0x02
     cf0:	7b 81       	ldd	r23, Y+3	; 0x03
     cf2:	8c 81       	ldd	r24, Y+4	; 0x04
     cf4:	9d 81       	ldd	r25, Y+5	; 0x05
     cf6:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	bc 01       	movw	r22, r24
     d00:	cd 01       	movw	r24, r26
     d02:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixunssfsi>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	9b 87       	std	Y+11, r25	; 0x0b
     d0c:	8a 87       	std	Y+10, r24	; 0x0a
     d0e:	0f c0       	rjmp	.+30     	; 0xd2e <EEPROM_writeString+0xfa>
     d10:	88 ec       	ldi	r24, 0xC8	; 200
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	9d 87       	std	Y+13, r25	; 0x0d
     d16:	8c 87       	std	Y+12, r24	; 0x0c
     d18:	8c 85       	ldd	r24, Y+12	; 0x0c
     d1a:	9d 85       	ldd	r25, Y+13	; 0x0d
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	f1 f7       	brne	.-4      	; 0xd1c <EEPROM_writeString+0xe8>
     d20:	9d 87       	std	Y+13, r25	; 0x0d
     d22:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d24:	8a 85       	ldd	r24, Y+10	; 0x0a
     d26:	9b 85       	ldd	r25, Y+11	; 0x0b
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	9b 87       	std	Y+11, r25	; 0x0b
     d2c:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d2e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d30:	9b 85       	ldd	r25, Y+11	; 0x0b
     d32:	89 2b       	or	r24, r25
     d34:	69 f7       	brne	.-38     	; 0xd10 <EEPROM_writeString+0xdc>
     d36:	14 c0       	rjmp	.+40     	; 0xd60 <EEPROM_writeString+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d38:	6e 81       	ldd	r22, Y+6	; 0x06
     d3a:	7f 81       	ldd	r23, Y+7	; 0x07
     d3c:	88 85       	ldd	r24, Y+8	; 0x08
     d3e:	99 85       	ldd	r25, Y+9	; 0x09
     d40:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixunssfsi>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	9b 87       	std	Y+11, r25	; 0x0b
     d4a:	8a 87       	std	Y+10, r24	; 0x0a
     d4c:	8a 85       	ldd	r24, Y+10	; 0x0a
     d4e:	9b 85       	ldd	r25, Y+11	; 0x0b
     d50:	9f 87       	std	Y+15, r25	; 0x0f
     d52:	8e 87       	std	Y+14, r24	; 0x0e
     d54:	8e 85       	ldd	r24, Y+14	; 0x0e
     d56:	9f 85       	ldd	r25, Y+15	; 0x0f
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <EEPROM_writeString+0x124>
     d5c:	9f 87       	std	Y+15, r25	; 0x0f
     d5e:	8e 87       	std	Y+14, r24	; 0x0e
}
uint8 EEPROM_writeString(uint16 u16addr, uint8* str)
{

	uint8 i=0;
	for( i=0;str[i]!='\0';i++)
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	8f 5f       	subi	r24, 0xFF	; 255
     d64:	89 83       	std	Y+1, r24	; 0x01
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	88 2f       	mov	r24, r24
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	2a 89       	ldd	r18, Y+18	; 0x12
     d6e:	3b 89       	ldd	r19, Y+19	; 0x13
     d70:	82 0f       	add	r24, r18
     d72:	93 1f       	adc	r25, r19
     d74:	fc 01       	movw	r30, r24
     d76:	80 81       	ld	r24, Z
     d78:	88 23       	and	r24, r24
     d7a:	09 f0       	breq	.+2      	; 0xd7e <EEPROM_writeString+0x14a>
     d7c:	6c cf       	rjmp	.-296    	; 0xc56 <EEPROM_writeString+0x22>
	EEPROM_writeByte(u16addr+i,str[i]);
	_delay_ms(10);

}

	EEPROM_writeByte(u16addr+i,'\0');
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	88 89       	ldd	r24, Y+16	; 0x10
     d86:	99 89       	ldd	r25, Y+17	; 0x11
     d88:	82 0f       	add	r24, r18
     d8a:	93 1f       	adc	r25, r19
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	0e 94 7e 05 	call	0xafc	; 0xafc <EEPROM_writeByte>


}
     d92:	00 00       	nop
     d94:	63 96       	adiw	r28, 0x13	; 19
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <EEPROM_readString>:
uint8 EEPROM_readString(uint16 u16addr, uint8 *str)
{
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	00 d0       	rcall	.+0      	; 0xdac <EEPROM_readString+0x6>
     dac:	00 d0       	rcall	.+0      	; 0xdae <EEPROM_readString+0x8>
     dae:	1f 92       	push	r1
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	9b 83       	std	Y+3, r25	; 0x03
     db6:	8a 83       	std	Y+2, r24	; 0x02
     db8:	7d 83       	std	Y+5, r23	; 0x05
     dba:	6c 83       	std	Y+4, r22	; 0x04

	uint8 i = 0;
     dbc:	19 82       	std	Y+1, r1	; 0x01
		EEPROM_readByte(u16addr, &str[i]);
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	88 2f       	mov	r24, r24
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	2c 81       	ldd	r18, Y+4	; 0x04
     dc6:	3d 81       	ldd	r19, Y+5	; 0x05
     dc8:	28 0f       	add	r18, r24
     dca:	39 1f       	adc	r19, r25
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	9b 81       	ldd	r25, Y+3	; 0x03
     dd0:	b9 01       	movw	r22, r18
     dd2:	0e 94 bc 05 	call	0xb78	; 0xb78 <EEPROM_readByte>
		while(str[i]!='\0')
     dd6:	14 c0       	rjmp	.+40     	; 0xe00 <EEPROM_readString+0x5a>
		{u16addr++;
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	9b 81       	ldd	r25, Y+3	; 0x03
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	9b 83       	std	Y+3, r25	; 0x03
     de0:	8a 83       	std	Y+2, r24	; 0x02
			i++;
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	8f 5f       	subi	r24, 0xFF	; 255
     de6:	89 83       	std	Y+1, r24	; 0x01
			EEPROM_readByte(u16addr, &str[i]);
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	88 2f       	mov	r24, r24
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	2c 81       	ldd	r18, Y+4	; 0x04
     df0:	3d 81       	ldd	r19, Y+5	; 0x05
     df2:	28 0f       	add	r18, r24
     df4:	39 1f       	adc	r19, r25
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	9b 81       	ldd	r25, Y+3	; 0x03
     dfa:	b9 01       	movw	r22, r18
     dfc:	0e 94 bc 05 	call	0xb78	; 0xb78 <EEPROM_readByte>
uint8 EEPROM_readString(uint16 u16addr, uint8 *str)
{

	uint8 i = 0;
		EEPROM_readByte(u16addr, &str[i]);
		while(str[i]!='\0')
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	88 2f       	mov	r24, r24
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	2c 81       	ldd	r18, Y+4	; 0x04
     e08:	3d 81       	ldd	r19, Y+5	; 0x05
     e0a:	82 0f       	add	r24, r18
     e0c:	93 1f       	adc	r25, r19
     e0e:	fc 01       	movw	r30, r24
     e10:	80 81       	ld	r24, Z
     e12:	88 23       	and	r24, r24
     e14:	09 f7       	brne	.-62     	; 0xdd8 <EEPROM_readString+0x32>
		{u16addr++;
			i++;
			EEPROM_readByte(u16addr, &str[i]);
		}
		str[i]='\0';
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	2c 81       	ldd	r18, Y+4	; 0x04
     e1e:	3d 81       	ldd	r19, Y+5	; 0x05
     e20:	82 0f       	add	r24, r18
     e22:	93 1f       	adc	r25, r19
     e24:	fc 01       	movw	r30, r24
     e26:	10 82       	st	Z, r1

}
     e28:	00 00       	nop
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	08 95       	ret

00000e3a <TWI_init>:
 * 					functions definition 			*
 * *************************************************************
 */

void TWI_init(const TWI_configurationType *config)
{
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <TWI_init+0x12>
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	89 83       	std	Y+1, r24	; 0x01
	/* the equation is SCL frequency = CPU clock frequency /(16+2(TWBR)*4^prescaler */
	TWBR=((float)F_CPU/config->baudRate +16)/(2*pow(4,config->prescasler));
     e54:	00 e2       	ldi	r16, 0x20	; 32
     e56:	10 e0       	ldi	r17, 0x00	; 0
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	9a 81       	ldd	r25, Y+2	; 0x02
     e5c:	fc 01       	movw	r30, r24
     e5e:	80 81       	ld	r24, Z
     e60:	91 81       	ldd	r25, Z+1	; 0x01
     e62:	a2 81       	ldd	r26, Z+2	; 0x02
     e64:	b3 81       	ldd	r27, Z+3	; 0x03
     e66:	bc 01       	movw	r22, r24
     e68:	cd 01       	movw	r24, r26
     e6a:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__floatunsisf>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	9c 01       	movw	r18, r24
     e74:	ad 01       	movw	r20, r26
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	74 e2       	ldi	r23, 0x24	; 36
     e7a:	84 ef       	ldi	r24, 0xF4	; 244
     e7c:	9a e4       	ldi	r25, 0x4A	; 74
     e7e:	0e 94 c8 10 	call	0x2190	; 0x2190 <__divsf3>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 e8       	ldi	r20, 0x80	; 128
     e8c:	51 e4       	ldi	r21, 0x41	; 65
     e8e:	bc 01       	movw	r22, r24
     e90:	cd 01       	movw	r24, r26
     e92:	0e 94 57 10 	call	0x20ae	; 0x20ae <__addsf3>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	6c 01       	movw	r12, r24
     e9c:	7d 01       	movw	r14, r26
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	fc 01       	movw	r30, r24
     ea4:	84 81       	ldd	r24, Z+4	; 0x04
     ea6:	88 2f       	mov	r24, r24
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	a0 e0       	ldi	r26, 0x00	; 0
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	bc 01       	movw	r22, r24
     eb0:	cd 01       	movw	r24, r26
     eb2:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__floatunsisf>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	9c 01       	movw	r18, r24
     ebc:	ad 01       	movw	r20, r26
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	80 e8       	ldi	r24, 0x80	; 128
     ec4:	90 e4       	ldi	r25, 0x40	; 64
     ec6:	0e 94 8d 12 	call	0x251a	; 0x251a <pow>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	9c 01       	movw	r18, r24
     ed0:	ad 01       	movw	r20, r26
     ed2:	bc 01       	movw	r22, r24
     ed4:	cd 01       	movw	r24, r26
     ed6:	0e 94 57 10 	call	0x20ae	; 0x20ae <__addsf3>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	9c 01       	movw	r18, r24
     ee0:	ad 01       	movw	r20, r26
     ee2:	c7 01       	movw	r24, r14
     ee4:	b6 01       	movw	r22, r12
     ee6:	0e 94 c8 10 	call	0x2190	; 0x2190 <__divsf3>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	bc 01       	movw	r22, r24
     ef0:	cd 01       	movw	r24, r26
     ef2:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixunssfsi>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	f8 01       	movw	r30, r16
     efc:	80 83       	st	Z, r24
	 	TWSR=config->prescasler;/*store prescaler  in first 2 bits (TWPS1 and TWPS0) as other bits read only*/
     efe:	81 e2       	ldi	r24, 0x21	; 33
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	29 81       	ldd	r18, Y+1	; 0x01
     f04:	3a 81       	ldd	r19, Y+2	; 0x02
     f06:	f9 01       	movw	r30, r18
     f08:	24 81       	ldd	r18, Z+4	; 0x04
     f0a:	fc 01       	movw	r30, r24
     f0c:	20 83       	st	Z, r18
	 TWAR=config->slave_address<<1;// store slave address (7bits) in the most 7 significant bits
     f0e:	82 e2       	ldi	r24, 0x22	; 34
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	29 81       	ldd	r18, Y+1	; 0x01
     f14:	3a 81       	ldd	r19, Y+2	; 0x02
     f16:	f9 01       	movw	r30, r18
     f18:	25 81       	ldd	r18, Z+5	; 0x05
     f1a:	22 0f       	add	r18, r18
     f1c:	fc 01       	movw	r30, r24
     f1e:	20 83       	st	Z, r18
	TWCR|=(1<<TWEN);/* enable TWI module */
     f20:	86 e5       	ldi	r24, 0x56	; 86
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	26 e5       	ldi	r18, 0x56	; 86
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	f9 01       	movw	r30, r18
     f2a:	20 81       	ld	r18, Z
     f2c:	24 60       	ori	r18, 0x04	; 4
     f2e:	fc 01       	movw	r30, r24
     f30:	20 83       	st	Z, r18

}
     f32:	00 00       	nop
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	df 90       	pop	r13
     f46:	cf 90       	pop	r12
     f48:	08 95       	ret

00000f4a <TWI_start>:
void TWI_start(void)
{
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	//make enable again to force other bits in the register to be zero
	//start bit TWSTA and clear finish current job flag TWINT by toggle it
TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     f52:	86 e5       	ldi	r24, 0x56	; 86
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	24 ea       	ldi	r18, 0xA4	; 164
     f58:	fc 01       	movw	r30, r24
     f5a:	20 83       	st	Z, r18
while(BIT_IS_CLEAR(TWCR,TWINT));// WAIT finish current job  flag TWINT =1
     f5c:	00 00       	nop
     f5e:	86 e5       	ldi	r24, 0x56	; 86
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	fc 01       	movw	r30, r24
     f64:	80 81       	ld	r24, Z
     f66:	88 23       	and	r24, r24
     f68:	d4 f7       	brge	.-12     	; 0xf5e <TWI_start+0x14>
}
     f6a:	00 00       	nop
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <TWI_stop>:
void TWI_stop(void)
{/*make enable again to force other bits in the register to be zero
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
	stop bit TWST0 and clear finish current job flag TWINT by toggle it */
TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     f7a:	86 e5       	ldi	r24, 0x56	; 86
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	24 e9       	ldi	r18, 0x94	; 148
     f80:	fc 01       	movw	r30, r24
     f82:	20 83       	st	Z, r18

//NO NEED TO WAIT TWINT flag as it  is the end of frame
}
     f84:	00 00       	nop
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret

00000f8c <TWI_write>:
void TWI_write(uint8 data)
{
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	1f 92       	push	r1
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	89 83       	std	Y+1, r24	; 0x01
/* store data in TWDR */
	TWDR=data;
     f98:	83 e2       	ldi	r24, 0x23	; 35
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	29 81       	ldd	r18, Y+1	; 0x01
     f9e:	fc 01       	movw	r30, r24
     fa0:	20 83       	st	Z, r18
	/*make enable again to force other bits in the register to be zero
		 clear finish current job flag TWINT by toggle it */
	TWCR=(1<<TWINT)|(1<<TWEN);
     fa2:	86 e5       	ldi	r24, 0x56	; 86
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	24 e8       	ldi	r18, 0x84	; 132
     fa8:	fc 01       	movw	r30, r24
     faa:	20 83       	st	Z, r18

	while(BIT_IS_CLEAR(TWCR,TWINT));// WAIT finish current job  flag TWINT =1
     fac:	00 00       	nop
     fae:	86 e5       	ldi	r24, 0x56	; 86
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	fc 01       	movw	r30, r24
     fb4:	80 81       	ld	r24, Z
     fb6:	88 23       	and	r24, r24
     fb8:	d4 f7       	brge	.-12     	; 0xfae <TWI_write+0x22>

}
     fba:	00 00       	nop
     fbc:	0f 90       	pop	r0
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <TWI_read_with_ACK>:
uint8 TWI_read_with_ACK(void)
{/*make enable again to force other bits in the register to be zero
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
		 clear finish current job flag TWINT by toggle it
		 enable acknowledge bit TWEA */

	TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
     fcc:	86 e5       	ldi	r24, 0x56	; 86
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	24 ec       	ldi	r18, 0xC4	; 196
     fd2:	fc 01       	movw	r30, r24
     fd4:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(TWCR,TWINT));
     fd6:	00 00       	nop
     fd8:	86 e5       	ldi	r24, 0x56	; 86
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	fc 01       	movw	r30, r24
     fde:	80 81       	ld	r24, Z
     fe0:	88 23       	and	r24, r24
     fe2:	d4 f7       	brge	.-12     	; 0xfd8 <TWI_read_with_ACK+0x14>
	//CLEAR flag before or after
	return TWDR;
     fe4:	83 e2       	ldi	r24, 0x23	; 35
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	fc 01       	movw	r30, r24
     fea:	80 81       	ld	r24, Z
}
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	08 95       	ret

00000ff2 <TWI_read_with_NACK>:

uint8 TWI_read_with_NACK(void)
{/*make enable again to force other bits in the register to be zero
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
		 clear finish current job flag TWINT by toggle it*/
	TWCR=(1<<TWINT)|(1<<TWEN);
     ffa:	86 e5       	ldi	r24, 0x56	; 86
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	24 e8       	ldi	r18, 0x84	; 132
    1000:	fc 01       	movw	r30, r24
    1002:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(TWCR,TWINT));// WAIT finish current job  flag TWINT =1
    1004:	00 00       	nop
    1006:	86 e5       	ldi	r24, 0x56	; 86
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	fc 01       	movw	r30, r24
    100c:	80 81       	ld	r24, Z
    100e:	88 23       	and	r24, r24
    1010:	d4 f7       	brge	.-12     	; 0x1006 <TWI_read_with_NACK+0x14>

	return TWDR;
    1012:	83 e2       	ldi	r24, 0x23	; 35
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	fc 01       	movw	r30, r24
    1018:	80 81       	ld	r24, Z
}
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	08 95       	ret

00001020 <TWI_getStatus>:
uint8 TWI_getStatus()
{	/*return bits 7:3 in status register TWSR */
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
	return TWSR&0XF8;
    1028:	81 e2       	ldi	r24, 0x21	; 33
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	fc 01       	movw	r30, r24
    102e:	80 81       	ld	r24, Z
    1030:	88 7f       	andi	r24, 0xF8	; 248
}
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	08 95       	ret

00001038 <__vector_19>:
/***************************************************************
 * 		Interrupt Service Routine functions definition 						*
 * *************************************************************
 */
/*ISR function work with timer 0 compare match mode */
ISR(TIMER0_COMP_vect) {
    1038:	1f 92       	push	r1
    103a:	0f 92       	push	r0
    103c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1040:	0f 92       	push	r0
    1042:	11 24       	eor	r1, r1
    1044:	2f 93       	push	r18
    1046:	3f 93       	push	r19
    1048:	4f 93       	push	r20
    104a:	5f 93       	push	r21
    104c:	6f 93       	push	r22
    104e:	7f 93       	push	r23
    1050:	8f 93       	push	r24
    1052:	9f 93       	push	r25
    1054:	af 93       	push	r26
    1056:	bf 93       	push	r27
    1058:	ef 93       	push	r30
    105a:	ff 93       	push	r31
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) /* check that callback function address is passed */
    1064:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <g_callBackPtr>
    1068:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <g_callBackPtr+0x1>
    106c:	89 2b       	or	r24, r25
    106e:	31 f0       	breq	.+12     	; 0x107c <__vector_19+0x44>
		g_callBackPtr();/* point to callBack function */
    1070:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <g_callBackPtr>
    1074:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <g_callBackPtr+0x1>
    1078:	fc 01       	movw	r30, r24
    107a:	09 95       	icall

}
    107c:	00 00       	nop
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	ff 91       	pop	r31
    1084:	ef 91       	pop	r30
    1086:	bf 91       	pop	r27
    1088:	af 91       	pop	r26
    108a:	9f 91       	pop	r25
    108c:	8f 91       	pop	r24
    108e:	7f 91       	pop	r23
    1090:	6f 91       	pop	r22
    1092:	5f 91       	pop	r21
    1094:	4f 91       	pop	r20
    1096:	3f 91       	pop	r19
    1098:	2f 91       	pop	r18
    109a:	0f 90       	pop	r0
    109c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    10a0:	0f 90       	pop	r0
    10a2:	1f 90       	pop	r1
    10a4:	18 95       	reti

000010a6 <__vector_9>:
/*ISR function work with timer 0 normal mode */
ISR(TIMER0_OVF_vect) {
    10a6:	1f 92       	push	r1
    10a8:	0f 92       	push	r0
    10aa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    10ae:	0f 92       	push	r0
    10b0:	11 24       	eor	r1, r1
    10b2:	2f 93       	push	r18
    10b4:	3f 93       	push	r19
    10b6:	4f 93       	push	r20
    10b8:	5f 93       	push	r21
    10ba:	6f 93       	push	r22
    10bc:	7f 93       	push	r23
    10be:	8f 93       	push	r24
    10c0:	9f 93       	push	r25
    10c2:	af 93       	push	r26
    10c4:	bf 93       	push	r27
    10c6:	ef 93       	push	r30
    10c8:	ff 93       	push	r31
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    10d2:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <g_callBackPtr>
    10d6:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <g_callBackPtr+0x1>
    10da:	89 2b       	or	r24, r25
    10dc:	31 f0       	breq	.+12     	; 0x10ea <__vector_9+0x44>
		g_callBackPtr();
    10de:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <g_callBackPtr>
    10e2:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <g_callBackPtr+0x1>
    10e6:	fc 01       	movw	r30, r24
    10e8:	09 95       	icall

}
    10ea:	00 00       	nop
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	ff 91       	pop	r31
    10f2:	ef 91       	pop	r30
    10f4:	bf 91       	pop	r27
    10f6:	af 91       	pop	r26
    10f8:	9f 91       	pop	r25
    10fa:	8f 91       	pop	r24
    10fc:	7f 91       	pop	r23
    10fe:	6f 91       	pop	r22
    1100:	5f 91       	pop	r21
    1102:	4f 91       	pop	r20
    1104:	3f 91       	pop	r19
    1106:	2f 91       	pop	r18
    1108:	0f 90       	pop	r0
    110a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    110e:	0f 90       	pop	r0
    1110:	1f 90       	pop	r1
    1112:	18 95       	reti

00001114 <__vector_8>:
/*ISR function work with timer 1 normal mode */
ISR(TIMER1_OVF_vect) {
    1114:	1f 92       	push	r1
    1116:	0f 92       	push	r0
    1118:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    111c:	0f 92       	push	r0
    111e:	11 24       	eor	r1, r1
    1120:	2f 93       	push	r18
    1122:	3f 93       	push	r19
    1124:	4f 93       	push	r20
    1126:	5f 93       	push	r21
    1128:	6f 93       	push	r22
    112a:	7f 93       	push	r23
    112c:	8f 93       	push	r24
    112e:	9f 93       	push	r25
    1130:	af 93       	push	r26
    1132:	bf 93       	push	r27
    1134:	ef 93       	push	r30
    1136:	ff 93       	push	r31
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    1140:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <g_callBackPtr>
    1144:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <g_callBackPtr+0x1>
    1148:	89 2b       	or	r24, r25
    114a:	31 f0       	breq	.+12     	; 0x1158 <__vector_8+0x44>
		g_callBackPtr();
    114c:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <g_callBackPtr>
    1150:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <g_callBackPtr+0x1>
    1154:	fc 01       	movw	r30, r24
    1156:	09 95       	icall

}
    1158:	00 00       	nop
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	ff 91       	pop	r31
    1160:	ef 91       	pop	r30
    1162:	bf 91       	pop	r27
    1164:	af 91       	pop	r26
    1166:	9f 91       	pop	r25
    1168:	8f 91       	pop	r24
    116a:	7f 91       	pop	r23
    116c:	6f 91       	pop	r22
    116e:	5f 91       	pop	r21
    1170:	4f 91       	pop	r20
    1172:	3f 91       	pop	r19
    1174:	2f 91       	pop	r18
    1176:	0f 90       	pop	r0
    1178:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    117c:	0f 90       	pop	r0
    117e:	1f 90       	pop	r1
    1180:	18 95       	reti

00001182 <__vector_6>:
/*ISR function work with timer 1A compare match mode */
ISR(TIMER1_COMPA_vect) {
    1182:	1f 92       	push	r1
    1184:	0f 92       	push	r0
    1186:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    118a:	0f 92       	push	r0
    118c:	11 24       	eor	r1, r1
    118e:	2f 93       	push	r18
    1190:	3f 93       	push	r19
    1192:	4f 93       	push	r20
    1194:	5f 93       	push	r21
    1196:	6f 93       	push	r22
    1198:	7f 93       	push	r23
    119a:	8f 93       	push	r24
    119c:	9f 93       	push	r25
    119e:	af 93       	push	r26
    11a0:	bf 93       	push	r27
    11a2:	ef 93       	push	r30
    11a4:	ff 93       	push	r31
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    11ae:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <g_callBackPtr>
    11b2:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <g_callBackPtr+0x1>
    11b6:	89 2b       	or	r24, r25
    11b8:	31 f0       	breq	.+12     	; 0x11c6 <__vector_6+0x44>
		g_callBackPtr();
    11ba:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <g_callBackPtr>
    11be:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <g_callBackPtr+0x1>
    11c2:	fc 01       	movw	r30, r24
    11c4:	09 95       	icall
}
    11c6:	00 00       	nop
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	ff 91       	pop	r31
    11ce:	ef 91       	pop	r30
    11d0:	bf 91       	pop	r27
    11d2:	af 91       	pop	r26
    11d4:	9f 91       	pop	r25
    11d6:	8f 91       	pop	r24
    11d8:	7f 91       	pop	r23
    11da:	6f 91       	pop	r22
    11dc:	5f 91       	pop	r21
    11de:	4f 91       	pop	r20
    11e0:	3f 91       	pop	r19
    11e2:	2f 91       	pop	r18
    11e4:	0f 90       	pop	r0
    11e6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    11ea:	0f 90       	pop	r0
    11ec:	1f 90       	pop	r1
    11ee:	18 95       	reti

000011f0 <__vector_3>:
/*ISR function work with timer 2 compare match mode */
ISR(TIMER2_COMP_vect) {
    11f0:	1f 92       	push	r1
    11f2:	0f 92       	push	r0
    11f4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    11f8:	0f 92       	push	r0
    11fa:	11 24       	eor	r1, r1
    11fc:	2f 93       	push	r18
    11fe:	3f 93       	push	r19
    1200:	4f 93       	push	r20
    1202:	5f 93       	push	r21
    1204:	6f 93       	push	r22
    1206:	7f 93       	push	r23
    1208:	8f 93       	push	r24
    120a:	9f 93       	push	r25
    120c:	af 93       	push	r26
    120e:	bf 93       	push	r27
    1210:	ef 93       	push	r30
    1212:	ff 93       	push	r31
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    121c:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <g_callBackPtr>
    1220:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <g_callBackPtr+0x1>
    1224:	89 2b       	or	r24, r25
    1226:	31 f0       	breq	.+12     	; 0x1234 <__vector_3+0x44>
		g_callBackPtr();
    1228:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <g_callBackPtr>
    122c:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <g_callBackPtr+0x1>
    1230:	fc 01       	movw	r30, r24
    1232:	09 95       	icall

}
    1234:	00 00       	nop
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	ff 91       	pop	r31
    123c:	ef 91       	pop	r30
    123e:	bf 91       	pop	r27
    1240:	af 91       	pop	r26
    1242:	9f 91       	pop	r25
    1244:	8f 91       	pop	r24
    1246:	7f 91       	pop	r23
    1248:	6f 91       	pop	r22
    124a:	5f 91       	pop	r21
    124c:	4f 91       	pop	r20
    124e:	3f 91       	pop	r19
    1250:	2f 91       	pop	r18
    1252:	0f 90       	pop	r0
    1254:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1258:	0f 90       	pop	r0
    125a:	1f 90       	pop	r1
    125c:	18 95       	reti

0000125e <__vector_4>:
/*ISR function work with timer 2 normal mode */
ISR(TIMER2_OVF_vect) {
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1266:	0f 92       	push	r0
    1268:	11 24       	eor	r1, r1
    126a:	2f 93       	push	r18
    126c:	3f 93       	push	r19
    126e:	4f 93       	push	r20
    1270:	5f 93       	push	r21
    1272:	6f 93       	push	r22
    1274:	7f 93       	push	r23
    1276:	8f 93       	push	r24
    1278:	9f 93       	push	r25
    127a:	af 93       	push	r26
    127c:	bf 93       	push	r27
    127e:	ef 93       	push	r30
    1280:	ff 93       	push	r31
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    128a:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <g_callBackPtr>
    128e:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <g_callBackPtr+0x1>
    1292:	89 2b       	or	r24, r25
    1294:	31 f0       	breq	.+12     	; 0x12a2 <__vector_4+0x44>
		g_callBackPtr();
    1296:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <g_callBackPtr>
    129a:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <g_callBackPtr+0x1>
    129e:	fc 01       	movw	r30, r24
    12a0:	09 95       	icall
}
    12a2:	00 00       	nop
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	ff 91       	pop	r31
    12aa:	ef 91       	pop	r30
    12ac:	bf 91       	pop	r27
    12ae:	af 91       	pop	r26
    12b0:	9f 91       	pop	r25
    12b2:	8f 91       	pop	r24
    12b4:	7f 91       	pop	r23
    12b6:	6f 91       	pop	r22
    12b8:	5f 91       	pop	r21
    12ba:	4f 91       	pop	r20
    12bc:	3f 91       	pop	r19
    12be:	2f 91       	pop	r18
    12c0:	0f 90       	pop	r0
    12c2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    12c6:	0f 90       	pop	r0
    12c8:	1f 90       	pop	r1
    12ca:	18 95       	reti

000012cc <TIMER_init>:
/***************************************************************
 * 					functions definition 			*
 * *************************************************************
 */
/* configurate by passing timer  configuration structure */
void TIMER_init(TIMER_configurationType *config) {
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <TIMER_init+0x6>
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	9a 83       	std	Y+2, r25	; 0x02
    12d8:	89 83       	std	Y+1, r24	; 0x01
	configPtr = config; /* make passed configuration global */
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	9a 81       	ldd	r25, Y+2	; 0x02
    12de:	90 93 f8 00 	sts	0x00F8, r25	; 0x8000f8 <configPtr+0x1>
    12e2:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <configPtr>


/***************************************************************
* 						0	TIMER0		*
* *************************************************************/
	if (config->timerNumber == 0) {
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ea:	fc 01       	movw	r30, r24
    12ec:	80 81       	ld	r24, Z
    12ee:	88 23       	and	r24, r24
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <TIMER_init+0x28>
    12f2:	22 c1       	rjmp	.+580    	; 0x1538 <TIMER_init+0x26c>
		TCCR0 = 0; /* put zeros into all bits in the register */
    12f4:	83 e5       	ldi	r24, 0x53	; 83
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	fc 01       	movw	r30, r24
    12fa:	10 82       	st	Z, r1
		switch (config->prescaler) {
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	fc 01       	movw	r30, r24
    1302:	85 89       	ldd	r24, Z+21	; 0x15
    1304:	96 89       	ldd	r25, Z+22	; 0x16
    1306:	80 34       	cpi	r24, 0x40	; 64
    1308:	91 05       	cpc	r25, r1
    130a:	c1 f0       	breq	.+48     	; 0x133c <TIMER_init+0x70>
    130c:	81 34       	cpi	r24, 0x41	; 65
    130e:	91 05       	cpc	r25, r1
    1310:	18 f4       	brcc	.+6      	; 0x1318 <TIMER_init+0x4c>
    1312:	08 97       	sbiw	r24, 0x08	; 8
    1314:	49 f0       	breq	.+18     	; 0x1328 <TIMER_init+0x5c>
    1316:	30 c0       	rjmp	.+96     	; 0x1378 <TIMER_init+0xac>
    1318:	81 15       	cp	r24, r1
    131a:	f1 e0       	ldi	r31, 0x01	; 1
    131c:	9f 07       	cpc	r25, r31
    131e:	c1 f0       	breq	.+48     	; 0x1350 <TIMER_init+0x84>
    1320:	81 15       	cp	r24, r1
    1322:	94 40       	sbci	r25, 0x04	; 4
    1324:	f9 f0       	breq	.+62     	; 0x1364 <TIMER_init+0x98>
    1326:	28 c0       	rjmp	.+80     	; 0x1378 <TIMER_init+0xac>
		case 8:
			TCCR0 |= (1 << CS01); /*CS00=0  CS01=1 CS02=0  */
    1328:	83 e5       	ldi	r24, 0x53	; 83
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	23 e5       	ldi	r18, 0x53	; 83
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	f9 01       	movw	r30, r18
    1332:	20 81       	ld	r18, Z
    1334:	22 60       	ori	r18, 0x02	; 2
    1336:	fc 01       	movw	r30, r24
    1338:	20 83       	st	Z, r18
			break;
    133a:	27 c0       	rjmp	.+78     	; 0x138a <TIMER_init+0xbe>
		case 64:
			TCCR0 |= (1 << CS00) | (1 << CS01); /*CS00=1  CS01=1 CS02=0  */
    133c:	83 e5       	ldi	r24, 0x53	; 83
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	23 e5       	ldi	r18, 0x53	; 83
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	f9 01       	movw	r30, r18
    1346:	20 81       	ld	r18, Z
    1348:	23 60       	ori	r18, 0x03	; 3
    134a:	fc 01       	movw	r30, r24
    134c:	20 83       	st	Z, r18
			break;
    134e:	1d c0       	rjmp	.+58     	; 0x138a <TIMER_init+0xbe>
		case 256:
			TCCR0 |= (1 << CS02); /*CS00=0  CS01=0 CS02=02  */
    1350:	83 e5       	ldi	r24, 0x53	; 83
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	23 e5       	ldi	r18, 0x53	; 83
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	f9 01       	movw	r30, r18
    135a:	20 81       	ld	r18, Z
    135c:	24 60       	ori	r18, 0x04	; 4
    135e:	fc 01       	movw	r30, r24
    1360:	20 83       	st	Z, r18
			break;
    1362:	13 c0       	rjmp	.+38     	; 0x138a <TIMER_init+0xbe>
		case 1024:
			TCCR0 |= (1 << CS00) | (1 << CS02); /*CS00=1  CS01=0 CS02=1  */
    1364:	83 e5       	ldi	r24, 0x53	; 83
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	23 e5       	ldi	r18, 0x53	; 83
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	f9 01       	movw	r30, r18
    136e:	20 81       	ld	r18, Z
    1370:	25 60       	ori	r18, 0x05	; 5
    1372:	fc 01       	movw	r30, r24
    1374:	20 83       	st	Z, r18
			break;
    1376:	09 c0       	rjmp	.+18     	; 0x138a <TIMER_init+0xbe>
		default:/* the default case work scale 1:1 even the prescaler member not determine */
			TCCR0 |= (1 << CS00); /*CS00=1  CS01=0 CS02=0  */
    1378:	83 e5       	ldi	r24, 0x53	; 83
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	23 e5       	ldi	r18, 0x53	; 83
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	f9 01       	movw	r30, r18
    1382:	20 81       	ld	r18, Z
    1384:	21 60       	ori	r18, 0x01	; 1
    1386:	fc 01       	movw	r30, r24
    1388:	20 83       	st	Z, r18
		}
/***************************************************************
 * 					0-0 select the mode for TIMER0	*
* *************************************************************
*/
		if (!strcmp(config->mode, "compare"))
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	9a 81       	ldd	r25, Y+2	; 0x02
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	66 e7       	ldi	r22, 0x76	; 118
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    1398:	89 2b       	or	r24, r25
    139a:	09 f0       	breq	.+2      	; 0x139e <TIMER_init+0xd2>
    139c:	62 c0       	rjmp	.+196    	; 0x1462 <TIMER_init+0x196>
		{
			TCCR0 |= (1 << FOC0) | (1 << WGM01);
    139e:	83 e5       	ldi	r24, 0x53	; 83
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	23 e5       	ldi	r18, 0x53	; 83
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	f9 01       	movw	r30, r18
    13a8:	20 81       	ld	r18, Z
    13aa:	28 68       	ori	r18, 0x88	; 136
    13ac:	fc 01       	movw	r30, r24
    13ae:	20 83       	st	Z, r18
 * 		0-1 compare match output mode for TIMER0	*
 * ***************************************************
 */


				if (!strcmp(config->compareMatchMode, "toggle")) {
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	47 96       	adiw	r24, 0x17	; 23
    13b6:	6e e7       	ldi	r22, 0x7E	; 126
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    13be:	89 2b       	or	r24, r25
    13c0:	99 f4       	brne	.+38     	; 0x13e8 <TIMER_init+0x11c>
					TCCR0 |= (1 << COM00); /*COM00=1 AND COM01=0 */
    13c2:	83 e5       	ldi	r24, 0x53	; 83
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	23 e5       	ldi	r18, 0x53	; 83
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	f9 01       	movw	r30, r18
    13cc:	20 81       	ld	r18, Z
    13ce:	20 61       	ori	r18, 0x10	; 16
    13d0:	fc 01       	movw	r30, r24
    13d2:	20 83       	st	Z, r18
					SET_BIT(DDRB, 3); /*make OCO AS OUTPUT BIT */
    13d4:	87 e3       	ldi	r24, 0x37	; 55
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	27 e3       	ldi	r18, 0x37	; 55
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	f9 01       	movw	r30, r18
    13de:	20 81       	ld	r18, Z
    13e0:	28 60       	ori	r18, 0x08	; 8
    13e2:	fc 01       	movw	r30, r24
    13e4:	20 83       	st	Z, r18
    13e6:	37 c0       	rjmp	.+110    	; 0x1456 <TIMER_init+0x18a>
				} else if (!strcmp(config->compareMatchMode, "clear")) {
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	9a 81       	ldd	r25, Y+2	; 0x02
    13ec:	47 96       	adiw	r24, 0x17	; 23
    13ee:	65 e8       	ldi	r22, 0x85	; 133
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    13f6:	89 2b       	or	r24, r25
    13f8:	99 f4       	brne	.+38     	; 0x1420 <TIMER_init+0x154>
					TCCR0 |= (1 << COM01); /*COM00=0 AND COM01=1 */
    13fa:	83 e5       	ldi	r24, 0x53	; 83
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	23 e5       	ldi	r18, 0x53	; 83
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	f9 01       	movw	r30, r18
    1404:	20 81       	ld	r18, Z
    1406:	20 62       	ori	r18, 0x20	; 32
    1408:	fc 01       	movw	r30, r24
    140a:	20 83       	st	Z, r18
					SET_BIT(DDRB, 3);
    140c:	87 e3       	ldi	r24, 0x37	; 55
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	27 e3       	ldi	r18, 0x37	; 55
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	f9 01       	movw	r30, r18
    1416:	20 81       	ld	r18, Z
    1418:	28 60       	ori	r18, 0x08	; 8
    141a:	fc 01       	movw	r30, r24
    141c:	20 83       	st	Z, r18
    141e:	1b c0       	rjmp	.+54     	; 0x1456 <TIMER_init+0x18a>
				} else if (!strcmp(config->compareMatchMode, "set")) {
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	47 96       	adiw	r24, 0x17	; 23
    1426:	6b e8       	ldi	r22, 0x8B	; 139
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    142e:	89 2b       	or	r24, r25
    1430:	91 f4       	brne	.+36     	; 0x1456 <TIMER_init+0x18a>
					TCCR0 |= (1 << COM01) | (1 << COM00); /*COM00=1 AND COM01=1 */
    1432:	83 e5       	ldi	r24, 0x53	; 83
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	23 e5       	ldi	r18, 0x53	; 83
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	f9 01       	movw	r30, r18
    143c:	20 81       	ld	r18, Z
    143e:	20 63       	ori	r18, 0x30	; 48
    1440:	fc 01       	movw	r30, r24
    1442:	20 83       	st	Z, r18
					SET_BIT(DDRB, 3);
    1444:	87 e3       	ldi	r24, 0x37	; 55
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	27 e3       	ldi	r18, 0x37	; 55
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	f9 01       	movw	r30, r18
    144e:	20 81       	ld	r18, Z
    1450:	28 60       	ori	r18, 0x08	; 8
    1452:	fc 01       	movw	r30, r24
    1454:	20 83       	st	Z, r18
				}
				/* the default case will be normal port operation OCO disconnected
				enable interrupt for compare mode */
				TIMSK = (1 << OCIE0);
    1456:	89 e5       	ldi	r24, 0x59	; 89
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	22 e0       	ldi	r18, 0x02	; 2
    145c:	fc 01       	movw	r30, r24
    145e:	20 83       	st	Z, r18
    1460:	6b c0       	rjmp	.+214    	; 0x1538 <TIMER_init+0x26c>
/****************************************************
 * 		0-2 normal  mode for TIMER0		    *
 * ***************************************************
 */

		else if (!strcmp(config->mode, "normal"))
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	9a 81       	ldd	r25, Y+2	; 0x02
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	6f e8       	ldi	r22, 0x8F	; 143
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    1470:	89 2b       	or	r24, r25
    1472:	79 f4       	brne	.+30     	; 0x1492 <TIMER_init+0x1c6>
			{
			/*
			 * FOC0=1 for non PWM mode
			 * select normal mode --->> WGM01=0 and WGM00=0
			 */
			TCCR0 |= (1 << FOC0);
    1474:	83 e5       	ldi	r24, 0x53	; 83
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	23 e5       	ldi	r18, 0x53	; 83
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	f9 01       	movw	r30, r18
    147e:	20 81       	ld	r18, Z
    1480:	20 68       	ori	r18, 0x80	; 128
    1482:	fc 01       	movw	r30, r24
    1484:	20 83       	st	Z, r18
			TIMSK = (1 << TOIE0);
    1486:	89 e5       	ldi	r24, 0x59	; 89
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	21 e0       	ldi	r18, 0x01	; 1
    148c:	fc 01       	movw	r30, r24
    148e:	20 83       	st	Z, r18
    1490:	53 c0       	rjmp	.+166    	; 0x1538 <TIMER_init+0x26c>
			}
/****************************************************
 * 			0-3 PWM  mode for TIMER0	   *
 * ***************************************************
								 */
		else if (!strcmp(config->mode, "pwm")) {
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	66 e9       	ldi	r22, 0x96	; 150
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    14a0:	89 2b       	or	r24, r25
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <TIMER_init+0x1da>
    14a4:	49 c0       	rjmp	.+146    	; 0x1538 <TIMER_init+0x26c>
			/*
			 * FOC0=0 for  PWM mode
			 * select PWM mode --->> WGM01=1 and WGM00=1
			 */
			TCCR0 |= (1 << WGM00) | (1 << WGM01);
    14a6:	83 e5       	ldi	r24, 0x53	; 83
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	23 e5       	ldi	r18, 0x53	; 83
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	f9 01       	movw	r30, r18
    14b0:	20 81       	ld	r18, Z
    14b2:	28 64       	ori	r18, 0x48	; 72
    14b4:	fc 01       	movw	r30, r24
    14b6:	20 83       	st	Z, r18


			if (!strcmp(config->pwmMode, "inverting")) {
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	9a 81       	ldd	r25, Y+2	; 0x02
    14bc:	8b 96       	adiw	r24, 0x2b	; 43
    14be:	6a e9       	ldi	r22, 0x9A	; 154
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    14c6:	89 2b       	or	r24, r25
    14c8:	e1 f4       	brne	.+56     	; 0x1502 <TIMER_init+0x236>
				/* COM00=1 and COM01=1 */
				TCCR0 |= (1 << COM00);
    14ca:	83 e5       	ldi	r24, 0x53	; 83
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	23 e5       	ldi	r18, 0x53	; 83
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	f9 01       	movw	r30, r18
    14d4:	20 81       	ld	r18, Z
    14d6:	20 61       	ori	r18, 0x10	; 16
    14d8:	fc 01       	movw	r30, r24
    14da:	20 83       	st	Z, r18
				TCCR0 |= (1 << COM01);
    14dc:	83 e5       	ldi	r24, 0x53	; 83
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	23 e5       	ldi	r18, 0x53	; 83
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	f9 01       	movw	r30, r18
    14e6:	20 81       	ld	r18, Z
    14e8:	20 62       	ori	r18, 0x20	; 32
    14ea:	fc 01       	movw	r30, r24
    14ec:	20 83       	st	Z, r18
				SET_BIT(DDRB, 3);/*make OCO AS OUTPUT BIT */
    14ee:	87 e3       	ldi	r24, 0x37	; 55
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	27 e3       	ldi	r18, 0x37	; 55
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	f9 01       	movw	r30, r18
    14f8:	20 81       	ld	r18, Z
    14fa:	28 60       	ori	r18, 0x08	; 8
    14fc:	fc 01       	movw	r30, r24
    14fe:	20 83       	st	Z, r18
    1500:	1b c0       	rjmp	.+54     	; 0x1538 <TIMER_init+0x26c>
			} else if (!strcmp(config->pwmMode, "non-inverting")) {
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	8b 96       	adiw	r24, 0x2b	; 43
    1508:	64 ea       	ldi	r22, 0xA4	; 164
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    1510:	89 2b       	or	r24, r25
    1512:	91 f4       	brne	.+36     	; 0x1538 <TIMER_init+0x26c>
				/* COM00=0 and COM01=1 */
				TCCR0 |= (1 << COM01);
    1514:	83 e5       	ldi	r24, 0x53	; 83
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	23 e5       	ldi	r18, 0x53	; 83
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	f9 01       	movw	r30, r18
    151e:	20 81       	ld	r18, Z
    1520:	20 62       	ori	r18, 0x20	; 32
    1522:	fc 01       	movw	r30, r24
    1524:	20 83       	st	Z, r18
				SET_BIT(DDRB, 3);
    1526:	87 e3       	ldi	r24, 0x37	; 55
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	27 e3       	ldi	r18, 0x37	; 55
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	f9 01       	movw	r30, r18
    1530:	20 81       	ld	r18, Z
    1532:	28 60       	ori	r18, 0x08	; 8
    1534:	fc 01       	movw	r30, r24
    1536:	20 83       	st	Z, r18
*/

	if (config->timerNumber == 1) {
		/* put zeros into all bits in the registers */
	}
		TCCR1A = 0;
    1538:	8f e4       	ldi	r24, 0x4F	; 79
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	fc 01       	movw	r30, r24
    153e:	10 82       	st	Z, r1
		TCCR1B = 0;
    1540:	8e e4       	ldi	r24, 0x4E	; 78
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	fc 01       	movw	r30, r24
    1546:	10 82       	st	Z, r1

		switch (config->prescaler) {
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	fc 01       	movw	r30, r24
    154e:	85 89       	ldd	r24, Z+21	; 0x15
    1550:	96 89       	ldd	r25, Z+22	; 0x16
    1552:	80 34       	cpi	r24, 0x40	; 64
    1554:	91 05       	cpc	r25, r1
    1556:	c1 f0       	breq	.+48     	; 0x1588 <TIMER_init+0x2bc>
    1558:	81 34       	cpi	r24, 0x41	; 65
    155a:	91 05       	cpc	r25, r1
    155c:	18 f4       	brcc	.+6      	; 0x1564 <TIMER_init+0x298>
    155e:	08 97       	sbiw	r24, 0x08	; 8
    1560:	49 f0       	breq	.+18     	; 0x1574 <TIMER_init+0x2a8>
    1562:	30 c0       	rjmp	.+96     	; 0x15c4 <TIMER_init+0x2f8>
    1564:	81 15       	cp	r24, r1
    1566:	f1 e0       	ldi	r31, 0x01	; 1
    1568:	9f 07       	cpc	r25, r31
    156a:	c1 f0       	breq	.+48     	; 0x159c <TIMER_init+0x2d0>
    156c:	81 15       	cp	r24, r1
    156e:	94 40       	sbci	r25, 0x04	; 4
    1570:	f9 f0       	breq	.+62     	; 0x15b0 <TIMER_init+0x2e4>
    1572:	28 c0       	rjmp	.+80     	; 0x15c4 <TIMER_init+0x2f8>
		case 8:
			TCCR1B |= (1 << CS11);/*CS10=0  CS11=1 CS12=0  */
    1574:	8e e4       	ldi	r24, 0x4E	; 78
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	2e e4       	ldi	r18, 0x4E	; 78
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	f9 01       	movw	r30, r18
    157e:	20 81       	ld	r18, Z
    1580:	22 60       	ori	r18, 0x02	; 2
    1582:	fc 01       	movw	r30, r24
    1584:	20 83       	st	Z, r18
			break;
    1586:	27 c0       	rjmp	.+78     	; 0x15d6 <TIMER_init+0x30a>
		case 64:
			TCCR1B |= (1 << CS10) | (1 << CS11); /*CS10=1  CS11=1 CS12=0  */
    1588:	8e e4       	ldi	r24, 0x4E	; 78
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	2e e4       	ldi	r18, 0x4E	; 78
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	f9 01       	movw	r30, r18
    1592:	20 81       	ld	r18, Z
    1594:	23 60       	ori	r18, 0x03	; 3
    1596:	fc 01       	movw	r30, r24
    1598:	20 83       	st	Z, r18
			break;
    159a:	1d c0       	rjmp	.+58     	; 0x15d6 <TIMER_init+0x30a>
		case 256:
			TCCR1B |= (1 << CS12);/*CS10=0  CS11=0 CS12=1  */
    159c:	8e e4       	ldi	r24, 0x4E	; 78
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	2e e4       	ldi	r18, 0x4E	; 78
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	f9 01       	movw	r30, r18
    15a6:	20 81       	ld	r18, Z
    15a8:	24 60       	ori	r18, 0x04	; 4
    15aa:	fc 01       	movw	r30, r24
    15ac:	20 83       	st	Z, r18
			break;
    15ae:	13 c0       	rjmp	.+38     	; 0x15d6 <TIMER_init+0x30a>
		case 1024:
			TCCR1B |= (1 << CS10) | (1 << CS12);/*CS10=1  CS11=1 CS12=1  */
    15b0:	8e e4       	ldi	r24, 0x4E	; 78
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	2e e4       	ldi	r18, 0x4E	; 78
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	f9 01       	movw	r30, r18
    15ba:	20 81       	ld	r18, Z
    15bc:	25 60       	ori	r18, 0x05	; 5
    15be:	fc 01       	movw	r30, r24
    15c0:	20 83       	st	Z, r18
			break;
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <TIMER_init+0x30a>
		default:/* the default case work scale 1:1 even the prescaler member not determine */
			TCCR1B |= (1 << CS10); /*CS10=1  CS11=0 CS12=0  */
    15c4:	8e e4       	ldi	r24, 0x4E	; 78
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	2e e4       	ldi	r18, 0x4E	; 78
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	f9 01       	movw	r30, r18
    15ce:	20 81       	ld	r18, Z
    15d0:	21 60       	ori	r18, 0x01	; 1
    15d2:	fc 01       	movw	r30, r24
    15d4:	20 83       	st	Z, r18

/****************************************************
* 		1-1 compare match output mode for TIMER1 A	*
* ***************************************************
*/
		if (!strcmp(config->mode, "compare")) {
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	66 e7       	ldi	r22, 0x76	; 118
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    15e4:	89 2b       	or	r24, r25
    15e6:	09 f0       	breq	.+2      	; 0x15ea <TIMER_init+0x31e>
    15e8:	6b c0       	rjmp	.+214    	; 0x16c0 <TIMER_init+0x3f4>
			/*
			 * FOC1=1 for non PWM mode
			 * select compare mode --->> /* WGM10=0 ,  WGM11=0 , WGM12=1 and WGM13=0 */
			TCCR1A |= (1 << FOC1A);
    15ea:	8f e4       	ldi	r24, 0x4F	; 79
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	2f e4       	ldi	r18, 0x4F	; 79
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	f9 01       	movw	r30, r18
    15f4:	20 81       	ld	r18, Z
    15f6:	28 60       	ori	r18, 0x08	; 8
    15f8:	fc 01       	movw	r30, r24
    15fa:	20 83       	st	Z, r18
			TCCR1B |= (1 << WGM12);
    15fc:	8e e4       	ldi	r24, 0x4E	; 78
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	2e e4       	ldi	r18, 0x4E	; 78
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	f9 01       	movw	r30, r18
    1606:	20 81       	ld	r18, Z
    1608:	28 60       	ori	r18, 0x08	; 8
    160a:	fc 01       	movw	r30, r24
    160c:	20 83       	st	Z, r18
			if (!strcmp(config->compareMatchMode, "toggle")) {
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	9a 81       	ldd	r25, Y+2	; 0x02
    1612:	47 96       	adiw	r24, 0x17	; 23
    1614:	6e e7       	ldi	r22, 0x7E	; 126
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    161c:	89 2b       	or	r24, r25
    161e:	99 f4       	brne	.+38     	; 0x1646 <TIMER_init+0x37a>
				TCCR1A |= (1 << COM1A0); /*COM1A0=1 AND COM1A1=0 */
    1620:	8f e4       	ldi	r24, 0x4F	; 79
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	2f e4       	ldi	r18, 0x4F	; 79
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	f9 01       	movw	r30, r18
    162a:	20 81       	ld	r18, Z
    162c:	20 64       	ori	r18, 0x40	; 64
    162e:	fc 01       	movw	r30, r24
    1630:	20 83       	st	Z, r18
				SET_BIT(DDRD, 5);/*make OCO AS OUTPUT BIT */
    1632:	81 e3       	ldi	r24, 0x31	; 49
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	21 e3       	ldi	r18, 0x31	; 49
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	f9 01       	movw	r30, r18
    163c:	20 81       	ld	r18, Z
    163e:	20 62       	ori	r18, 0x20	; 32
    1640:	fc 01       	movw	r30, r24
    1642:	20 83       	st	Z, r18
    1644:	37 c0       	rjmp	.+110    	; 0x16b4 <TIMER_init+0x3e8>
			} else if (!strcmp(config->compareMatchMode, "clear")) {
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
    164a:	47 96       	adiw	r24, 0x17	; 23
    164c:	65 e8       	ldi	r22, 0x85	; 133
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    1654:	89 2b       	or	r24, r25
    1656:	99 f4       	brne	.+38     	; 0x167e <TIMER_init+0x3b2>
				TCCR1A |= (1 << COM1A1);/*COM1A0=0 AND COM1A1=1 */
    1658:	8f e4       	ldi	r24, 0x4F	; 79
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	2f e4       	ldi	r18, 0x4F	; 79
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	f9 01       	movw	r30, r18
    1662:	20 81       	ld	r18, Z
    1664:	20 68       	ori	r18, 0x80	; 128
    1666:	fc 01       	movw	r30, r24
    1668:	20 83       	st	Z, r18
				SET_BIT(DDRD, 5);
    166a:	81 e3       	ldi	r24, 0x31	; 49
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	21 e3       	ldi	r18, 0x31	; 49
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	f9 01       	movw	r30, r18
    1674:	20 81       	ld	r18, Z
    1676:	20 62       	ori	r18, 0x20	; 32
    1678:	fc 01       	movw	r30, r24
    167a:	20 83       	st	Z, r18
    167c:	1b c0       	rjmp	.+54     	; 0x16b4 <TIMER_init+0x3e8>

			} else if (!strcmp(config->compareMatchMode, "set")) {
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	9a 81       	ldd	r25, Y+2	; 0x02
    1682:	47 96       	adiw	r24, 0x17	; 23
    1684:	6b e8       	ldi	r22, 0x8B	; 139
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    168c:	89 2b       	or	r24, r25
    168e:	91 f4       	brne	.+36     	; 0x16b4 <TIMER_init+0x3e8>
				TCCR1A |= (1 << COM1A1) | (1 << COM1A0);/*COM1A0=1 AND COM1A1=1 */
    1690:	8f e4       	ldi	r24, 0x4F	; 79
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	2f e4       	ldi	r18, 0x4F	; 79
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	f9 01       	movw	r30, r18
    169a:	20 81       	ld	r18, Z
    169c:	20 6c       	ori	r18, 0xC0	; 192
    169e:	fc 01       	movw	r30, r24
    16a0:	20 83       	st	Z, r18
				SET_BIT(DDRD, 5);
    16a2:	81 e3       	ldi	r24, 0x31	; 49
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	21 e3       	ldi	r18, 0x31	; 49
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	f9 01       	movw	r30, r18
    16ac:	20 81       	ld	r18, Z
    16ae:	20 62       	ori	r18, 0x20	; 32
    16b0:	fc 01       	movw	r30, r24
    16b2:	20 83       	st	Z, r18

			}
			/* the default case will be normal port operation OCO disconnected
							enable interrupt for compare mode */
			TIMSK = (1 << OCIE1A);
    16b4:	89 e5       	ldi	r24, 0x59	; 89
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	20 e1       	ldi	r18, 0x10	; 16
    16ba:	fc 01       	movw	r30, r24
    16bc:	20 83       	st	Z, r18
    16be:	6b c0       	rjmp	.+214    	; 0x1796 <TIMER_init+0x4ca>
/****************************************************
* 		1-2 normal  mode for TIMER1		      *
* ***************************************************
*/
		} else if (!strcmp(config->mode, "normal"))
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	9a 81       	ldd	r25, Y+2	; 0x02
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	6f e8       	ldi	r22, 0x8F	; 143
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    16ce:	89 2b       	or	r24, r25
    16d0:	79 f4       	brne	.+30     	; 0x16f0 <TIMER_init+0x424>
		{
			/*
			 * FOC0=1 for non PWM mode
			 * select normal mode --->> WGM11=0 and WGM10=0
						 */
			TCCR1A |= (1 << FOC1A);
    16d2:	8f e4       	ldi	r24, 0x4F	; 79
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	2f e4       	ldi	r18, 0x4F	; 79
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	f9 01       	movw	r30, r18
    16dc:	20 81       	ld	r18, Z
    16de:	28 60       	ori	r18, 0x08	; 8
    16e0:	fc 01       	movw	r30, r24
    16e2:	20 83       	st	Z, r18
			TIMSK = (1 << TOIE1);
    16e4:	89 e5       	ldi	r24, 0x59	; 89
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	24 e0       	ldi	r18, 0x04	; 4
    16ea:	fc 01       	movw	r30, r24
    16ec:	20 83       	st	Z, r18
    16ee:	53 c0       	rjmp	.+166    	; 0x1796 <TIMER_init+0x4ca>


/****************************************************
 * 			1-3 PWM  mode for TIMER1 A		  *
 * ***************************************************/
		} else if (!strcmp(config->mode, "pwm")) {
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	9a 81       	ldd	r25, Y+2	; 0x02
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	66 e9       	ldi	r22, 0x96	; 150
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    16fe:	89 2b       	or	r24, r25
    1700:	09 f0       	breq	.+2      	; 0x1704 <TIMER_init+0x438>
    1702:	49 c0       	rjmp	.+146    	; 0x1796 <TIMER_init+0x4ca>
			/* WGM10=1 ,  WGM11=1 , WGM12=1 and WGM13=1 */
			TCCR0 |= (1 << WGM10) | (1 << WGM11)| (1 << WGM12)| (1 << WGM13);
    1704:	83 e5       	ldi	r24, 0x53	; 83
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	23 e5       	ldi	r18, 0x53	; 83
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	f9 01       	movw	r30, r18
    170e:	20 81       	ld	r18, Z
    1710:	2b 61       	ori	r18, 0x1B	; 27
    1712:	fc 01       	movw	r30, r24
    1714:	20 83       	st	Z, r18
			if (!strcmp(config->pwmMode, "inverting")) {
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	8b 96       	adiw	r24, 0x2b	; 43
    171c:	6a e9       	ldi	r22, 0x9A	; 154
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    1724:	89 2b       	or	r24, r25
    1726:	e1 f4       	brne	.+56     	; 0x1760 <TIMER_init+0x494>
				TCCR0 |= (1 << COM1A0);/* COM1A0=1 and COM1A1=1 */
    1728:	83 e5       	ldi	r24, 0x53	; 83
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	23 e5       	ldi	r18, 0x53	; 83
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	f9 01       	movw	r30, r18
    1732:	20 81       	ld	r18, Z
    1734:	20 64       	ori	r18, 0x40	; 64
    1736:	fc 01       	movw	r30, r24
    1738:	20 83       	st	Z, r18
				TCCR0 |= (1 << COM1A1);
    173a:	83 e5       	ldi	r24, 0x53	; 83
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	23 e5       	ldi	r18, 0x53	; 83
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	f9 01       	movw	r30, r18
    1744:	20 81       	ld	r18, Z
    1746:	20 68       	ori	r18, 0x80	; 128
    1748:	fc 01       	movw	r30, r24
    174a:	20 83       	st	Z, r18
				SET_BIT(DDRB, 3);
    174c:	87 e3       	ldi	r24, 0x37	; 55
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	27 e3       	ldi	r18, 0x37	; 55
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	f9 01       	movw	r30, r18
    1756:	20 81       	ld	r18, Z
    1758:	28 60       	ori	r18, 0x08	; 8
    175a:	fc 01       	movw	r30, r24
    175c:	20 83       	st	Z, r18
    175e:	1b c0       	rjmp	.+54     	; 0x1796 <TIMER_init+0x4ca>
			} else if (!strcmp(config->pwmMode, "non-inverting")) {
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	8b 96       	adiw	r24, 0x2b	; 43
    1766:	64 ea       	ldi	r22, 0xA4	; 164
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    176e:	89 2b       	or	r24, r25
    1770:	91 f4       	brne	.+36     	; 0x1796 <TIMER_init+0x4ca>
				TCCR0 |= (1 << COM1A1);/* COM1A0=0 and COM1A1=1 */
    1772:	83 e5       	ldi	r24, 0x53	; 83
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	23 e5       	ldi	r18, 0x53	; 83
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	f9 01       	movw	r30, r18
    177c:	20 81       	ld	r18, Z
    177e:	20 68       	ori	r18, 0x80	; 128
    1780:	fc 01       	movw	r30, r24
    1782:	20 83       	st	Z, r18
				SET_BIT(DDRB, 3);/*make OCO AS OUTPUT BIT */
    1784:	87 e3       	ldi	r24, 0x37	; 55
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	27 e3       	ldi	r18, 0x37	; 55
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	f9 01       	movw	r30, r18
    178e:	20 81       	ld	r18, Z
    1790:	28 60       	ori	r18, 0x08	; 8
    1792:	fc 01       	movw	r30, r24
    1794:	20 83       	st	Z, r18

		}
/***************************************************************
* 						2	TIMER2						*
 * *************************************************************/
		if (config->timerNumber == 2) {
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	9a 81       	ldd	r25, Y+2	; 0x02
    179a:	fc 01       	movw	r30, r24
    179c:	80 81       	ld	r24, Z
    179e:	82 30       	cpi	r24, 0x02	; 2
    17a0:	09 f0       	breq	.+2      	; 0x17a4 <TIMER_init+0x4d8>
    17a2:	3d c1       	rjmp	.+634    	; 0x1a1e <TIMER_init+0x752>
			TCCR2 = 0;/* put zeros into all bits in the register */
    17a4:	85 e4       	ldi	r24, 0x45	; 69
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	fc 01       	movw	r30, r24
    17aa:	10 82       	st	Z, r1
			switch (config->prescaler) {
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	9a 81       	ldd	r25, Y+2	; 0x02
    17b0:	fc 01       	movw	r30, r24
    17b2:	85 89       	ldd	r24, Z+21	; 0x15
    17b4:	96 89       	ldd	r25, Z+22	; 0x16
    17b6:	80 34       	cpi	r24, 0x40	; 64
    17b8:	91 05       	cpc	r25, r1
    17ba:	49 f1       	breq	.+82     	; 0x180e <TIMER_init+0x542>
    17bc:	81 34       	cpi	r24, 0x41	; 65
    17be:	91 05       	cpc	r25, r1
    17c0:	30 f4       	brcc	.+12     	; 0x17ce <TIMER_init+0x502>
    17c2:	88 30       	cpi	r24, 0x08	; 8
    17c4:	91 05       	cpc	r25, r1
    17c6:	79 f0       	breq	.+30     	; 0x17e6 <TIMER_init+0x51a>
    17c8:	80 97       	sbiw	r24, 0x20	; 32
    17ca:	b9 f0       	breq	.+46     	; 0x17fa <TIMER_init+0x52e>
    17cc:	48 c0       	rjmp	.+144    	; 0x185e <TIMER_init+0x592>
    17ce:	81 15       	cp	r24, r1
    17d0:	f1 e0       	ldi	r31, 0x01	; 1
    17d2:	9f 07       	cpc	r25, r31
    17d4:	81 f1       	breq	.+96     	; 0x1836 <TIMER_init+0x56a>
    17d6:	81 15       	cp	r24, r1
    17d8:	24 e0       	ldi	r18, 0x04	; 4
    17da:	92 07       	cpc	r25, r18
    17dc:	b1 f1       	breq	.+108    	; 0x184a <TIMER_init+0x57e>
    17de:	80 38       	cpi	r24, 0x80	; 128
    17e0:	91 05       	cpc	r25, r1
    17e2:	f9 f0       	breq	.+62     	; 0x1822 <TIMER_init+0x556>
    17e4:	3c c0       	rjmp	.+120    	; 0x185e <TIMER_init+0x592>
			case 8:
				TCCR2 |= (1 << CS21);/*CS20=0  CS21=1 CS22=0  */
    17e6:	85 e4       	ldi	r24, 0x45	; 69
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	25 e4       	ldi	r18, 0x45	; 69
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	f9 01       	movw	r30, r18
    17f0:	20 81       	ld	r18, Z
    17f2:	22 60       	ori	r18, 0x02	; 2
    17f4:	fc 01       	movw	r30, r24
    17f6:	20 83       	st	Z, r18
				break;
    17f8:	3b c0       	rjmp	.+118    	; 0x1870 <TIMER_init+0x5a4>
			case 32:
				TCCR2 |= (1 << CS20) | (1 << CS21);/*CS20=1  CS21=0 CS22=0  */
    17fa:	85 e4       	ldi	r24, 0x45	; 69
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	25 e4       	ldi	r18, 0x45	; 69
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	f9 01       	movw	r30, r18
    1804:	20 81       	ld	r18, Z
    1806:	23 60       	ori	r18, 0x03	; 3
    1808:	fc 01       	movw	r30, r24
    180a:	20 83       	st	Z, r18
				break;
    180c:	31 c0       	rjmp	.+98     	; 0x1870 <TIMER_init+0x5a4>
			case 64:
				TCCR2 |= (1 << CS22);/*CS20=0  CS21=0 CS22=1  */
    180e:	85 e4       	ldi	r24, 0x45	; 69
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	25 e4       	ldi	r18, 0x45	; 69
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	f9 01       	movw	r30, r18
    1818:	20 81       	ld	r18, Z
    181a:	24 60       	ori	r18, 0x04	; 4
    181c:	fc 01       	movw	r30, r24
    181e:	20 83       	st	Z, r18
				break;
    1820:	27 c0       	rjmp	.+78     	; 0x1870 <TIMER_init+0x5a4>
			case 128:
				TCCR2 |= (1 << CS20) | (1 << CS22);/*CS20=1  CS21=0 CS22=1  */
    1822:	85 e4       	ldi	r24, 0x45	; 69
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	25 e4       	ldi	r18, 0x45	; 69
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	f9 01       	movw	r30, r18
    182c:	20 81       	ld	r18, Z
    182e:	25 60       	ori	r18, 0x05	; 5
    1830:	fc 01       	movw	r30, r24
    1832:	20 83       	st	Z, r18
				break;
    1834:	1d c0       	rjmp	.+58     	; 0x1870 <TIMER_init+0x5a4>
			case 256:
				TCCR2 |= (1 << CS21) | (1 << CS22);/*CS20=0  CS21=1 CS22=1  */
    1836:	85 e4       	ldi	r24, 0x45	; 69
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	25 e4       	ldi	r18, 0x45	; 69
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	f9 01       	movw	r30, r18
    1840:	20 81       	ld	r18, Z
    1842:	26 60       	ori	r18, 0x06	; 6
    1844:	fc 01       	movw	r30, r24
    1846:	20 83       	st	Z, r18
				break;
    1848:	13 c0       	rjmp	.+38     	; 0x1870 <TIMER_init+0x5a4>
			case 1024:
				TCCR2 |= (1 << CS20) | (1 << CS21) | (1 << CS22);/*CS20=1  CS21=1 CS22=1  */
    184a:	85 e4       	ldi	r24, 0x45	; 69
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	25 e4       	ldi	r18, 0x45	; 69
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	f9 01       	movw	r30, r18
    1854:	20 81       	ld	r18, Z
    1856:	27 60       	ori	r18, 0x07	; 7
    1858:	fc 01       	movw	r30, r24
    185a:	20 83       	st	Z, r18
				break;
    185c:	09 c0       	rjmp	.+18     	; 0x1870 <TIMER_init+0x5a4>
			default:/* the default case work scale 1:1 even the prescaler member not determine */
				TCCR2 |= (1 << CS20);/*CS20=1  CS21=0 CS22=0  */
    185e:	85 e4       	ldi	r24, 0x45	; 69
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	25 e4       	ldi	r18, 0x45	; 69
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	f9 01       	movw	r30, r18
    1868:	20 81       	ld	r18, Z
    186a:	21 60       	ori	r18, 0x01	; 1
    186c:	fc 01       	movw	r30, r24
    186e:	20 83       	st	Z, r18

/****************************************************
* 		2-1 compare match output mode for TIMER2	*
 * ***************************************************
					 */
			if (!strcmp(config->mode, "compare")) {
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	9a 81       	ldd	r25, Y+2	; 0x02
    1874:	01 96       	adiw	r24, 0x01	; 1
    1876:	66 e7       	ldi	r22, 0x76	; 118
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    187e:	89 2b       	or	r24, r25
    1880:	09 f0       	breq	.+2      	; 0x1884 <TIMER_init+0x5b8>
    1882:	62 c0       	rjmp	.+196    	; 0x1948 <TIMER_init+0x67c>
				/*
				 * FOC2=1 for non PWM mode
				 * select compare mode --->> WGM21=1 and WGM20=0
				 */
				TCCR2 |= (1 << FOC2) | (1 << WGM21);
    1884:	85 e4       	ldi	r24, 0x45	; 69
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	25 e4       	ldi	r18, 0x45	; 69
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	f9 01       	movw	r30, r18
    188e:	20 81       	ld	r18, Z
    1890:	28 68       	ori	r18, 0x88	; 136
    1892:	fc 01       	movw	r30, r24
    1894:	20 83       	st	Z, r18

				if (!strcmp(config->compareMatchMode, "toggle")) {
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	9a 81       	ldd	r25, Y+2	; 0x02
    189a:	47 96       	adiw	r24, 0x17	; 23
    189c:	6e e7       	ldi	r22, 0x7E	; 126
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    18a4:	89 2b       	or	r24, r25
    18a6:	99 f4       	brne	.+38     	; 0x18ce <TIMER_init+0x602>
					TCCR2 |= (1 << COM20);/*COM20=1 AND COM21=0 */
    18a8:	85 e4       	ldi	r24, 0x45	; 69
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	25 e4       	ldi	r18, 0x45	; 69
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	f9 01       	movw	r30, r18
    18b2:	20 81       	ld	r18, Z
    18b4:	20 61       	ori	r18, 0x10	; 16
    18b6:	fc 01       	movw	r30, r24
    18b8:	20 83       	st	Z, r18
					SET_BIT(DDRD, 7);/*make OCO AS OUTPUT BIT */
    18ba:	81 e3       	ldi	r24, 0x31	; 49
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	21 e3       	ldi	r18, 0x31	; 49
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	f9 01       	movw	r30, r18
    18c4:	20 81       	ld	r18, Z
    18c6:	20 68       	ori	r18, 0x80	; 128
    18c8:	fc 01       	movw	r30, r24
    18ca:	20 83       	st	Z, r18
    18cc:	37 c0       	rjmp	.+110    	; 0x193c <TIMER_init+0x670>
				} else if (!strcmp(config->compareMatchMode, "clear")) {
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	9a 81       	ldd	r25, Y+2	; 0x02
    18d2:	47 96       	adiw	r24, 0x17	; 23
    18d4:	65 e8       	ldi	r22, 0x85	; 133
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    18dc:	89 2b       	or	r24, r25
    18de:	99 f4       	brne	.+38     	; 0x1906 <TIMER_init+0x63a>
					TCCR2 |= (1 << COM21);/*COM20=0 AND COM21=1 */
    18e0:	85 e4       	ldi	r24, 0x45	; 69
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	25 e4       	ldi	r18, 0x45	; 69
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	f9 01       	movw	r30, r18
    18ea:	20 81       	ld	r18, Z
    18ec:	20 62       	ori	r18, 0x20	; 32
    18ee:	fc 01       	movw	r30, r24
    18f0:	20 83       	st	Z, r18
					SET_BIT(DDRD, 7);
    18f2:	81 e3       	ldi	r24, 0x31	; 49
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	21 e3       	ldi	r18, 0x31	; 49
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	f9 01       	movw	r30, r18
    18fc:	20 81       	ld	r18, Z
    18fe:	20 68       	ori	r18, 0x80	; 128
    1900:	fc 01       	movw	r30, r24
    1902:	20 83       	st	Z, r18
    1904:	1b c0       	rjmp	.+54     	; 0x193c <TIMER_init+0x670>

				} else if (!strcmp(config->compareMatchMode, "set")) {
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	9a 81       	ldd	r25, Y+2	; 0x02
    190a:	47 96       	adiw	r24, 0x17	; 23
    190c:	6b e8       	ldi	r22, 0x8B	; 139
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    1914:	89 2b       	or	r24, r25
    1916:	91 f4       	brne	.+36     	; 0x193c <TIMER_init+0x670>
					TCCR2 |= (1 << COM21) | (1 << COM20);/*COM20=1 AND COM21=1 */
    1918:	85 e4       	ldi	r24, 0x45	; 69
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	25 e4       	ldi	r18, 0x45	; 69
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	f9 01       	movw	r30, r18
    1922:	20 81       	ld	r18, Z
    1924:	20 63       	ori	r18, 0x30	; 48
    1926:	fc 01       	movw	r30, r24
    1928:	20 83       	st	Z, r18
					SET_BIT(DDRD, 7);
    192a:	81 e3       	ldi	r24, 0x31	; 49
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	21 e3       	ldi	r18, 0x31	; 49
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	f9 01       	movw	r30, r18
    1934:	20 81       	ld	r18, Z
    1936:	20 68       	ori	r18, 0x80	; 128
    1938:	fc 01       	movw	r30, r24
    193a:	20 83       	st	Z, r18

				}
				/* the default case will be normal port operation OCO disconnected
											enable interrupt for compare mode */
				TIMSK = (1 << OCIE2);
    193c:	89 e5       	ldi	r24, 0x59	; 89
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	20 e8       	ldi	r18, 0x80	; 128
    1942:	fc 01       	movw	r30, r24
    1944:	20 83       	st	Z, r18
    1946:	6b c0       	rjmp	.+214    	; 0x1a1e <TIMER_init+0x752>

/****************************************************
* 		2-2 normal  mode for TIMER2		     *
 * ***************************************************
					 */
			else if (!strcmp(config->mode, "normal")) {
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	01 96       	adiw	r24, 0x01	; 1
    194e:	6f e8       	ldi	r22, 0x8F	; 143
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    1956:	89 2b       	or	r24, r25
    1958:	79 f4       	brne	.+30     	; 0x1978 <TIMER_init+0x6ac>
				/*
				 * FOC2=1 for non PWM mode
				 * select normal mode --->> WGM21=0 and WGM20=0
				*/
				TCCR2 |= (1 << FOC2);
    195a:	85 e4       	ldi	r24, 0x45	; 69
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	25 e4       	ldi	r18, 0x45	; 69
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	f9 01       	movw	r30, r18
    1964:	20 81       	ld	r18, Z
    1966:	20 68       	ori	r18, 0x80	; 128
    1968:	fc 01       	movw	r30, r24
    196a:	20 83       	st	Z, r18
				TIMSK = (1 << TOIE2); /*enable interrupt for normal mode */
    196c:	89 e5       	ldi	r24, 0x59	; 89
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	20 e4       	ldi	r18, 0x40	; 64
    1972:	fc 01       	movw	r30, r24
    1974:	20 83       	st	Z, r18
    1976:	53 c0       	rjmp	.+166    	; 0x1a1e <TIMER_init+0x752>

/****************************************************
 * 			2-3 PWM  mode for TIMER2	     *
 * ***************************************************/

			} else if (!strcmp(config->mode, "pwm")) {
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	9a 81       	ldd	r25, Y+2	; 0x02
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	66 e9       	ldi	r22, 0x96	; 150
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    1986:	89 2b       	or	r24, r25
    1988:	09 f0       	breq	.+2      	; 0x198c <TIMER_init+0x6c0>
    198a:	49 c0       	rjmp	.+146    	; 0x1a1e <TIMER_init+0x752>
				/*
				 * FOC2=0 for  PWM mode
				 * select PWM mode --->> WGM21=1 and WGM20=1
				 */

				TCCR2 |= (1 << WGM20) | (1 << WGM21);
    198c:	85 e4       	ldi	r24, 0x45	; 69
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	25 e4       	ldi	r18, 0x45	; 69
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	f9 01       	movw	r30, r18
    1996:	20 81       	ld	r18, Z
    1998:	28 64       	ori	r18, 0x48	; 72
    199a:	fc 01       	movw	r30, r24
    199c:	20 83       	st	Z, r18
				if (!strcmp(config->pwmMode, "inverting")) {
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	8b 96       	adiw	r24, 0x2b	; 43
    19a4:	6a e9       	ldi	r22, 0x9A	; 154
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    19ac:	89 2b       	or	r24, r25
    19ae:	e1 f4       	brne	.+56     	; 0x19e8 <TIMER_init+0x71c>
					/* COM20=1 and COM21=1 */
					TCCR2 |= (1 << COM20);
    19b0:	85 e4       	ldi	r24, 0x45	; 69
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	25 e4       	ldi	r18, 0x45	; 69
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	f9 01       	movw	r30, r18
    19ba:	20 81       	ld	r18, Z
    19bc:	20 61       	ori	r18, 0x10	; 16
    19be:	fc 01       	movw	r30, r24
    19c0:	20 83       	st	Z, r18
					TCCR2 |= (1 << COM21);
    19c2:	85 e4       	ldi	r24, 0x45	; 69
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	25 e4       	ldi	r18, 0x45	; 69
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	f9 01       	movw	r30, r18
    19cc:	20 81       	ld	r18, Z
    19ce:	20 62       	ori	r18, 0x20	; 32
    19d0:	fc 01       	movw	r30, r24
    19d2:	20 83       	st	Z, r18
					SET_BIT(DDRD, 7);
    19d4:	81 e3       	ldi	r24, 0x31	; 49
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	21 e3       	ldi	r18, 0x31	; 49
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	f9 01       	movw	r30, r18
    19de:	20 81       	ld	r18, Z
    19e0:	20 68       	ori	r18, 0x80	; 128
    19e2:	fc 01       	movw	r30, r24
    19e4:	20 83       	st	Z, r18
    19e6:	1b c0       	rjmp	.+54     	; 0x1a1e <TIMER_init+0x752>
				} else if (!strcmp(config->pwmMode, "non-inverting")) {
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	9a 81       	ldd	r25, Y+2	; 0x02
    19ec:	8b 96       	adiw	r24, 0x2b	; 43
    19ee:	64 ea       	ldi	r22, 0xA4	; 164
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    19f6:	89 2b       	or	r24, r25
    19f8:	91 f4       	brne	.+36     	; 0x1a1e <TIMER_init+0x752>
					/* COM20=0 and COM21=1 */
					TCCR2 |= (1 << COM21);
    19fa:	85 e4       	ldi	r24, 0x45	; 69
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	25 e4       	ldi	r18, 0x45	; 69
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	f9 01       	movw	r30, r18
    1a04:	20 81       	ld	r18, Z
    1a06:	20 62       	ori	r18, 0x20	; 32
    1a08:	fc 01       	movw	r30, r24
    1a0a:	20 83       	st	Z, r18
					SET_BIT(DDRD, 7);/*make OCO AS OUTPUT BIT */
    1a0c:	81 e3       	ldi	r24, 0x31	; 49
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	21 e3       	ldi	r18, 0x31	; 49
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	f9 01       	movw	r30, r18
    1a16:	20 81       	ld	r18, Z
    1a18:	20 68       	ori	r18, 0x80	; 128
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	20 83       	st	Z, r18

			}

		}
		/* global interrupt enable */
		sei();
    1a1e:	78 94       	sei
	}
    1a20:	00 00       	nop
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	08 95       	ret

00001a2c <TIMER_setCompare>:
 * 			 setting functions definition 			*
 * *******************************************************
 */

/* function to set compare value for compare mode */
void TIMER_setCompare(uint16 compareValue) {
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <TIMER_setCompare+0x6>
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	9a 83       	std	Y+2, r25	; 0x02
    1a38:	89 83       	std	Y+1, r24	; 0x01
	switch (configPtr->timerNumber) {
    1a3a:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <configPtr>
    1a3e:	90 91 f8 00 	lds	r25, 0x00F8	; 0x8000f8 <configPtr+0x1>
    1a42:	fc 01       	movw	r30, r24
    1a44:	80 81       	ld	r24, Z
    1a46:	88 2f       	mov	r24, r24
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	81 30       	cpi	r24, 0x01	; 1
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	81 f0       	breq	.+32     	; 0x1a70 <TIMER_setCompare+0x44>
    1a50:	82 30       	cpi	r24, 0x02	; 2
    1a52:	91 05       	cpc	r25, r1
    1a54:	d1 f0       	breq	.+52     	; 0x1a8a <TIMER_setCompare+0x5e>
    1a56:	89 2b       	or	r24, r25
    1a58:	09 f0       	breq	.+2      	; 0x1a5c <TIMER_setCompare+0x30>
	case 2:
		TCNT2 = 0;
		OCR2 = compareValue;
		break;
	}
}
    1a5a:	21 c0       	rjmp	.+66     	; 0x1a9e <TIMER_setCompare+0x72>

/* function to set compare value for compare mode */
void TIMER_setCompare(uint16 compareValue) {
	switch (configPtr->timerNumber) {
	case 0:/* timer number*/
		TCNT0 = 0;/* initial value */
    1a5c:	82 e5       	ldi	r24, 0x52	; 82
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	fc 01       	movw	r30, r24
    1a62:	10 82       	st	Z, r1
		OCR0 = compareValue; /*compare value */
    1a64:	8c e5       	ldi	r24, 0x5C	; 92
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	29 81       	ldd	r18, Y+1	; 0x01
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	20 83       	st	Z, r18
		break;
    1a6e:	17 c0       	rjmp	.+46     	; 0x1a9e <TIMER_setCompare+0x72>
	case 1:
		TCNT1 = 0;
    1a70:	8c e4       	ldi	r24, 0x4C	; 76
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	fc 01       	movw	r30, r24
    1a76:	11 82       	std	Z+1, r1	; 0x01
    1a78:	10 82       	st	Z, r1
		OCR1A = compareValue;
    1a7a:	8a e4       	ldi	r24, 0x4A	; 74
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	29 81       	ldd	r18, Y+1	; 0x01
    1a80:	3a 81       	ldd	r19, Y+2	; 0x02
    1a82:	fc 01       	movw	r30, r24
    1a84:	31 83       	std	Z+1, r19	; 0x01
    1a86:	20 83       	st	Z, r18
		break;
    1a88:	0a c0       	rjmp	.+20     	; 0x1a9e <TIMER_setCompare+0x72>
	case 2:
		TCNT2 = 0;
    1a8a:	84 e4       	ldi	r24, 0x44	; 68
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	fc 01       	movw	r30, r24
    1a90:	10 82       	st	Z, r1
		OCR2 = compareValue;
    1a92:	83 e4       	ldi	r24, 0x43	; 67
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	29 81       	ldd	r18, Y+1	; 0x01
    1a98:	fc 01       	movw	r30, r24
    1a9a:	20 83       	st	Z, r18
		break;
    1a9c:	00 00       	nop
	}
}
    1a9e:	00 00       	nop
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	08 95       	ret

00001aaa <TIMER_setNormal>:
/* function to set initial value in normal mode */
void TIMER_setNormal(uint8 initValue)
{
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	1f 92       	push	r1
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	89 83       	std	Y+1, r24	; 0x01
	switch (configPtr->timerNumber) {
    1ab6:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <configPtr>
    1aba:	90 91 f8 00 	lds	r25, 0x00F8	; 0x8000f8 <configPtr+0x1>
    1abe:	fc 01       	movw	r30, r24
    1ac0:	80 81       	ld	r24, Z
    1ac2:	88 2f       	mov	r24, r24
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	81 30       	cpi	r24, 0x01	; 1
    1ac8:	91 05       	cpc	r25, r1
    1aca:	61 f0       	breq	.+24     	; 0x1ae4 <TIMER_setNormal+0x3a>
    1acc:	82 30       	cpi	r24, 0x02	; 2
    1ace:	91 05       	cpc	r25, r1
    1ad0:	91 f0       	breq	.+36     	; 0x1af6 <TIMER_setNormal+0x4c>
    1ad2:	89 2b       	or	r24, r25
    1ad4:	09 f0       	breq	.+2      	; 0x1ad8 <TIMER_setNormal+0x2e>
		TCNT2 = initValue;
		break;

	}
	/* function to set duty cycle value in PWM mode */
}
    1ad6:	15 c0       	rjmp	.+42     	; 0x1b02 <TIMER_setNormal+0x58>
/* function to set initial value in normal mode */
void TIMER_setNormal(uint8 initValue)
{
	switch (configPtr->timerNumber) {
	case 0:
		TCNT0 = initValue;
    1ad8:	82 e5       	ldi	r24, 0x52	; 82
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	29 81       	ldd	r18, Y+1	; 0x01
    1ade:	fc 01       	movw	r30, r24
    1ae0:	20 83       	st	Z, r18
		break;
    1ae2:	0f c0       	rjmp	.+30     	; 0x1b02 <TIMER_setNormal+0x58>
	case 1:
		TCNT1 = initValue;
    1ae4:	8c e4       	ldi	r24, 0x4C	; 76
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	29 81       	ldd	r18, Y+1	; 0x01
    1aea:	22 2f       	mov	r18, r18
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	fc 01       	movw	r30, r24
    1af0:	31 83       	std	Z+1, r19	; 0x01
    1af2:	20 83       	st	Z, r18
		break;
    1af4:	06 c0       	rjmp	.+12     	; 0x1b02 <TIMER_setNormal+0x58>
	case 2:
		TCNT2 = initValue;
    1af6:	84 e4       	ldi	r24, 0x44	; 68
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	29 81       	ldd	r18, Y+1	; 0x01
    1afc:	fc 01       	movw	r30, r24
    1afe:	20 83       	st	Z, r18
		break;
    1b00:	00 00       	nop

	}
	/* function to set duty cycle value in PWM mode */
}
    1b02:	00 00       	nop
    1b04:	0f 90       	pop	r0
    1b06:	df 91       	pop	r29
    1b08:	cf 91       	pop	r28
    1b0a:	08 95       	ret

00001b0c <TIMER_setpwm>:
void TIMER_setpwm(uint8 dutyCycle) {
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	1f 92       	push	r1
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	89 83       	std	Y+1, r24	; 0x01
	switch (configPtr->timerNumber) {
    1b18:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <configPtr>
    1b1c:	90 91 f8 00 	lds	r25, 0x00F8	; 0x8000f8 <configPtr+0x1>
    1b20:	fc 01       	movw	r30, r24
    1b22:	80 81       	ld	r24, Z
    1b24:	88 2f       	mov	r24, r24
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	81 f0       	breq	.+32     	; 0x1b4e <TIMER_setpwm+0x42>
    1b2e:	82 30       	cpi	r24, 0x02	; 2
    1b30:	91 05       	cpc	r25, r1
    1b32:	d9 f0       	breq	.+54     	; 0x1b6a <TIMER_setpwm+0x5e>
    1b34:	89 2b       	or	r24, r25
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <TIMER_setpwm+0x2e>
	case 2:
		TCNT2 = 0;
		OCR2 = dutyCycle;
		break;
	}
}
    1b38:	22 c0       	rjmp	.+68     	; 0x1b7e <TIMER_setpwm+0x72>
}
void TIMER_setpwm(uint8 dutyCycle) {
	switch (configPtr->timerNumber) {

	case 0:
		TCNT0 = 0;
    1b3a:	82 e5       	ldi	r24, 0x52	; 82
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	fc 01       	movw	r30, r24
    1b40:	10 82       	st	Z, r1
		OCR0 = dutyCycle;
    1b42:	8c e5       	ldi	r24, 0x5C	; 92
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	29 81       	ldd	r18, Y+1	; 0x01
    1b48:	fc 01       	movw	r30, r24
    1b4a:	20 83       	st	Z, r18
		break;
    1b4c:	18 c0       	rjmp	.+48     	; 0x1b7e <TIMER_setpwm+0x72>
	case 1:
		TCNT1 = 0;
    1b4e:	8c e4       	ldi	r24, 0x4C	; 76
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	fc 01       	movw	r30, r24
    1b54:	11 82       	std	Z+1, r1	; 0x01
    1b56:	10 82       	st	Z, r1
		OCR1A = dutyCycle;
    1b58:	8a e4       	ldi	r24, 0x4A	; 74
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	29 81       	ldd	r18, Y+1	; 0x01
    1b5e:	22 2f       	mov	r18, r18
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	fc 01       	movw	r30, r24
    1b64:	31 83       	std	Z+1, r19	; 0x01
    1b66:	20 83       	st	Z, r18
		break;
    1b68:	0a c0       	rjmp	.+20     	; 0x1b7e <TIMER_setpwm+0x72>
	case 2:
		TCNT2 = 0;
    1b6a:	84 e4       	ldi	r24, 0x44	; 68
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	fc 01       	movw	r30, r24
    1b70:	10 82       	st	Z, r1
		OCR2 = dutyCycle;
    1b72:	83 e4       	ldi	r24, 0x43	; 67
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	29 81       	ldd	r18, Y+1	; 0x01
    1b78:	fc 01       	movw	r30, r24
    1b7a:	20 83       	st	Z, r18
		break;
    1b7c:	00 00       	nop
	}
}
    1b7e:	00 00       	nop
    1b80:	0f 90       	pop	r0
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	08 95       	ret

00001b88 <TIMER_setCallBackPtr>:
/* function to get adress of call back funtion to passing it for ISR */
void TIMER_setCallBackPtr(void (*a_ptr)(void)) {
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <TIMER_setCallBackPtr+0x6>
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	9a 83       	std	Y+2, r25	; 0x02
    1b94:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr; /*g_callBackPtr is shared global variable */
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9a:	90 93 f6 00 	sts	0x00F6, r25	; 0x8000f6 <g_callBackPtr+0x1>
    1b9e:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <g_callBackPtr>
}
    1ba2:	00 00       	nop
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	08 95       	ret

00001bae <TIMER_stop>:
/* function to stop the running timer */
void TIMER_stop() {
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
	switch (configPtr->timerNumber)
    1bb6:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <configPtr>
    1bba:	90 91 f8 00 	lds	r25, 0x00F8	; 0x8000f8 <configPtr+0x1>
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	80 81       	ld	r24, Z
    1bc2:	88 2f       	mov	r24, r24
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	81 30       	cpi	r24, 0x01	; 1
    1bc8:	91 05       	cpc	r25, r1
    1bca:	81 f0       	breq	.+32     	; 0x1bec <TIMER_stop+0x3e>
    1bcc:	82 30       	cpi	r24, 0x02	; 2
    1bce:	91 05       	cpc	r25, r1
    1bd0:	b9 f0       	breq	.+46     	; 0x1c00 <TIMER_stop+0x52>
    1bd2:	89 2b       	or	r24, r25
    1bd4:	09 f0       	breq	.+2      	; 0x1bd8 <TIMER_stop+0x2a>
		break;
	case 2:
		TCCR2 &= ~(1 << CS20) & ~(1 << CS21) & ~(1 << CS22);
		break;
	}
}
    1bd6:	1e c0       	rjmp	.+60     	; 0x1c14 <TIMER_stop+0x66>
void TIMER_stop() {
	switch (configPtr->timerNumber)

	{
	case 0:
		TCCR0 &= ~(1 << CS00) & ~(1 << CS01) & ~(1 << CS02);
    1bd8:	83 e5       	ldi	r24, 0x53	; 83
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	23 e5       	ldi	r18, 0x53	; 83
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	f9 01       	movw	r30, r18
    1be2:	20 81       	ld	r18, Z
    1be4:	28 7f       	andi	r18, 0xF8	; 248
    1be6:	fc 01       	movw	r30, r24
    1be8:	20 83       	st	Z, r18
		break;
    1bea:	14 c0       	rjmp	.+40     	; 0x1c14 <TIMER_stop+0x66>
	case 1:
		TCCR1B &= ~(1 << CS10) & ~(1 << CS11) & ~(1 << CS12);
    1bec:	8e e4       	ldi	r24, 0x4E	; 78
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	2e e4       	ldi	r18, 0x4E	; 78
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	f9 01       	movw	r30, r18
    1bf6:	20 81       	ld	r18, Z
    1bf8:	28 7f       	andi	r18, 0xF8	; 248
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	20 83       	st	Z, r18
		break;
    1bfe:	0a c0       	rjmp	.+20     	; 0x1c14 <TIMER_stop+0x66>
	case 2:
		TCCR2 &= ~(1 << CS20) & ~(1 << CS21) & ~(1 << CS22);
    1c00:	85 e4       	ldi	r24, 0x45	; 69
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	25 e4       	ldi	r18, 0x45	; 69
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	f9 01       	movw	r30, r18
    1c0a:	20 81       	ld	r18, Z
    1c0c:	28 7f       	andi	r18, 0xF8	; 248
    1c0e:	fc 01       	movw	r30, r24
    1c10:	20 83       	st	Z, r18
		break;
    1c12:	00 00       	nop
	}
}
    1c14:	00 00       	nop
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	08 95       	ret

00001c1c <UART_init>:
 *      Author: hesham
 */
#include"uart.h"

void UART_init(UART_configurationType * config)
{UCSRA=0;
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <UART_init+0xa>
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	9a 83       	std	Y+2, r25	; 0x02
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	8b e2       	ldi	r24, 0x2B	; 43
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	fc 01       	movw	r30, r24
    1c34:	10 82       	st	Z, r1
UCSRB=0;
    1c36:	8a e2       	ldi	r24, 0x2A	; 42
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	10 82       	st	Z, r1
UCSRC=0;
    1c3e:	80 e4       	ldi	r24, 0x40	; 64
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	fc 01       	movw	r30, r24
    1c44:	10 82       	st	Z, r1
/* enables */
	if(!strcmp(config->mode,"normal"))
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	05 96       	adiw	r24, 0x05	; 5
    1c4c:	62 eb       	ldi	r22, 0xB2	; 178
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    1c54:	89 2b       	or	r24, r25
    1c56:	09 f0       	breq	.+2      	; 0x1c5a <UART_init+0x3e>
    1c58:	60 c0       	rjmp	.+192    	; 0x1d1a <UART_init+0xfe>
	{
CLEAR_BIT(UCSRA,U2X);
    1c5a:	8b e2       	ldi	r24, 0x2B	; 43
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	2b e2       	ldi	r18, 0x2B	; 43
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	f9 01       	movw	r30, r18
    1c64:	20 81       	ld	r18, Z
    1c66:	2d 7f       	andi	r18, 0xFD	; 253
    1c68:	fc 01       	movw	r30, r24
    1c6a:	20 83       	st	Z, r18
UBRRL=((F_CPU /(16*config->buadRate))-1);
    1c6c:	09 e2       	ldi	r16, 0x29	; 41
    1c6e:	10 e0       	ldi	r17, 0x00	; 0
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	9a 81       	ldd	r25, Y+2	; 0x02
    1c74:	fc 01       	movw	r30, r24
    1c76:	81 81       	ldd	r24, Z+1	; 0x01
    1c78:	92 81       	ldd	r25, Z+2	; 0x02
    1c7a:	a3 81       	ldd	r26, Z+3	; 0x03
    1c7c:	b4 81       	ldd	r27, Z+4	; 0x04
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	aa 1f       	adc	r26, r26
    1c84:	bb 1f       	adc	r27, r27
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	aa 1f       	adc	r26, r26
    1c8c:	bb 1f       	adc	r27, r27
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	aa 1f       	adc	r26, r26
    1c94:	bb 1f       	adc	r27, r27
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	aa 1f       	adc	r26, r26
    1c9c:	bb 1f       	adc	r27, r27
    1c9e:	9c 01       	movw	r18, r24
    1ca0:	ad 01       	movw	r20, r26
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	92 e1       	ldi	r25, 0x12	; 18
    1ca6:	aa e7       	ldi	r26, 0x7A	; 122
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	bc 01       	movw	r22, r24
    1cac:	cd 01       	movw	r24, r26
    1cae:	0e 94 34 10 	call	0x2068	; 0x2068 <__udivmodsi4>
    1cb2:	da 01       	movw	r26, r20
    1cb4:	c9 01       	movw	r24, r18
    1cb6:	81 50       	subi	r24, 0x01	; 1
    1cb8:	f8 01       	movw	r30, r16
    1cba:	80 83       	st	Z, r24
UBRRH=((F_CPU /(16*config->buadRate))-1)>>8;
    1cbc:	00 e4       	ldi	r16, 0x40	; 64
    1cbe:	10 e0       	ldi	r17, 0x00	; 0
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	81 81       	ldd	r24, Z+1	; 0x01
    1cc8:	92 81       	ldd	r25, Z+2	; 0x02
    1cca:	a3 81       	ldd	r26, Z+3	; 0x03
    1ccc:	b4 81       	ldd	r27, Z+4	; 0x04
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	aa 1f       	adc	r26, r26
    1cd4:	bb 1f       	adc	r27, r27
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	aa 1f       	adc	r26, r26
    1cdc:	bb 1f       	adc	r27, r27
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	aa 1f       	adc	r26, r26
    1ce4:	bb 1f       	adc	r27, r27
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	aa 1f       	adc	r26, r26
    1cec:	bb 1f       	adc	r27, r27
    1cee:	9c 01       	movw	r18, r24
    1cf0:	ad 01       	movw	r20, r26
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	92 e1       	ldi	r25, 0x12	; 18
    1cf6:	aa e7       	ldi	r26, 0x7A	; 122
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	0e 94 34 10 	call	0x2068	; 0x2068 <__udivmodsi4>
    1d02:	da 01       	movw	r26, r20
    1d04:	c9 01       	movw	r24, r18
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	a1 09       	sbc	r26, r1
    1d0a:	b1 09       	sbc	r27, r1
    1d0c:	89 2f       	mov	r24, r25
    1d0e:	9a 2f       	mov	r25, r26
    1d10:	ab 2f       	mov	r26, r27
    1d12:	bb 27       	eor	r27, r27
    1d14:	f8 01       	movw	r30, r16
    1d16:	80 83       	st	Z, r24
    1d18:	61 c0       	rjmp	.+194    	; 0x1ddc <UART_init+0x1c0>


	}
	else if(!strcmp(config->mode,"double speed"))
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1e:	05 96       	adiw	r24, 0x05	; 5
    1d20:	69 eb       	ldi	r22, 0xB9	; 185
    1d22:	70 e0       	ldi	r23, 0x00	; 0
    1d24:	0e 94 12 14 	call	0x2824	; 0x2824 <strcmp>
    1d28:	89 2b       	or	r24, r25
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <UART_init+0x112>
    1d2c:	57 c0       	rjmp	.+174    	; 0x1ddc <UART_init+0x1c0>
	{
		SET_BIT(UCSRA,U2X);
    1d2e:	8b e2       	ldi	r24, 0x2B	; 43
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	2b e2       	ldi	r18, 0x2B	; 43
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	f9 01       	movw	r30, r18
    1d38:	20 81       	ld	r18, Z
    1d3a:	22 60       	ori	r18, 0x02	; 2
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	20 83       	st	Z, r18
		UBRRL=((F_CPU /(8*config->buadRate))-1);
    1d40:	09 e2       	ldi	r16, 0x29	; 41
    1d42:	10 e0       	ldi	r17, 0x00	; 0
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	fc 01       	movw	r30, r24
    1d4a:	81 81       	ldd	r24, Z+1	; 0x01
    1d4c:	92 81       	ldd	r25, Z+2	; 0x02
    1d4e:	a3 81       	ldd	r26, Z+3	; 0x03
    1d50:	b4 81       	ldd	r27, Z+4	; 0x04
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	aa 1f       	adc	r26, r26
    1d58:	bb 1f       	adc	r27, r27
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	aa 1f       	adc	r26, r26
    1d60:	bb 1f       	adc	r27, r27
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	aa 1f       	adc	r26, r26
    1d68:	bb 1f       	adc	r27, r27
    1d6a:	9c 01       	movw	r18, r24
    1d6c:	ad 01       	movw	r20, r26
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	92 e1       	ldi	r25, 0x12	; 18
    1d72:	aa e7       	ldi	r26, 0x7A	; 122
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	bc 01       	movw	r22, r24
    1d78:	cd 01       	movw	r24, r26
    1d7a:	0e 94 34 10 	call	0x2068	; 0x2068 <__udivmodsi4>
    1d7e:	da 01       	movw	r26, r20
    1d80:	c9 01       	movw	r24, r18
    1d82:	81 50       	subi	r24, 0x01	; 1
    1d84:	f8 01       	movw	r30, r16
    1d86:	80 83       	st	Z, r24
		UBRRH=((F_CPU /(8*config->buadRate))-1)>>8;
    1d88:	00 e4       	ldi	r16, 0x40	; 64
    1d8a:	10 e0       	ldi	r17, 0x00	; 0
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d90:	fc 01       	movw	r30, r24
    1d92:	81 81       	ldd	r24, Z+1	; 0x01
    1d94:	92 81       	ldd	r25, Z+2	; 0x02
    1d96:	a3 81       	ldd	r26, Z+3	; 0x03
    1d98:	b4 81       	ldd	r27, Z+4	; 0x04
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	aa 1f       	adc	r26, r26
    1da0:	bb 1f       	adc	r27, r27
    1da2:	88 0f       	add	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	aa 1f       	adc	r26, r26
    1da8:	bb 1f       	adc	r27, r27
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	aa 1f       	adc	r26, r26
    1db0:	bb 1f       	adc	r27, r27
    1db2:	9c 01       	movw	r18, r24
    1db4:	ad 01       	movw	r20, r26
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	92 e1       	ldi	r25, 0x12	; 18
    1dba:	aa e7       	ldi	r26, 0x7A	; 122
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	cd 01       	movw	r24, r26
    1dc2:	0e 94 34 10 	call	0x2068	; 0x2068 <__udivmodsi4>
    1dc6:	da 01       	movw	r26, r20
    1dc8:	c9 01       	movw	r24, r18
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	a1 09       	sbc	r26, r1
    1dce:	b1 09       	sbc	r27, r1
    1dd0:	89 2f       	mov	r24, r25
    1dd2:	9a 2f       	mov	r25, r26
    1dd4:	ab 2f       	mov	r26, r27
    1dd6:	bb 27       	eor	r27, r27
    1dd8:	f8 01       	movw	r30, r16
    1dda:	80 83       	st	Z, r24

	}


/* TO enable writing on Register UCSRC (used for define the frame )as it has the same address with UBRR register */
SET_BIT(UCSRC,URSEL);
    1ddc:	80 e4       	ldi	r24, 0x40	; 64
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	20 e4       	ldi	r18, 0x40	; 64
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	f9 01       	movw	r30, r18
    1de6:	20 81       	ld	r18, Z
    1de8:	20 68       	ori	r18, 0x80	; 128
    1dea:	fc 01       	movw	r30, r24
    1dec:	20 83       	st	Z, r18
/* the UART frame parameters*/
/* character size */
//SET_BIT(UCSRC,UCSZ0);
//SET_BIT(UCSRC,UCSZ1);
switch(config->character_size)
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	9a 81       	ldd	r25, Y+2	; 0x02
    1df2:	fc 01       	movw	r30, r24
    1df4:	80 81       	ld	r24, Z
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	86 30       	cpi	r24, 0x06	; 6
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	f9 f0       	breq	.+62     	; 0x1e3e <UART_init+0x222>
    1e00:	87 30       	cpi	r24, 0x07	; 7
    1e02:	91 05       	cpc	r25, r1
    1e04:	1c f4       	brge	.+6      	; 0x1e0c <UART_init+0x1f0>
    1e06:	05 97       	sbiw	r24, 0x05	; 5
    1e08:	39 f0       	breq	.+14     	; 0x1e18 <UART_init+0x1fc>
    1e0a:	5b c0       	rjmp	.+182    	; 0x1ec2 <UART_init+0x2a6>
    1e0c:	87 30       	cpi	r24, 0x07	; 7
    1e0e:	91 05       	cpc	r25, r1
    1e10:	49 f1       	breq	.+82     	; 0x1e64 <UART_init+0x248>
    1e12:	09 97       	sbiw	r24, 0x09	; 9
    1e14:	d1 f1       	breq	.+116    	; 0x1e8a <UART_init+0x26e>
    1e16:	55 c0       	rjmp	.+170    	; 0x1ec2 <UART_init+0x2a6>
{
case 5:
	CLEAR_BIT(UCSRC,UCSZ0);
    1e18:	80 e4       	ldi	r24, 0x40	; 64
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	20 e4       	ldi	r18, 0x40	; 64
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	f9 01       	movw	r30, r18
    1e22:	20 81       	ld	r18, Z
    1e24:	2d 7f       	andi	r18, 0xFD	; 253
    1e26:	fc 01       	movw	r30, r24
    1e28:	20 83       	st	Z, r18
	CLEAR_BIT(UCSRC,UCSZ1);
    1e2a:	80 e4       	ldi	r24, 0x40	; 64
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	20 e4       	ldi	r18, 0x40	; 64
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	f9 01       	movw	r30, r18
    1e34:	20 81       	ld	r18, Z
    1e36:	2b 7f       	andi	r18, 0xFB	; 251
    1e38:	fc 01       	movw	r30, r24
    1e3a:	20 83       	st	Z, r18
	break;
    1e3c:	54 c0       	rjmp	.+168    	; 0x1ee6 <UART_init+0x2ca>

case 6:
	CLEAR_BIT(UCSRC,UCSZ0);
    1e3e:	80 e4       	ldi	r24, 0x40	; 64
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	20 e4       	ldi	r18, 0x40	; 64
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	f9 01       	movw	r30, r18
    1e48:	20 81       	ld	r18, Z
    1e4a:	2d 7f       	andi	r18, 0xFD	; 253
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    1e50:	80 e4       	ldi	r24, 0x40	; 64
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	20 e4       	ldi	r18, 0x40	; 64
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	f9 01       	movw	r30, r18
    1e5a:	20 81       	ld	r18, Z
    1e5c:	24 60       	ori	r18, 0x04	; 4
    1e5e:	fc 01       	movw	r30, r24
    1e60:	20 83       	st	Z, r18
	break;
    1e62:	41 c0       	rjmp	.+130    	; 0x1ee6 <UART_init+0x2ca>
case 7:
	CLEAR_BIT(UCSRC,UCSZ1);
    1e64:	80 e4       	ldi	r24, 0x40	; 64
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	20 e4       	ldi	r18, 0x40	; 64
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	f9 01       	movw	r30, r18
    1e6e:	20 81       	ld	r18, Z
    1e70:	2b 7f       	andi	r18, 0xFB	; 251
    1e72:	fc 01       	movw	r30, r24
    1e74:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ0);
    1e76:	80 e4       	ldi	r24, 0x40	; 64
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	20 e4       	ldi	r18, 0x40	; 64
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	f9 01       	movw	r30, r18
    1e80:	20 81       	ld	r18, Z
    1e82:	22 60       	ori	r18, 0x02	; 2
    1e84:	fc 01       	movw	r30, r24
    1e86:	20 83       	st	Z, r18
		break;
    1e88:	2e c0       	rjmp	.+92     	; 0x1ee6 <UART_init+0x2ca>
case 9:
	SET_BIT(UCSRC,UCSZ0);
    1e8a:	80 e4       	ldi	r24, 0x40	; 64
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	20 e4       	ldi	r18, 0x40	; 64
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	f9 01       	movw	r30, r18
    1e94:	20 81       	ld	r18, Z
    1e96:	22 60       	ori	r18, 0x02	; 2
    1e98:	fc 01       	movw	r30, r24
    1e9a:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    1e9c:	80 e4       	ldi	r24, 0x40	; 64
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	20 e4       	ldi	r18, 0x40	; 64
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	f9 01       	movw	r30, r18
    1ea6:	20 81       	ld	r18, Z
    1ea8:	24 60       	ori	r18, 0x04	; 4
    1eaa:	fc 01       	movw	r30, r24
    1eac:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ2);
    1eae:	80 e4       	ldi	r24, 0x40	; 64
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	20 e4       	ldi	r18, 0x40	; 64
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	f9 01       	movw	r30, r18
    1eb8:	20 81       	ld	r18, Z
    1eba:	24 60       	ori	r18, 0x04	; 4
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	20 83       	st	Z, r18


	break;
    1ec0:	12 c0       	rjmp	.+36     	; 0x1ee6 <UART_init+0x2ca>

default :
	//SET_BIT(UCSRC,URSEL);
	SET_BIT(UCSRC,UCSZ0);
    1ec2:	80 e4       	ldi	r24, 0x40	; 64
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	20 e4       	ldi	r18, 0x40	; 64
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	f9 01       	movw	r30, r18
    1ecc:	20 81       	ld	r18, Z
    1ece:	22 60       	ori	r18, 0x02	; 2
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    1ed4:	80 e4       	ldi	r24, 0x40	; 64
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	20 e4       	ldi	r18, 0x40	; 64
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	f9 01       	movw	r30, r18
    1ede:	20 81       	ld	r18, Z
    1ee0:	24 60       	ori	r18, 0x04	; 4
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	20 83       	st	Z, r18
/* write on UBRR instead of ucsrc register */
//CLEAR_BIT(UCSRC,URSEL);//---------------------------------------<<<<
/* writing the baud rate prescaler */
//UBRRL=12;
//UBRRH=12>>8;
SET_BIT(UCSRB,RXEN);
    1ee6:	8a e2       	ldi	r24, 0x2A	; 42
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	2a e2       	ldi	r18, 0x2A	; 42
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	f9 01       	movw	r30, r18
    1ef0:	20 81       	ld	r18, Z
    1ef2:	20 61       	ori	r18, 0x10	; 16
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	20 83       	st	Z, r18
SET_BIT(UCSRB,TXEN);
    1ef8:	8a e2       	ldi	r24, 0x2A	; 42
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	2a e2       	ldi	r18, 0x2A	; 42
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	f9 01       	movw	r30, r18
    1f02:	20 81       	ld	r18, Z
    1f04:	28 60       	ori	r18, 0x08	; 8
    1f06:	fc 01       	movw	r30, r24
    1f08:	20 83       	st	Z, r18
}
    1f0a:	00 00       	nop
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	1f 91       	pop	r17
    1f16:	0f 91       	pop	r16
    1f18:	08 95       	ret

00001f1a <UART_receiveByte>:

uint8 UART_receiveByte(void)
{
    1f1a:	cf 93       	push	r28
    1f1c:	df 93       	push	r29
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)); /* wait until RXC  flag be 1 it means that there is data not read */
    1f22:	00 00       	nop
    1f24:	8b e2       	ldi	r24, 0x2B	; 43
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	fc 01       	movw	r30, r24
    1f2a:	80 81       	ld	r24, Z
    1f2c:	88 23       	and	r24, r24
    1f2e:	d4 f7       	brge	.-12     	; 0x1f24 <UART_receiveByte+0xa>

	return UDR;/* read and return RXC flag to zero */
    1f30:	8c e2       	ldi	r24, 0x2C	; 44
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	fc 01       	movw	r30, r24
    1f36:	80 81       	ld	r24, Z
}
    1f38:	df 91       	pop	r29
    1f3a:	cf 91       	pop	r28
    1f3c:	08 95       	ret

00001f3e <UART_sendByte>:
void UART_sendByte(const uint8 data)
{
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	1f 92       	push	r1
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
    1f4a:	8c e2       	ldi	r24, 0x2C	; 44
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	29 81       	ldd	r18, Y+1	; 0x01
    1f50:	fc 01       	movw	r30, r24
    1f52:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(UCSRA,TXC));//wait until send data txc =1;
    1f54:	00 00       	nop
    1f56:	8b e2       	ldi	r24, 0x2B	; 43
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	80 81       	ld	r24, Z
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	80 74       	andi	r24, 0x40	; 64
    1f64:	99 27       	eor	r25, r25
    1f66:	89 2b       	or	r24, r25
    1f68:	b1 f3       	breq	.-20     	; 0x1f56 <UART_sendByte+0x18>
	SET_BIT(UCSRA,TXC); //clear the flag as it doesnt clear automatically as ISR
    1f6a:	8b e2       	ldi	r24, 0x2B	; 43
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	2b e2       	ldi	r18, 0x2B	; 43
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	f9 01       	movw	r30, r18
    1f74:	20 81       	ld	r18, Z
    1f76:	20 64       	ori	r18, 0x40	; 64
    1f78:	fc 01       	movw	r30, r24
    1f7a:	20 83       	st	Z, r18
	//while(BIT_IS_CLEAR(UCSRA,UDRE)){}
		/* Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now */
	//	UDR = data;
}
    1f7c:	00 00       	nop
    1f7e:	0f 90       	pop	r0
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	08 95       	ret

00001f86 <UART_sendString>:
void UART_sendString(uint8 *str)
{
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	00 d0       	rcall	.+0      	; 0x1f8c <UART_sendString+0x6>
    1f8c:	1f 92       	push	r1
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	9b 83       	std	Y+3, r25	; 0x03
    1f94:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f96:	19 82       	std	Y+1, r1	; 0x01
		while(str[i] != '\0')
    1f98:	0e c0       	rjmp	.+28     	; 0x1fb6 <UART_sendString+0x30>
		{
			UART_sendByte(str[i]);
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	2a 81       	ldd	r18, Y+2	; 0x02
    1fa2:	3b 81       	ldd	r19, Y+3	; 0x03
    1fa4:	82 0f       	add	r24, r18
    1fa6:	93 1f       	adc	r25, r19
    1fa8:	fc 01       	movw	r30, r24
    1faa:	80 81       	ld	r24, Z
    1fac:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <UART_sendByte>
			i++;
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	8f 5f       	subi	r24, 0xFF	; 255
    1fb4:	89 83       	std	Y+1, r24	; 0x01
	//	UDR = data;
}
void UART_sendString(uint8 *str)
{
	uint8 i = 0;
		while(str[i] != '\0')
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	88 2f       	mov	r24, r24
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	2a 81       	ldd	r18, Y+2	; 0x02
    1fbe:	3b 81       	ldd	r19, Y+3	; 0x03
    1fc0:	82 0f       	add	r24, r18
    1fc2:	93 1f       	adc	r25, r19
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	80 81       	ld	r24, Z
    1fc8:	88 23       	and	r24, r24
    1fca:	39 f7       	brne	.-50     	; 0x1f9a <UART_sendString+0x14>
		{
			UART_sendByte(str[i]);
			i++;
		}
	UART_sendByte('#');
    1fcc:	83 e2       	ldi	r24, 0x23	; 35
    1fce:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <UART_sendByte>

}
    1fd2:	00 00       	nop
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	df 91       	pop	r29
    1fdc:	cf 91       	pop	r28
    1fde:	08 95       	ret

00001fe0 <UART_receiveString>:
void UART_receiveString(uint8 *str)
{
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <UART_receiveString+0xa>
    1fea:	1f 92       	push	r1
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	9b 83       	std	Y+3, r25	; 0x03
    1ff2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ff4:	19 82       	std	Y+1, r1	; 0x01
		str[i] = UART_receiveByte();
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	88 2f       	mov	r24, r24
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	2a 81       	ldd	r18, Y+2	; 0x02
    1ffe:	3b 81       	ldd	r19, Y+3	; 0x03
    2000:	89 01       	movw	r16, r18
    2002:	08 0f       	add	r16, r24
    2004:	19 1f       	adc	r17, r25
    2006:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <UART_receiveByte>
    200a:	f8 01       	movw	r30, r16
    200c:	80 83       	st	Z, r24
		while(str[i] != '#')
    200e:	0f c0       	rjmp	.+30     	; 0x202e <UART_receiveString+0x4e>
		{
			i++;
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	8f 5f       	subi	r24, 0xFF	; 255
    2014:	89 83       	std	Y+1, r24	; 0x01
			str[i] = UART_receiveByte();
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	88 2f       	mov	r24, r24
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	2a 81       	ldd	r18, Y+2	; 0x02
    201e:	3b 81       	ldd	r19, Y+3	; 0x03
    2020:	89 01       	movw	r16, r18
    2022:	08 0f       	add	r16, r24
    2024:	19 1f       	adc	r17, r25
    2026:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <UART_receiveByte>
    202a:	f8 01       	movw	r30, r16
    202c:	80 83       	st	Z, r24
}
void UART_receiveString(uint8 *str)
{
	uint8 i = 0;
		str[i] = UART_receiveByte();
		while(str[i] != '#')
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	2a 81       	ldd	r18, Y+2	; 0x02
    2036:	3b 81       	ldd	r19, Y+3	; 0x03
    2038:	82 0f       	add	r24, r18
    203a:	93 1f       	adc	r25, r19
    203c:	fc 01       	movw	r30, r24
    203e:	80 81       	ld	r24, Z
    2040:	83 32       	cpi	r24, 0x23	; 35
    2042:	31 f7       	brne	.-52     	; 0x2010 <UART_receiveString+0x30>
		{
			i++;
			str[i] = UART_receiveByte();
		}
		str[i] = '\0';
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	88 2f       	mov	r24, r24
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	2a 81       	ldd	r18, Y+2	; 0x02
    204c:	3b 81       	ldd	r19, Y+3	; 0x03
    204e:	82 0f       	add	r24, r18
    2050:	93 1f       	adc	r25, r19
    2052:	fc 01       	movw	r30, r24
    2054:	10 82       	st	Z, r1
}
    2056:	00 00       	nop
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	08 95       	ret

00002068 <__udivmodsi4>:
    2068:	a1 e2       	ldi	r26, 0x21	; 33
    206a:	1a 2e       	mov	r1, r26
    206c:	aa 1b       	sub	r26, r26
    206e:	bb 1b       	sub	r27, r27
    2070:	fd 01       	movw	r30, r26
    2072:	0d c0       	rjmp	.+26     	; 0x208e <__udivmodsi4_ep>

00002074 <__udivmodsi4_loop>:
    2074:	aa 1f       	adc	r26, r26
    2076:	bb 1f       	adc	r27, r27
    2078:	ee 1f       	adc	r30, r30
    207a:	ff 1f       	adc	r31, r31
    207c:	a2 17       	cp	r26, r18
    207e:	b3 07       	cpc	r27, r19
    2080:	e4 07       	cpc	r30, r20
    2082:	f5 07       	cpc	r31, r21
    2084:	20 f0       	brcs	.+8      	; 0x208e <__udivmodsi4_ep>
    2086:	a2 1b       	sub	r26, r18
    2088:	b3 0b       	sbc	r27, r19
    208a:	e4 0b       	sbc	r30, r20
    208c:	f5 0b       	sbc	r31, r21

0000208e <__udivmodsi4_ep>:
    208e:	66 1f       	adc	r22, r22
    2090:	77 1f       	adc	r23, r23
    2092:	88 1f       	adc	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	1a 94       	dec	r1
    2098:	69 f7       	brne	.-38     	; 0x2074 <__udivmodsi4_loop>
    209a:	60 95       	com	r22
    209c:	70 95       	com	r23
    209e:	80 95       	com	r24
    20a0:	90 95       	com	r25
    20a2:	9b 01       	movw	r18, r22
    20a4:	ac 01       	movw	r20, r24
    20a6:	bd 01       	movw	r22, r26
    20a8:	cf 01       	movw	r24, r30
    20aa:	08 95       	ret

000020ac <__subsf3>:
    20ac:	50 58       	subi	r21, 0x80	; 128

000020ae <__addsf3>:
    20ae:	bb 27       	eor	r27, r27
    20b0:	aa 27       	eor	r26, r26
    20b2:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__addsf3x>
    20b6:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__fp_round>
    20ba:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fp_pscA>
    20be:	38 f0       	brcs	.+14     	; 0x20ce <__addsf3+0x20>
    20c0:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__fp_pscB>
    20c4:	20 f0       	brcs	.+8      	; 0x20ce <__addsf3+0x20>
    20c6:	39 f4       	brne	.+14     	; 0x20d6 <__addsf3+0x28>
    20c8:	9f 3f       	cpi	r25, 0xFF	; 255
    20ca:	19 f4       	brne	.+6      	; 0x20d2 <__addsf3+0x24>
    20cc:	26 f4       	brtc	.+8      	; 0x20d6 <__addsf3+0x28>
    20ce:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__fp_nan>
    20d2:	0e f4       	brtc	.+2      	; 0x20d6 <__addsf3+0x28>
    20d4:	e0 95       	com	r30
    20d6:	e7 fb       	bst	r30, 7
    20d8:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__fp_inf>

000020dc <__addsf3x>:
    20dc:	e9 2f       	mov	r30, r25
    20de:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__fp_split3>
    20e2:	58 f3       	brcs	.-42     	; 0x20ba <__addsf3+0xc>
    20e4:	ba 17       	cp	r27, r26
    20e6:	62 07       	cpc	r22, r18
    20e8:	73 07       	cpc	r23, r19
    20ea:	84 07       	cpc	r24, r20
    20ec:	95 07       	cpc	r25, r21
    20ee:	20 f0       	brcs	.+8      	; 0x20f8 <__addsf3x+0x1c>
    20f0:	79 f4       	brne	.+30     	; 0x2110 <__addsf3x+0x34>
    20f2:	a6 f5       	brtc	.+104    	; 0x215c <__addsf3x+0x80>
    20f4:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__fp_zero>
    20f8:	0e f4       	brtc	.+2      	; 0x20fc <__addsf3x+0x20>
    20fa:	e0 95       	com	r30
    20fc:	0b 2e       	mov	r0, r27
    20fe:	ba 2f       	mov	r27, r26
    2100:	a0 2d       	mov	r26, r0
    2102:	0b 01       	movw	r0, r22
    2104:	b9 01       	movw	r22, r18
    2106:	90 01       	movw	r18, r0
    2108:	0c 01       	movw	r0, r24
    210a:	ca 01       	movw	r24, r20
    210c:	a0 01       	movw	r20, r0
    210e:	11 24       	eor	r1, r1
    2110:	ff 27       	eor	r31, r31
    2112:	59 1b       	sub	r21, r25
    2114:	99 f0       	breq	.+38     	; 0x213c <__addsf3x+0x60>
    2116:	59 3f       	cpi	r21, 0xF9	; 249
    2118:	50 f4       	brcc	.+20     	; 0x212e <__addsf3x+0x52>
    211a:	50 3e       	cpi	r21, 0xE0	; 224
    211c:	68 f1       	brcs	.+90     	; 0x2178 <__addsf3x+0x9c>
    211e:	1a 16       	cp	r1, r26
    2120:	f0 40       	sbci	r31, 0x00	; 0
    2122:	a2 2f       	mov	r26, r18
    2124:	23 2f       	mov	r18, r19
    2126:	34 2f       	mov	r19, r20
    2128:	44 27       	eor	r20, r20
    212a:	58 5f       	subi	r21, 0xF8	; 248
    212c:	f3 cf       	rjmp	.-26     	; 0x2114 <__addsf3x+0x38>
    212e:	46 95       	lsr	r20
    2130:	37 95       	ror	r19
    2132:	27 95       	ror	r18
    2134:	a7 95       	ror	r26
    2136:	f0 40       	sbci	r31, 0x00	; 0
    2138:	53 95       	inc	r21
    213a:	c9 f7       	brne	.-14     	; 0x212e <__addsf3x+0x52>
    213c:	7e f4       	brtc	.+30     	; 0x215c <__addsf3x+0x80>
    213e:	1f 16       	cp	r1, r31
    2140:	ba 0b       	sbc	r27, r26
    2142:	62 0b       	sbc	r22, r18
    2144:	73 0b       	sbc	r23, r19
    2146:	84 0b       	sbc	r24, r20
    2148:	ba f0       	brmi	.+46     	; 0x2178 <__addsf3x+0x9c>
    214a:	91 50       	subi	r25, 0x01	; 1
    214c:	a1 f0       	breq	.+40     	; 0x2176 <__addsf3x+0x9a>
    214e:	ff 0f       	add	r31, r31
    2150:	bb 1f       	adc	r27, r27
    2152:	66 1f       	adc	r22, r22
    2154:	77 1f       	adc	r23, r23
    2156:	88 1f       	adc	r24, r24
    2158:	c2 f7       	brpl	.-16     	; 0x214a <__addsf3x+0x6e>
    215a:	0e c0       	rjmp	.+28     	; 0x2178 <__addsf3x+0x9c>
    215c:	ba 0f       	add	r27, r26
    215e:	62 1f       	adc	r22, r18
    2160:	73 1f       	adc	r23, r19
    2162:	84 1f       	adc	r24, r20
    2164:	48 f4       	brcc	.+18     	; 0x2178 <__addsf3x+0x9c>
    2166:	87 95       	ror	r24
    2168:	77 95       	ror	r23
    216a:	67 95       	ror	r22
    216c:	b7 95       	ror	r27
    216e:	f7 95       	ror	r31
    2170:	9e 3f       	cpi	r25, 0xFE	; 254
    2172:	08 f0       	brcs	.+2      	; 0x2176 <__addsf3x+0x9a>
    2174:	b0 cf       	rjmp	.-160    	; 0x20d6 <__addsf3+0x28>
    2176:	93 95       	inc	r25
    2178:	88 0f       	add	r24, r24
    217a:	08 f0       	brcs	.+2      	; 0x217e <__addsf3x+0xa2>
    217c:	99 27       	eor	r25, r25
    217e:	ee 0f       	add	r30, r30
    2180:	97 95       	ror	r25
    2182:	87 95       	ror	r24
    2184:	08 95       	ret

00002186 <__cmpsf2>:
    2186:	0e 94 a6 11 	call	0x234c	; 0x234c <__fp_cmp>
    218a:	08 f4       	brcc	.+2      	; 0x218e <__cmpsf2+0x8>
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	08 95       	ret

00002190 <__divsf3>:
    2190:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__divsf3x>
    2194:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__fp_round>
    2198:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__fp_pscB>
    219c:	58 f0       	brcs	.+22     	; 0x21b4 <__divsf3+0x24>
    219e:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fp_pscA>
    21a2:	40 f0       	brcs	.+16     	; 0x21b4 <__divsf3+0x24>
    21a4:	29 f4       	brne	.+10     	; 0x21b0 <__divsf3+0x20>
    21a6:	5f 3f       	cpi	r21, 0xFF	; 255
    21a8:	29 f0       	breq	.+10     	; 0x21b4 <__divsf3+0x24>
    21aa:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__fp_inf>
    21ae:	51 11       	cpse	r21, r1
    21b0:	0c 94 15 12 	jmp	0x242a	; 0x242a <__fp_szero>
    21b4:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__fp_nan>

000021b8 <__divsf3x>:
    21b8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__fp_split3>
    21bc:	68 f3       	brcs	.-38     	; 0x2198 <__divsf3+0x8>

000021be <__divsf3_pse>:
    21be:	99 23       	and	r25, r25
    21c0:	b1 f3       	breq	.-20     	; 0x21ae <__divsf3+0x1e>
    21c2:	55 23       	and	r21, r21
    21c4:	91 f3       	breq	.-28     	; 0x21aa <__divsf3+0x1a>
    21c6:	95 1b       	sub	r25, r21
    21c8:	55 0b       	sbc	r21, r21
    21ca:	bb 27       	eor	r27, r27
    21cc:	aa 27       	eor	r26, r26
    21ce:	62 17       	cp	r22, r18
    21d0:	73 07       	cpc	r23, r19
    21d2:	84 07       	cpc	r24, r20
    21d4:	38 f0       	brcs	.+14     	; 0x21e4 <__divsf3_pse+0x26>
    21d6:	9f 5f       	subi	r25, 0xFF	; 255
    21d8:	5f 4f       	sbci	r21, 0xFF	; 255
    21da:	22 0f       	add	r18, r18
    21dc:	33 1f       	adc	r19, r19
    21de:	44 1f       	adc	r20, r20
    21e0:	aa 1f       	adc	r26, r26
    21e2:	a9 f3       	breq	.-22     	; 0x21ce <__divsf3_pse+0x10>
    21e4:	35 d0       	rcall	.+106    	; 0x2250 <__divsf3_pse+0x92>
    21e6:	0e 2e       	mov	r0, r30
    21e8:	3a f0       	brmi	.+14     	; 0x21f8 <__divsf3_pse+0x3a>
    21ea:	e0 e8       	ldi	r30, 0x80	; 128
    21ec:	32 d0       	rcall	.+100    	; 0x2252 <__divsf3_pse+0x94>
    21ee:	91 50       	subi	r25, 0x01	; 1
    21f0:	50 40       	sbci	r21, 0x00	; 0
    21f2:	e6 95       	lsr	r30
    21f4:	00 1c       	adc	r0, r0
    21f6:	ca f7       	brpl	.-14     	; 0x21ea <__divsf3_pse+0x2c>
    21f8:	2b d0       	rcall	.+86     	; 0x2250 <__divsf3_pse+0x92>
    21fa:	fe 2f       	mov	r31, r30
    21fc:	29 d0       	rcall	.+82     	; 0x2250 <__divsf3_pse+0x92>
    21fe:	66 0f       	add	r22, r22
    2200:	77 1f       	adc	r23, r23
    2202:	88 1f       	adc	r24, r24
    2204:	bb 1f       	adc	r27, r27
    2206:	26 17       	cp	r18, r22
    2208:	37 07       	cpc	r19, r23
    220a:	48 07       	cpc	r20, r24
    220c:	ab 07       	cpc	r26, r27
    220e:	b0 e8       	ldi	r27, 0x80	; 128
    2210:	09 f0       	breq	.+2      	; 0x2214 <__divsf3_pse+0x56>
    2212:	bb 0b       	sbc	r27, r27
    2214:	80 2d       	mov	r24, r0
    2216:	bf 01       	movw	r22, r30
    2218:	ff 27       	eor	r31, r31
    221a:	93 58       	subi	r25, 0x83	; 131
    221c:	5f 4f       	sbci	r21, 0xFF	; 255
    221e:	3a f0       	brmi	.+14     	; 0x222e <__divsf3_pse+0x70>
    2220:	9e 3f       	cpi	r25, 0xFE	; 254
    2222:	51 05       	cpc	r21, r1
    2224:	78 f0       	brcs	.+30     	; 0x2244 <__divsf3_pse+0x86>
    2226:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__fp_inf>
    222a:	0c 94 15 12 	jmp	0x242a	; 0x242a <__fp_szero>
    222e:	5f 3f       	cpi	r21, 0xFF	; 255
    2230:	e4 f3       	brlt	.-8      	; 0x222a <__divsf3_pse+0x6c>
    2232:	98 3e       	cpi	r25, 0xE8	; 232
    2234:	d4 f3       	brlt	.-12     	; 0x222a <__divsf3_pse+0x6c>
    2236:	86 95       	lsr	r24
    2238:	77 95       	ror	r23
    223a:	67 95       	ror	r22
    223c:	b7 95       	ror	r27
    223e:	f7 95       	ror	r31
    2240:	9f 5f       	subi	r25, 0xFF	; 255
    2242:	c9 f7       	brne	.-14     	; 0x2236 <__divsf3_pse+0x78>
    2244:	88 0f       	add	r24, r24
    2246:	91 1d       	adc	r25, r1
    2248:	96 95       	lsr	r25
    224a:	87 95       	ror	r24
    224c:	97 f9       	bld	r25, 7
    224e:	08 95       	ret
    2250:	e1 e0       	ldi	r30, 0x01	; 1
    2252:	66 0f       	add	r22, r22
    2254:	77 1f       	adc	r23, r23
    2256:	88 1f       	adc	r24, r24
    2258:	bb 1f       	adc	r27, r27
    225a:	62 17       	cp	r22, r18
    225c:	73 07       	cpc	r23, r19
    225e:	84 07       	cpc	r24, r20
    2260:	ba 07       	cpc	r27, r26
    2262:	20 f0       	brcs	.+8      	; 0x226c <__divsf3_pse+0xae>
    2264:	62 1b       	sub	r22, r18
    2266:	73 0b       	sbc	r23, r19
    2268:	84 0b       	sbc	r24, r20
    226a:	ba 0b       	sbc	r27, r26
    226c:	ee 1f       	adc	r30, r30
    226e:	88 f7       	brcc	.-30     	; 0x2252 <__divsf3_pse+0x94>
    2270:	e0 95       	com	r30
    2272:	08 95       	ret

00002274 <__fixunssfsi>:
    2274:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__fp_splitA>
    2278:	88 f0       	brcs	.+34     	; 0x229c <__fixunssfsi+0x28>
    227a:	9f 57       	subi	r25, 0x7F	; 127
    227c:	98 f0       	brcs	.+38     	; 0x22a4 <__fixunssfsi+0x30>
    227e:	b9 2f       	mov	r27, r25
    2280:	99 27       	eor	r25, r25
    2282:	b7 51       	subi	r27, 0x17	; 23
    2284:	b0 f0       	brcs	.+44     	; 0x22b2 <__fixunssfsi+0x3e>
    2286:	e1 f0       	breq	.+56     	; 0x22c0 <__fixunssfsi+0x4c>
    2288:	66 0f       	add	r22, r22
    228a:	77 1f       	adc	r23, r23
    228c:	88 1f       	adc	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	1a f0       	brmi	.+6      	; 0x2298 <__fixunssfsi+0x24>
    2292:	ba 95       	dec	r27
    2294:	c9 f7       	brne	.-14     	; 0x2288 <__fixunssfsi+0x14>
    2296:	14 c0       	rjmp	.+40     	; 0x22c0 <__fixunssfsi+0x4c>
    2298:	b1 30       	cpi	r27, 0x01	; 1
    229a:	91 f0       	breq	.+36     	; 0x22c0 <__fixunssfsi+0x4c>
    229c:	0e 94 14 12 	call	0x2428	; 0x2428 <__fp_zero>
    22a0:	b1 e0       	ldi	r27, 0x01	; 1
    22a2:	08 95       	ret
    22a4:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__fp_zero>
    22a8:	67 2f       	mov	r22, r23
    22aa:	78 2f       	mov	r23, r24
    22ac:	88 27       	eor	r24, r24
    22ae:	b8 5f       	subi	r27, 0xF8	; 248
    22b0:	39 f0       	breq	.+14     	; 0x22c0 <__fixunssfsi+0x4c>
    22b2:	b9 3f       	cpi	r27, 0xF9	; 249
    22b4:	cc f3       	brlt	.-14     	; 0x22a8 <__fixunssfsi+0x34>
    22b6:	86 95       	lsr	r24
    22b8:	77 95       	ror	r23
    22ba:	67 95       	ror	r22
    22bc:	b3 95       	inc	r27
    22be:	d9 f7       	brne	.-10     	; 0x22b6 <__fixunssfsi+0x42>
    22c0:	3e f4       	brtc	.+14     	; 0x22d0 <__fixunssfsi+0x5c>
    22c2:	90 95       	com	r25
    22c4:	80 95       	com	r24
    22c6:	70 95       	com	r23
    22c8:	61 95       	neg	r22
    22ca:	7f 4f       	sbci	r23, 0xFF	; 255
    22cc:	8f 4f       	sbci	r24, 0xFF	; 255
    22ce:	9f 4f       	sbci	r25, 0xFF	; 255
    22d0:	08 95       	ret

000022d2 <__floatunsisf>:
    22d2:	e8 94       	clt
    22d4:	09 c0       	rjmp	.+18     	; 0x22e8 <__floatsisf+0x12>

000022d6 <__floatsisf>:
    22d6:	97 fb       	bst	r25, 7
    22d8:	3e f4       	brtc	.+14     	; 0x22e8 <__floatsisf+0x12>
    22da:	90 95       	com	r25
    22dc:	80 95       	com	r24
    22de:	70 95       	com	r23
    22e0:	61 95       	neg	r22
    22e2:	7f 4f       	sbci	r23, 0xFF	; 255
    22e4:	8f 4f       	sbci	r24, 0xFF	; 255
    22e6:	9f 4f       	sbci	r25, 0xFF	; 255
    22e8:	99 23       	and	r25, r25
    22ea:	a9 f0       	breq	.+42     	; 0x2316 <__floatsisf+0x40>
    22ec:	f9 2f       	mov	r31, r25
    22ee:	96 e9       	ldi	r25, 0x96	; 150
    22f0:	bb 27       	eor	r27, r27
    22f2:	93 95       	inc	r25
    22f4:	f6 95       	lsr	r31
    22f6:	87 95       	ror	r24
    22f8:	77 95       	ror	r23
    22fa:	67 95       	ror	r22
    22fc:	b7 95       	ror	r27
    22fe:	f1 11       	cpse	r31, r1
    2300:	f8 cf       	rjmp	.-16     	; 0x22f2 <__floatsisf+0x1c>
    2302:	fa f4       	brpl	.+62     	; 0x2342 <__floatsisf+0x6c>
    2304:	bb 0f       	add	r27, r27
    2306:	11 f4       	brne	.+4      	; 0x230c <__floatsisf+0x36>
    2308:	60 ff       	sbrs	r22, 0
    230a:	1b c0       	rjmp	.+54     	; 0x2342 <__floatsisf+0x6c>
    230c:	6f 5f       	subi	r22, 0xFF	; 255
    230e:	7f 4f       	sbci	r23, 0xFF	; 255
    2310:	8f 4f       	sbci	r24, 0xFF	; 255
    2312:	9f 4f       	sbci	r25, 0xFF	; 255
    2314:	16 c0       	rjmp	.+44     	; 0x2342 <__floatsisf+0x6c>
    2316:	88 23       	and	r24, r24
    2318:	11 f0       	breq	.+4      	; 0x231e <__floatsisf+0x48>
    231a:	96 e9       	ldi	r25, 0x96	; 150
    231c:	11 c0       	rjmp	.+34     	; 0x2340 <__floatsisf+0x6a>
    231e:	77 23       	and	r23, r23
    2320:	21 f0       	breq	.+8      	; 0x232a <__floatsisf+0x54>
    2322:	9e e8       	ldi	r25, 0x8E	; 142
    2324:	87 2f       	mov	r24, r23
    2326:	76 2f       	mov	r23, r22
    2328:	05 c0       	rjmp	.+10     	; 0x2334 <__floatsisf+0x5e>
    232a:	66 23       	and	r22, r22
    232c:	71 f0       	breq	.+28     	; 0x234a <__floatsisf+0x74>
    232e:	96 e8       	ldi	r25, 0x86	; 134
    2330:	86 2f       	mov	r24, r22
    2332:	70 e0       	ldi	r23, 0x00	; 0
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	2a f0       	brmi	.+10     	; 0x2342 <__floatsisf+0x6c>
    2338:	9a 95       	dec	r25
    233a:	66 0f       	add	r22, r22
    233c:	77 1f       	adc	r23, r23
    233e:	88 1f       	adc	r24, r24
    2340:	da f7       	brpl	.-10     	; 0x2338 <__floatsisf+0x62>
    2342:	88 0f       	add	r24, r24
    2344:	96 95       	lsr	r25
    2346:	87 95       	ror	r24
    2348:	97 f9       	bld	r25, 7
    234a:	08 95       	ret

0000234c <__fp_cmp>:
    234c:	99 0f       	add	r25, r25
    234e:	00 08       	sbc	r0, r0
    2350:	55 0f       	add	r21, r21
    2352:	aa 0b       	sbc	r26, r26
    2354:	e0 e8       	ldi	r30, 0x80	; 128
    2356:	fe ef       	ldi	r31, 0xFE	; 254
    2358:	16 16       	cp	r1, r22
    235a:	17 06       	cpc	r1, r23
    235c:	e8 07       	cpc	r30, r24
    235e:	f9 07       	cpc	r31, r25
    2360:	c0 f0       	brcs	.+48     	; 0x2392 <__fp_cmp+0x46>
    2362:	12 16       	cp	r1, r18
    2364:	13 06       	cpc	r1, r19
    2366:	e4 07       	cpc	r30, r20
    2368:	f5 07       	cpc	r31, r21
    236a:	98 f0       	brcs	.+38     	; 0x2392 <__fp_cmp+0x46>
    236c:	62 1b       	sub	r22, r18
    236e:	73 0b       	sbc	r23, r19
    2370:	84 0b       	sbc	r24, r20
    2372:	95 0b       	sbc	r25, r21
    2374:	39 f4       	brne	.+14     	; 0x2384 <__fp_cmp+0x38>
    2376:	0a 26       	eor	r0, r26
    2378:	61 f0       	breq	.+24     	; 0x2392 <__fp_cmp+0x46>
    237a:	23 2b       	or	r18, r19
    237c:	24 2b       	or	r18, r20
    237e:	25 2b       	or	r18, r21
    2380:	21 f4       	brne	.+8      	; 0x238a <__fp_cmp+0x3e>
    2382:	08 95       	ret
    2384:	0a 26       	eor	r0, r26
    2386:	09 f4       	brne	.+2      	; 0x238a <__fp_cmp+0x3e>
    2388:	a1 40       	sbci	r26, 0x01	; 1
    238a:	a6 95       	lsr	r26
    238c:	8f ef       	ldi	r24, 0xFF	; 255
    238e:	81 1d       	adc	r24, r1
    2390:	81 1d       	adc	r24, r1
    2392:	08 95       	ret

00002394 <__fp_inf>:
    2394:	97 f9       	bld	r25, 7
    2396:	9f 67       	ori	r25, 0x7F	; 127
    2398:	80 e8       	ldi	r24, 0x80	; 128
    239a:	70 e0       	ldi	r23, 0x00	; 0
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	08 95       	ret

000023a0 <__fp_nan>:
    23a0:	9f ef       	ldi	r25, 0xFF	; 255
    23a2:	80 ec       	ldi	r24, 0xC0	; 192
    23a4:	08 95       	ret

000023a6 <__fp_pscA>:
    23a6:	00 24       	eor	r0, r0
    23a8:	0a 94       	dec	r0
    23aa:	16 16       	cp	r1, r22
    23ac:	17 06       	cpc	r1, r23
    23ae:	18 06       	cpc	r1, r24
    23b0:	09 06       	cpc	r0, r25
    23b2:	08 95       	ret

000023b4 <__fp_pscB>:
    23b4:	00 24       	eor	r0, r0
    23b6:	0a 94       	dec	r0
    23b8:	12 16       	cp	r1, r18
    23ba:	13 06       	cpc	r1, r19
    23bc:	14 06       	cpc	r1, r20
    23be:	05 06       	cpc	r0, r21
    23c0:	08 95       	ret

000023c2 <__fp_round>:
    23c2:	09 2e       	mov	r0, r25
    23c4:	03 94       	inc	r0
    23c6:	00 0c       	add	r0, r0
    23c8:	11 f4       	brne	.+4      	; 0x23ce <__fp_round+0xc>
    23ca:	88 23       	and	r24, r24
    23cc:	52 f0       	brmi	.+20     	; 0x23e2 <__fp_round+0x20>
    23ce:	bb 0f       	add	r27, r27
    23d0:	40 f4       	brcc	.+16     	; 0x23e2 <__fp_round+0x20>
    23d2:	bf 2b       	or	r27, r31
    23d4:	11 f4       	brne	.+4      	; 0x23da <__fp_round+0x18>
    23d6:	60 ff       	sbrs	r22, 0
    23d8:	04 c0       	rjmp	.+8      	; 0x23e2 <__fp_round+0x20>
    23da:	6f 5f       	subi	r22, 0xFF	; 255
    23dc:	7f 4f       	sbci	r23, 0xFF	; 255
    23de:	8f 4f       	sbci	r24, 0xFF	; 255
    23e0:	9f 4f       	sbci	r25, 0xFF	; 255
    23e2:	08 95       	ret

000023e4 <__fp_split3>:
    23e4:	57 fd       	sbrc	r21, 7
    23e6:	90 58       	subi	r25, 0x80	; 128
    23e8:	44 0f       	add	r20, r20
    23ea:	55 1f       	adc	r21, r21
    23ec:	59 f0       	breq	.+22     	; 0x2404 <__fp_splitA+0x10>
    23ee:	5f 3f       	cpi	r21, 0xFF	; 255
    23f0:	71 f0       	breq	.+28     	; 0x240e <__fp_splitA+0x1a>
    23f2:	47 95       	ror	r20

000023f4 <__fp_splitA>:
    23f4:	88 0f       	add	r24, r24
    23f6:	97 fb       	bst	r25, 7
    23f8:	99 1f       	adc	r25, r25
    23fa:	61 f0       	breq	.+24     	; 0x2414 <__fp_splitA+0x20>
    23fc:	9f 3f       	cpi	r25, 0xFF	; 255
    23fe:	79 f0       	breq	.+30     	; 0x241e <__fp_splitA+0x2a>
    2400:	87 95       	ror	r24
    2402:	08 95       	ret
    2404:	12 16       	cp	r1, r18
    2406:	13 06       	cpc	r1, r19
    2408:	14 06       	cpc	r1, r20
    240a:	55 1f       	adc	r21, r21
    240c:	f2 cf       	rjmp	.-28     	; 0x23f2 <__fp_split3+0xe>
    240e:	46 95       	lsr	r20
    2410:	f1 df       	rcall	.-30     	; 0x23f4 <__fp_splitA>
    2412:	08 c0       	rjmp	.+16     	; 0x2424 <__fp_splitA+0x30>
    2414:	16 16       	cp	r1, r22
    2416:	17 06       	cpc	r1, r23
    2418:	18 06       	cpc	r1, r24
    241a:	99 1f       	adc	r25, r25
    241c:	f1 cf       	rjmp	.-30     	; 0x2400 <__fp_splitA+0xc>
    241e:	86 95       	lsr	r24
    2420:	71 05       	cpc	r23, r1
    2422:	61 05       	cpc	r22, r1
    2424:	08 94       	sec
    2426:	08 95       	ret

00002428 <__fp_zero>:
    2428:	e8 94       	clt

0000242a <__fp_szero>:
    242a:	bb 27       	eor	r27, r27
    242c:	66 27       	eor	r22, r22
    242e:	77 27       	eor	r23, r23
    2430:	cb 01       	movw	r24, r22
    2432:	97 f9       	bld	r25, 7
    2434:	08 95       	ret

00002436 <__gesf2>:
    2436:	0e 94 a6 11 	call	0x234c	; 0x234c <__fp_cmp>
    243a:	08 f4       	brcc	.+2      	; 0x243e <__gesf2+0x8>
    243c:	8f ef       	ldi	r24, 0xFF	; 255
    243e:	08 95       	ret

00002440 <__mulsf3>:
    2440:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3x>
    2444:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__fp_round>
    2448:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__fp_pscA>
    244c:	38 f0       	brcs	.+14     	; 0x245c <__mulsf3+0x1c>
    244e:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__fp_pscB>
    2452:	20 f0       	brcs	.+8      	; 0x245c <__mulsf3+0x1c>
    2454:	95 23       	and	r25, r21
    2456:	11 f0       	breq	.+4      	; 0x245c <__mulsf3+0x1c>
    2458:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__fp_inf>
    245c:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__fp_nan>
    2460:	11 24       	eor	r1, r1
    2462:	0c 94 15 12 	jmp	0x242a	; 0x242a <__fp_szero>

00002466 <__mulsf3x>:
    2466:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__fp_split3>
    246a:	70 f3       	brcs	.-36     	; 0x2448 <__mulsf3+0x8>

0000246c <__mulsf3_pse>:
    246c:	95 9f       	mul	r25, r21
    246e:	c1 f3       	breq	.-16     	; 0x2460 <__mulsf3+0x20>
    2470:	95 0f       	add	r25, r21
    2472:	50 e0       	ldi	r21, 0x00	; 0
    2474:	55 1f       	adc	r21, r21
    2476:	62 9f       	mul	r22, r18
    2478:	f0 01       	movw	r30, r0
    247a:	72 9f       	mul	r23, r18
    247c:	bb 27       	eor	r27, r27
    247e:	f0 0d       	add	r31, r0
    2480:	b1 1d       	adc	r27, r1
    2482:	63 9f       	mul	r22, r19
    2484:	aa 27       	eor	r26, r26
    2486:	f0 0d       	add	r31, r0
    2488:	b1 1d       	adc	r27, r1
    248a:	aa 1f       	adc	r26, r26
    248c:	64 9f       	mul	r22, r20
    248e:	66 27       	eor	r22, r22
    2490:	b0 0d       	add	r27, r0
    2492:	a1 1d       	adc	r26, r1
    2494:	66 1f       	adc	r22, r22
    2496:	82 9f       	mul	r24, r18
    2498:	22 27       	eor	r18, r18
    249a:	b0 0d       	add	r27, r0
    249c:	a1 1d       	adc	r26, r1
    249e:	62 1f       	adc	r22, r18
    24a0:	73 9f       	mul	r23, r19
    24a2:	b0 0d       	add	r27, r0
    24a4:	a1 1d       	adc	r26, r1
    24a6:	62 1f       	adc	r22, r18
    24a8:	83 9f       	mul	r24, r19
    24aa:	a0 0d       	add	r26, r0
    24ac:	61 1d       	adc	r22, r1
    24ae:	22 1f       	adc	r18, r18
    24b0:	74 9f       	mul	r23, r20
    24b2:	33 27       	eor	r19, r19
    24b4:	a0 0d       	add	r26, r0
    24b6:	61 1d       	adc	r22, r1
    24b8:	23 1f       	adc	r18, r19
    24ba:	84 9f       	mul	r24, r20
    24bc:	60 0d       	add	r22, r0
    24be:	21 1d       	adc	r18, r1
    24c0:	82 2f       	mov	r24, r18
    24c2:	76 2f       	mov	r23, r22
    24c4:	6a 2f       	mov	r22, r26
    24c6:	11 24       	eor	r1, r1
    24c8:	9f 57       	subi	r25, 0x7F	; 127
    24ca:	50 40       	sbci	r21, 0x00	; 0
    24cc:	9a f0       	brmi	.+38     	; 0x24f4 <__mulsf3_pse+0x88>
    24ce:	f1 f0       	breq	.+60     	; 0x250c <__mulsf3_pse+0xa0>
    24d0:	88 23       	and	r24, r24
    24d2:	4a f0       	brmi	.+18     	; 0x24e6 <__mulsf3_pse+0x7a>
    24d4:	ee 0f       	add	r30, r30
    24d6:	ff 1f       	adc	r31, r31
    24d8:	bb 1f       	adc	r27, r27
    24da:	66 1f       	adc	r22, r22
    24dc:	77 1f       	adc	r23, r23
    24de:	88 1f       	adc	r24, r24
    24e0:	91 50       	subi	r25, 0x01	; 1
    24e2:	50 40       	sbci	r21, 0x00	; 0
    24e4:	a9 f7       	brne	.-22     	; 0x24d0 <__mulsf3_pse+0x64>
    24e6:	9e 3f       	cpi	r25, 0xFE	; 254
    24e8:	51 05       	cpc	r21, r1
    24ea:	80 f0       	brcs	.+32     	; 0x250c <__mulsf3_pse+0xa0>
    24ec:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__fp_inf>
    24f0:	0c 94 15 12 	jmp	0x242a	; 0x242a <__fp_szero>
    24f4:	5f 3f       	cpi	r21, 0xFF	; 255
    24f6:	e4 f3       	brlt	.-8      	; 0x24f0 <__mulsf3_pse+0x84>
    24f8:	98 3e       	cpi	r25, 0xE8	; 232
    24fa:	d4 f3       	brlt	.-12     	; 0x24f0 <__mulsf3_pse+0x84>
    24fc:	86 95       	lsr	r24
    24fe:	77 95       	ror	r23
    2500:	67 95       	ror	r22
    2502:	b7 95       	ror	r27
    2504:	f7 95       	ror	r31
    2506:	e7 95       	ror	r30
    2508:	9f 5f       	subi	r25, 0xFF	; 255
    250a:	c1 f7       	brne	.-16     	; 0x24fc <__mulsf3_pse+0x90>
    250c:	fe 2b       	or	r31, r30
    250e:	88 0f       	add	r24, r24
    2510:	91 1d       	adc	r25, r1
    2512:	96 95       	lsr	r25
    2514:	87 95       	ror	r24
    2516:	97 f9       	bld	r25, 7
    2518:	08 95       	ret

0000251a <pow>:
    251a:	fa 01       	movw	r30, r20
    251c:	ee 0f       	add	r30, r30
    251e:	ff 1f       	adc	r31, r31
    2520:	30 96       	adiw	r30, 0x00	; 0
    2522:	21 05       	cpc	r18, r1
    2524:	31 05       	cpc	r19, r1
    2526:	a1 f1       	breq	.+104    	; 0x2590 <pow+0x76>
    2528:	61 15       	cp	r22, r1
    252a:	71 05       	cpc	r23, r1
    252c:	61 f4       	brne	.+24     	; 0x2546 <pow+0x2c>
    252e:	80 38       	cpi	r24, 0x80	; 128
    2530:	bf e3       	ldi	r27, 0x3F	; 63
    2532:	9b 07       	cpc	r25, r27
    2534:	49 f1       	breq	.+82     	; 0x2588 <pow+0x6e>
    2536:	68 94       	set
    2538:	90 38       	cpi	r25, 0x80	; 128
    253a:	81 05       	cpc	r24, r1
    253c:	61 f0       	breq	.+24     	; 0x2556 <pow+0x3c>
    253e:	80 38       	cpi	r24, 0x80	; 128
    2540:	bf ef       	ldi	r27, 0xFF	; 255
    2542:	9b 07       	cpc	r25, r27
    2544:	41 f0       	breq	.+16     	; 0x2556 <pow+0x3c>
    2546:	99 23       	and	r25, r25
    2548:	4a f5       	brpl	.+82     	; 0x259c <pow+0x82>
    254a:	ff 3f       	cpi	r31, 0xFF	; 255
    254c:	e1 05       	cpc	r30, r1
    254e:	31 05       	cpc	r19, r1
    2550:	21 05       	cpc	r18, r1
    2552:	19 f1       	breq	.+70     	; 0x259a <pow+0x80>
    2554:	e8 94       	clt
    2556:	08 94       	sec
    2558:	e7 95       	ror	r30
    255a:	d9 01       	movw	r26, r18
    255c:	aa 23       	and	r26, r26
    255e:	29 f4       	brne	.+10     	; 0x256a <pow+0x50>
    2560:	ab 2f       	mov	r26, r27
    2562:	be 2f       	mov	r27, r30
    2564:	f8 5f       	subi	r31, 0xF8	; 248
    2566:	d0 f3       	brcs	.-12     	; 0x255c <pow+0x42>
    2568:	10 c0       	rjmp	.+32     	; 0x258a <pow+0x70>
    256a:	ff 5f       	subi	r31, 0xFF	; 255
    256c:	70 f4       	brcc	.+28     	; 0x258a <pow+0x70>
    256e:	a6 95       	lsr	r26
    2570:	e0 f7       	brcc	.-8      	; 0x256a <pow+0x50>
    2572:	f7 39       	cpi	r31, 0x97	; 151
    2574:	50 f0       	brcs	.+20     	; 0x258a <pow+0x70>
    2576:	19 f0       	breq	.+6      	; 0x257e <pow+0x64>
    2578:	ff 3a       	cpi	r31, 0xAF	; 175
    257a:	38 f4       	brcc	.+14     	; 0x258a <pow+0x70>
    257c:	9f 77       	andi	r25, 0x7F	; 127
    257e:	9f 93       	push	r25
    2580:	0d d0       	rcall	.+26     	; 0x259c <pow+0x82>
    2582:	0f 90       	pop	r0
    2584:	07 fc       	sbrc	r0, 7
    2586:	90 58       	subi	r25, 0x80	; 128
    2588:	08 95       	ret
    258a:	46 f0       	brts	.+16     	; 0x259c <pow+0x82>
    258c:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__fp_nan>
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	70 e0       	ldi	r23, 0x00	; 0
    2594:	80 e8       	ldi	r24, 0x80	; 128
    2596:	9f e3       	ldi	r25, 0x3F	; 63
    2598:	08 95       	ret
    259a:	4f e7       	ldi	r20, 0x7F	; 127
    259c:	9f 77       	andi	r25, 0x7F	; 127
    259e:	5f 93       	push	r21
    25a0:	4f 93       	push	r20
    25a2:	3f 93       	push	r19
    25a4:	2f 93       	push	r18
    25a6:	0e 94 88 13 	call	0x2710	; 0x2710 <log>
    25aa:	2f 91       	pop	r18
    25ac:	3f 91       	pop	r19
    25ae:	4f 91       	pop	r20
    25b0:	5f 91       	pop	r21
    25b2:	0e 94 20 12 	call	0x2440	; 0x2440 <__mulsf3>
    25b6:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <exp>
    25ba:	29 f4       	brne	.+10     	; 0x25c6 <pow+0xac>
    25bc:	16 f0       	brts	.+4      	; 0x25c2 <pow+0xa8>
    25be:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__fp_inf>
    25c2:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__fp_zero>
    25c6:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__fp_nan>

000025ca <exp>:
    25ca:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__fp_splitA>
    25ce:	a8 f3       	brcs	.-22     	; 0x25ba <pow+0xa0>
    25d0:	96 38       	cpi	r25, 0x86	; 134
    25d2:	a0 f7       	brcc	.-24     	; 0x25bc <pow+0xa2>
    25d4:	07 f8       	bld	r0, 7
    25d6:	0f 92       	push	r0
    25d8:	e8 94       	clt
    25da:	2b e3       	ldi	r18, 0x3B	; 59
    25dc:	3a ea       	ldi	r19, 0xAA	; 170
    25de:	48 eb       	ldi	r20, 0xB8	; 184
    25e0:	5f e7       	ldi	r21, 0x7F	; 127
    25e2:	0e 94 36 12 	call	0x246c	; 0x246c <__mulsf3_pse>
    25e6:	0f 92       	push	r0
    25e8:	0f 92       	push	r0
    25ea:	0f 92       	push	r0
    25ec:	4d b7       	in	r20, 0x3d	; 61
    25ee:	5e b7       	in	r21, 0x3e	; 62
    25f0:	0f 92       	push	r0
    25f2:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <modf>
    25f6:	e4 e5       	ldi	r30, 0x54	; 84
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	0e 94 17 13 	call	0x262e	; 0x262e <__fp_powser>
    25fe:	4f 91       	pop	r20
    2600:	5f 91       	pop	r21
    2602:	ef 91       	pop	r30
    2604:	ff 91       	pop	r31
    2606:	e5 95       	asr	r30
    2608:	ee 1f       	adc	r30, r30
    260a:	ff 1f       	adc	r31, r31
    260c:	49 f0       	breq	.+18     	; 0x2620 <exp+0x56>
    260e:	fe 57       	subi	r31, 0x7E	; 126
    2610:	e0 68       	ori	r30, 0x80	; 128
    2612:	44 27       	eor	r20, r20
    2614:	ee 0f       	add	r30, r30
    2616:	44 1f       	adc	r20, r20
    2618:	fa 95       	dec	r31
    261a:	e1 f7       	brne	.-8      	; 0x2614 <exp+0x4a>
    261c:	41 95       	neg	r20
    261e:	55 0b       	sbc	r21, r21
    2620:	0e 94 4a 13 	call	0x2694	; 0x2694 <ldexp>
    2624:	0f 90       	pop	r0
    2626:	07 fe       	sbrs	r0, 7
    2628:	0c 94 3e 13 	jmp	0x267c	; 0x267c <inverse>
    262c:	08 95       	ret

0000262e <__fp_powser>:
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	1f 93       	push	r17
    2634:	0f 93       	push	r16
    2636:	ff 92       	push	r15
    2638:	ef 92       	push	r14
    263a:	df 92       	push	r13
    263c:	7b 01       	movw	r14, r22
    263e:	8c 01       	movw	r16, r24
    2640:	68 94       	set
    2642:	06 c0       	rjmp	.+12     	; 0x2650 <__fp_powser+0x22>
    2644:	da 2e       	mov	r13, r26
    2646:	ef 01       	movw	r28, r30
    2648:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3x>
    264c:	fe 01       	movw	r30, r28
    264e:	e8 94       	clt
    2650:	a5 91       	lpm	r26, Z+
    2652:	25 91       	lpm	r18, Z+
    2654:	35 91       	lpm	r19, Z+
    2656:	45 91       	lpm	r20, Z+
    2658:	55 91       	lpm	r21, Z+
    265a:	a6 f3       	brts	.-24     	; 0x2644 <__fp_powser+0x16>
    265c:	ef 01       	movw	r28, r30
    265e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__addsf3x>
    2662:	fe 01       	movw	r30, r28
    2664:	97 01       	movw	r18, r14
    2666:	a8 01       	movw	r20, r16
    2668:	da 94       	dec	r13
    266a:	69 f7       	brne	.-38     	; 0x2646 <__fp_powser+0x18>
    266c:	df 90       	pop	r13
    266e:	ef 90       	pop	r14
    2670:	ff 90       	pop	r15
    2672:	0f 91       	pop	r16
    2674:	1f 91       	pop	r17
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	08 95       	ret

0000267c <inverse>:
    267c:	9b 01       	movw	r18, r22
    267e:	ac 01       	movw	r20, r24
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	70 e0       	ldi	r23, 0x00	; 0
    2684:	80 e8       	ldi	r24, 0x80	; 128
    2686:	9f e3       	ldi	r25, 0x3F	; 63
    2688:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__divsf3>
    268c:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__fp_inf>
    2690:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__fp_mpack>

00002694 <ldexp>:
    2694:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__fp_splitA>
    2698:	d8 f3       	brcs	.-10     	; 0x2690 <inverse+0x14>
    269a:	99 23       	and	r25, r25
    269c:	c9 f3       	breq	.-14     	; 0x2690 <inverse+0x14>
    269e:	94 0f       	add	r25, r20
    26a0:	51 1d       	adc	r21, r1
    26a2:	a3 f3       	brvs	.-24     	; 0x268c <inverse+0x10>
    26a4:	91 50       	subi	r25, 0x01	; 1
    26a6:	50 40       	sbci	r21, 0x00	; 0
    26a8:	94 f0       	brlt	.+36     	; 0x26ce <ldexp+0x3a>
    26aa:	59 f0       	breq	.+22     	; 0x26c2 <ldexp+0x2e>
    26ac:	88 23       	and	r24, r24
    26ae:	32 f0       	brmi	.+12     	; 0x26bc <ldexp+0x28>
    26b0:	66 0f       	add	r22, r22
    26b2:	77 1f       	adc	r23, r23
    26b4:	88 1f       	adc	r24, r24
    26b6:	91 50       	subi	r25, 0x01	; 1
    26b8:	50 40       	sbci	r21, 0x00	; 0
    26ba:	c1 f7       	brne	.-16     	; 0x26ac <ldexp+0x18>
    26bc:	9e 3f       	cpi	r25, 0xFE	; 254
    26be:	51 05       	cpc	r21, r1
    26c0:	2c f7       	brge	.-54     	; 0x268c <inverse+0x10>
    26c2:	88 0f       	add	r24, r24
    26c4:	91 1d       	adc	r25, r1
    26c6:	96 95       	lsr	r25
    26c8:	87 95       	ror	r24
    26ca:	97 f9       	bld	r25, 7
    26cc:	08 95       	ret
    26ce:	5f 3f       	cpi	r21, 0xFF	; 255
    26d0:	ac f0       	brlt	.+42     	; 0x26fc <ldexp+0x68>
    26d2:	98 3e       	cpi	r25, 0xE8	; 232
    26d4:	9c f0       	brlt	.+38     	; 0x26fc <ldexp+0x68>
    26d6:	bb 27       	eor	r27, r27
    26d8:	86 95       	lsr	r24
    26da:	77 95       	ror	r23
    26dc:	67 95       	ror	r22
    26de:	b7 95       	ror	r27
    26e0:	08 f4       	brcc	.+2      	; 0x26e4 <ldexp+0x50>
    26e2:	b1 60       	ori	r27, 0x01	; 1
    26e4:	93 95       	inc	r25
    26e6:	c1 f7       	brne	.-16     	; 0x26d8 <ldexp+0x44>
    26e8:	bb 0f       	add	r27, r27
    26ea:	58 f7       	brcc	.-42     	; 0x26c2 <ldexp+0x2e>
    26ec:	11 f4       	brne	.+4      	; 0x26f2 <ldexp+0x5e>
    26ee:	60 ff       	sbrs	r22, 0
    26f0:	e8 cf       	rjmp	.-48     	; 0x26c2 <ldexp+0x2e>
    26f2:	6f 5f       	subi	r22, 0xFF	; 255
    26f4:	7f 4f       	sbci	r23, 0xFF	; 255
    26f6:	8f 4f       	sbci	r24, 0xFF	; 255
    26f8:	9f 4f       	sbci	r25, 0xFF	; 255
    26fa:	e3 cf       	rjmp	.-58     	; 0x26c2 <ldexp+0x2e>
    26fc:	0c 94 15 12 	jmp	0x242a	; 0x242a <__fp_szero>
    2700:	16 f0       	brts	.+4      	; 0x2706 <ldexp+0x72>
    2702:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__fp_mpack>
    2706:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__fp_nan>
    270a:	68 94       	set
    270c:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__fp_inf>

00002710 <log>:
    2710:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__fp_splitA>
    2714:	a8 f3       	brcs	.-22     	; 0x2700 <ldexp+0x6c>
    2716:	99 23       	and	r25, r25
    2718:	c1 f3       	breq	.-16     	; 0x270a <ldexp+0x76>
    271a:	ae f3       	brts	.-22     	; 0x2706 <ldexp+0x72>
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	1f 93       	push	r17
    2722:	0f 93       	push	r16
    2724:	ff 92       	push	r15
    2726:	c9 2f       	mov	r28, r25
    2728:	dd 27       	eor	r29, r29
    272a:	88 23       	and	r24, r24
    272c:	2a f0       	brmi	.+10     	; 0x2738 <log+0x28>
    272e:	21 97       	sbiw	r28, 0x01	; 1
    2730:	66 0f       	add	r22, r22
    2732:	77 1f       	adc	r23, r23
    2734:	88 1f       	adc	r24, r24
    2736:	da f7       	brpl	.-10     	; 0x272e <log+0x1e>
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e8       	ldi	r20, 0x80	; 128
    273e:	5f eb       	ldi	r21, 0xBF	; 191
    2740:	9f e3       	ldi	r25, 0x3F	; 63
    2742:	88 39       	cpi	r24, 0x98	; 152
    2744:	20 f0       	brcs	.+8      	; 0x274e <log+0x3e>
    2746:	80 3e       	cpi	r24, 0xE0	; 224
    2748:	38 f0       	brcs	.+14     	; 0x2758 <log+0x48>
    274a:	21 96       	adiw	r28, 0x01	; 1
    274c:	8f 77       	andi	r24, 0x7F	; 127
    274e:	0e 94 57 10 	call	0x20ae	; 0x20ae <__addsf3>
    2752:	ec e7       	ldi	r30, 0x7C	; 124
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	04 c0       	rjmp	.+8      	; 0x2760 <log+0x50>
    2758:	0e 94 57 10 	call	0x20ae	; 0x20ae <__addsf3>
    275c:	e9 ea       	ldi	r30, 0xA9	; 169
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	0e 94 17 13 	call	0x262e	; 0x262e <__fp_powser>
    2764:	8b 01       	movw	r16, r22
    2766:	be 01       	movw	r22, r28
    2768:	ec 01       	movw	r28, r24
    276a:	fb 2e       	mov	r15, r27
    276c:	6f 57       	subi	r22, 0x7F	; 127
    276e:	71 09       	sbc	r23, r1
    2770:	75 95       	asr	r23
    2772:	77 1f       	adc	r23, r23
    2774:	88 0b       	sbc	r24, r24
    2776:	99 0b       	sbc	r25, r25
    2778:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__floatsisf>
    277c:	28 e1       	ldi	r18, 0x18	; 24
    277e:	32 e7       	ldi	r19, 0x72	; 114
    2780:	41 e3       	ldi	r20, 0x31	; 49
    2782:	5f e3       	ldi	r21, 0x3F	; 63
    2784:	0e 94 33 12 	call	0x2466	; 0x2466 <__mulsf3x>
    2788:	af 2d       	mov	r26, r15
    278a:	98 01       	movw	r18, r16
    278c:	ae 01       	movw	r20, r28
    278e:	ff 90       	pop	r15
    2790:	0f 91       	pop	r16
    2792:	1f 91       	pop	r17
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__addsf3x>
    279c:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__fp_round>

000027a0 <modf>:
    27a0:	fa 01       	movw	r30, r20
    27a2:	dc 01       	movw	r26, r24
    27a4:	aa 0f       	add	r26, r26
    27a6:	bb 1f       	adc	r27, r27
    27a8:	9b 01       	movw	r18, r22
    27aa:	ac 01       	movw	r20, r24
    27ac:	bf 57       	subi	r27, 0x7F	; 127
    27ae:	28 f4       	brcc	.+10     	; 0x27ba <modf+0x1a>
    27b0:	22 27       	eor	r18, r18
    27b2:	33 27       	eor	r19, r19
    27b4:	44 27       	eor	r20, r20
    27b6:	50 78       	andi	r21, 0x80	; 128
    27b8:	20 c0       	rjmp	.+64     	; 0x27fa <modf+0x5a>
    27ba:	b7 51       	subi	r27, 0x17	; 23
    27bc:	90 f4       	brcc	.+36     	; 0x27e2 <modf+0x42>
    27be:	ab 2f       	mov	r26, r27
    27c0:	00 24       	eor	r0, r0
    27c2:	46 95       	lsr	r20
    27c4:	37 95       	ror	r19
    27c6:	27 95       	ror	r18
    27c8:	01 1c       	adc	r0, r1
    27ca:	a3 95       	inc	r26
    27cc:	d2 f3       	brmi	.-12     	; 0x27c2 <modf+0x22>
    27ce:	00 20       	and	r0, r0
    27d0:	71 f0       	breq	.+28     	; 0x27ee <modf+0x4e>
    27d2:	22 0f       	add	r18, r18
    27d4:	33 1f       	adc	r19, r19
    27d6:	44 1f       	adc	r20, r20
    27d8:	b3 95       	inc	r27
    27da:	da f3       	brmi	.-10     	; 0x27d2 <modf+0x32>
    27dc:	0e d0       	rcall	.+28     	; 0x27fa <modf+0x5a>
    27de:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__subsf3>
    27e2:	61 30       	cpi	r22, 0x01	; 1
    27e4:	71 05       	cpc	r23, r1
    27e6:	a0 e8       	ldi	r26, 0x80	; 128
    27e8:	8a 07       	cpc	r24, r26
    27ea:	b9 46       	sbci	r27, 0x69	; 105
    27ec:	30 f4       	brcc	.+12     	; 0x27fa <modf+0x5a>
    27ee:	9b 01       	movw	r18, r22
    27f0:	ac 01       	movw	r20, r24
    27f2:	66 27       	eor	r22, r22
    27f4:	77 27       	eor	r23, r23
    27f6:	88 27       	eor	r24, r24
    27f8:	90 78       	andi	r25, 0x80	; 128
    27fa:	30 96       	adiw	r30, 0x00	; 0
    27fc:	21 f0       	breq	.+8      	; 0x2806 <modf+0x66>
    27fe:	20 83       	st	Z, r18
    2800:	31 83       	std	Z+1, r19	; 0x01
    2802:	42 83       	std	Z+2, r20	; 0x02
    2804:	53 83       	std	Z+3, r21	; 0x03
    2806:	08 95       	ret

00002808 <__fp_mpack>:
    2808:	9f 3f       	cpi	r25, 0xFF	; 255
    280a:	31 f0       	breq	.+12     	; 0x2818 <__fp_mpack_finite+0xc>

0000280c <__fp_mpack_finite>:
    280c:	91 50       	subi	r25, 0x01	; 1
    280e:	20 f4       	brcc	.+8      	; 0x2818 <__fp_mpack_finite+0xc>
    2810:	87 95       	ror	r24
    2812:	77 95       	ror	r23
    2814:	67 95       	ror	r22
    2816:	b7 95       	ror	r27
    2818:	88 0f       	add	r24, r24
    281a:	91 1d       	adc	r25, r1
    281c:	96 95       	lsr	r25
    281e:	87 95       	ror	r24
    2820:	97 f9       	bld	r25, 7
    2822:	08 95       	ret

00002824 <strcmp>:
    2824:	fb 01       	movw	r30, r22
    2826:	dc 01       	movw	r26, r24
    2828:	8d 91       	ld	r24, X+
    282a:	01 90       	ld	r0, Z+
    282c:	80 19       	sub	r24, r0
    282e:	01 10       	cpse	r0, r1
    2830:	d9 f3       	breq	.-10     	; 0x2828 <strcmp+0x4>
    2832:	99 0b       	sbc	r25, r25
    2834:	08 95       	ret

00002836 <_exit>:
    2836:	f8 94       	cli

00002838 <__stop_program>:
    2838:	ff cf       	rjmp	.-2      	; 0x2838 <__stop_program>
