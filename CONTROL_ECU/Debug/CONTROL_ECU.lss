
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  000021a6  0000223a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  008000be  008000be  00002298  2**0
                  ALLOC
  3 .stab         000027f0  00000000  00000000  00002298  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000137a  00000000  00000000  00004a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005e02  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005e14  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00005e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  0000637e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00006865  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  0000687f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__vector_6>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__vector_9>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__vector_19>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <EEPROM_init+0x2e>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d4 e0       	ldi	r29, 0x04	; 4
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e6 ea       	ldi	r30, 0xA6	; 166
      ea:	f1 e2       	ldi	r31, 0x21	; 33
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	ae 3b       	cpi	r26, 0xBE	; 190
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	21 e0       	ldi	r18, 0x01	; 1
      fa:	ae eb       	ldi	r26, 0xBE	; 190
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a6 30       	cpi	r26, 0x06	; 6
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 8a 00 	call	0x114	; 0x114 <main>
     10c:	0c 94 d1 10 	jmp	0x21a2	; 0x21a2 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <main>:
  uint8 password_stored_flag=0;
uint8 x =5;
  uint8 i=0;

int main(void)
{
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	c1 58       	subi	r28, 0x81	; 129
     122:	d1 09       	sbc	r29, r1
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	f8 94       	cli
     128:	de bf       	out	0x3e, r29	; 62
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	cd bf       	out	0x3d, r28	; 61
	uint8 str[20];
	uint8 data;
	/* UART intial */
	UART_configurationType UART_config ;
			UART_config.buadRate=9600;
     12e:	9e 01       	movw	r18, r28
     130:	27 59       	subi	r18, 0x97	; 151
     132:	3f 4f       	sbci	r19, 0xFF	; 255
     134:	80 e8       	ldi	r24, 0x80	; 128
     136:	95 e2       	ldi	r25, 0x25	; 37
     138:	a0 e0       	ldi	r26, 0x00	; 0
     13a:	b0 e0       	ldi	r27, 0x00	; 0
     13c:	f9 01       	movw	r30, r18
     13e:	81 83       	std	Z+1, r24	; 0x01
     140:	92 83       	std	Z+2, r25	; 0x02
     142:	a3 83       	std	Z+3, r26	; 0x03
     144:	b4 83       	std	Z+4, r27	; 0x04
		UART_config.character_size=8;
     146:	ce 01       	movw	r24, r28
     148:	87 59       	subi	r24, 0x97	; 151
     14a:	9f 4f       	sbci	r25, 0xFF	; 255
     14c:	28 e0       	ldi	r18, 0x08	; 8
     14e:	fc 01       	movw	r30, r24
     150:	20 83       	st	Z, r18
		strcpy(UART_config.mode,"double speed");
     152:	ce 01       	movw	r24, r28
     154:	87 59       	subi	r24, 0x97	; 151
     156:	9f 4f       	sbci	r25, 0xFF	; 255
     158:	05 96       	adiw	r24, 0x05	; 5
     15a:	2d e0       	ldi	r18, 0x0D	; 13
     15c:	e1 e6       	ldi	r30, 0x61	; 97
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	dc 01       	movw	r26, r24
     162:	01 90       	ld	r0, Z+
     164:	0d 92       	st	X+, r0
     166:	2a 95       	dec	r18
     168:	e1 f7       	brne	.-8      	; 0x162 <main+0x4e>
		UART_init(&UART_config);
     16a:	ce 01       	movw	r24, r28
     16c:	87 59       	subi	r24, 0x97	; 151
     16e:	9f 4f       	sbci	r25, 0xFF	; 255
     170:	0e 94 c4 0a 	call	0x1588	; 0x1588 <UART_init>
	//	UART_init();
 /*eeprom intial */
		EEPROM_init();
     174:	0e 94 51 04 	call	0x8a2	; 0x8a2 <EEPROM_init>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	a8 ec       	ldi	r26, 0xC8	; 200
     17e:	b2 e4       	ldi	r27, 0x42	; 66
     180:	8d 8b       	std	Y+21, r24	; 0x15
     182:	9e 8b       	std	Y+22, r25	; 0x16
     184:	af 8b       	std	Y+23, r26	; 0x17
     186:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	4a ef       	ldi	r20, 0xFA	; 250
     18e:	54 e4       	ldi	r21, 0x44	; 68
     190:	6d 89       	ldd	r22, Y+21	; 0x15
     192:	7e 89       	ldd	r23, Y+22	; 0x16
     194:	8f 89       	ldd	r24, Y+23	; 0x17
     196:	98 8d       	ldd	r25, Y+24	; 0x18
     198:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__mulsf3>
     19c:	dc 01       	movw	r26, r24
     19e:	cb 01       	movw	r24, r22
     1a0:	89 8f       	std	Y+25, r24	; 0x19
     1a2:	9a 8f       	std	Y+26, r25	; 0x1a
     1a4:	ab 8f       	std	Y+27, r26	; 0x1b
     1a6:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
     1a8:	20 e0       	ldi	r18, 0x00	; 0
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	40 e8       	ldi	r20, 0x80	; 128
     1ae:	5f e3       	ldi	r21, 0x3F	; 63
     1b0:	69 8d       	ldd	r22, Y+25	; 0x19
     1b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     1b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1b8:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__cmpsf2>
     1bc:	88 23       	and	r24, r24
     1be:	2c f4       	brge	.+10     	; 0x1ca <main+0xb6>
		__ticks = 1;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	9e 8f       	std	Y+30, r25	; 0x1e
     1c6:	8d 8f       	std	Y+29, r24	; 0x1d
     1c8:	3f c0       	rjmp	.+126    	; 0x248 <main+0x134>
	else if (__tmp > 65535)
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	3f ef       	ldi	r19, 0xFF	; 255
     1ce:	4f e7       	ldi	r20, 0x7F	; 127
     1d0:	57 e4       	ldi	r21, 0x47	; 71
     1d2:	69 8d       	ldd	r22, Y+25	; 0x19
     1d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     1d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1da:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__gesf2>
     1de:	18 16       	cp	r1, r24
     1e0:	4c f5       	brge	.+82     	; 0x234 <main+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e2       	ldi	r20, 0x20	; 32
     1e8:	51 e4       	ldi	r21, 0x41	; 65
     1ea:	6d 89       	ldd	r22, Y+21	; 0x15
     1ec:	7e 89       	ldd	r23, Y+22	; 0x16
     1ee:	8f 89       	ldd	r24, Y+23	; 0x17
     1f0:	98 8d       	ldd	r25, Y+24	; 0x18
     1f2:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__mulsf3>
     1f6:	dc 01       	movw	r26, r24
     1f8:	cb 01       	movw	r24, r22
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	9e 8f       	std	Y+30, r25	; 0x1e
     208:	8d 8f       	std	Y+29, r24	; 0x1d
     20a:	0f c0       	rjmp	.+30     	; 0x22a <main+0x116>
     20c:	88 ec       	ldi	r24, 0xC8	; 200
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	98 a3       	std	Y+32, r25	; 0x20
     212:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     214:	8f 8d       	ldd	r24, Y+31	; 0x1f
     216:	98 a1       	ldd	r25, Y+32	; 0x20
     218:	01 97       	sbiw	r24, 0x01	; 1
     21a:	f1 f7       	brne	.-4      	; 0x218 <main+0x104>
     21c:	98 a3       	std	Y+32, r25	; 0x20
     21e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     220:	8d 8d       	ldd	r24, Y+29	; 0x1d
     222:	9e 8d       	ldd	r25, Y+30	; 0x1e
     224:	01 97       	sbiw	r24, 0x01	; 1
     226:	9e 8f       	std	Y+30, r25	; 0x1e
     228:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     22a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     22c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     22e:	89 2b       	or	r24, r25
     230:	69 f7       	brne	.-38     	; 0x20c <main+0xf8>
     232:	14 c0       	rjmp	.+40     	; 0x25c <main+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     234:	69 8d       	ldd	r22, Y+25	; 0x19
     236:	7a 8d       	ldd	r23, Y+26	; 0x1a
     238:	8b 8d       	ldd	r24, Y+27	; 0x1b
     23a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     23c:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixunssfsi>
     240:	dc 01       	movw	r26, r24
     242:	cb 01       	movw	r24, r22
     244:	9e 8f       	std	Y+30, r25	; 0x1e
     246:	8d 8f       	std	Y+29, r24	; 0x1d
     248:	8d 8d       	ldd	r24, Y+29	; 0x1d
     24a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     24c:	9a a3       	std	Y+34, r25	; 0x22
     24e:	89 a3       	std	Y+33, r24	; 0x21
     250:	89 a1       	ldd	r24, Y+33	; 0x21
     252:	9a a1       	ldd	r25, Y+34	; 0x22
     254:	01 97       	sbiw	r24, 0x01	; 1
     256:	f1 f7       	brne	.-4      	; 0x254 <main+0x140>
     258:	9a a3       	std	Y+34, r25	; 0x22
     25a:	89 a3       	std	Y+33, r24	; 0x21
    {
 	   	_delay_ms(100);


    	    	// first time user enter the password
    	EEPROM_readByte(0x0011,&password_stored_flag);
     25c:	66 ee       	ldi	r22, 0xE6	; 230
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	81 e1       	ldi	r24, 0x11	; 17
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 ac 04 	call	0x958	; 0x958 <EEPROM_readByte>
    	if((password_stored_flag ==0xAA)&&(i<3))
     268:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <password_stored_flag>
     26c:	8a 3a       	cpi	r24, 0xAA	; 170
     26e:	09 f0       	breq	.+2      	; 0x272 <main+0x15e>
     270:	81 c1       	rjmp	.+770    	; 0x574 <__stack+0x115>
     272:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <i>
     276:	83 30       	cpi	r24, 0x03	; 3
     278:	08 f0       	brcs	.+2      	; 0x27c <main+0x168>
     27a:	7c c1       	rjmp	.+760    	; 0x574 <__stack+0x115>
    		 {
    		UART_sendByte('d');
     27c:	84 e6       	ldi	r24, 0x64	; 100
     27e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <UART_sendByte>
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	a0 e2       	ldi	r26, 0x20	; 32
     288:	b1 e4       	ldi	r27, 0x41	; 65
     28a:	89 87       	std	Y+9, r24	; 0x09
     28c:	9a 87       	std	Y+10, r25	; 0x0a
     28e:	ab 87       	std	Y+11, r26	; 0x0b
     290:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	4a ef       	ldi	r20, 0xFA	; 250
     298:	54 e4       	ldi	r21, 0x44	; 68
     29a:	69 85       	ldd	r22, Y+9	; 0x09
     29c:	7a 85       	ldd	r23, Y+10	; 0x0a
     29e:	8b 85       	ldd	r24, Y+11	; 0x0b
     2a0:	9c 85       	ldd	r25, Y+12	; 0x0c
     2a2:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__mulsf3>
     2a6:	dc 01       	movw	r26, r24
     2a8:	cb 01       	movw	r24, r22
     2aa:	8f ab       	std	Y+55, r24	; 0x37
     2ac:	98 af       	std	Y+56, r25	; 0x38
     2ae:	a9 af       	std	Y+57, r26	; 0x39
     2b0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	40 e8       	ldi	r20, 0x80	; 128
     2b8:	5f e3       	ldi	r21, 0x3F	; 63
     2ba:	6f a9       	ldd	r22, Y+55	; 0x37
     2bc:	78 ad       	ldd	r23, Y+56	; 0x38
     2be:	89 ad       	ldd	r24, Y+57	; 0x39
     2c0:	9a ad       	ldd	r25, Y+58	; 0x3a
     2c2:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__cmpsf2>
     2c6:	88 23       	and	r24, r24
     2c8:	2c f4       	brge	.+10     	; 0x2d4 <main+0x1c0>
		__ticks = 1;
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	9c af       	std	Y+60, r25	; 0x3c
     2d0:	8b af       	std	Y+59, r24	; 0x3b
     2d2:	3f c0       	rjmp	.+126    	; 0x352 <main+0x23e>
	else if (__tmp > 65535)
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	3f ef       	ldi	r19, 0xFF	; 255
     2d8:	4f e7       	ldi	r20, 0x7F	; 127
     2da:	57 e4       	ldi	r21, 0x47	; 71
     2dc:	6f a9       	ldd	r22, Y+55	; 0x37
     2de:	78 ad       	ldd	r23, Y+56	; 0x38
     2e0:	89 ad       	ldd	r24, Y+57	; 0x39
     2e2:	9a ad       	ldd	r25, Y+58	; 0x3a
     2e4:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__gesf2>
     2e8:	18 16       	cp	r1, r24
     2ea:	4c f5       	brge	.+82     	; 0x33e <main+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	40 e2       	ldi	r20, 0x20	; 32
     2f2:	51 e4       	ldi	r21, 0x41	; 65
     2f4:	69 85       	ldd	r22, Y+9	; 0x09
     2f6:	7a 85       	ldd	r23, Y+10	; 0x0a
     2f8:	8b 85       	ldd	r24, Y+11	; 0x0b
     2fa:	9c 85       	ldd	r25, Y+12	; 0x0c
     2fc:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__mulsf3>
     300:	dc 01       	movw	r26, r24
     302:	cb 01       	movw	r24, r22
     304:	bc 01       	movw	r22, r24
     306:	cd 01       	movw	r24, r26
     308:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixunssfsi>
     30c:	dc 01       	movw	r26, r24
     30e:	cb 01       	movw	r24, r22
     310:	9c af       	std	Y+60, r25	; 0x3c
     312:	8b af       	std	Y+59, r24	; 0x3b
     314:	0f c0       	rjmp	.+30     	; 0x334 <main+0x220>
     316:	88 ec       	ldi	r24, 0xC8	; 200
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	9e af       	std	Y+62, r25	; 0x3e
     31c:	8d af       	std	Y+61, r24	; 0x3d
     31e:	8d ad       	ldd	r24, Y+61	; 0x3d
     320:	9e ad       	ldd	r25, Y+62	; 0x3e
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	f1 f7       	brne	.-4      	; 0x322 <main+0x20e>
     326:	9e af       	std	Y+62, r25	; 0x3e
     328:	8d af       	std	Y+61, r24	; 0x3d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     32a:	8b ad       	ldd	r24, Y+59	; 0x3b
     32c:	9c ad       	ldd	r25, Y+60	; 0x3c
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	9c af       	std	Y+60, r25	; 0x3c
     332:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     334:	8b ad       	ldd	r24, Y+59	; 0x3b
     336:	9c ad       	ldd	r25, Y+60	; 0x3c
     338:	89 2b       	or	r24, r25
     33a:	69 f7       	brne	.-38     	; 0x316 <main+0x202>
     33c:	1e c0       	rjmp	.+60     	; 0x37a <main+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     33e:	6f a9       	ldd	r22, Y+55	; 0x37
     340:	78 ad       	ldd	r23, Y+56	; 0x38
     342:	89 ad       	ldd	r24, Y+57	; 0x39
     344:	9a ad       	ldd	r25, Y+58	; 0x3a
     346:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixunssfsi>
     34a:	dc 01       	movw	r26, r24
     34c:	cb 01       	movw	r24, r22
     34e:	9c af       	std	Y+60, r25	; 0x3c
     350:	8b af       	std	Y+59, r24	; 0x3b
     352:	2b ad       	ldd	r18, Y+59	; 0x3b
     354:	3c ad       	ldd	r19, Y+60	; 0x3c
     356:	ce 01       	movw	r24, r28
     358:	cf 96       	adiw	r24, 0x3f	; 63
     35a:	fc 01       	movw	r30, r24
     35c:	31 83       	std	Z+1, r19	; 0x01
     35e:	20 83       	st	Z, r18
     360:	ce 01       	movw	r24, r28
     362:	cf 96       	adiw	r24, 0x3f	; 63
     364:	fc 01       	movw	r30, r24
     366:	80 81       	ld	r24, Z
     368:	91 81       	ldd	r25, Z+1	; 0x01
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <main+0x256>
     36e:	9e 01       	movw	r18, r28
     370:	21 5c       	subi	r18, 0xC1	; 193
     372:	3f 4f       	sbci	r19, 0xFF	; 255
     374:	f9 01       	movw	r30, r18
     376:	91 83       	std	Z+1, r25	; 0x01
     378:	80 83       	st	Z, r24
     	   	_delay_ms(10);

    	    	UART_receiveString(enter_password_stored);
     37a:	82 ed       	ldi	r24, 0xD2	; 210
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 a6 0c 	call	0x194c	; 0x194c <UART_receiveString>
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	a0 e2       	ldi	r26, 0x20	; 32
     388:	b1 e4       	ldi	r27, 0x41	; 65
     38a:	8d 87       	std	Y+13, r24	; 0x0d
     38c:	9e 87       	std	Y+14, r25	; 0x0e
     38e:	af 87       	std	Y+15, r26	; 0x0f
     390:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	4a ef       	ldi	r20, 0xFA	; 250
     398:	54 e4       	ldi	r21, 0x44	; 68
     39a:	6d 85       	ldd	r22, Y+13	; 0x0d
     39c:	7e 85       	ldd	r23, Y+14	; 0x0e
     39e:	8f 85       	ldd	r24, Y+15	; 0x0f
     3a0:	98 89       	ldd	r25, Y+16	; 0x10
     3a2:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__mulsf3>
     3a6:	dc 01       	movw	r26, r24
     3a8:	cb 01       	movw	r24, r22
     3aa:	8d a7       	std	Y+45, r24	; 0x2d
     3ac:	9e a7       	std	Y+46, r25	; 0x2e
     3ae:	af a7       	std	Y+47, r26	; 0x2f
     3b0:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	40 e8       	ldi	r20, 0x80	; 128
     3b8:	5f e3       	ldi	r21, 0x3F	; 63
     3ba:	6d a5       	ldd	r22, Y+45	; 0x2d
     3bc:	7e a5       	ldd	r23, Y+46	; 0x2e
     3be:	8f a5       	ldd	r24, Y+47	; 0x2f
     3c0:	98 a9       	ldd	r25, Y+48	; 0x30
     3c2:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__cmpsf2>
     3c6:	88 23       	and	r24, r24
     3c8:	2c f4       	brge	.+10     	; 0x3d4 <main+0x2c0>
		__ticks = 1;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	9a ab       	std	Y+50, r25	; 0x32
     3d0:	89 ab       	std	Y+49, r24	; 0x31
     3d2:	3f c0       	rjmp	.+126    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	else if (__tmp > 65535)
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	3f ef       	ldi	r19, 0xFF	; 255
     3d8:	4f e7       	ldi	r20, 0x7F	; 127
     3da:	57 e4       	ldi	r21, 0x47	; 71
     3dc:	6d a5       	ldd	r22, Y+45	; 0x2d
     3de:	7e a5       	ldd	r23, Y+46	; 0x2e
     3e0:	8f a5       	ldd	r24, Y+47	; 0x2f
     3e2:	98 a9       	ldd	r25, Y+48	; 0x30
     3e4:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__gesf2>
     3e8:	18 16       	cp	r1, r24
     3ea:	4c f5       	brge	.+82     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	40 e2       	ldi	r20, 0x20	; 32
     3f2:	51 e4       	ldi	r21, 0x41	; 65
     3f4:	6d 85       	ldd	r22, Y+13	; 0x0d
     3f6:	7e 85       	ldd	r23, Y+14	; 0x0e
     3f8:	8f 85       	ldd	r24, Y+15	; 0x0f
     3fa:	98 89       	ldd	r25, Y+16	; 0x10
     3fc:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__mulsf3>
     400:	dc 01       	movw	r26, r24
     402:	cb 01       	movw	r24, r22
     404:	bc 01       	movw	r22, r24
     406:	cd 01       	movw	r24, r26
     408:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	9a ab       	std	Y+50, r25	; 0x32
     412:	89 ab       	std	Y+49, r24	; 0x31
     414:	0f c0       	rjmp	.+30     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     416:	88 ec       	ldi	r24, 0xC8	; 200
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	9c ab       	std	Y+52, r25	; 0x34
     41c:	8b ab       	std	Y+51, r24	; 0x33
     41e:	8b a9       	ldd	r24, Y+51	; 0x33
     420:	9c a9       	ldd	r25, Y+52	; 0x34
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	f1 f7       	brne	.-4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     426:	9c ab       	std	Y+52, r25	; 0x34
     428:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     42a:	89 a9       	ldd	r24, Y+49	; 0x31
     42c:	9a a9       	ldd	r25, Y+50	; 0x32
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	9a ab       	std	Y+50, r25	; 0x32
     432:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     434:	89 a9       	ldd	r24, Y+49	; 0x31
     436:	9a a9       	ldd	r25, Y+50	; 0x32
     438:	89 2b       	or	r24, r25
     43a:	69 f7       	brne	.-38     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     43c:	14 c0       	rjmp	.+40     	; 0x466 <__stack+0x7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     43e:	6d a5       	ldd	r22, Y+45	; 0x2d
     440:	7e a5       	ldd	r23, Y+46	; 0x2e
     442:	8f a5       	ldd	r24, Y+47	; 0x2f
     444:	98 a9       	ldd	r25, Y+48	; 0x30
     446:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixunssfsi>
     44a:	dc 01       	movw	r26, r24
     44c:	cb 01       	movw	r24, r22
     44e:	9a ab       	std	Y+50, r25	; 0x32
     450:	89 ab       	std	Y+49, r24	; 0x31
     452:	89 a9       	ldd	r24, Y+49	; 0x31
     454:	9a a9       	ldd	r25, Y+50	; 0x32
     456:	9e ab       	std	Y+54, r25	; 0x36
     458:	8d ab       	std	Y+53, r24	; 0x35
     45a:	8d a9       	ldd	r24, Y+53	; 0x35
     45c:	9e a9       	ldd	r25, Y+54	; 0x36
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     462:	9e ab       	std	Y+54, r25	; 0x36
     464:	8d ab       	std	Y+53, r24	; 0x35
    	   	_delay_ms(10);
    		EEPROM_readString(0x0512, check_password_stored);
     466:	6e eb       	ldi	r22, 0xBE	; 190
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	82 e1       	ldi	r24, 0x12	; 18
     46c:	95 e0       	ldi	r25, 0x05	; 5
     46e:	0e 94 c3 05 	call	0xb86	; 0xb86 <EEPROM_readString>
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	a0 e2       	ldi	r26, 0x20	; 32
     478:	b1 e4       	ldi	r27, 0x41	; 65
     47a:	89 83       	std	Y+1, r24	; 0x01
     47c:	9a 83       	std	Y+2, r25	; 0x02
     47e:	ab 83       	std	Y+3, r26	; 0x03
     480:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	4a ef       	ldi	r20, 0xFA	; 250
     488:	54 e4       	ldi	r21, 0x44	; 68
     48a:	69 81       	ldd	r22, Y+1	; 0x01
     48c:	7a 81       	ldd	r23, Y+2	; 0x02
     48e:	8b 81       	ldd	r24, Y+3	; 0x03
     490:	9c 81       	ldd	r25, Y+4	; 0x04
     492:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__mulsf3>
     496:	dc 01       	movw	r26, r24
     498:	cb 01       	movw	r24, r22
     49a:	8b a3       	std	Y+35, r24	; 0x23
     49c:	9c a3       	std	Y+36, r25	; 0x24
     49e:	ad a3       	std	Y+37, r26	; 0x25
     4a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	6b a1       	ldd	r22, Y+35	; 0x23
     4ac:	7c a1       	ldd	r23, Y+36	; 0x24
     4ae:	8d a1       	ldd	r24, Y+37	; 0x25
     4b0:	9e a1       	ldd	r25, Y+38	; 0x26
     4b2:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__cmpsf2>
     4b6:	88 23       	and	r24, r24
     4b8:	2c f4       	brge	.+10     	; 0x4c4 <__stack+0x65>
		__ticks = 1;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	98 a7       	std	Y+40, r25	; 0x28
     4c0:	8f a3       	std	Y+39, r24	; 0x27
     4c2:	3f c0       	rjmp	.+126    	; 0x542 <__stack+0xe3>
	else if (__tmp > 65535)
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	3f ef       	ldi	r19, 0xFF	; 255
     4c8:	4f e7       	ldi	r20, 0x7F	; 127
     4ca:	57 e4       	ldi	r21, 0x47	; 71
     4cc:	6b a1       	ldd	r22, Y+35	; 0x23
     4ce:	7c a1       	ldd	r23, Y+36	; 0x24
     4d0:	8d a1       	ldd	r24, Y+37	; 0x25
     4d2:	9e a1       	ldd	r25, Y+38	; 0x26
     4d4:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__gesf2>
     4d8:	18 16       	cp	r1, r24
     4da:	4c f5       	brge	.+82     	; 0x52e <__stack+0xcf>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	40 e2       	ldi	r20, 0x20	; 32
     4e2:	51 e4       	ldi	r21, 0x41	; 65
     4e4:	69 81       	ldd	r22, Y+1	; 0x01
     4e6:	7a 81       	ldd	r23, Y+2	; 0x02
     4e8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ea:	9c 81       	ldd	r25, Y+4	; 0x04
     4ec:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__mulsf3>
     4f0:	dc 01       	movw	r26, r24
     4f2:	cb 01       	movw	r24, r22
     4f4:	bc 01       	movw	r22, r24
     4f6:	cd 01       	movw	r24, r26
     4f8:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixunssfsi>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	98 a7       	std	Y+40, r25	; 0x28
     502:	8f a3       	std	Y+39, r24	; 0x27
     504:	0f c0       	rjmp	.+30     	; 0x524 <__stack+0xc5>
     506:	88 ec       	ldi	r24, 0xC8	; 200
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	9a a7       	std	Y+42, r25	; 0x2a
     50c:	89 a7       	std	Y+41, r24	; 0x29
     50e:	89 a5       	ldd	r24, Y+41	; 0x29
     510:	9a a5       	ldd	r25, Y+42	; 0x2a
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	f1 f7       	brne	.-4      	; 0x512 <__stack+0xb3>
     516:	9a a7       	std	Y+42, r25	; 0x2a
     518:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     51a:	8f a1       	ldd	r24, Y+39	; 0x27
     51c:	98 a5       	ldd	r25, Y+40	; 0x28
     51e:	01 97       	sbiw	r24, 0x01	; 1
     520:	98 a7       	std	Y+40, r25	; 0x28
     522:	8f a3       	std	Y+39, r24	; 0x27
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     524:	8f a1       	ldd	r24, Y+39	; 0x27
     526:	98 a5       	ldd	r25, Y+40	; 0x28
     528:	89 2b       	or	r24, r25
     52a:	69 f7       	brne	.-38     	; 0x506 <__stack+0xa7>
     52c:	14 c0       	rjmp	.+40     	; 0x556 <__stack+0xf7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     52e:	6b a1       	ldd	r22, Y+35	; 0x23
     530:	7c a1       	ldd	r23, Y+36	; 0x24
     532:	8d a1       	ldd	r24, Y+37	; 0x25
     534:	9e a1       	ldd	r25, Y+38	; 0x26
     536:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixunssfsi>
     53a:	dc 01       	movw	r26, r24
     53c:	cb 01       	movw	r24, r22
     53e:	98 a7       	std	Y+40, r25	; 0x28
     540:	8f a3       	std	Y+39, r24	; 0x27
     542:	8f a1       	ldd	r24, Y+39	; 0x27
     544:	98 a5       	ldd	r25, Y+40	; 0x28
     546:	9c a7       	std	Y+44, r25	; 0x2c
     548:	8b a7       	std	Y+43, r24	; 0x2b
     54a:	8b a5       	ldd	r24, Y+43	; 0x2b
     54c:	9c a5       	ldd	r25, Y+44	; 0x2c
     54e:	01 97       	sbiw	r24, 0x01	; 1
     550:	f1 f7       	brne	.-4      	; 0x54e <__stack+0xef>
     552:	9c a7       	std	Y+44, r25	; 0x2c
     554:	8b a7       	std	Y+43, r24	; 0x2b
    	    		_delay_ms(10);
    		if(strcmp(enter_password_stored,check_password_stored))
     556:	6e eb       	ldi	r22, 0xBE	; 190
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	82 ed       	ldi	r24, 0xD2	; 210
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
     562:	89 2b       	or	r24, r25
     564:	09 f4       	brne	.+2      	; 0x568 <__stack+0x109>
     566:	9c c1       	rjmp	.+824    	; 0x8a0 <__stack+0x441>
    		{
        	//	UART_sendByte('w');
        				i++;
     568:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <i>
     56c:	8f 5f       	subi	r24, 0xFF	; 255
     56e:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <i>

    	    	UART_receiveString(enter_password_stored);
    	   	_delay_ms(10);
    		EEPROM_readString(0x0512, check_password_stored);
    	    		_delay_ms(10);
    		if(strcmp(enter_password_stored,check_password_stored))
     572:	96 c1       	rjmp	.+812    	; 0x8a0 <__stack+0x441>
    		{
        	//	UART_sendByte('w');
        				i++;
    		 }
    		 }
    	else if((password_stored_flag ==0xAA)&&(i>=3))
     574:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <password_stored_flag>
     578:	8a 3a       	cpi	r24, 0xAA	; 170
     57a:	41 f4       	brne	.+16     	; 0x58c <__stack+0x12d>
     57c:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <i>
     580:	83 30       	cpi	r24, 0x03	; 3
     582:	20 f0       	brcs	.+8      	; 0x58c <__stack+0x12d>
    		UART_sendByte('B');
     584:	82 e4       	ldi	r24, 0x42	; 66
     586:	0e 94 55 0c 	call	0x18aa	; 0x18aa <UART_sendByte>
     58a:	8a c1       	rjmp	.+788    	; 0x8a0 <__stack+0x441>

    	else if((password_stored_flag !=0xAA))
     58c:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <password_stored_flag>
     590:	8a 3a       	cpi	r24, 0xAA	; 170
     592:	09 f4       	brne	.+2      	; 0x596 <__stack+0x137>
     594:	f1 cd       	rjmp	.-1054   	; 0x178 <main+0x64>
    	{
        	UART_sendByte('s');
     596:	83 e7       	ldi	r24, 0x73	; 115
     598:	0e 94 55 0c 	call	0x18aa	; 0x18aa <UART_sendByte>
        //	if(BIT_IS_SET(UCSRA,TXC))
    	UART_receiveString(password_stored);
     59c:	8c ee       	ldi	r24, 0xEC	; 236
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 a6 0c 	call	0x194c	; 0x194c <UART_receiveString>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	a8 ec       	ldi	r26, 0xC8	; 200
     5aa:	b2 e4       	ldi	r27, 0x42	; 66
     5ac:	89 8b       	std	Y+17, r24	; 0x11
     5ae:	9a 8b       	std	Y+18, r25	; 0x12
     5b0:	ab 8b       	std	Y+19, r26	; 0x13
     5b2:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5b4:	8e 01       	movw	r16, r28
     5b6:	05 5b       	subi	r16, 0xB5	; 181
     5b8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	4a ef       	ldi	r20, 0xFA	; 250
     5c0:	54 e4       	ldi	r21, 0x44	; 68
     5c2:	69 89       	ldd	r22, Y+17	; 0x11
     5c4:	7a 89       	ldd	r23, Y+18	; 0x12
     5c6:	8b 89       	ldd	r24, Y+19	; 0x13
     5c8:	9c 89       	ldd	r25, Y+20	; 0x14
     5ca:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__mulsf3>
     5ce:	dc 01       	movw	r26, r24
     5d0:	cb 01       	movw	r24, r22
     5d2:	f8 01       	movw	r30, r16
     5d4:	80 83       	st	Z, r24
     5d6:	91 83       	std	Z+1, r25	; 0x01
     5d8:	a2 83       	std	Z+2, r26	; 0x02
     5da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     5dc:	ce 01       	movw	r24, r28
     5de:	85 5b       	subi	r24, 0xB5	; 181
     5e0:	9f 4f       	sbci	r25, 0xFF	; 255
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	40 e8       	ldi	r20, 0x80	; 128
     5e8:	5f e3       	ldi	r21, 0x3F	; 63
     5ea:	fc 01       	movw	r30, r24
     5ec:	60 81       	ld	r22, Z
     5ee:	71 81       	ldd	r23, Z+1	; 0x01
     5f0:	82 81       	ldd	r24, Z+2	; 0x02
     5f2:	93 81       	ldd	r25, Z+3	; 0x03
     5f4:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__cmpsf2>
     5f8:	88 23       	and	r24, r24
     5fa:	4c f4       	brge	.+18     	; 0x60e <__stack+0x1af>
		__ticks = 1;
     5fc:	ce 01       	movw	r24, r28
     5fe:	81 5b       	subi	r24, 0xB1	; 177
     600:	9f 4f       	sbci	r25, 0xFF	; 255
     602:	21 e0       	ldi	r18, 0x01	; 1
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	fc 01       	movw	r30, r24
     608:	31 83       	std	Z+1, r19	; 0x01
     60a:	20 83       	st	Z, r18
     60c:	69 c0       	rjmp	.+210    	; 0x6e0 <__stack+0x281>
	else if (__tmp > 65535)
     60e:	ce 01       	movw	r24, r28
     610:	85 5b       	subi	r24, 0xB5	; 181
     612:	9f 4f       	sbci	r25, 0xFF	; 255
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	3f ef       	ldi	r19, 0xFF	; 255
     618:	4f e7       	ldi	r20, 0x7F	; 127
     61a:	57 e4       	ldi	r21, 0x47	; 71
     61c:	fc 01       	movw	r30, r24
     61e:	60 81       	ld	r22, Z
     620:	71 81       	ldd	r23, Z+1	; 0x01
     622:	82 81       	ldd	r24, Z+2	; 0x02
     624:	93 81       	ldd	r25, Z+3	; 0x03
     626:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__gesf2>
     62a:	18 16       	cp	r1, r24
     62c:	0c f0       	brlt	.+2      	; 0x630 <__stack+0x1d1>
     62e:	46 c0       	rjmp	.+140    	; 0x6bc <__stack+0x25d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e2       	ldi	r20, 0x20	; 32
     636:	51 e4       	ldi	r21, 0x41	; 65
     638:	69 89       	ldd	r22, Y+17	; 0x11
     63a:	7a 89       	ldd	r23, Y+18	; 0x12
     63c:	8b 89       	ldd	r24, Y+19	; 0x13
     63e:	9c 89       	ldd	r25, Y+20	; 0x14
     640:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__mulsf3>
     644:	dc 01       	movw	r26, r24
     646:	cb 01       	movw	r24, r22
     648:	8e 01       	movw	r16, r28
     64a:	01 5b       	subi	r16, 0xB1	; 177
     64c:	1f 4f       	sbci	r17, 0xFF	; 255
     64e:	bc 01       	movw	r22, r24
     650:	cd 01       	movw	r24, r26
     652:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixunssfsi>
     656:	dc 01       	movw	r26, r24
     658:	cb 01       	movw	r24, r22
     65a:	f8 01       	movw	r30, r16
     65c:	91 83       	std	Z+1, r25	; 0x01
     65e:	80 83       	st	Z, r24
     660:	24 c0       	rjmp	.+72     	; 0x6aa <__stack+0x24b>
     662:	ce 01       	movw	r24, r28
     664:	8f 5a       	subi	r24, 0xAF	; 175
     666:	9f 4f       	sbci	r25, 0xFF	; 255
     668:	28 ec       	ldi	r18, 0xC8	; 200
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	fc 01       	movw	r30, r24
     66e:	31 83       	std	Z+1, r19	; 0x01
     670:	20 83       	st	Z, r18
     672:	ce 01       	movw	r24, r28
     674:	8f 5a       	subi	r24, 0xAF	; 175
     676:	9f 4f       	sbci	r25, 0xFF	; 255
     678:	fc 01       	movw	r30, r24
     67a:	80 81       	ld	r24, Z
     67c:	91 81       	ldd	r25, Z+1	; 0x01
     67e:	01 97       	sbiw	r24, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <__stack+0x21f>
     682:	9e 01       	movw	r18, r28
     684:	2f 5a       	subi	r18, 0xAF	; 175
     686:	3f 4f       	sbci	r19, 0xFF	; 255
     688:	f9 01       	movw	r30, r18
     68a:	91 83       	std	Z+1, r25	; 0x01
     68c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     68e:	ce 01       	movw	r24, r28
     690:	81 5b       	subi	r24, 0xB1	; 177
     692:	9f 4f       	sbci	r25, 0xFF	; 255
     694:	9e 01       	movw	r18, r28
     696:	21 5b       	subi	r18, 0xB1	; 177
     698:	3f 4f       	sbci	r19, 0xFF	; 255
     69a:	f9 01       	movw	r30, r18
     69c:	20 81       	ld	r18, Z
     69e:	31 81       	ldd	r19, Z+1	; 0x01
     6a0:	21 50       	subi	r18, 0x01	; 1
     6a2:	31 09       	sbc	r19, r1
     6a4:	fc 01       	movw	r30, r24
     6a6:	31 83       	std	Z+1, r19	; 0x01
     6a8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6aa:	ce 01       	movw	r24, r28
     6ac:	81 5b       	subi	r24, 0xB1	; 177
     6ae:	9f 4f       	sbci	r25, 0xFF	; 255
     6b0:	fc 01       	movw	r30, r24
     6b2:	80 81       	ld	r24, Z
     6b4:	91 81       	ldd	r25, Z+1	; 0x01
     6b6:	89 2b       	or	r24, r25
     6b8:	a1 f6       	brne	.-88     	; 0x662 <__stack+0x203>
     6ba:	2c c0       	rjmp	.+88     	; 0x714 <__stack+0x2b5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6bc:	8e 01       	movw	r16, r28
     6be:	01 5b       	subi	r16, 0xB1	; 177
     6c0:	1f 4f       	sbci	r17, 0xFF	; 255
     6c2:	ce 01       	movw	r24, r28
     6c4:	85 5b       	subi	r24, 0xB5	; 181
     6c6:	9f 4f       	sbci	r25, 0xFF	; 255
     6c8:	fc 01       	movw	r30, r24
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	f8 01       	movw	r30, r16
     6dc:	91 83       	std	Z+1, r25	; 0x01
     6de:	80 83       	st	Z, r24
     6e0:	ce 01       	movw	r24, r28
     6e2:	8d 5a       	subi	r24, 0xAD	; 173
     6e4:	9f 4f       	sbci	r25, 0xFF	; 255
     6e6:	9e 01       	movw	r18, r28
     6e8:	21 5b       	subi	r18, 0xB1	; 177
     6ea:	3f 4f       	sbci	r19, 0xFF	; 255
     6ec:	f9 01       	movw	r30, r18
     6ee:	20 81       	ld	r18, Z
     6f0:	31 81       	ldd	r19, Z+1	; 0x01
     6f2:	fc 01       	movw	r30, r24
     6f4:	31 83       	std	Z+1, r19	; 0x01
     6f6:	20 83       	st	Z, r18
     6f8:	ce 01       	movw	r24, r28
     6fa:	8d 5a       	subi	r24, 0xAD	; 173
     6fc:	9f 4f       	sbci	r25, 0xFF	; 255
     6fe:	fc 01       	movw	r30, r24
     700:	80 81       	ld	r24, Z
     702:	91 81       	ldd	r25, Z+1	; 0x01
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <__stack+0x2a5>
     708:	9e 01       	movw	r18, r28
     70a:	2d 5a       	subi	r18, 0xAD	; 173
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	f9 01       	movw	r30, r18
     710:	91 83       	std	Z+1, r25	; 0x01
     712:	80 83       	st	Z, r24



        	_delay_ms(100);
    	EEPROM_writeString(0x0512,password_stored);
     714:	6c ee       	ldi	r22, 0xEC	; 236
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	82 e1       	ldi	r24, 0x12	; 18
     71a:	95 e0       	ldi	r25, 0x05	; 5
     71c:	0e 94 0a 05 	call	0xa14	; 0xa14 <EEPROM_writeString>
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	a0 e2       	ldi	r26, 0x20	; 32
     726:	b1 e4       	ldi	r27, 0x41	; 65
     728:	8d 83       	std	Y+5, r24	; 0x05
     72a:	9e 83       	std	Y+6, r25	; 0x06
     72c:	af 83       	std	Y+7, r26	; 0x07
     72e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     730:	8e 01       	movw	r16, r28
     732:	0f 5b       	subi	r16, 0xBF	; 191
     734:	1f 4f       	sbci	r17, 0xFF	; 255
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	4a ef       	ldi	r20, 0xFA	; 250
     73c:	54 e4       	ldi	r21, 0x44	; 68
     73e:	6d 81       	ldd	r22, Y+5	; 0x05
     740:	7e 81       	ldd	r23, Y+6	; 0x06
     742:	8f 81       	ldd	r24, Y+7	; 0x07
     744:	98 85       	ldd	r25, Y+8	; 0x08
     746:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__mulsf3>
     74a:	dc 01       	movw	r26, r24
     74c:	cb 01       	movw	r24, r22
     74e:	f8 01       	movw	r30, r16
     750:	80 83       	st	Z, r24
     752:	91 83       	std	Z+1, r25	; 0x01
     754:	a2 83       	std	Z+2, r26	; 0x02
     756:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     758:	ce 01       	movw	r24, r28
     75a:	8f 5b       	subi	r24, 0xBF	; 191
     75c:	9f 4f       	sbci	r25, 0xFF	; 255
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	40 e8       	ldi	r20, 0x80	; 128
     764:	5f e3       	ldi	r21, 0x3F	; 63
     766:	fc 01       	movw	r30, r24
     768:	60 81       	ld	r22, Z
     76a:	71 81       	ldd	r23, Z+1	; 0x01
     76c:	82 81       	ldd	r24, Z+2	; 0x02
     76e:	93 81       	ldd	r25, Z+3	; 0x03
     770:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__cmpsf2>
     774:	88 23       	and	r24, r24
     776:	4c f4       	brge	.+18     	; 0x78a <__stack+0x32b>
		__ticks = 1;
     778:	ce 01       	movw	r24, r28
     77a:	8b 5b       	subi	r24, 0xBB	; 187
     77c:	9f 4f       	sbci	r25, 0xFF	; 255
     77e:	21 e0       	ldi	r18, 0x01	; 1
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	fc 01       	movw	r30, r24
     784:	31 83       	std	Z+1, r19	; 0x01
     786:	20 83       	st	Z, r18
     788:	69 c0       	rjmp	.+210    	; 0x85c <__stack+0x3fd>
	else if (__tmp > 65535)
     78a:	ce 01       	movw	r24, r28
     78c:	8f 5b       	subi	r24, 0xBF	; 191
     78e:	9f 4f       	sbci	r25, 0xFF	; 255
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	3f ef       	ldi	r19, 0xFF	; 255
     794:	4f e7       	ldi	r20, 0x7F	; 127
     796:	57 e4       	ldi	r21, 0x47	; 71
     798:	fc 01       	movw	r30, r24
     79a:	60 81       	ld	r22, Z
     79c:	71 81       	ldd	r23, Z+1	; 0x01
     79e:	82 81       	ldd	r24, Z+2	; 0x02
     7a0:	93 81       	ldd	r25, Z+3	; 0x03
     7a2:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__gesf2>
     7a6:	18 16       	cp	r1, r24
     7a8:	0c f0       	brlt	.+2      	; 0x7ac <__stack+0x34d>
     7aa:	46 c0       	rjmp	.+140    	; 0x838 <__stack+0x3d9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	40 e2       	ldi	r20, 0x20	; 32
     7b2:	51 e4       	ldi	r21, 0x41	; 65
     7b4:	6d 81       	ldd	r22, Y+5	; 0x05
     7b6:	7e 81       	ldd	r23, Y+6	; 0x06
     7b8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ba:	98 85       	ldd	r25, Y+8	; 0x08
     7bc:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__mulsf3>
     7c0:	dc 01       	movw	r26, r24
     7c2:	cb 01       	movw	r24, r22
     7c4:	8e 01       	movw	r16, r28
     7c6:	0b 5b       	subi	r16, 0xBB	; 187
     7c8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ca:	bc 01       	movw	r22, r24
     7cc:	cd 01       	movw	r24, r26
     7ce:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixunssfsi>
     7d2:	dc 01       	movw	r26, r24
     7d4:	cb 01       	movw	r24, r22
     7d6:	f8 01       	movw	r30, r16
     7d8:	91 83       	std	Z+1, r25	; 0x01
     7da:	80 83       	st	Z, r24
     7dc:	24 c0       	rjmp	.+72     	; 0x826 <__stack+0x3c7>
     7de:	ce 01       	movw	r24, r28
     7e0:	89 5b       	subi	r24, 0xB9	; 185
     7e2:	9f 4f       	sbci	r25, 0xFF	; 255
     7e4:	28 ec       	ldi	r18, 0xC8	; 200
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	fc 01       	movw	r30, r24
     7ea:	31 83       	std	Z+1, r19	; 0x01
     7ec:	20 83       	st	Z, r18
     7ee:	ce 01       	movw	r24, r28
     7f0:	89 5b       	subi	r24, 0xB9	; 185
     7f2:	9f 4f       	sbci	r25, 0xFF	; 255
     7f4:	fc 01       	movw	r30, r24
     7f6:	80 81       	ld	r24, Z
     7f8:	91 81       	ldd	r25, Z+1	; 0x01
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <__stack+0x39b>
     7fe:	9e 01       	movw	r18, r28
     800:	29 5b       	subi	r18, 0xB9	; 185
     802:	3f 4f       	sbci	r19, 0xFF	; 255
     804:	f9 01       	movw	r30, r18
     806:	91 83       	std	Z+1, r25	; 0x01
     808:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     80a:	ce 01       	movw	r24, r28
     80c:	8b 5b       	subi	r24, 0xBB	; 187
     80e:	9f 4f       	sbci	r25, 0xFF	; 255
     810:	9e 01       	movw	r18, r28
     812:	2b 5b       	subi	r18, 0xBB	; 187
     814:	3f 4f       	sbci	r19, 0xFF	; 255
     816:	f9 01       	movw	r30, r18
     818:	20 81       	ld	r18, Z
     81a:	31 81       	ldd	r19, Z+1	; 0x01
     81c:	21 50       	subi	r18, 0x01	; 1
     81e:	31 09       	sbc	r19, r1
     820:	fc 01       	movw	r30, r24
     822:	31 83       	std	Z+1, r19	; 0x01
     824:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     826:	ce 01       	movw	r24, r28
     828:	8b 5b       	subi	r24, 0xBB	; 187
     82a:	9f 4f       	sbci	r25, 0xFF	; 255
     82c:	fc 01       	movw	r30, r24
     82e:	80 81       	ld	r24, Z
     830:	91 81       	ldd	r25, Z+1	; 0x01
     832:	89 2b       	or	r24, r25
     834:	a1 f6       	brne	.-88     	; 0x7de <__stack+0x37f>
     836:	2c c0       	rjmp	.+88     	; 0x890 <__stack+0x431>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     838:	8e 01       	movw	r16, r28
     83a:	0b 5b       	subi	r16, 0xBB	; 187
     83c:	1f 4f       	sbci	r17, 0xFF	; 255
     83e:	ce 01       	movw	r24, r28
     840:	8f 5b       	subi	r24, 0xBF	; 191
     842:	9f 4f       	sbci	r25, 0xFF	; 255
     844:	fc 01       	movw	r30, r24
     846:	60 81       	ld	r22, Z
     848:	71 81       	ldd	r23, Z+1	; 0x01
     84a:	82 81       	ldd	r24, Z+2	; 0x02
     84c:	93 81       	ldd	r25, Z+3	; 0x03
     84e:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixunssfsi>
     852:	dc 01       	movw	r26, r24
     854:	cb 01       	movw	r24, r22
     856:	f8 01       	movw	r30, r16
     858:	91 83       	std	Z+1, r25	; 0x01
     85a:	80 83       	st	Z, r24
     85c:	ce 01       	movw	r24, r28
     85e:	87 5b       	subi	r24, 0xB7	; 183
     860:	9f 4f       	sbci	r25, 0xFF	; 255
     862:	9e 01       	movw	r18, r28
     864:	2b 5b       	subi	r18, 0xBB	; 187
     866:	3f 4f       	sbci	r19, 0xFF	; 255
     868:	f9 01       	movw	r30, r18
     86a:	20 81       	ld	r18, Z
     86c:	31 81       	ldd	r19, Z+1	; 0x01
     86e:	fc 01       	movw	r30, r24
     870:	31 83       	std	Z+1, r19	; 0x01
     872:	20 83       	st	Z, r18
     874:	ce 01       	movw	r24, r28
     876:	87 5b       	subi	r24, 0xB7	; 183
     878:	9f 4f       	sbci	r25, 0xFF	; 255
     87a:	fc 01       	movw	r30, r24
     87c:	80 81       	ld	r24, Z
     87e:	91 81       	ldd	r25, Z+1	; 0x01
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <__stack+0x421>
     884:	9e 01       	movw	r18, r28
     886:	27 5b       	subi	r18, 0xB7	; 183
     888:	3f 4f       	sbci	r19, 0xFF	; 255
     88a:	f9 01       	movw	r30, r18
     88c:	91 83       	std	Z+1, r25	; 0x01
     88e:	80 83       	st	Z, r24
    	_delay_ms(10);
    	EEPROM_writeByte(0X0011,0xAA);
     890:	6a ea       	ldi	r22, 0xAA	; 170
     892:	81 e1       	ldi	r24, 0x11	; 17
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    	password_stored_flag=0xAA;
     89a:	8a ea       	ldi	r24, 0xAA	; 170
     89c:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <password_stored_flag>

    	}

    }
     8a0:	6b cc       	rjmp	.-1834   	; 0x178 <main+0x64>

000008a2 <EEPROM_init>:
#include "i2c.h"
#include "external_eeprom.h"

TWI_configurationType TWI_config;
void EEPROM_init(void)
{
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
	TWI_config.baudRate=400000;
     8aa:	80 e8       	ldi	r24, 0x80	; 128
     8ac:	9a e1       	ldi	r25, 0x1A	; 26
     8ae:	a6 e0       	ldi	r26, 0x06	; 6
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <TWI_config>
     8b6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <TWI_config+0x1>
     8ba:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <TWI_config+0x2>
     8be:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <TWI_config+0x3>
	TWI_config.prescasler=0;
     8c2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <TWI_config+0x4>
	TWI_config.slave_address=0b00001011;
     8c6:	8b e0       	ldi	r24, 0x0B	; 11
     8c8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <TWI_config+0x5>

TWI_init(&TWI_config);
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <TWI_init>
}
     8d4:	00 00       	nop
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	00 d0       	rcall	.+0      	; 0x8e2 <EEPROM_writeByte+0x6>
     8e2:	1f 92       	push	r1
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	9a 83       	std	Y+2, r25	; 0x02
     8ea:	89 83       	std	Y+1, r24	; 0x01
     8ec:	6b 83       	std	Y+3, r22	; 0x03

	TWI_start();
     8ee:	0e 94 99 06 	call	0xd32	; 0xd32 <TWI_start>
	if(TWI_getStatus()!=TW_START)
     8f2:	0e 94 04 07 	call	0xe08	; 0xe08 <TWI_getStatus>
     8f6:	88 30       	cpi	r24, 0x08	; 8
     8f8:	11 f0       	breq	.+4      	; 0x8fe <EEPROM_writeByte+0x22>
	return 1;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <EEPROM_writeByte+0x70>

	TWI_write((uint8)(0xA0|((u16addr&0X0700)>>7)));
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	9a 81       	ldd	r25, Y+2	; 0x02
     902:	88 27       	eor	r24, r24
     904:	97 70       	andi	r25, 0x07	; 7
     906:	88 0f       	add	r24, r24
     908:	89 2f       	mov	r24, r25
     90a:	88 1f       	adc	r24, r24
     90c:	99 0b       	sbc	r25, r25
     90e:	91 95       	neg	r25
     910:	80 6a       	ori	r24, 0xA0	; 160
     912:	0e 94 ba 06 	call	0xd74	; 0xd74 <TWI_write>
	if(TWI_getStatus()!=TW_MT_SLA_W_ACK)
     916:	0e 94 04 07 	call	0xe08	; 0xe08 <TWI_getStatus>
     91a:	88 31       	cpi	r24, 0x18	; 24
     91c:	11 f0       	breq	.+4      	; 0x922 <EEPROM_writeByte+0x46>
		return 2;
     91e:	82 e0       	ldi	r24, 0x02	; 2
     920:	15 c0       	rjmp	.+42     	; 0x94c <EEPROM_writeByte+0x70>


	TWI_write((uint8)u16addr);
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	0e 94 ba 06 	call	0xd74	; 0xd74 <TWI_write>
	if(TWI_getStatus()!=TW_MT_DATA_ACK)
     928:	0e 94 04 07 	call	0xe08	; 0xe08 <TWI_getStatus>
     92c:	88 32       	cpi	r24, 0x28	; 40
     92e:	11 f0       	breq	.+4      	; 0x934 <EEPROM_writeByte+0x58>
			return 0x80;
     930:	80 e8       	ldi	r24, 0x80	; 128
     932:	0c c0       	rjmp	.+24     	; 0x94c <EEPROM_writeByte+0x70>


	TWI_write(u8data);
     934:	8b 81       	ldd	r24, Y+3	; 0x03
     936:	0e 94 ba 06 	call	0xd74	; 0xd74 <TWI_write>
	if(TWI_getStatus()!=TW_MT_DATA_ACK)
     93a:	0e 94 04 07 	call	0xe08	; 0xe08 <TWI_getStatus>
     93e:	88 32       	cpi	r24, 0x28	; 40
     940:	11 f0       	breq	.+4      	; 0x946 <EEPROM_writeByte+0x6a>
			return 4;
     942:	84 e0       	ldi	r24, 0x04	; 4
     944:	03 c0       	rjmp	.+6      	; 0x94c <EEPROM_writeByte+0x70>

	TWI_stop();
     946:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TWI_stop>
	return 5;
     94a:	85 e0       	ldi	r24, 0x05	; 5
}
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	00 d0       	rcall	.+0      	; 0x95e <EEPROM_readByte+0x6>
     95e:	00 d0       	rcall	.+0      	; 0x960 <EEPROM_readByte+0x8>
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	9a 83       	std	Y+2, r25	; 0x02
     966:	89 83       	std	Y+1, r24	; 0x01
     968:	7c 83       	std	Y+4, r23	; 0x04
     96a:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
     96c:	0e 94 99 06 	call	0xd32	; 0xd32 <TWI_start>
		if(TWI_getStatus()!=TW_START)
     970:	0e 94 04 07 	call	0xe08	; 0xe08 <TWI_getStatus>
     974:	88 30       	cpi	r24, 0x08	; 8
     976:	11 f0       	breq	.+4      	; 0x97c <EEPROM_readByte+0x24>
		return ERROR;
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	45 c0       	rjmp	.+138    	; 0xa06 <EEPROM_readByte+0xae>

		TWI_write((uint8)(0xA0|((u16addr&0X0700)>>7)));
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	9a 81       	ldd	r25, Y+2	; 0x02
     980:	88 27       	eor	r24, r24
     982:	97 70       	andi	r25, 0x07	; 7
     984:	88 0f       	add	r24, r24
     986:	89 2f       	mov	r24, r25
     988:	88 1f       	adc	r24, r24
     98a:	99 0b       	sbc	r25, r25
     98c:	91 95       	neg	r25
     98e:	80 6a       	ori	r24, 0xA0	; 160
     990:	0e 94 ba 06 	call	0xd74	; 0xd74 <TWI_write>
		if(TWI_getStatus()!=TW_MT_SLA_W_ACK)
     994:	0e 94 04 07 	call	0xe08	; 0xe08 <TWI_getStatus>
     998:	88 31       	cpi	r24, 0x18	; 24
     99a:	11 f0       	breq	.+4      	; 0x9a0 <EEPROM_readByte+0x48>
			return ERROR;
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	33 c0       	rjmp	.+102    	; 0xa06 <EEPROM_readByte+0xae>


		TWI_write((uint8)u16addr);
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	0e 94 ba 06 	call	0xd74	; 0xd74 <TWI_write>
		if(TWI_getStatus()!=TW_MT_DATA_ACK)
     9a6:	0e 94 04 07 	call	0xe08	; 0xe08 <TWI_getStatus>
     9aa:	88 32       	cpi	r24, 0x28	; 40
     9ac:	11 f0       	breq	.+4      	; 0x9b2 <EEPROM_readByte+0x5a>
				return ERROR;
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	2a c0       	rjmp	.+84     	; 0xa06 <EEPROM_readByte+0xae>


		//TWI_write(u8data);
		//if(TWI_getStatus()!=TW_MT_DATA_ACK)
			//	return ERROR;
		TWI_start();
     9b2:	0e 94 99 06 	call	0xd32	; 0xd32 <TWI_start>
		if(TWI_getStatus()!=TW_REP_START)
     9b6:	0e 94 04 07 	call	0xe08	; 0xe08 <TWI_getStatus>
     9ba:	80 31       	cpi	r24, 0x10	; 16
     9bc:	11 f0       	breq	.+4      	; 0x9c2 <EEPROM_readByte+0x6a>
						return ERROR;
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	22 c0       	rjmp	.+68     	; 0xa06 <EEPROM_readByte+0xae>

		TWI_write((uint8)((0xA0)|((u16addr&0X0700)>>7)|1));
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	9a 81       	ldd	r25, Y+2	; 0x02
     9c6:	88 27       	eor	r24, r24
     9c8:	97 70       	andi	r25, 0x07	; 7
     9ca:	88 0f       	add	r24, r24
     9cc:	89 2f       	mov	r24, r25
     9ce:	88 1f       	adc	r24, r24
     9d0:	99 0b       	sbc	r25, r25
     9d2:	91 95       	neg	r25
     9d4:	81 6a       	ori	r24, 0xA1	; 161
     9d6:	0e 94 ba 06 	call	0xd74	; 0xd74 <TWI_write>
		if(TWI_getStatus()!=TW_MT_SLA_R_ACK)
     9da:	0e 94 04 07 	call	0xe08	; 0xe08 <TWI_getStatus>
     9de:	80 34       	cpi	r24, 0x40	; 64
     9e0:	11 f0       	breq	.+4      	; 0x9e6 <EEPROM_readByte+0x8e>
						return ERROR;
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	10 c0       	rjmp	.+32     	; 0xa06 <EEPROM_readByte+0xae>


			*u8data=TWI_read_with_NACK();
     9e6:	0e 94 ed 06 	call	0xdda	; 0xdda <TWI_read_with_NACK>
     9ea:	28 2f       	mov	r18, r24
     9ec:	8b 81       	ldd	r24, Y+3	; 0x03
     9ee:	9c 81       	ldd	r25, Y+4	; 0x04
     9f0:	fc 01       	movw	r30, r24
     9f2:	20 83       	st	Z, r18
			if(TWI_getStatus()!=TW_MR_DATA_NACK)
     9f4:	0e 94 04 07 	call	0xe08	; 0xe08 <TWI_getStatus>
     9f8:	88 35       	cpi	r24, 0x58	; 88
     9fa:	11 f0       	breq	.+4      	; 0xa00 <EEPROM_readByte+0xa8>
					return ERROR;
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	03 c0       	rjmp	.+6      	; 0xa06 <EEPROM_readByte+0xae>

			TWI_stop();
     a00:	0e 94 ad 06 	call	0xd5a	; 0xd5a <TWI_stop>
			return SUCCESS;
     a04:	81 e0       	ldi	r24, 0x01	; 1

}
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <EEPROM_writeString>:
uint8 EEPROM_writeString(uint16 u16addr, uint8* str)
{
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	cd b7       	in	r28, 0x3d	; 61
     a1a:	de b7       	in	r29, 0x3e	; 62
     a1c:	63 97       	sbiw	r28, 0x13	; 19
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	cd bf       	out	0x3d, r28	; 61
     a28:	99 8b       	std	Y+17, r25	; 0x11
     a2a:	88 8b       	std	Y+16, r24	; 0x10
     a2c:	7b 8b       	std	Y+19, r23	; 0x13
     a2e:	6a 8b       	std	Y+18, r22	; 0x12

	uint8 i=0;
     a30:	19 82       	std	Y+1, r1	; 0x01
	for( i=0;str[i]!='\0';i++)
     a32:	19 82       	std	Y+1, r1	; 0x01
     a34:	88 c0       	rjmp	.+272    	; 0xb46 <EEPROM_writeString+0x132>
{


	EEPROM_writeByte(u16addr+i,str[i]);
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	88 2f       	mov	r24, r24
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	2a 89       	ldd	r18, Y+18	; 0x12
     a3e:	3b 89       	ldd	r19, Y+19	; 0x13
     a40:	82 0f       	add	r24, r18
     a42:	93 1f       	adc	r25, r19
     a44:	fc 01       	movw	r30, r24
     a46:	40 81       	ld	r20, Z
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	28 2f       	mov	r18, r24
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	88 89       	ldd	r24, Y+16	; 0x10
     a50:	99 89       	ldd	r25, Y+17	; 0x11
     a52:	82 0f       	add	r24, r18
     a54:	93 1f       	adc	r25, r19
     a56:	64 2f       	mov	r22, r20
     a58:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	a0 e2       	ldi	r26, 0x20	; 32
     a62:	b1 e4       	ldi	r27, 0x41	; 65
     a64:	8a 83       	std	Y+2, r24	; 0x02
     a66:	9b 83       	std	Y+3, r25	; 0x03
     a68:	ac 83       	std	Y+4, r26	; 0x04
     a6a:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	4a ef       	ldi	r20, 0xFA	; 250
     a72:	54 e4       	ldi	r21, 0x44	; 68
     a74:	6a 81       	ldd	r22, Y+2	; 0x02
     a76:	7b 81       	ldd	r23, Y+3	; 0x03
     a78:	8c 81       	ldd	r24, Y+4	; 0x04
     a7a:	9d 81       	ldd	r25, Y+5	; 0x05
     a7c:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__mulsf3>
     a80:	dc 01       	movw	r26, r24
     a82:	cb 01       	movw	r24, r22
     a84:	8e 83       	std	Y+6, r24	; 0x06
     a86:	9f 83       	std	Y+7, r25	; 0x07
     a88:	a8 87       	std	Y+8, r26	; 0x08
     a8a:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	40 e8       	ldi	r20, 0x80	; 128
     a92:	5f e3       	ldi	r21, 0x3F	; 63
     a94:	6e 81       	ldd	r22, Y+6	; 0x06
     a96:	7f 81       	ldd	r23, Y+7	; 0x07
     a98:	88 85       	ldd	r24, Y+8	; 0x08
     a9a:	99 85       	ldd	r25, Y+9	; 0x09
     a9c:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__cmpsf2>
     aa0:	88 23       	and	r24, r24
     aa2:	2c f4       	brge	.+10     	; 0xaae <EEPROM_writeString+0x9a>
		__ticks = 1;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	9b 87       	std	Y+11, r25	; 0x0b
     aaa:	8a 87       	std	Y+10, r24	; 0x0a
     aac:	3f c0       	rjmp	.+126    	; 0xb2c <EEPROM_writeString+0x118>
	else if (__tmp > 65535)
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	3f ef       	ldi	r19, 0xFF	; 255
     ab2:	4f e7       	ldi	r20, 0x7F	; 127
     ab4:	57 e4       	ldi	r21, 0x47	; 71
     ab6:	6e 81       	ldd	r22, Y+6	; 0x06
     ab8:	7f 81       	ldd	r23, Y+7	; 0x07
     aba:	88 85       	ldd	r24, Y+8	; 0x08
     abc:	99 85       	ldd	r25, Y+9	; 0x09
     abe:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__gesf2>
     ac2:	18 16       	cp	r1, r24
     ac4:	4c f5       	brge	.+82     	; 0xb18 <EEPROM_writeString+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	40 e2       	ldi	r20, 0x20	; 32
     acc:	51 e4       	ldi	r21, 0x41	; 65
     ace:	6a 81       	ldd	r22, Y+2	; 0x02
     ad0:	7b 81       	ldd	r23, Y+3	; 0x03
     ad2:	8c 81       	ldd	r24, Y+4	; 0x04
     ad4:	9d 81       	ldd	r25, Y+5	; 0x05
     ad6:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__mulsf3>
     ada:	dc 01       	movw	r26, r24
     adc:	cb 01       	movw	r24, r22
     ade:	bc 01       	movw	r22, r24
     ae0:	cd 01       	movw	r24, r26
     ae2:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	9b 87       	std	Y+11, r25	; 0x0b
     aec:	8a 87       	std	Y+10, r24	; 0x0a
     aee:	0f c0       	rjmp	.+30     	; 0xb0e <EEPROM_writeString+0xfa>
     af0:	88 ec       	ldi	r24, 0xC8	; 200
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	9d 87       	std	Y+13, r25	; 0x0d
     af6:	8c 87       	std	Y+12, r24	; 0x0c
     af8:	8c 85       	ldd	r24, Y+12	; 0x0c
     afa:	9d 85       	ldd	r25, Y+13	; 0x0d
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	f1 f7       	brne	.-4      	; 0xafc <EEPROM_writeString+0xe8>
     b00:	9d 87       	std	Y+13, r25	; 0x0d
     b02:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b04:	8a 85       	ldd	r24, Y+10	; 0x0a
     b06:	9b 85       	ldd	r25, Y+11	; 0x0b
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	9b 87       	std	Y+11, r25	; 0x0b
     b0c:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b0e:	8a 85       	ldd	r24, Y+10	; 0x0a
     b10:	9b 85       	ldd	r25, Y+11	; 0x0b
     b12:	89 2b       	or	r24, r25
     b14:	69 f7       	brne	.-38     	; 0xaf0 <EEPROM_writeString+0xdc>
     b16:	14 c0       	rjmp	.+40     	; 0xb40 <EEPROM_writeString+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b18:	6e 81       	ldd	r22, Y+6	; 0x06
     b1a:	7f 81       	ldd	r23, Y+7	; 0x07
     b1c:	88 85       	ldd	r24, Y+8	; 0x08
     b1e:	99 85       	ldd	r25, Y+9	; 0x09
     b20:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixunssfsi>
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	9b 87       	std	Y+11, r25	; 0x0b
     b2a:	8a 87       	std	Y+10, r24	; 0x0a
     b2c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b2e:	9b 85       	ldd	r25, Y+11	; 0x0b
     b30:	9f 87       	std	Y+15, r25	; 0x0f
     b32:	8e 87       	std	Y+14, r24	; 0x0e
     b34:	8e 85       	ldd	r24, Y+14	; 0x0e
     b36:	9f 85       	ldd	r25, Y+15	; 0x0f
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <EEPROM_writeString+0x124>
     b3c:	9f 87       	std	Y+15, r25	; 0x0f
     b3e:	8e 87       	std	Y+14, r24	; 0x0e
}
uint8 EEPROM_writeString(uint16 u16addr, uint8* str)
{

	uint8 i=0;
	for( i=0;str[i]!='\0';i++)
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	8f 5f       	subi	r24, 0xFF	; 255
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	88 2f       	mov	r24, r24
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	2a 89       	ldd	r18, Y+18	; 0x12
     b4e:	3b 89       	ldd	r19, Y+19	; 0x13
     b50:	82 0f       	add	r24, r18
     b52:	93 1f       	adc	r25, r19
     b54:	fc 01       	movw	r30, r24
     b56:	80 81       	ld	r24, Z
     b58:	88 23       	and	r24, r24
     b5a:	09 f0       	breq	.+2      	; 0xb5e <EEPROM_writeString+0x14a>
     b5c:	6c cf       	rjmp	.-296    	; 0xa36 <EEPROM_writeString+0x22>
	EEPROM_writeByte(u16addr+i,str[i]);
	_delay_ms(10);

}

	EEPROM_writeByte(u16addr+i,'\0');
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	28 2f       	mov	r18, r24
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	88 89       	ldd	r24, Y+16	; 0x10
     b66:	99 89       	ldd	r25, Y+17	; 0x11
     b68:	82 0f       	add	r24, r18
     b6a:	93 1f       	adc	r25, r19
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>


}
     b72:	00 00       	nop
     b74:	63 96       	adiw	r28, 0x13	; 19
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <EEPROM_readString>:
uint8 EEPROM_readString(uint16 u16addr, uint8 *str)
{
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <EEPROM_readString+0x6>
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <EEPROM_readString+0x8>
     b8e:	1f 92       	push	r1
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	9b 83       	std	Y+3, r25	; 0x03
     b96:	8a 83       	std	Y+2, r24	; 0x02
     b98:	7d 83       	std	Y+5, r23	; 0x05
     b9a:	6c 83       	std	Y+4, r22	; 0x04

	uint8 i = 0;
     b9c:	19 82       	std	Y+1, r1	; 0x01
		EEPROM_readByte(u16addr, &str[i]);
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	88 2f       	mov	r24, r24
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	2c 81       	ldd	r18, Y+4	; 0x04
     ba6:	3d 81       	ldd	r19, Y+5	; 0x05
     ba8:	28 0f       	add	r18, r24
     baa:	39 1f       	adc	r19, r25
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	9b 81       	ldd	r25, Y+3	; 0x03
     bb0:	b9 01       	movw	r22, r18
     bb2:	0e 94 ac 04 	call	0x958	; 0x958 <EEPROM_readByte>
		while(str[i]!='\0')
     bb6:	14 c0       	rjmp	.+40     	; 0xbe0 <EEPROM_readString+0x5a>
		{u16addr++;
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	9b 81       	ldd	r25, Y+3	; 0x03
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	9b 83       	std	Y+3, r25	; 0x03
     bc0:	8a 83       	std	Y+2, r24	; 0x02
			i++;
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	8f 5f       	subi	r24, 0xFF	; 255
     bc6:	89 83       	std	Y+1, r24	; 0x01
			EEPROM_readByte(u16addr, &str[i]);
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	88 2f       	mov	r24, r24
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	2c 81       	ldd	r18, Y+4	; 0x04
     bd0:	3d 81       	ldd	r19, Y+5	; 0x05
     bd2:	28 0f       	add	r18, r24
     bd4:	39 1f       	adc	r19, r25
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	9b 81       	ldd	r25, Y+3	; 0x03
     bda:	b9 01       	movw	r22, r18
     bdc:	0e 94 ac 04 	call	0x958	; 0x958 <EEPROM_readByte>
uint8 EEPROM_readString(uint16 u16addr, uint8 *str)
{

	uint8 i = 0;
		EEPROM_readByte(u16addr, &str[i]);
		while(str[i]!='\0')
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	88 2f       	mov	r24, r24
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	2c 81       	ldd	r18, Y+4	; 0x04
     be8:	3d 81       	ldd	r19, Y+5	; 0x05
     bea:	82 0f       	add	r24, r18
     bec:	93 1f       	adc	r25, r19
     bee:	fc 01       	movw	r30, r24
     bf0:	80 81       	ld	r24, Z
     bf2:	88 23       	and	r24, r24
     bf4:	09 f7       	brne	.-62     	; 0xbb8 <EEPROM_readString+0x32>
		{u16addr++;
			i++;
			EEPROM_readByte(u16addr, &str[i]);
		}
		str[i]='\0';
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	88 2f       	mov	r24, r24
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	2c 81       	ldd	r18, Y+4	; 0x04
     bfe:	3d 81       	ldd	r19, Y+5	; 0x05
     c00:	82 0f       	add	r24, r18
     c02:	93 1f       	adc	r25, r19
     c04:	fc 01       	movw	r30, r24
     c06:	10 82       	st	Z, r1

}
     c08:	00 00       	nop
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	08 95       	ret

00000c1a <TWI_init>:
 *      Author: hesham
 */
#include"i2c.h"

void TWI_init(const TWI_configurationType *config)
{
     c1a:	cf 92       	push	r12
     c1c:	df 92       	push	r13
     c1e:	ef 92       	push	r14
     c20:	ff 92       	push	r15
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <TWI_init+0x12>
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	9a 83       	std	Y+2, r25	; 0x02
     c32:	89 83       	std	Y+1, r24	; 0x01
	//TWBR=0X02;//buad rate
	TWBR=((float)F_CPU/config->baudRate +16)/(2*pow(4,config->prescasler));
     c34:	00 e2       	ldi	r16, 0x20	; 32
     c36:	10 e0       	ldi	r17, 0x00	; 0
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	9a 81       	ldd	r25, Y+2	; 0x02
     c3c:	fc 01       	movw	r30, r24
     c3e:	80 81       	ld	r24, Z
     c40:	91 81       	ldd	r25, Z+1	; 0x01
     c42:	a2 81       	ldd	r26, Z+2	; 0x02
     c44:	b3 81       	ldd	r27, Z+3	; 0x03
     c46:	bc 01       	movw	r22, r24
     c48:	cd 01       	movw	r24, r26
     c4a:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__floatunsisf>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9c 01       	movw	r18, r24
     c54:	ad 01       	movw	r20, r26
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	74 e2       	ldi	r23, 0x24	; 36
     c5a:	84 ef       	ldi	r24, 0xF4	; 244
     c5c:	9a e4       	ldi	r25, 0x4A	; 74
     c5e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__divsf3>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e8       	ldi	r20, 0x80	; 128
     c6c:	51 e4       	ldi	r21, 0x41	; 65
     c6e:	bc 01       	movw	r22, r24
     c70:	cd 01       	movw	r24, r26
     c72:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__addsf3>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	6c 01       	movw	r12, r24
     c7c:	7d 01       	movw	r14, r26
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	9a 81       	ldd	r25, Y+2	; 0x02
     c82:	fc 01       	movw	r30, r24
     c84:	84 81       	ldd	r24, Z+4	; 0x04
     c86:	88 2f       	mov	r24, r24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	bc 01       	movw	r22, r24
     c90:	cd 01       	movw	r24, r26
     c92:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__floatunsisf>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	9c 01       	movw	r18, r24
     c9c:	ad 01       	movw	r20, r26
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	80 e8       	ldi	r24, 0x80	; 128
     ca4:	90 e4       	ldi	r25, 0x40	; 64
     ca6:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <pow>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	9c 01       	movw	r18, r24
     cb0:	ad 01       	movw	r20, r26
     cb2:	bc 01       	movw	r22, r24
     cb4:	cd 01       	movw	r24, r26
     cb6:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__addsf3>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	9c 01       	movw	r18, r24
     cc0:	ad 01       	movw	r20, r26
     cc2:	c7 01       	movw	r24, r14
     cc4:	b6 01       	movw	r22, r12
     cc6:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__divsf3>
     cca:	dc 01       	movw	r26, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	bc 01       	movw	r22, r24
     cd0:	cd 01       	movw	r24, r26
     cd2:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__fixunssfsi>
     cd6:	dc 01       	movw	r26, r24
     cd8:	cb 01       	movw	r24, r22
     cda:	f8 01       	movw	r30, r16
     cdc:	80 83       	st	Z, r24
	TWSR=0X00; //prescaler
     cde:	81 e2       	ldi	r24, 0x21	; 33
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	fc 01       	movw	r30, r24
     ce4:	10 82       	st	Z, r1
	TWSR=config->prescasler;
     ce6:	81 e2       	ldi	r24, 0x21	; 33
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	29 81       	ldd	r18, Y+1	; 0x01
     cec:	3a 81       	ldd	r19, Y+2	; 0x02
     cee:	f9 01       	movw	r30, r18
     cf0:	24 81       	ldd	r18, Z+4	; 0x04
     cf2:	fc 01       	movw	r30, r24
     cf4:	20 83       	st	Z, r18
	 TWAR=config->slave_address<<1;// adress+ other bit
     cf6:	82 e2       	ldi	r24, 0x22	; 34
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	29 81       	ldd	r18, Y+1	; 0x01
     cfc:	3a 81       	ldd	r19, Y+2	; 0x02
     cfe:	f9 01       	movw	r30, r18
     d00:	25 81       	ldd	r18, Z+5	; 0x05
     d02:	22 0f       	add	r18, r18
     d04:	fc 01       	movw	r30, r24
     d06:	20 83       	st	Z, r18
	TWCR|=(1<<TWEN);// دائما فى الاخر
     d08:	86 e5       	ldi	r24, 0x56	; 86
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	26 e5       	ldi	r18, 0x56	; 86
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	f9 01       	movw	r30, r18
     d12:	20 81       	ld	r18, Z
     d14:	24 60       	ori	r18, 0x04	; 4
     d16:	fc 01       	movw	r30, r24
     d18:	20 83       	st	Z, r18

}
     d1a:	00 00       	nop
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	ff 90       	pop	r15
     d2a:	ef 90       	pop	r14
     d2c:	df 90       	pop	r13
     d2e:	cf 90       	pop	r12
     d30:	08 95       	ret

00000d32 <TWI_start>:
void TWI_start(void)
{
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
	//make enable again to force other bits in the register to be zero
	//start bit and clear done flag
TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     d3a:	86 e5       	ldi	r24, 0x56	; 86
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	24 ea       	ldi	r18, 0xA4	; 164
     d40:	fc 01       	movw	r30, r24
     d42:	20 83       	st	Z, r18
while(BIT_IS_CLEAR(TWCR,TWINT));// WAIT acation done
     d44:	00 00       	nop
     d46:	86 e5       	ldi	r24, 0x56	; 86
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	fc 01       	movw	r30, r24
     d4c:	80 81       	ld	r24, Z
     d4e:	88 23       	and	r24, r24
     d50:	d4 f7       	brge	.-12     	; 0xd46 <TWI_start+0x14>
}
     d52:	00 00       	nop
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <TWI_stop>:
void TWI_stop(void)
{
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     d62:	86 e5       	ldi	r24, 0x56	; 86
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	24 e9       	ldi	r18, 0x94	; 148
     d68:	fc 01       	movw	r30, r24
     d6a:	20 83       	st	Z, r18

//NO NEED TO WAIT twint flag
}
     d6c:	00 00       	nop
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	08 95       	ret

00000d74 <TWI_write>:
void TWI_write(uint8 data)
{
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	1f 92       	push	r1
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	89 83       	std	Y+1, r24	; 0x01

	TWDR=data;
     d80:	83 e2       	ldi	r24, 0x23	; 35
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	29 81       	ldd	r18, Y+1	; 0x01
     d86:	fc 01       	movw	r30, r24
     d88:	20 83       	st	Z, r18

	TWCR=(1<<TWINT)|(1<<TWEN);
     d8a:	86 e5       	ldi	r24, 0x56	; 86
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	24 e8       	ldi	r18, 0x84	; 132
     d90:	fc 01       	movw	r30, r24
     d92:	20 83       	st	Z, r18

	while(BIT_IS_CLEAR(TWCR,TWINT));
     d94:	00 00       	nop
     d96:	86 e5       	ldi	r24, 0x56	; 86
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	fc 01       	movw	r30, r24
     d9c:	80 81       	ld	r24, Z
     d9e:	88 23       	and	r24, r24
     da0:	d4 f7       	brge	.-12     	; 0xd96 <TWI_write+0x22>

}
     da2:	00 00       	nop
     da4:	0f 90       	pop	r0
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <TWI_read_with_ACK>:
uint8 TWI_read_with_ACK(void)
{
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
     db4:	86 e5       	ldi	r24, 0x56	; 86
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	24 ec       	ldi	r18, 0xC4	; 196
     dba:	fc 01       	movw	r30, r24
     dbc:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(TWCR,TWINT));
     dbe:	00 00       	nop
     dc0:	86 e5       	ldi	r24, 0x56	; 86
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	fc 01       	movw	r30, r24
     dc6:	80 81       	ld	r24, Z
     dc8:	88 23       	and	r24, r24
     dca:	d4 f7       	brge	.-12     	; 0xdc0 <TWI_read_with_ACK+0x14>
	//CLEAR flag before or after
	return TWDR;
     dcc:	83 e2       	ldi	r24, 0x23	; 35
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	fc 01       	movw	r30, r24
     dd2:	80 81       	ld	r24, Z
}
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	08 95       	ret

00000dda <TWI_read_with_NACK>:

uint8 TWI_read_with_NACK(void)
{
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN);
     de2:	86 e5       	ldi	r24, 0x56	; 86
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	24 e8       	ldi	r18, 0x84	; 132
     de8:	fc 01       	movw	r30, r24
     dea:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(TWCR,TWINT));
     dec:	00 00       	nop
     dee:	86 e5       	ldi	r24, 0x56	; 86
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	fc 01       	movw	r30, r24
     df4:	80 81       	ld	r24, Z
     df6:	88 23       	and	r24, r24
     df8:	d4 f7       	brge	.-12     	; 0xdee <TWI_read_with_NACK+0x14>
	//CLEAR flag before or after
	return TWDR;
     dfa:	83 e2       	ldi	r24, 0x23	; 35
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	fc 01       	movw	r30, r24
     e00:	80 81       	ld	r24, Z
}
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	08 95       	ret

00000e08 <TWI_getStatus>:
uint8 TWI_getStatus()
{
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
	return TWSR&0XF8;
     e10:	81 e2       	ldi	r24, 0x21	; 33
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	fc 01       	movw	r30, r24
     e16:	80 81       	ld	r24, Z
     e18:	88 7f       	andi	r24, 0xF8	; 248
}
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	08 95       	ret

00000e20 <__vector_19>:

#include"timer.h"
static volatile  void(*g_callBackPtr)(void)= NULL_PTR;
static volatile TIMER_configurationType * configPtr;
ISR(TIMER0_COMP_vect)
{
     e20:	1f 92       	push	r1
     e22:	0f 92       	push	r0
     e24:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e28:	0f 92       	push	r0
     e2a:	11 24       	eor	r1, r1
     e2c:	2f 93       	push	r18
     e2e:	3f 93       	push	r19
     e30:	4f 93       	push	r20
     e32:	5f 93       	push	r21
     e34:	6f 93       	push	r22
     e36:	7f 93       	push	r23
     e38:	8f 93       	push	r24
     e3a:	9f 93       	push	r25
     e3c:	af 93       	push	r26
     e3e:	bf 93       	push	r27
     e40:	ef 93       	push	r30
     e42:	ff 93       	push	r31
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
     e4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <g_callBackPtr>
     e50:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <g_callBackPtr+0x1>
     e54:	89 2b       	or	r24, r25
     e56:	31 f0       	breq	.+12     	; 0xe64 <__vector_19+0x44>
		g_callBackPtr();
     e58:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <g_callBackPtr>
     e5c:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <g_callBackPtr+0x1>
     e60:	fc 01       	movw	r30, r24
     e62:	09 95       	icall

}
     e64:	00 00       	nop
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	ff 91       	pop	r31
     e6c:	ef 91       	pop	r30
     e6e:	bf 91       	pop	r27
     e70:	af 91       	pop	r26
     e72:	9f 91       	pop	r25
     e74:	8f 91       	pop	r24
     e76:	7f 91       	pop	r23
     e78:	6f 91       	pop	r22
     e7a:	5f 91       	pop	r21
     e7c:	4f 91       	pop	r20
     e7e:	3f 91       	pop	r19
     e80:	2f 91       	pop	r18
     e82:	0f 90       	pop	r0
     e84:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e88:	0f 90       	pop	r0
     e8a:	1f 90       	pop	r1
     e8c:	18 95       	reti

00000e8e <__vector_9>:
ISR(TIMER0_OVF_vect)
{
     e8e:	1f 92       	push	r1
     e90:	0f 92       	push	r0
     e92:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e96:	0f 92       	push	r0
     e98:	11 24       	eor	r1, r1
     e9a:	2f 93       	push	r18
     e9c:	3f 93       	push	r19
     e9e:	4f 93       	push	r20
     ea0:	5f 93       	push	r21
     ea2:	6f 93       	push	r22
     ea4:	7f 93       	push	r23
     ea6:	8f 93       	push	r24
     ea8:	9f 93       	push	r25
     eaa:	af 93       	push	r26
     eac:	bf 93       	push	r27
     eae:	ef 93       	push	r30
     eb0:	ff 93       	push	r31
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
     eba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <g_callBackPtr>
     ebe:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <g_callBackPtr+0x1>
     ec2:	89 2b       	or	r24, r25
     ec4:	31 f0       	breq	.+12     	; 0xed2 <__vector_9+0x44>
		g_callBackPtr();
     ec6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <g_callBackPtr>
     eca:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <g_callBackPtr+0x1>
     ece:	fc 01       	movw	r30, r24
     ed0:	09 95       	icall

}
     ed2:	00 00       	nop
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	ff 91       	pop	r31
     eda:	ef 91       	pop	r30
     edc:	bf 91       	pop	r27
     ede:	af 91       	pop	r26
     ee0:	9f 91       	pop	r25
     ee2:	8f 91       	pop	r24
     ee4:	7f 91       	pop	r23
     ee6:	6f 91       	pop	r22
     ee8:	5f 91       	pop	r21
     eea:	4f 91       	pop	r20
     eec:	3f 91       	pop	r19
     eee:	2f 91       	pop	r18
     ef0:	0f 90       	pop	r0
     ef2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f04:	0f 92       	push	r0
     f06:	11 24       	eor	r1, r1
     f08:	2f 93       	push	r18
     f0a:	3f 93       	push	r19
     f0c:	4f 93       	push	r20
     f0e:	5f 93       	push	r21
     f10:	6f 93       	push	r22
     f12:	7f 93       	push	r23
     f14:	8f 93       	push	r24
     f16:	9f 93       	push	r25
     f18:	af 93       	push	r26
     f1a:	bf 93       	push	r27
     f1c:	ef 93       	push	r30
     f1e:	ff 93       	push	r31
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
     f28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <g_callBackPtr>
     f2c:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <g_callBackPtr+0x1>
     f30:	89 2b       	or	r24, r25
     f32:	31 f0       	breq	.+12     	; 0xf40 <__vector_6+0x44>
			g_callBackPtr();
     f34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <g_callBackPtr>
     f38:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <g_callBackPtr+0x1>
     f3c:	fc 01       	movw	r30, r24
     f3e:	09 95       	icall
}
     f40:	00 00       	nop
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	ff 91       	pop	r31
     f48:	ef 91       	pop	r30
     f4a:	bf 91       	pop	r27
     f4c:	af 91       	pop	r26
     f4e:	9f 91       	pop	r25
     f50:	8f 91       	pop	r24
     f52:	7f 91       	pop	r23
     f54:	6f 91       	pop	r22
     f56:	5f 91       	pop	r21
     f58:	4f 91       	pop	r20
     f5a:	3f 91       	pop	r19
     f5c:	2f 91       	pop	r18
     f5e:	0f 90       	pop	r0
     f60:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f64:	0f 90       	pop	r0
     f66:	1f 90       	pop	r1
     f68:	18 95       	reti

00000f6a <TIMER_init>:
void TIMER_init( TIMER_configurationType * config)
{configPtr=config;
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <TIMER_init+0x6>
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	9a 83       	std	Y+2, r25	; 0x02
     f76:	89 83       	std	Y+1, r24	; 0x01
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	9a 81       	ldd	r25, Y+2	; 0x02
     f7c:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <configPtr+0x1>
     f80:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <configPtr>
	if(config->timerNumber==0)
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	fc 01       	movw	r30, r24
     f8a:	80 81       	ld	r24, Z
     f8c:	88 23       	and	r24, r24
     f8e:	09 f0       	breq	.+2      	; 0xf92 <TIMER_init+0x28>
     f90:	22 c1       	rjmp	.+580    	; 0x11d6 <TIMER_init+0x26c>
	{
		TCCR0=0;
     f92:	83 e5       	ldi	r24, 0x53	; 83
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	fc 01       	movw	r30, r24
     f98:	10 82       	st	Z, r1
	switch(config->prescaler)
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	fc 01       	movw	r30, r24
     fa0:	85 89       	ldd	r24, Z+21	; 0x15
     fa2:	96 89       	ldd	r25, Z+22	; 0x16
     fa4:	80 34       	cpi	r24, 0x40	; 64
     fa6:	91 05       	cpc	r25, r1
     fa8:	c1 f0       	breq	.+48     	; 0xfda <TIMER_init+0x70>
     faa:	81 34       	cpi	r24, 0x41	; 65
     fac:	91 05       	cpc	r25, r1
     fae:	18 f4       	brcc	.+6      	; 0xfb6 <TIMER_init+0x4c>
     fb0:	08 97       	sbiw	r24, 0x08	; 8
     fb2:	49 f0       	breq	.+18     	; 0xfc6 <TIMER_init+0x5c>
     fb4:	30 c0       	rjmp	.+96     	; 0x1016 <TIMER_init+0xac>
     fb6:	81 15       	cp	r24, r1
     fb8:	f1 e0       	ldi	r31, 0x01	; 1
     fba:	9f 07       	cpc	r25, r31
     fbc:	c1 f0       	breq	.+48     	; 0xfee <TIMER_init+0x84>
     fbe:	81 15       	cp	r24, r1
     fc0:	94 40       	sbci	r25, 0x04	; 4
     fc2:	f9 f0       	breq	.+62     	; 0x1002 <TIMER_init+0x98>
     fc4:	28 c0       	rjmp	.+80     	; 0x1016 <TIMER_init+0xac>
	{
	case 8:
		TCCR0|=(1<<CS01);
     fc6:	83 e5       	ldi	r24, 0x53	; 83
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	23 e5       	ldi	r18, 0x53	; 83
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	f9 01       	movw	r30, r18
     fd0:	20 81       	ld	r18, Z
     fd2:	22 60       	ori	r18, 0x02	; 2
     fd4:	fc 01       	movw	r30, r24
     fd6:	20 83       	st	Z, r18
		break;
     fd8:	27 c0       	rjmp	.+78     	; 0x1028 <TIMER_init+0xbe>
	case 64:
			TCCR0|=(1<<CS00)|(1<<CS01);
     fda:	83 e5       	ldi	r24, 0x53	; 83
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	23 e5       	ldi	r18, 0x53	; 83
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	f9 01       	movw	r30, r18
     fe4:	20 81       	ld	r18, Z
     fe6:	23 60       	ori	r18, 0x03	; 3
     fe8:	fc 01       	movw	r30, r24
     fea:	20 83       	st	Z, r18
			break;
     fec:	1d c0       	rjmp	.+58     	; 0x1028 <TIMER_init+0xbe>
	case 256:
			TCCR0|=(1<<CS02);
     fee:	83 e5       	ldi	r24, 0x53	; 83
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	23 e5       	ldi	r18, 0x53	; 83
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	f9 01       	movw	r30, r18
     ff8:	20 81       	ld	r18, Z
     ffa:	24 60       	ori	r18, 0x04	; 4
     ffc:	fc 01       	movw	r30, r24
     ffe:	20 83       	st	Z, r18
			break;
    1000:	13 c0       	rjmp	.+38     	; 0x1028 <TIMER_init+0xbe>
	case 1024:
			TCCR0|=(1<<CS00)|(1<<CS02);
    1002:	83 e5       	ldi	r24, 0x53	; 83
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	23 e5       	ldi	r18, 0x53	; 83
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	f9 01       	movw	r30, r18
    100c:	20 81       	ld	r18, Z
    100e:	25 60       	ori	r18, 0x05	; 5
    1010:	fc 01       	movw	r30, r24
    1012:	20 83       	st	Z, r18
			break;
    1014:	09 c0       	rjmp	.+18     	; 0x1028 <TIMER_init+0xbe>
	default:
			TCCR0|=(1<<CS00);
    1016:	83 e5       	ldi	r24, 0x53	; 83
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	23 e5       	ldi	r18, 0x53	; 83
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	f9 01       	movw	r30, r18
    1020:	20 81       	ld	r18, Z
    1022:	21 60       	ori	r18, 0x01	; 1
    1024:	fc 01       	movw	r30, r24
    1026:	20 83       	st	Z, r18

		}

	if(!strcmp(config->mode,"compare"))
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	9a 81       	ldd	r25, Y+2	; 0x02
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	6e e6       	ldi	r22, 0x6E	; 110
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    1036:	89 2b       	or	r24, r25
    1038:	09 f0       	breq	.+2      	; 0x103c <TIMER_init+0xd2>
    103a:	62 c0       	rjmp	.+196    	; 0x1100 <TIMER_init+0x196>
	{	TCCR0|=(1<<FOC0)|(1<<WGM01);
    103c:	83 e5       	ldi	r24, 0x53	; 83
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	23 e5       	ldi	r18, 0x53	; 83
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	f9 01       	movw	r30, r18
    1046:	20 81       	ld	r18, Z
    1048:	28 68       	ori	r18, 0x88	; 136
    104a:	fc 01       	movw	r30, r24
    104c:	20 83       	st	Z, r18

		if(!strcmp(config->compareMatchMode,"toggle"))
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	9a 81       	ldd	r25, Y+2	; 0x02
    1052:	47 96       	adiw	r24, 0x17	; 23
    1054:	66 e7       	ldi	r22, 0x76	; 118
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    105c:	89 2b       	or	r24, r25
    105e:	99 f4       	brne	.+38     	; 0x1086 <TIMER_init+0x11c>
		{
		TCCR0|=(1<<COM00);
    1060:	83 e5       	ldi	r24, 0x53	; 83
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	23 e5       	ldi	r18, 0x53	; 83
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	f9 01       	movw	r30, r18
    106a:	20 81       	ld	r18, Z
    106c:	20 61       	ori	r18, 0x10	; 16
    106e:	fc 01       	movw	r30, r24
    1070:	20 83       	st	Z, r18
		SET_BIT(DDRB,3);
    1072:	87 e3       	ldi	r24, 0x37	; 55
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	27 e3       	ldi	r18, 0x37	; 55
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	f9 01       	movw	r30, r18
    107c:	20 81       	ld	r18, Z
    107e:	28 60       	ori	r18, 0x08	; 8
    1080:	fc 01       	movw	r30, r24
    1082:	20 83       	st	Z, r18
    1084:	37 c0       	rjmp	.+110    	; 0x10f4 <TIMER_init+0x18a>
		}
		else if(!strcmp(config->compareMatchMode,"clear"))
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	9a 81       	ldd	r25, Y+2	; 0x02
    108a:	47 96       	adiw	r24, 0x17	; 23
    108c:	6d e7       	ldi	r22, 0x7D	; 125
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    1094:	89 2b       	or	r24, r25
    1096:	99 f4       	brne	.+38     	; 0x10be <TIMER_init+0x154>
			{
			TCCR0|=(1<<COM01);
    1098:	83 e5       	ldi	r24, 0x53	; 83
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	23 e5       	ldi	r18, 0x53	; 83
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	f9 01       	movw	r30, r18
    10a2:	20 81       	ld	r18, Z
    10a4:	20 62       	ori	r18, 0x20	; 32
    10a6:	fc 01       	movw	r30, r24
    10a8:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    10aa:	87 e3       	ldi	r24, 0x37	; 55
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	27 e3       	ldi	r18, 0x37	; 55
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	f9 01       	movw	r30, r18
    10b4:	20 81       	ld	r18, Z
    10b6:	28 60       	ori	r18, 0x08	; 8
    10b8:	fc 01       	movw	r30, r24
    10ba:	20 83       	st	Z, r18
    10bc:	1b c0       	rjmp	.+54     	; 0x10f4 <TIMER_init+0x18a>

			}
		else if(!strcmp(config->compareMatchMode,"set"))
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	47 96       	adiw	r24, 0x17	; 23
    10c4:	63 e8       	ldi	r22, 0x83	; 131
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    10cc:	89 2b       	or	r24, r25
    10ce:	91 f4       	brne	.+36     	; 0x10f4 <TIMER_init+0x18a>
			{
			TCCR0|=(1<<COM01)|(1<<COM00);
    10d0:	83 e5       	ldi	r24, 0x53	; 83
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	23 e5       	ldi	r18, 0x53	; 83
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	f9 01       	movw	r30, r18
    10da:	20 81       	ld	r18, Z
    10dc:	20 63       	ori	r18, 0x30	; 48
    10de:	fc 01       	movw	r30, r24
    10e0:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    10e2:	87 e3       	ldi	r24, 0x37	; 55
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	27 e3       	ldi	r18, 0x37	; 55
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	f9 01       	movw	r30, r18
    10ec:	20 81       	ld	r18, Z
    10ee:	28 60       	ori	r18, 0x08	; 8
    10f0:	fc 01       	movw	r30, r24
    10f2:	20 83       	st	Z, r18

			}
		//enable interrupt
		TIMSK=(1<<OCIE0);
    10f4:	89 e5       	ldi	r24, 0x59	; 89
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	22 e0       	ldi	r18, 0x02	; 2
    10fa:	fc 01       	movw	r30, r24
    10fc:	20 83       	st	Z, r18
    10fe:	6b c0       	rjmp	.+214    	; 0x11d6 <TIMER_init+0x26c>

	}
	else if(!strcmp(config->mode,"normal"))
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	67 e8       	ldi	r22, 0x87	; 135
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    110e:	89 2b       	or	r24, r25
    1110:	79 f4       	brne	.+30     	; 0x1130 <TIMER_init+0x1c6>
	{
		TCCR0|=(1<<FOC0);
    1112:	83 e5       	ldi	r24, 0x53	; 83
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	23 e5       	ldi	r18, 0x53	; 83
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	f9 01       	movw	r30, r18
    111c:	20 81       	ld	r18, Z
    111e:	20 68       	ori	r18, 0x80	; 128
    1120:	fc 01       	movw	r30, r24
    1122:	20 83       	st	Z, r18
		TIMSK=(1<<TOIE0);
    1124:	89 e5       	ldi	r24, 0x59	; 89
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	21 e0       	ldi	r18, 0x01	; 1
    112a:	fc 01       	movw	r30, r24
    112c:	20 83       	st	Z, r18
    112e:	53 c0       	rjmp	.+166    	; 0x11d6 <TIMER_init+0x26c>
	}
	else if(!strcmp(config->mode,"pwm"))
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	6e e8       	ldi	r22, 0x8E	; 142
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    113e:	89 2b       	or	r24, r25
    1140:	09 f0       	breq	.+2      	; 0x1144 <TIMER_init+0x1da>
    1142:	49 c0       	rjmp	.+146    	; 0x11d6 <TIMER_init+0x26c>
	{
		TCCR0 |=(1<<WGM00)|(1<<WGM01);
    1144:	83 e5       	ldi	r24, 0x53	; 83
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	23 e5       	ldi	r18, 0x53	; 83
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	f9 01       	movw	r30, r18
    114e:	20 81       	ld	r18, Z
    1150:	28 64       	ori	r18, 0x48	; 72
    1152:	fc 01       	movw	r30, r24
    1154:	20 83       	st	Z, r18
		if(!strcmp(config->pwmMode,"inverting"))
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	9a 81       	ldd	r25, Y+2	; 0x02
    115a:	8b 96       	adiw	r24, 0x2b	; 43
    115c:	62 e9       	ldi	r22, 0x92	; 146
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    1164:	89 2b       	or	r24, r25
    1166:	e1 f4       	brne	.+56     	; 0x11a0 <TIMER_init+0x236>
				{
				TCCR0|=(1<<COM00);
    1168:	83 e5       	ldi	r24, 0x53	; 83
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	23 e5       	ldi	r18, 0x53	; 83
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	f9 01       	movw	r30, r18
    1172:	20 81       	ld	r18, Z
    1174:	20 61       	ori	r18, 0x10	; 16
    1176:	fc 01       	movw	r30, r24
    1178:	20 83       	st	Z, r18
				TCCR0|=(1<<COM01);
    117a:	83 e5       	ldi	r24, 0x53	; 83
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	23 e5       	ldi	r18, 0x53	; 83
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	f9 01       	movw	r30, r18
    1184:	20 81       	ld	r18, Z
    1186:	20 62       	ori	r18, 0x20	; 32
    1188:	fc 01       	movw	r30, r24
    118a:	20 83       	st	Z, r18
				SET_BIT(DDRB,3);
    118c:	87 e3       	ldi	r24, 0x37	; 55
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	27 e3       	ldi	r18, 0x37	; 55
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	f9 01       	movw	r30, r18
    1196:	20 81       	ld	r18, Z
    1198:	28 60       	ori	r18, 0x08	; 8
    119a:	fc 01       	movw	r30, r24
    119c:	20 83       	st	Z, r18
    119e:	1b c0       	rjmp	.+54     	; 0x11d6 <TIMER_init+0x26c>
				}
				else if(!strcmp(config->pwmMode,"non-inverting"))
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	9a 81       	ldd	r25, Y+2	; 0x02
    11a4:	8b 96       	adiw	r24, 0x2b	; 43
    11a6:	6c e9       	ldi	r22, 0x9C	; 156
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    11ae:	89 2b       	or	r24, r25
    11b0:	91 f4       	brne	.+36     	; 0x11d6 <TIMER_init+0x26c>
					{
					TCCR0|=(1<<COM01);
    11b2:	83 e5       	ldi	r24, 0x53	; 83
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	23 e5       	ldi	r18, 0x53	; 83
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	f9 01       	movw	r30, r18
    11bc:	20 81       	ld	r18, Z
    11be:	20 62       	ori	r18, 0x20	; 32
    11c0:	fc 01       	movw	r30, r24
    11c2:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    11c4:	87 e3       	ldi	r24, 0x37	; 55
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	27 e3       	ldi	r18, 0x37	; 55
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	f9 01       	movw	r30, r18
    11ce:	20 81       	ld	r18, Z
    11d0:	28 60       	ori	r18, 0x08	; 8
    11d2:	fc 01       	movw	r30, r24
    11d4:	20 83       	st	Z, r18

	}

	}
	///
	if(config->timerNumber==1)
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	9a 81       	ldd	r25, Y+2	; 0x02
    11da:	fc 01       	movw	r30, r24
    11dc:	80 81       	ld	r24, Z
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <TIMER_init+0x27a>
    11e2:	30 c1       	rjmp	.+608    	; 0x1444 <TIMER_init+0x4da>
		{
			TCCR1A=0;
    11e4:	8f e4       	ldi	r24, 0x4F	; 79
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	fc 01       	movw	r30, r24
    11ea:	10 82       	st	Z, r1
			TCCR1B=0;
    11ec:	8e e4       	ldi	r24, 0x4E	; 78
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	fc 01       	movw	r30, r24
    11f2:	10 82       	st	Z, r1

		switch(config->prescaler)
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	fc 01       	movw	r30, r24
    11fa:	85 89       	ldd	r24, Z+21	; 0x15
    11fc:	96 89       	ldd	r25, Z+22	; 0x16
    11fe:	80 34       	cpi	r24, 0x40	; 64
    1200:	91 05       	cpc	r25, r1
    1202:	c1 f0       	breq	.+48     	; 0x1234 <TIMER_init+0x2ca>
    1204:	81 34       	cpi	r24, 0x41	; 65
    1206:	91 05       	cpc	r25, r1
    1208:	18 f4       	brcc	.+6      	; 0x1210 <TIMER_init+0x2a6>
    120a:	08 97       	sbiw	r24, 0x08	; 8
    120c:	49 f0       	breq	.+18     	; 0x1220 <TIMER_init+0x2b6>
    120e:	30 c0       	rjmp	.+96     	; 0x1270 <TIMER_init+0x306>
    1210:	81 15       	cp	r24, r1
    1212:	f1 e0       	ldi	r31, 0x01	; 1
    1214:	9f 07       	cpc	r25, r31
    1216:	c1 f0       	breq	.+48     	; 0x1248 <TIMER_init+0x2de>
    1218:	81 15       	cp	r24, r1
    121a:	94 40       	sbci	r25, 0x04	; 4
    121c:	f9 f0       	breq	.+62     	; 0x125c <TIMER_init+0x2f2>
    121e:	28 c0       	rjmp	.+80     	; 0x1270 <TIMER_init+0x306>
		{
		case 8:
			TCCR1B|=(1<<CS11);
    1220:	8e e4       	ldi	r24, 0x4E	; 78
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	2e e4       	ldi	r18, 0x4E	; 78
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	f9 01       	movw	r30, r18
    122a:	20 81       	ld	r18, Z
    122c:	22 60       	ori	r18, 0x02	; 2
    122e:	fc 01       	movw	r30, r24
    1230:	20 83       	st	Z, r18
			break;
    1232:	27 c0       	rjmp	.+78     	; 0x1282 <TIMER_init+0x318>
		case 64:
				TCCR1B|=(1<<CS10)|(1<<CS11);
    1234:	8e e4       	ldi	r24, 0x4E	; 78
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	2e e4       	ldi	r18, 0x4E	; 78
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	f9 01       	movw	r30, r18
    123e:	20 81       	ld	r18, Z
    1240:	23 60       	ori	r18, 0x03	; 3
    1242:	fc 01       	movw	r30, r24
    1244:	20 83       	st	Z, r18
				break;
    1246:	1d c0       	rjmp	.+58     	; 0x1282 <TIMER_init+0x318>
		case 256:
				TCCR1B|=(1<<CS12);
    1248:	8e e4       	ldi	r24, 0x4E	; 78
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	2e e4       	ldi	r18, 0x4E	; 78
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	f9 01       	movw	r30, r18
    1252:	20 81       	ld	r18, Z
    1254:	24 60       	ori	r18, 0x04	; 4
    1256:	fc 01       	movw	r30, r24
    1258:	20 83       	st	Z, r18
				break;
    125a:	13 c0       	rjmp	.+38     	; 0x1282 <TIMER_init+0x318>
		case 1024:
				TCCR1B|=(1<<CS10)|(1<<CS12);
    125c:	8e e4       	ldi	r24, 0x4E	; 78
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	2e e4       	ldi	r18, 0x4E	; 78
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	f9 01       	movw	r30, r18
    1266:	20 81       	ld	r18, Z
    1268:	25 60       	ori	r18, 0x05	; 5
    126a:	fc 01       	movw	r30, r24
    126c:	20 83       	st	Z, r18
				break;
    126e:	09 c0       	rjmp	.+18     	; 0x1282 <TIMER_init+0x318>
		default:
				TCCR1B|=(1<<CS10);
    1270:	8e e4       	ldi	r24, 0x4E	; 78
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	2e e4       	ldi	r18, 0x4E	; 78
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	f9 01       	movw	r30, r18
    127a:	20 81       	ld	r18, Z
    127c:	21 60       	ori	r18, 0x01	; 1
    127e:	fc 01       	movw	r30, r24
    1280:	20 83       	st	Z, r18

			}
//FOR A
		if(!strcmp(config->mode,"compare"))
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	9a 81       	ldd	r25, Y+2	; 0x02
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	6e e6       	ldi	r22, 0x6E	; 110
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    1290:	89 2b       	or	r24, r25
    1292:	09 f0       	breq	.+2      	; 0x1296 <TIMER_init+0x32c>
    1294:	6b c0       	rjmp	.+214    	; 0x136c <TIMER_init+0x402>
		{	TCCR1A|=(1<<FOC1A);
    1296:	8f e4       	ldi	r24, 0x4F	; 79
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	2f e4       	ldi	r18, 0x4F	; 79
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	f9 01       	movw	r30, r18
    12a0:	20 81       	ld	r18, Z
    12a2:	28 60       	ori	r18, 0x08	; 8
    12a4:	fc 01       	movw	r30, r24
    12a6:	20 83       	st	Z, r18
			TCCR1B|=(1<<WGM12);
    12a8:	8e e4       	ldi	r24, 0x4E	; 78
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	2e e4       	ldi	r18, 0x4E	; 78
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	f9 01       	movw	r30, r18
    12b2:	20 81       	ld	r18, Z
    12b4:	28 60       	ori	r18, 0x08	; 8
    12b6:	fc 01       	movw	r30, r24
    12b8:	20 83       	st	Z, r18
			if(!strcmp(config->compareMatchMode,"toggle"))
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	9a 81       	ldd	r25, Y+2	; 0x02
    12be:	47 96       	adiw	r24, 0x17	; 23
    12c0:	66 e7       	ldi	r22, 0x76	; 118
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    12c8:	89 2b       	or	r24, r25
    12ca:	99 f4       	brne	.+38     	; 0x12f2 <TIMER_init+0x388>
			{
			TCCR1A|=(1<<COM1A0);
    12cc:	8f e4       	ldi	r24, 0x4F	; 79
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	2f e4       	ldi	r18, 0x4F	; 79
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	f9 01       	movw	r30, r18
    12d6:	20 81       	ld	r18, Z
    12d8:	20 64       	ori	r18, 0x40	; 64
    12da:	fc 01       	movw	r30, r24
    12dc:	20 83       	st	Z, r18
			SET_BIT(DDRD,5);
    12de:	81 e3       	ldi	r24, 0x31	; 49
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	21 e3       	ldi	r18, 0x31	; 49
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	f9 01       	movw	r30, r18
    12e8:	20 81       	ld	r18, Z
    12ea:	20 62       	ori	r18, 0x20	; 32
    12ec:	fc 01       	movw	r30, r24
    12ee:	20 83       	st	Z, r18
    12f0:	37 c0       	rjmp	.+110    	; 0x1360 <TIMER_init+0x3f6>
			}
			else if(!strcmp(config->compareMatchMode,"clear"))
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	9a 81       	ldd	r25, Y+2	; 0x02
    12f6:	47 96       	adiw	r24, 0x17	; 23
    12f8:	6d e7       	ldi	r22, 0x7D	; 125
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    1300:	89 2b       	or	r24, r25
    1302:	99 f4       	brne	.+38     	; 0x132a <TIMER_init+0x3c0>
				{
				TCCR1A|=(1<<COM1A1);
    1304:	8f e4       	ldi	r24, 0x4F	; 79
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	2f e4       	ldi	r18, 0x4F	; 79
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	f9 01       	movw	r30, r18
    130e:	20 81       	ld	r18, Z
    1310:	20 68       	ori	r18, 0x80	; 128
    1312:	fc 01       	movw	r30, r24
    1314:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    1316:	81 e3       	ldi	r24, 0x31	; 49
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	21 e3       	ldi	r18, 0x31	; 49
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	f9 01       	movw	r30, r18
    1320:	20 81       	ld	r18, Z
    1322:	20 62       	ori	r18, 0x20	; 32
    1324:	fc 01       	movw	r30, r24
    1326:	20 83       	st	Z, r18
    1328:	1b c0       	rjmp	.+54     	; 0x1360 <TIMER_init+0x3f6>

				}
			else if(!strcmp(config->compareMatchMode,"set"))
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	9a 81       	ldd	r25, Y+2	; 0x02
    132e:	47 96       	adiw	r24, 0x17	; 23
    1330:	63 e8       	ldi	r22, 0x83	; 131
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    1338:	89 2b       	or	r24, r25
    133a:	91 f4       	brne	.+36     	; 0x1360 <TIMER_init+0x3f6>
				{
				TCCR1A|=(1<<COM1A1)|(1<<COM1A0);
    133c:	8f e4       	ldi	r24, 0x4F	; 79
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	2f e4       	ldi	r18, 0x4F	; 79
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	f9 01       	movw	r30, r18
    1346:	20 81       	ld	r18, Z
    1348:	20 6c       	ori	r18, 0xC0	; 192
    134a:	fc 01       	movw	r30, r24
    134c:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    134e:	81 e3       	ldi	r24, 0x31	; 49
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	21 e3       	ldi	r18, 0x31	; 49
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	f9 01       	movw	r30, r18
    1358:	20 81       	ld	r18, Z
    135a:	20 62       	ori	r18, 0x20	; 32
    135c:	fc 01       	movw	r30, r24
    135e:	20 83       	st	Z, r18

				}
			//enable interrupt
			TIMSK=(1<<OCIE1A);
    1360:	89 e5       	ldi	r24, 0x59	; 89
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	20 e1       	ldi	r18, 0x10	; 16
    1366:	fc 01       	movw	r30, r24
    1368:	20 83       	st	Z, r18
    136a:	6b c0       	rjmp	.+214    	; 0x1442 <TIMER_init+0x4d8>

		}
		else if(!strcmp(config->mode,"normal"))
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	9a 81       	ldd	r25, Y+2	; 0x02
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	67 e8       	ldi	r22, 0x87	; 135
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    137a:	89 2b       	or	r24, r25
    137c:	79 f4       	brne	.+30     	; 0x139c <TIMER_init+0x432>
		{
			TCCR0|=(1<<FOC0);
    137e:	83 e5       	ldi	r24, 0x53	; 83
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	23 e5       	ldi	r18, 0x53	; 83
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	f9 01       	movw	r30, r18
    1388:	20 81       	ld	r18, Z
    138a:	20 68       	ori	r18, 0x80	; 128
    138c:	fc 01       	movw	r30, r24
    138e:	20 83       	st	Z, r18
			TIMSK=(1<<TOIE0);
    1390:	89 e5       	ldi	r24, 0x59	; 89
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	21 e0       	ldi	r18, 0x01	; 1
    1396:	fc 01       	movw	r30, r24
    1398:	20 83       	st	Z, r18
    139a:	53 c0       	rjmp	.+166    	; 0x1442 <TIMER_init+0x4d8>
		}
		else if(!strcmp(config->mode,"pwm"))
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	9a 81       	ldd	r25, Y+2	; 0x02
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	6e e8       	ldi	r22, 0x8E	; 142
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    13aa:	89 2b       	or	r24, r25
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <TIMER_init+0x446>
    13ae:	49 c0       	rjmp	.+146    	; 0x1442 <TIMER_init+0x4d8>
		{
			TCCR0 |=(1<<WGM00)|(1<<WGM01);
    13b0:	83 e5       	ldi	r24, 0x53	; 83
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	23 e5       	ldi	r18, 0x53	; 83
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	f9 01       	movw	r30, r18
    13ba:	20 81       	ld	r18, Z
    13bc:	28 64       	ori	r18, 0x48	; 72
    13be:	fc 01       	movw	r30, r24
    13c0:	20 83       	st	Z, r18
			if(!strcmp(config->pwmMode,"inverting"))
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	9a 81       	ldd	r25, Y+2	; 0x02
    13c6:	8b 96       	adiw	r24, 0x2b	; 43
    13c8:	62 e9       	ldi	r22, 0x92	; 146
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    13d0:	89 2b       	or	r24, r25
    13d2:	e1 f4       	brne	.+56     	; 0x140c <TIMER_init+0x4a2>
					{
					TCCR0|=(1<<COM00);
    13d4:	83 e5       	ldi	r24, 0x53	; 83
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	23 e5       	ldi	r18, 0x53	; 83
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	f9 01       	movw	r30, r18
    13de:	20 81       	ld	r18, Z
    13e0:	20 61       	ori	r18, 0x10	; 16
    13e2:	fc 01       	movw	r30, r24
    13e4:	20 83       	st	Z, r18
					TCCR0|=(1<<COM01);
    13e6:	83 e5       	ldi	r24, 0x53	; 83
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	23 e5       	ldi	r18, 0x53	; 83
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	f9 01       	movw	r30, r18
    13f0:	20 81       	ld	r18, Z
    13f2:	20 62       	ori	r18, 0x20	; 32
    13f4:	fc 01       	movw	r30, r24
    13f6:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    13f8:	87 e3       	ldi	r24, 0x37	; 55
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	27 e3       	ldi	r18, 0x37	; 55
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	f9 01       	movw	r30, r18
    1402:	20 81       	ld	r18, Z
    1404:	28 60       	ori	r18, 0x08	; 8
    1406:	fc 01       	movw	r30, r24
    1408:	20 83       	st	Z, r18
    140a:	1b c0       	rjmp	.+54     	; 0x1442 <TIMER_init+0x4d8>
					}
					else if(!strcmp(config->pwmMode,"non-inverting"))
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
    1410:	8b 96       	adiw	r24, 0x2b	; 43
    1412:	6c e9       	ldi	r22, 0x9C	; 156
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    141a:	89 2b       	or	r24, r25
    141c:	91 f4       	brne	.+36     	; 0x1442 <TIMER_init+0x4d8>
						{
						TCCR0|=(1<<COM01);
    141e:	83 e5       	ldi	r24, 0x53	; 83
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	23 e5       	ldi	r18, 0x53	; 83
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	f9 01       	movw	r30, r18
    1428:	20 81       	ld	r18, Z
    142a:	20 62       	ori	r18, 0x20	; 32
    142c:	fc 01       	movw	r30, r24
    142e:	20 83       	st	Z, r18
						SET_BIT(DDRB,3);
    1430:	87 e3       	ldi	r24, 0x37	; 55
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	27 e3       	ldi	r18, 0x37	; 55
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	f9 01       	movw	r30, r18
    143a:	20 81       	ld	r18, Z
    143c:	28 60       	ori	r18, 0x08	; 8
    143e:	fc 01       	movw	r30, r24
    1440:	20 83       	st	Z, r18
	//TCCR0=(1<<FOC0)|(1<<COM00)|(1<<CS00)|(1<<CS02);


	//enable

	sei();
    1442:	78 94       	sei
}
}
    1444:	00 00       	nop
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	08 95       	ret

00001450 <TIMER_setCompare>:

void TIMER_setCompare(uint16 compareValue)
{
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	00 d0       	rcall	.+0      	; 0x1456 <TIMER_setCompare+0x6>
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01
	switch (configPtr->timerNumber)
    145e:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <configPtr>
    1462:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <configPtr+0x1>
    1466:	fc 01       	movw	r30, r24
    1468:	80 81       	ld	r24, Z
    146a:	88 2f       	mov	r24, r24
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	19 f0       	breq	.+6      	; 0x1478 <TIMER_setCompare+0x28>
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	59 f0       	breq	.+22     	; 0x148c <TIMER_setCompare+0x3c>
	case 1:
		TCNT1=0;
		OCR1A=compareValue;
		break;
	}
}
    1476:	17 c0       	rjmp	.+46     	; 0x14a6 <TIMER_setCompare+0x56>
void TIMER_setCompare(uint16 compareValue)
{
	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=0;
    1478:	82 e5       	ldi	r24, 0x52	; 82
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	fc 01       	movw	r30, r24
    147e:	10 82       	st	Z, r1
		OCR0=compareValue;
    1480:	8c e5       	ldi	r24, 0x5C	; 92
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	29 81       	ldd	r18, Y+1	; 0x01
    1486:	fc 01       	movw	r30, r24
    1488:	20 83       	st	Z, r18
		break;
    148a:	0d c0       	rjmp	.+26     	; 0x14a6 <TIMER_setCompare+0x56>
	case 1:
		TCNT1=0;
    148c:	8c e4       	ldi	r24, 0x4C	; 76
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	fc 01       	movw	r30, r24
    1492:	11 82       	std	Z+1, r1	; 0x01
    1494:	10 82       	st	Z, r1
		OCR1A=compareValue;
    1496:	8a e4       	ldi	r24, 0x4A	; 74
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	29 81       	ldd	r18, Y+1	; 0x01
    149c:	3a 81       	ldd	r19, Y+2	; 0x02
    149e:	fc 01       	movw	r30, r24
    14a0:	31 83       	std	Z+1, r19	; 0x01
    14a2:	20 83       	st	Z, r18
		break;
    14a4:	00 00       	nop
	}
}
    14a6:	00 00       	nop
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	08 95       	ret

000014b2 <TIMER_setNormal>:
void TIMER_setNormal(uint8 initValue)

{
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	1f 92       	push	r1
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	89 83       	std	Y+1, r24	; 0x01

	switch (configPtr->timerNumber)
    14be:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <configPtr>
    14c2:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <configPtr+0x1>
    14c6:	fc 01       	movw	r30, r24
    14c8:	80 81       	ld	r24, Z
    14ca:	88 2f       	mov	r24, r24
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	19 f0       	breq	.+6      	; 0x14d8 <TIMER_setNormal+0x26>
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	39 f0       	breq	.+14     	; 0x14e4 <TIMER_setNormal+0x32>
		TCNT1=initValue;
		break;


}
}
    14d6:	0f c0       	rjmp	.+30     	; 0x14f6 <TIMER_setNormal+0x44>
{

	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=initValue;
    14d8:	82 e5       	ldi	r24, 0x52	; 82
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	29 81       	ldd	r18, Y+1	; 0x01
    14de:	fc 01       	movw	r30, r24
    14e0:	20 83       	st	Z, r18
		break;
    14e2:	09 c0       	rjmp	.+18     	; 0x14f6 <TIMER_setNormal+0x44>
	case 1:
		TCNT1=initValue;
    14e4:	8c e4       	ldi	r24, 0x4C	; 76
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	29 81       	ldd	r18, Y+1	; 0x01
    14ea:	22 2f       	mov	r18, r18
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	fc 01       	movw	r30, r24
    14f0:	31 83       	std	Z+1, r19	; 0x01
    14f2:	20 83       	st	Z, r18
		break;
    14f4:	00 00       	nop


}
}
    14f6:	00 00       	nop
    14f8:	0f 90       	pop	r0
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	08 95       	ret

00001500 <TIMER_setpwm>:
void TIMER_setpwm(uint8 dutyCycle)
{
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	1f 92       	push	r1
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
    150c:	82 e5       	ldi	r24, 0x52	; 82
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	fc 01       	movw	r30, r24
    1512:	10 82       	st	Z, r1
	OCR0=dutyCycle;
    1514:	8c e5       	ldi	r24, 0x5C	; 92
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	29 81       	ldd	r18, Y+1	; 0x01
    151a:	fc 01       	movw	r30, r24
    151c:	20 83       	st	Z, r18
}
    151e:	00 00       	nop
    1520:	0f 90       	pop	r0
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	08 95       	ret

00001528 <TIMER_setCallBackPtr>:
void TIMER_setCallBackPtr(void(*a_ptr)(void))
{
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	00 d0       	rcall	.+0      	; 0x152e <TIMER_setCallBackPtr+0x6>
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	89 83       	std	Y+1, r24	; 0x01
g_callBackPtr=a_ptr;
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	9a 81       	ldd	r25, Y+2	; 0x02
    153a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <g_callBackPtr+0x1>
    153e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <g_callBackPtr>
}
    1542:	00 00       	nop
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	08 95       	ret

0000154e <TIMER_stop>:
void TIMER_stop()
{
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
	switch (configPtr->timerNumber)
    1556:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <configPtr>
    155a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <configPtr+0x1>
    155e:	fc 01       	movw	r30, r24
    1560:	80 81       	ld	r24, Z
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	89 2b       	or	r24, r25
    1568:	51 f4       	brne	.+20     	; 0x157e <TIMER_stop+0x30>

{
case 0:
	TCCR0&=~(1<<CS00)&~(1<<CS01)&~(1<<CS02);
    156a:	83 e5       	ldi	r24, 0x53	; 83
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	23 e5       	ldi	r18, 0x53	; 83
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	f9 01       	movw	r30, r18
    1574:	20 81       	ld	r18, Z
    1576:	28 7f       	andi	r18, 0xF8	; 248
    1578:	fc 01       	movw	r30, r24
    157a:	20 83       	st	Z, r18
	break;
    157c:	01 c0       	rjmp	.+2      	; 0x1580 <TIMER_stop+0x32>
case 1:
	break;
    157e:	00 00       	nop

}
}
    1580:	00 00       	nop
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	08 95       	ret

00001588 <UART_init>:
 *      Author: hesham
 */
#include"uart.h"

void UART_init(UART_configurationType * config)
{UCSRA=0;
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	00 d0       	rcall	.+0      	; 0x1592 <UART_init+0xa>
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	9a 83       	std	Y+2, r25	; 0x02
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	8b e2       	ldi	r24, 0x2B	; 43
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	fc 01       	movw	r30, r24
    15a0:	10 82       	st	Z, r1
UCSRB=0;
    15a2:	8a e2       	ldi	r24, 0x2A	; 42
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	fc 01       	movw	r30, r24
    15a8:	10 82       	st	Z, r1
UCSRC=0;
    15aa:	80 e4       	ldi	r24, 0x40	; 64
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	fc 01       	movw	r30, r24
    15b0:	10 82       	st	Z, r1
/* enables */
	if(!strcmp(config->mode,"normal"))
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	9a 81       	ldd	r25, Y+2	; 0x02
    15b6:	05 96       	adiw	r24, 0x05	; 5
    15b8:	6a ea       	ldi	r22, 0xAA	; 170
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    15c0:	89 2b       	or	r24, r25
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <UART_init+0x3e>
    15c4:	60 c0       	rjmp	.+192    	; 0x1686 <UART_init+0xfe>
	{
CLEAR_BIT(UCSRA,U2X);
    15c6:	8b e2       	ldi	r24, 0x2B	; 43
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	2b e2       	ldi	r18, 0x2B	; 43
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	f9 01       	movw	r30, r18
    15d0:	20 81       	ld	r18, Z
    15d2:	2d 7f       	andi	r18, 0xFD	; 253
    15d4:	fc 01       	movw	r30, r24
    15d6:	20 83       	st	Z, r18
UBRRL=((F_CPU /(16*config->buadRate))-1);
    15d8:	09 e2       	ldi	r16, 0x29	; 41
    15da:	10 e0       	ldi	r17, 0x00	; 0
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	9a 81       	ldd	r25, Y+2	; 0x02
    15e0:	fc 01       	movw	r30, r24
    15e2:	81 81       	ldd	r24, Z+1	; 0x01
    15e4:	92 81       	ldd	r25, Z+2	; 0x02
    15e6:	a3 81       	ldd	r26, Z+3	; 0x03
    15e8:	b4 81       	ldd	r27, Z+4	; 0x04
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	aa 1f       	adc	r26, r26
    15f0:	bb 1f       	adc	r27, r27
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	aa 1f       	adc	r26, r26
    15f8:	bb 1f       	adc	r27, r27
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	aa 1f       	adc	r26, r26
    1600:	bb 1f       	adc	r27, r27
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	aa 1f       	adc	r26, r26
    1608:	bb 1f       	adc	r27, r27
    160a:	9c 01       	movw	r18, r24
    160c:	ad 01       	movw	r20, r26
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	92 e1       	ldi	r25, 0x12	; 18
    1612:	aa e7       	ldi	r26, 0x7A	; 122
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__udivmodsi4>
    161e:	da 01       	movw	r26, r20
    1620:	c9 01       	movw	r24, r18
    1622:	81 50       	subi	r24, 0x01	; 1
    1624:	f8 01       	movw	r30, r16
    1626:	80 83       	st	Z, r24
UBRRH=((F_CPU /(16*config->buadRate))-1)>>8;
    1628:	00 e4       	ldi	r16, 0x40	; 64
    162a:	10 e0       	ldi	r17, 0x00	; 0
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	9a 81       	ldd	r25, Y+2	; 0x02
    1630:	fc 01       	movw	r30, r24
    1632:	81 81       	ldd	r24, Z+1	; 0x01
    1634:	92 81       	ldd	r25, Z+2	; 0x02
    1636:	a3 81       	ldd	r26, Z+3	; 0x03
    1638:	b4 81       	ldd	r27, Z+4	; 0x04
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	aa 1f       	adc	r26, r26
    1640:	bb 1f       	adc	r27, r27
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	aa 1f       	adc	r26, r26
    1648:	bb 1f       	adc	r27, r27
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	aa 1f       	adc	r26, r26
    1650:	bb 1f       	adc	r27, r27
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	aa 1f       	adc	r26, r26
    1658:	bb 1f       	adc	r27, r27
    165a:	9c 01       	movw	r18, r24
    165c:	ad 01       	movw	r20, r26
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	92 e1       	ldi	r25, 0x12	; 18
    1662:	aa e7       	ldi	r26, 0x7A	; 122
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	bc 01       	movw	r22, r24
    1668:	cd 01       	movw	r24, r26
    166a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__udivmodsi4>
    166e:	da 01       	movw	r26, r20
    1670:	c9 01       	movw	r24, r18
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	a1 09       	sbc	r26, r1
    1676:	b1 09       	sbc	r27, r1
    1678:	89 2f       	mov	r24, r25
    167a:	9a 2f       	mov	r25, r26
    167c:	ab 2f       	mov	r26, r27
    167e:	bb 27       	eor	r27, r27
    1680:	f8 01       	movw	r30, r16
    1682:	80 83       	st	Z, r24
    1684:	61 c0       	rjmp	.+194    	; 0x1748 <UART_init+0x1c0>


	}
	else if(!strcmp(config->mode,"double speed"))
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	9a 81       	ldd	r25, Y+2	; 0x02
    168a:	05 96       	adiw	r24, 0x05	; 5
    168c:	61 eb       	ldi	r22, 0xB1	; 177
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	0e 94 c8 10 	call	0x2190	; 0x2190 <strcmp>
    1694:	89 2b       	or	r24, r25
    1696:	09 f0       	breq	.+2      	; 0x169a <UART_init+0x112>
    1698:	57 c0       	rjmp	.+174    	; 0x1748 <UART_init+0x1c0>
	{
		SET_BIT(UCSRA,U2X);
    169a:	8b e2       	ldi	r24, 0x2B	; 43
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	2b e2       	ldi	r18, 0x2B	; 43
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	f9 01       	movw	r30, r18
    16a4:	20 81       	ld	r18, Z
    16a6:	22 60       	ori	r18, 0x02	; 2
    16a8:	fc 01       	movw	r30, r24
    16aa:	20 83       	st	Z, r18
		UBRRL=((F_CPU /(8*config->buadRate))-1);
    16ac:	09 e2       	ldi	r16, 0x29	; 41
    16ae:	10 e0       	ldi	r17, 0x00	; 0
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	9a 81       	ldd	r25, Y+2	; 0x02
    16b4:	fc 01       	movw	r30, r24
    16b6:	81 81       	ldd	r24, Z+1	; 0x01
    16b8:	92 81       	ldd	r25, Z+2	; 0x02
    16ba:	a3 81       	ldd	r26, Z+3	; 0x03
    16bc:	b4 81       	ldd	r27, Z+4	; 0x04
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	aa 1f       	adc	r26, r26
    16c4:	bb 1f       	adc	r27, r27
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	aa 1f       	adc	r26, r26
    16cc:	bb 1f       	adc	r27, r27
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	aa 1f       	adc	r26, r26
    16d4:	bb 1f       	adc	r27, r27
    16d6:	9c 01       	movw	r18, r24
    16d8:	ad 01       	movw	r20, r26
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	92 e1       	ldi	r25, 0x12	; 18
    16de:	aa e7       	ldi	r26, 0x7A	; 122
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	bc 01       	movw	r22, r24
    16e4:	cd 01       	movw	r24, r26
    16e6:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__udivmodsi4>
    16ea:	da 01       	movw	r26, r20
    16ec:	c9 01       	movw	r24, r18
    16ee:	81 50       	subi	r24, 0x01	; 1
    16f0:	f8 01       	movw	r30, r16
    16f2:	80 83       	st	Z, r24
		UBRRH=((F_CPU /(8*config->buadRate))-1)>>8;
    16f4:	00 e4       	ldi	r16, 0x40	; 64
    16f6:	10 e0       	ldi	r17, 0x00	; 0
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	9a 81       	ldd	r25, Y+2	; 0x02
    16fc:	fc 01       	movw	r30, r24
    16fe:	81 81       	ldd	r24, Z+1	; 0x01
    1700:	92 81       	ldd	r25, Z+2	; 0x02
    1702:	a3 81       	ldd	r26, Z+3	; 0x03
    1704:	b4 81       	ldd	r27, Z+4	; 0x04
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	aa 1f       	adc	r26, r26
    170c:	bb 1f       	adc	r27, r27
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	aa 1f       	adc	r26, r26
    1714:	bb 1f       	adc	r27, r27
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	aa 1f       	adc	r26, r26
    171c:	bb 1f       	adc	r27, r27
    171e:	9c 01       	movw	r18, r24
    1720:	ad 01       	movw	r20, r26
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	92 e1       	ldi	r25, 0x12	; 18
    1726:	aa e7       	ldi	r26, 0x7A	; 122
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__udivmodsi4>
    1732:	da 01       	movw	r26, r20
    1734:	c9 01       	movw	r24, r18
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	a1 09       	sbc	r26, r1
    173a:	b1 09       	sbc	r27, r1
    173c:	89 2f       	mov	r24, r25
    173e:	9a 2f       	mov	r25, r26
    1740:	ab 2f       	mov	r26, r27
    1742:	bb 27       	eor	r27, r27
    1744:	f8 01       	movw	r30, r16
    1746:	80 83       	st	Z, r24

	}


/* TO enable writing on Register UCSRC (used for define the frame )as it has the same address with UBRR register */
SET_BIT(UCSRC,URSEL);
    1748:	80 e4       	ldi	r24, 0x40	; 64
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	20 e4       	ldi	r18, 0x40	; 64
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	f9 01       	movw	r30, r18
    1752:	20 81       	ld	r18, Z
    1754:	20 68       	ori	r18, 0x80	; 128
    1756:	fc 01       	movw	r30, r24
    1758:	20 83       	st	Z, r18
/* the UART frame parameters*/
/* character size */
//SET_BIT(UCSRC,UCSZ0);
//SET_BIT(UCSRC,UCSZ1);
switch(config->character_size)
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	9a 81       	ldd	r25, Y+2	; 0x02
    175e:	fc 01       	movw	r30, r24
    1760:	80 81       	ld	r24, Z
    1762:	88 2f       	mov	r24, r24
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	86 30       	cpi	r24, 0x06	; 6
    1768:	91 05       	cpc	r25, r1
    176a:	f9 f0       	breq	.+62     	; 0x17aa <UART_init+0x222>
    176c:	87 30       	cpi	r24, 0x07	; 7
    176e:	91 05       	cpc	r25, r1
    1770:	1c f4       	brge	.+6      	; 0x1778 <UART_init+0x1f0>
    1772:	05 97       	sbiw	r24, 0x05	; 5
    1774:	39 f0       	breq	.+14     	; 0x1784 <UART_init+0x1fc>
    1776:	5b c0       	rjmp	.+182    	; 0x182e <UART_init+0x2a6>
    1778:	87 30       	cpi	r24, 0x07	; 7
    177a:	91 05       	cpc	r25, r1
    177c:	49 f1       	breq	.+82     	; 0x17d0 <UART_init+0x248>
    177e:	09 97       	sbiw	r24, 0x09	; 9
    1780:	d1 f1       	breq	.+116    	; 0x17f6 <UART_init+0x26e>
    1782:	55 c0       	rjmp	.+170    	; 0x182e <UART_init+0x2a6>
{
case 5:
	CLEAR_BIT(UCSRC,UCSZ0);
    1784:	80 e4       	ldi	r24, 0x40	; 64
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	20 e4       	ldi	r18, 0x40	; 64
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	f9 01       	movw	r30, r18
    178e:	20 81       	ld	r18, Z
    1790:	2d 7f       	andi	r18, 0xFD	; 253
    1792:	fc 01       	movw	r30, r24
    1794:	20 83       	st	Z, r18
	CLEAR_BIT(UCSRC,UCSZ1);
    1796:	80 e4       	ldi	r24, 0x40	; 64
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	20 e4       	ldi	r18, 0x40	; 64
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	f9 01       	movw	r30, r18
    17a0:	20 81       	ld	r18, Z
    17a2:	2b 7f       	andi	r18, 0xFB	; 251
    17a4:	fc 01       	movw	r30, r24
    17a6:	20 83       	st	Z, r18
	break;
    17a8:	54 c0       	rjmp	.+168    	; 0x1852 <UART_init+0x2ca>

case 6:
	CLEAR_BIT(UCSRC,UCSZ0);
    17aa:	80 e4       	ldi	r24, 0x40	; 64
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	20 e4       	ldi	r18, 0x40	; 64
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	f9 01       	movw	r30, r18
    17b4:	20 81       	ld	r18, Z
    17b6:	2d 7f       	andi	r18, 0xFD	; 253
    17b8:	fc 01       	movw	r30, r24
    17ba:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    17bc:	80 e4       	ldi	r24, 0x40	; 64
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	20 e4       	ldi	r18, 0x40	; 64
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	f9 01       	movw	r30, r18
    17c6:	20 81       	ld	r18, Z
    17c8:	24 60       	ori	r18, 0x04	; 4
    17ca:	fc 01       	movw	r30, r24
    17cc:	20 83       	st	Z, r18
	break;
    17ce:	41 c0       	rjmp	.+130    	; 0x1852 <UART_init+0x2ca>
case 7:
	CLEAR_BIT(UCSRC,UCSZ1);
    17d0:	80 e4       	ldi	r24, 0x40	; 64
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	20 e4       	ldi	r18, 0x40	; 64
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	f9 01       	movw	r30, r18
    17da:	20 81       	ld	r18, Z
    17dc:	2b 7f       	andi	r18, 0xFB	; 251
    17de:	fc 01       	movw	r30, r24
    17e0:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ0);
    17e2:	80 e4       	ldi	r24, 0x40	; 64
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	20 e4       	ldi	r18, 0x40	; 64
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	f9 01       	movw	r30, r18
    17ec:	20 81       	ld	r18, Z
    17ee:	22 60       	ori	r18, 0x02	; 2
    17f0:	fc 01       	movw	r30, r24
    17f2:	20 83       	st	Z, r18
		break;
    17f4:	2e c0       	rjmp	.+92     	; 0x1852 <UART_init+0x2ca>
case 9:
	SET_BIT(UCSRC,UCSZ0);
    17f6:	80 e4       	ldi	r24, 0x40	; 64
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	20 e4       	ldi	r18, 0x40	; 64
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	f9 01       	movw	r30, r18
    1800:	20 81       	ld	r18, Z
    1802:	22 60       	ori	r18, 0x02	; 2
    1804:	fc 01       	movw	r30, r24
    1806:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    1808:	80 e4       	ldi	r24, 0x40	; 64
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	20 e4       	ldi	r18, 0x40	; 64
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	f9 01       	movw	r30, r18
    1812:	20 81       	ld	r18, Z
    1814:	24 60       	ori	r18, 0x04	; 4
    1816:	fc 01       	movw	r30, r24
    1818:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ2);
    181a:	80 e4       	ldi	r24, 0x40	; 64
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	20 e4       	ldi	r18, 0x40	; 64
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	f9 01       	movw	r30, r18
    1824:	20 81       	ld	r18, Z
    1826:	24 60       	ori	r18, 0x04	; 4
    1828:	fc 01       	movw	r30, r24
    182a:	20 83       	st	Z, r18


	break;
    182c:	12 c0       	rjmp	.+36     	; 0x1852 <UART_init+0x2ca>

default :
	//SET_BIT(UCSRC,URSEL);
	SET_BIT(UCSRC,UCSZ0);
    182e:	80 e4       	ldi	r24, 0x40	; 64
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	20 e4       	ldi	r18, 0x40	; 64
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	f9 01       	movw	r30, r18
    1838:	20 81       	ld	r18, Z
    183a:	22 60       	ori	r18, 0x02	; 2
    183c:	fc 01       	movw	r30, r24
    183e:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    1840:	80 e4       	ldi	r24, 0x40	; 64
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	20 e4       	ldi	r18, 0x40	; 64
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	f9 01       	movw	r30, r18
    184a:	20 81       	ld	r18, Z
    184c:	24 60       	ori	r18, 0x04	; 4
    184e:	fc 01       	movw	r30, r24
    1850:	20 83       	st	Z, r18
/* write on UBRR instead of ucsrc register */
//CLEAR_BIT(UCSRC,URSEL);//---------------------------------------<<<<
/* writing the baud rate prescaler */
//UBRRL=12;
//UBRRH=12>>8;
SET_BIT(UCSRB,RXEN);
    1852:	8a e2       	ldi	r24, 0x2A	; 42
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	2a e2       	ldi	r18, 0x2A	; 42
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	f9 01       	movw	r30, r18
    185c:	20 81       	ld	r18, Z
    185e:	20 61       	ori	r18, 0x10	; 16
    1860:	fc 01       	movw	r30, r24
    1862:	20 83       	st	Z, r18
SET_BIT(UCSRB,TXEN);
    1864:	8a e2       	ldi	r24, 0x2A	; 42
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	2a e2       	ldi	r18, 0x2A	; 42
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	f9 01       	movw	r30, r18
    186e:	20 81       	ld	r18, Z
    1870:	28 60       	ori	r18, 0x08	; 8
    1872:	fc 01       	movw	r30, r24
    1874:	20 83       	st	Z, r18
}
    1876:	00 00       	nop
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	08 95       	ret

00001886 <UART_receiveByte>:

uint8 UART_receiveByte(void)
{
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)); /* wait until RXC  flag be 1 it means that there is data not read */
    188e:	00 00       	nop
    1890:	8b e2       	ldi	r24, 0x2B	; 43
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	fc 01       	movw	r30, r24
    1896:	80 81       	ld	r24, Z
    1898:	88 23       	and	r24, r24
    189a:	d4 f7       	brge	.-12     	; 0x1890 <UART_receiveByte+0xa>

	return UDR;/* read and return RXC flag to zero */
    189c:	8c e2       	ldi	r24, 0x2C	; 44
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	fc 01       	movw	r30, r24
    18a2:	80 81       	ld	r24, Z
}
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	08 95       	ret

000018aa <UART_sendByte>:
void UART_sendByte(const uint8 data)
{
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	1f 92       	push	r1
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
    18b6:	8c e2       	ldi	r24, 0x2C	; 44
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	29 81       	ldd	r18, Y+1	; 0x01
    18bc:	fc 01       	movw	r30, r24
    18be:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(UCSRA,TXC));//wait until send data txc =1;
    18c0:	00 00       	nop
    18c2:	8b e2       	ldi	r24, 0x2B	; 43
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	fc 01       	movw	r30, r24
    18c8:	80 81       	ld	r24, Z
    18ca:	88 2f       	mov	r24, r24
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	80 74       	andi	r24, 0x40	; 64
    18d0:	99 27       	eor	r25, r25
    18d2:	89 2b       	or	r24, r25
    18d4:	b1 f3       	breq	.-20     	; 0x18c2 <UART_sendByte+0x18>
	SET_BIT(UCSRA,TXC); //clear the flag as it doesnt clear automatically as ISR
    18d6:	8b e2       	ldi	r24, 0x2B	; 43
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	2b e2       	ldi	r18, 0x2B	; 43
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	f9 01       	movw	r30, r18
    18e0:	20 81       	ld	r18, Z
    18e2:	20 64       	ori	r18, 0x40	; 64
    18e4:	fc 01       	movw	r30, r24
    18e6:	20 83       	st	Z, r18
	//while(BIT_IS_CLEAR(UCSRA,UDRE)){}
		/* Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now */
	//	UDR = data;
}
    18e8:	00 00       	nop
    18ea:	0f 90       	pop	r0
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	08 95       	ret

000018f2 <UART_sendString>:
void UART_sendString(uint8 *str)
{
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <UART_sendString+0x6>
    18f8:	1f 92       	push	r1
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	9b 83       	std	Y+3, r25	; 0x03
    1900:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1902:	19 82       	std	Y+1, r1	; 0x01
		while(str[i] != '\0')
    1904:	0e c0       	rjmp	.+28     	; 0x1922 <UART_sendString+0x30>
		{
			UART_sendByte(str[i]);
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	2a 81       	ldd	r18, Y+2	; 0x02
    190e:	3b 81       	ldd	r19, Y+3	; 0x03
    1910:	82 0f       	add	r24, r18
    1912:	93 1f       	adc	r25, r19
    1914:	fc 01       	movw	r30, r24
    1916:	80 81       	ld	r24, Z
    1918:	0e 94 55 0c 	call	0x18aa	; 0x18aa <UART_sendByte>
			i++;
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	8f 5f       	subi	r24, 0xFF	; 255
    1920:	89 83       	std	Y+1, r24	; 0x01
	//	UDR = data;
}
void UART_sendString(uint8 *str)
{
	uint8 i = 0;
		while(str[i] != '\0')
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	2a 81       	ldd	r18, Y+2	; 0x02
    192a:	3b 81       	ldd	r19, Y+3	; 0x03
    192c:	82 0f       	add	r24, r18
    192e:	93 1f       	adc	r25, r19
    1930:	fc 01       	movw	r30, r24
    1932:	80 81       	ld	r24, Z
    1934:	88 23       	and	r24, r24
    1936:	39 f7       	brne	.-50     	; 0x1906 <UART_sendString+0x14>
		{
			UART_sendByte(str[i]);
			i++;
		}
	UART_sendByte('#');
    1938:	83 e2       	ldi	r24, 0x23	; 35
    193a:	0e 94 55 0c 	call	0x18aa	; 0x18aa <UART_sendByte>

}
    193e:	00 00       	nop
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	08 95       	ret

0000194c <UART_receiveString>:
void UART_receiveString(uint8 *str)
{
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	00 d0       	rcall	.+0      	; 0x1956 <UART_receiveString+0xa>
    1956:	1f 92       	push	r1
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	9b 83       	std	Y+3, r25	; 0x03
    195e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1960:	19 82       	std	Y+1, r1	; 0x01
		str[i] = UART_receiveByte();
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	2a 81       	ldd	r18, Y+2	; 0x02
    196a:	3b 81       	ldd	r19, Y+3	; 0x03
    196c:	89 01       	movw	r16, r18
    196e:	08 0f       	add	r16, r24
    1970:	19 1f       	adc	r17, r25
    1972:	0e 94 43 0c 	call	0x1886	; 0x1886 <UART_receiveByte>
    1976:	f8 01       	movw	r30, r16
    1978:	80 83       	st	Z, r24
		while(str[i] != '#')
    197a:	0f c0       	rjmp	.+30     	; 0x199a <UART_receiveString+0x4e>
		{
			i++;
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	8f 5f       	subi	r24, 0xFF	; 255
    1980:	89 83       	std	Y+1, r24	; 0x01
			str[i] = UART_receiveByte();
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	88 2f       	mov	r24, r24
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	2a 81       	ldd	r18, Y+2	; 0x02
    198a:	3b 81       	ldd	r19, Y+3	; 0x03
    198c:	89 01       	movw	r16, r18
    198e:	08 0f       	add	r16, r24
    1990:	19 1f       	adc	r17, r25
    1992:	0e 94 43 0c 	call	0x1886	; 0x1886 <UART_receiveByte>
    1996:	f8 01       	movw	r30, r16
    1998:	80 83       	st	Z, r24
}
void UART_receiveString(uint8 *str)
{
	uint8 i = 0;
		str[i] = UART_receiveByte();
		while(str[i] != '#')
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	2a 81       	ldd	r18, Y+2	; 0x02
    19a2:	3b 81       	ldd	r19, Y+3	; 0x03
    19a4:	82 0f       	add	r24, r18
    19a6:	93 1f       	adc	r25, r19
    19a8:	fc 01       	movw	r30, r24
    19aa:	80 81       	ld	r24, Z
    19ac:	83 32       	cpi	r24, 0x23	; 35
    19ae:	31 f7       	brne	.-52     	; 0x197c <UART_receiveString+0x30>
		{
			i++;
			str[i] = UART_receiveByte();
		}
		str[i] = '\0';
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	88 2f       	mov	r24, r24
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	2a 81       	ldd	r18, Y+2	; 0x02
    19b8:	3b 81       	ldd	r19, Y+3	; 0x03
    19ba:	82 0f       	add	r24, r18
    19bc:	93 1f       	adc	r25, r19
    19be:	fc 01       	movw	r30, r24
    19c0:	10 82       	st	Z, r1
}
    19c2:	00 00       	nop
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	08 95       	ret

000019d4 <__udivmodsi4>:
    19d4:	a1 e2       	ldi	r26, 0x21	; 33
    19d6:	1a 2e       	mov	r1, r26
    19d8:	aa 1b       	sub	r26, r26
    19da:	bb 1b       	sub	r27, r27
    19dc:	fd 01       	movw	r30, r26
    19de:	0d c0       	rjmp	.+26     	; 0x19fa <__udivmodsi4_ep>

000019e0 <__udivmodsi4_loop>:
    19e0:	aa 1f       	adc	r26, r26
    19e2:	bb 1f       	adc	r27, r27
    19e4:	ee 1f       	adc	r30, r30
    19e6:	ff 1f       	adc	r31, r31
    19e8:	a2 17       	cp	r26, r18
    19ea:	b3 07       	cpc	r27, r19
    19ec:	e4 07       	cpc	r30, r20
    19ee:	f5 07       	cpc	r31, r21
    19f0:	20 f0       	brcs	.+8      	; 0x19fa <__udivmodsi4_ep>
    19f2:	a2 1b       	sub	r26, r18
    19f4:	b3 0b       	sbc	r27, r19
    19f6:	e4 0b       	sbc	r30, r20
    19f8:	f5 0b       	sbc	r31, r21

000019fa <__udivmodsi4_ep>:
    19fa:	66 1f       	adc	r22, r22
    19fc:	77 1f       	adc	r23, r23
    19fe:	88 1f       	adc	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	1a 94       	dec	r1
    1a04:	69 f7       	brne	.-38     	; 0x19e0 <__udivmodsi4_loop>
    1a06:	60 95       	com	r22
    1a08:	70 95       	com	r23
    1a0a:	80 95       	com	r24
    1a0c:	90 95       	com	r25
    1a0e:	9b 01       	movw	r18, r22
    1a10:	ac 01       	movw	r20, r24
    1a12:	bd 01       	movw	r22, r26
    1a14:	cf 01       	movw	r24, r30
    1a16:	08 95       	ret

00001a18 <__subsf3>:
    1a18:	50 58       	subi	r21, 0x80	; 128

00001a1a <__addsf3>:
    1a1a:	bb 27       	eor	r27, r27
    1a1c:	aa 27       	eor	r26, r26
    1a1e:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__addsf3x>
    1a22:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <__fp_round>
    1a26:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__fp_pscA>
    1a2a:	38 f0       	brcs	.+14     	; 0x1a3a <__addsf3+0x20>
    1a2c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fp_pscB>
    1a30:	20 f0       	brcs	.+8      	; 0x1a3a <__addsf3+0x20>
    1a32:	39 f4       	brne	.+14     	; 0x1a42 <__addsf3+0x28>
    1a34:	9f 3f       	cpi	r25, 0xFF	; 255
    1a36:	19 f4       	brne	.+6      	; 0x1a3e <__addsf3+0x24>
    1a38:	26 f4       	brtc	.+8      	; 0x1a42 <__addsf3+0x28>
    1a3a:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__fp_nan>
    1a3e:	0e f4       	brtc	.+2      	; 0x1a42 <__addsf3+0x28>
    1a40:	e0 95       	com	r30
    1a42:	e7 fb       	bst	r30, 7
    1a44:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__fp_inf>

00001a48 <__addsf3x>:
    1a48:	e9 2f       	mov	r30, r25
    1a4a:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__fp_split3>
    1a4e:	58 f3       	brcs	.-42     	; 0x1a26 <__addsf3+0xc>
    1a50:	ba 17       	cp	r27, r26
    1a52:	62 07       	cpc	r22, r18
    1a54:	73 07       	cpc	r23, r19
    1a56:	84 07       	cpc	r24, r20
    1a58:	95 07       	cpc	r25, r21
    1a5a:	20 f0       	brcs	.+8      	; 0x1a64 <__addsf3x+0x1c>
    1a5c:	79 f4       	brne	.+30     	; 0x1a7c <__addsf3x+0x34>
    1a5e:	a6 f5       	brtc	.+104    	; 0x1ac8 <__addsf3x+0x80>
    1a60:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__fp_zero>
    1a64:	0e f4       	brtc	.+2      	; 0x1a68 <__addsf3x+0x20>
    1a66:	e0 95       	com	r30
    1a68:	0b 2e       	mov	r0, r27
    1a6a:	ba 2f       	mov	r27, r26
    1a6c:	a0 2d       	mov	r26, r0
    1a6e:	0b 01       	movw	r0, r22
    1a70:	b9 01       	movw	r22, r18
    1a72:	90 01       	movw	r18, r0
    1a74:	0c 01       	movw	r0, r24
    1a76:	ca 01       	movw	r24, r20
    1a78:	a0 01       	movw	r20, r0
    1a7a:	11 24       	eor	r1, r1
    1a7c:	ff 27       	eor	r31, r31
    1a7e:	59 1b       	sub	r21, r25
    1a80:	99 f0       	breq	.+38     	; 0x1aa8 <__addsf3x+0x60>
    1a82:	59 3f       	cpi	r21, 0xF9	; 249
    1a84:	50 f4       	brcc	.+20     	; 0x1a9a <__addsf3x+0x52>
    1a86:	50 3e       	cpi	r21, 0xE0	; 224
    1a88:	68 f1       	brcs	.+90     	; 0x1ae4 <__addsf3x+0x9c>
    1a8a:	1a 16       	cp	r1, r26
    1a8c:	f0 40       	sbci	r31, 0x00	; 0
    1a8e:	a2 2f       	mov	r26, r18
    1a90:	23 2f       	mov	r18, r19
    1a92:	34 2f       	mov	r19, r20
    1a94:	44 27       	eor	r20, r20
    1a96:	58 5f       	subi	r21, 0xF8	; 248
    1a98:	f3 cf       	rjmp	.-26     	; 0x1a80 <__addsf3x+0x38>
    1a9a:	46 95       	lsr	r20
    1a9c:	37 95       	ror	r19
    1a9e:	27 95       	ror	r18
    1aa0:	a7 95       	ror	r26
    1aa2:	f0 40       	sbci	r31, 0x00	; 0
    1aa4:	53 95       	inc	r21
    1aa6:	c9 f7       	brne	.-14     	; 0x1a9a <__addsf3x+0x52>
    1aa8:	7e f4       	brtc	.+30     	; 0x1ac8 <__addsf3x+0x80>
    1aaa:	1f 16       	cp	r1, r31
    1aac:	ba 0b       	sbc	r27, r26
    1aae:	62 0b       	sbc	r22, r18
    1ab0:	73 0b       	sbc	r23, r19
    1ab2:	84 0b       	sbc	r24, r20
    1ab4:	ba f0       	brmi	.+46     	; 0x1ae4 <__addsf3x+0x9c>
    1ab6:	91 50       	subi	r25, 0x01	; 1
    1ab8:	a1 f0       	breq	.+40     	; 0x1ae2 <__addsf3x+0x9a>
    1aba:	ff 0f       	add	r31, r31
    1abc:	bb 1f       	adc	r27, r27
    1abe:	66 1f       	adc	r22, r22
    1ac0:	77 1f       	adc	r23, r23
    1ac2:	88 1f       	adc	r24, r24
    1ac4:	c2 f7       	brpl	.-16     	; 0x1ab6 <__addsf3x+0x6e>
    1ac6:	0e c0       	rjmp	.+28     	; 0x1ae4 <__addsf3x+0x9c>
    1ac8:	ba 0f       	add	r27, r26
    1aca:	62 1f       	adc	r22, r18
    1acc:	73 1f       	adc	r23, r19
    1ace:	84 1f       	adc	r24, r20
    1ad0:	48 f4       	brcc	.+18     	; 0x1ae4 <__addsf3x+0x9c>
    1ad2:	87 95       	ror	r24
    1ad4:	77 95       	ror	r23
    1ad6:	67 95       	ror	r22
    1ad8:	b7 95       	ror	r27
    1ada:	f7 95       	ror	r31
    1adc:	9e 3f       	cpi	r25, 0xFE	; 254
    1ade:	08 f0       	brcs	.+2      	; 0x1ae2 <__addsf3x+0x9a>
    1ae0:	b0 cf       	rjmp	.-160    	; 0x1a42 <__addsf3+0x28>
    1ae2:	93 95       	inc	r25
    1ae4:	88 0f       	add	r24, r24
    1ae6:	08 f0       	brcs	.+2      	; 0x1aea <__addsf3x+0xa2>
    1ae8:	99 27       	eor	r25, r25
    1aea:	ee 0f       	add	r30, r30
    1aec:	97 95       	ror	r25
    1aee:	87 95       	ror	r24
    1af0:	08 95       	ret

00001af2 <__cmpsf2>:
    1af2:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__fp_cmp>
    1af6:	08 f4       	brcc	.+2      	; 0x1afa <__cmpsf2+0x8>
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	08 95       	ret

00001afc <__divsf3>:
    1afc:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__divsf3x>
    1b00:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <__fp_round>
    1b04:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fp_pscB>
    1b08:	58 f0       	brcs	.+22     	; 0x1b20 <__divsf3+0x24>
    1b0a:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__fp_pscA>
    1b0e:	40 f0       	brcs	.+16     	; 0x1b20 <__divsf3+0x24>
    1b10:	29 f4       	brne	.+10     	; 0x1b1c <__divsf3+0x20>
    1b12:	5f 3f       	cpi	r21, 0xFF	; 255
    1b14:	29 f0       	breq	.+10     	; 0x1b20 <__divsf3+0x24>
    1b16:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__fp_inf>
    1b1a:	51 11       	cpse	r21, r1
    1b1c:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <__fp_szero>
    1b20:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__fp_nan>

00001b24 <__divsf3x>:
    1b24:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__fp_split3>
    1b28:	68 f3       	brcs	.-38     	; 0x1b04 <__divsf3+0x8>

00001b2a <__divsf3_pse>:
    1b2a:	99 23       	and	r25, r25
    1b2c:	b1 f3       	breq	.-20     	; 0x1b1a <__divsf3+0x1e>
    1b2e:	55 23       	and	r21, r21
    1b30:	91 f3       	breq	.-28     	; 0x1b16 <__divsf3+0x1a>
    1b32:	95 1b       	sub	r25, r21
    1b34:	55 0b       	sbc	r21, r21
    1b36:	bb 27       	eor	r27, r27
    1b38:	aa 27       	eor	r26, r26
    1b3a:	62 17       	cp	r22, r18
    1b3c:	73 07       	cpc	r23, r19
    1b3e:	84 07       	cpc	r24, r20
    1b40:	38 f0       	brcs	.+14     	; 0x1b50 <__divsf3_pse+0x26>
    1b42:	9f 5f       	subi	r25, 0xFF	; 255
    1b44:	5f 4f       	sbci	r21, 0xFF	; 255
    1b46:	22 0f       	add	r18, r18
    1b48:	33 1f       	adc	r19, r19
    1b4a:	44 1f       	adc	r20, r20
    1b4c:	aa 1f       	adc	r26, r26
    1b4e:	a9 f3       	breq	.-22     	; 0x1b3a <__divsf3_pse+0x10>
    1b50:	35 d0       	rcall	.+106    	; 0x1bbc <__divsf3_pse+0x92>
    1b52:	0e 2e       	mov	r0, r30
    1b54:	3a f0       	brmi	.+14     	; 0x1b64 <__divsf3_pse+0x3a>
    1b56:	e0 e8       	ldi	r30, 0x80	; 128
    1b58:	32 d0       	rcall	.+100    	; 0x1bbe <__divsf3_pse+0x94>
    1b5a:	91 50       	subi	r25, 0x01	; 1
    1b5c:	50 40       	sbci	r21, 0x00	; 0
    1b5e:	e6 95       	lsr	r30
    1b60:	00 1c       	adc	r0, r0
    1b62:	ca f7       	brpl	.-14     	; 0x1b56 <__divsf3_pse+0x2c>
    1b64:	2b d0       	rcall	.+86     	; 0x1bbc <__divsf3_pse+0x92>
    1b66:	fe 2f       	mov	r31, r30
    1b68:	29 d0       	rcall	.+82     	; 0x1bbc <__divsf3_pse+0x92>
    1b6a:	66 0f       	add	r22, r22
    1b6c:	77 1f       	adc	r23, r23
    1b6e:	88 1f       	adc	r24, r24
    1b70:	bb 1f       	adc	r27, r27
    1b72:	26 17       	cp	r18, r22
    1b74:	37 07       	cpc	r19, r23
    1b76:	48 07       	cpc	r20, r24
    1b78:	ab 07       	cpc	r26, r27
    1b7a:	b0 e8       	ldi	r27, 0x80	; 128
    1b7c:	09 f0       	breq	.+2      	; 0x1b80 <__divsf3_pse+0x56>
    1b7e:	bb 0b       	sbc	r27, r27
    1b80:	80 2d       	mov	r24, r0
    1b82:	bf 01       	movw	r22, r30
    1b84:	ff 27       	eor	r31, r31
    1b86:	93 58       	subi	r25, 0x83	; 131
    1b88:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8a:	3a f0       	brmi	.+14     	; 0x1b9a <__divsf3_pse+0x70>
    1b8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b8e:	51 05       	cpc	r21, r1
    1b90:	78 f0       	brcs	.+30     	; 0x1bb0 <__divsf3_pse+0x86>
    1b92:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__fp_inf>
    1b96:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <__fp_szero>
    1b9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b9c:	e4 f3       	brlt	.-8      	; 0x1b96 <__divsf3_pse+0x6c>
    1b9e:	98 3e       	cpi	r25, 0xE8	; 232
    1ba0:	d4 f3       	brlt	.-12     	; 0x1b96 <__divsf3_pse+0x6c>
    1ba2:	86 95       	lsr	r24
    1ba4:	77 95       	ror	r23
    1ba6:	67 95       	ror	r22
    1ba8:	b7 95       	ror	r27
    1baa:	f7 95       	ror	r31
    1bac:	9f 5f       	subi	r25, 0xFF	; 255
    1bae:	c9 f7       	brne	.-14     	; 0x1ba2 <__divsf3_pse+0x78>
    1bb0:	88 0f       	add	r24, r24
    1bb2:	91 1d       	adc	r25, r1
    1bb4:	96 95       	lsr	r25
    1bb6:	87 95       	ror	r24
    1bb8:	97 f9       	bld	r25, 7
    1bba:	08 95       	ret
    1bbc:	e1 e0       	ldi	r30, 0x01	; 1
    1bbe:	66 0f       	add	r22, r22
    1bc0:	77 1f       	adc	r23, r23
    1bc2:	88 1f       	adc	r24, r24
    1bc4:	bb 1f       	adc	r27, r27
    1bc6:	62 17       	cp	r22, r18
    1bc8:	73 07       	cpc	r23, r19
    1bca:	84 07       	cpc	r24, r20
    1bcc:	ba 07       	cpc	r27, r26
    1bce:	20 f0       	brcs	.+8      	; 0x1bd8 <__divsf3_pse+0xae>
    1bd0:	62 1b       	sub	r22, r18
    1bd2:	73 0b       	sbc	r23, r19
    1bd4:	84 0b       	sbc	r24, r20
    1bd6:	ba 0b       	sbc	r27, r26
    1bd8:	ee 1f       	adc	r30, r30
    1bda:	88 f7       	brcc	.-30     	; 0x1bbe <__divsf3_pse+0x94>
    1bdc:	e0 95       	com	r30
    1bde:	08 95       	ret

00001be0 <__fixunssfsi>:
    1be0:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__fp_splitA>
    1be4:	88 f0       	brcs	.+34     	; 0x1c08 <__fixunssfsi+0x28>
    1be6:	9f 57       	subi	r25, 0x7F	; 127
    1be8:	98 f0       	brcs	.+38     	; 0x1c10 <__fixunssfsi+0x30>
    1bea:	b9 2f       	mov	r27, r25
    1bec:	99 27       	eor	r25, r25
    1bee:	b7 51       	subi	r27, 0x17	; 23
    1bf0:	b0 f0       	brcs	.+44     	; 0x1c1e <__fixunssfsi+0x3e>
    1bf2:	e1 f0       	breq	.+56     	; 0x1c2c <__fixunssfsi+0x4c>
    1bf4:	66 0f       	add	r22, r22
    1bf6:	77 1f       	adc	r23, r23
    1bf8:	88 1f       	adc	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	1a f0       	brmi	.+6      	; 0x1c04 <__fixunssfsi+0x24>
    1bfe:	ba 95       	dec	r27
    1c00:	c9 f7       	brne	.-14     	; 0x1bf4 <__fixunssfsi+0x14>
    1c02:	14 c0       	rjmp	.+40     	; 0x1c2c <__fixunssfsi+0x4c>
    1c04:	b1 30       	cpi	r27, 0x01	; 1
    1c06:	91 f0       	breq	.+36     	; 0x1c2c <__fixunssfsi+0x4c>
    1c08:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__fp_zero>
    1c0c:	b1 e0       	ldi	r27, 0x01	; 1
    1c0e:	08 95       	ret
    1c10:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__fp_zero>
    1c14:	67 2f       	mov	r22, r23
    1c16:	78 2f       	mov	r23, r24
    1c18:	88 27       	eor	r24, r24
    1c1a:	b8 5f       	subi	r27, 0xF8	; 248
    1c1c:	39 f0       	breq	.+14     	; 0x1c2c <__fixunssfsi+0x4c>
    1c1e:	b9 3f       	cpi	r27, 0xF9	; 249
    1c20:	cc f3       	brlt	.-14     	; 0x1c14 <__fixunssfsi+0x34>
    1c22:	86 95       	lsr	r24
    1c24:	77 95       	ror	r23
    1c26:	67 95       	ror	r22
    1c28:	b3 95       	inc	r27
    1c2a:	d9 f7       	brne	.-10     	; 0x1c22 <__fixunssfsi+0x42>
    1c2c:	3e f4       	brtc	.+14     	; 0x1c3c <__fixunssfsi+0x5c>
    1c2e:	90 95       	com	r25
    1c30:	80 95       	com	r24
    1c32:	70 95       	com	r23
    1c34:	61 95       	neg	r22
    1c36:	7f 4f       	sbci	r23, 0xFF	; 255
    1c38:	8f 4f       	sbci	r24, 0xFF	; 255
    1c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3c:	08 95       	ret

00001c3e <__floatunsisf>:
    1c3e:	e8 94       	clt
    1c40:	09 c0       	rjmp	.+18     	; 0x1c54 <__floatsisf+0x12>

00001c42 <__floatsisf>:
    1c42:	97 fb       	bst	r25, 7
    1c44:	3e f4       	brtc	.+14     	; 0x1c54 <__floatsisf+0x12>
    1c46:	90 95       	com	r25
    1c48:	80 95       	com	r24
    1c4a:	70 95       	com	r23
    1c4c:	61 95       	neg	r22
    1c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c50:	8f 4f       	sbci	r24, 0xFF	; 255
    1c52:	9f 4f       	sbci	r25, 0xFF	; 255
    1c54:	99 23       	and	r25, r25
    1c56:	a9 f0       	breq	.+42     	; 0x1c82 <__floatsisf+0x40>
    1c58:	f9 2f       	mov	r31, r25
    1c5a:	96 e9       	ldi	r25, 0x96	; 150
    1c5c:	bb 27       	eor	r27, r27
    1c5e:	93 95       	inc	r25
    1c60:	f6 95       	lsr	r31
    1c62:	87 95       	ror	r24
    1c64:	77 95       	ror	r23
    1c66:	67 95       	ror	r22
    1c68:	b7 95       	ror	r27
    1c6a:	f1 11       	cpse	r31, r1
    1c6c:	f8 cf       	rjmp	.-16     	; 0x1c5e <__floatsisf+0x1c>
    1c6e:	fa f4       	brpl	.+62     	; 0x1cae <__floatsisf+0x6c>
    1c70:	bb 0f       	add	r27, r27
    1c72:	11 f4       	brne	.+4      	; 0x1c78 <__floatsisf+0x36>
    1c74:	60 ff       	sbrs	r22, 0
    1c76:	1b c0       	rjmp	.+54     	; 0x1cae <__floatsisf+0x6c>
    1c78:	6f 5f       	subi	r22, 0xFF	; 255
    1c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c80:	16 c0       	rjmp	.+44     	; 0x1cae <__floatsisf+0x6c>
    1c82:	88 23       	and	r24, r24
    1c84:	11 f0       	breq	.+4      	; 0x1c8a <__floatsisf+0x48>
    1c86:	96 e9       	ldi	r25, 0x96	; 150
    1c88:	11 c0       	rjmp	.+34     	; 0x1cac <__floatsisf+0x6a>
    1c8a:	77 23       	and	r23, r23
    1c8c:	21 f0       	breq	.+8      	; 0x1c96 <__floatsisf+0x54>
    1c8e:	9e e8       	ldi	r25, 0x8E	; 142
    1c90:	87 2f       	mov	r24, r23
    1c92:	76 2f       	mov	r23, r22
    1c94:	05 c0       	rjmp	.+10     	; 0x1ca0 <__floatsisf+0x5e>
    1c96:	66 23       	and	r22, r22
    1c98:	71 f0       	breq	.+28     	; 0x1cb6 <__floatsisf+0x74>
    1c9a:	96 e8       	ldi	r25, 0x86	; 134
    1c9c:	86 2f       	mov	r24, r22
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	60 e0       	ldi	r22, 0x00	; 0
    1ca2:	2a f0       	brmi	.+10     	; 0x1cae <__floatsisf+0x6c>
    1ca4:	9a 95       	dec	r25
    1ca6:	66 0f       	add	r22, r22
    1ca8:	77 1f       	adc	r23, r23
    1caa:	88 1f       	adc	r24, r24
    1cac:	da f7       	brpl	.-10     	; 0x1ca4 <__floatsisf+0x62>
    1cae:	88 0f       	add	r24, r24
    1cb0:	96 95       	lsr	r25
    1cb2:	87 95       	ror	r24
    1cb4:	97 f9       	bld	r25, 7
    1cb6:	08 95       	ret

00001cb8 <__fp_cmp>:
    1cb8:	99 0f       	add	r25, r25
    1cba:	00 08       	sbc	r0, r0
    1cbc:	55 0f       	add	r21, r21
    1cbe:	aa 0b       	sbc	r26, r26
    1cc0:	e0 e8       	ldi	r30, 0x80	; 128
    1cc2:	fe ef       	ldi	r31, 0xFE	; 254
    1cc4:	16 16       	cp	r1, r22
    1cc6:	17 06       	cpc	r1, r23
    1cc8:	e8 07       	cpc	r30, r24
    1cca:	f9 07       	cpc	r31, r25
    1ccc:	c0 f0       	brcs	.+48     	; 0x1cfe <__fp_cmp+0x46>
    1cce:	12 16       	cp	r1, r18
    1cd0:	13 06       	cpc	r1, r19
    1cd2:	e4 07       	cpc	r30, r20
    1cd4:	f5 07       	cpc	r31, r21
    1cd6:	98 f0       	brcs	.+38     	; 0x1cfe <__fp_cmp+0x46>
    1cd8:	62 1b       	sub	r22, r18
    1cda:	73 0b       	sbc	r23, r19
    1cdc:	84 0b       	sbc	r24, r20
    1cde:	95 0b       	sbc	r25, r21
    1ce0:	39 f4       	brne	.+14     	; 0x1cf0 <__fp_cmp+0x38>
    1ce2:	0a 26       	eor	r0, r26
    1ce4:	61 f0       	breq	.+24     	; 0x1cfe <__fp_cmp+0x46>
    1ce6:	23 2b       	or	r18, r19
    1ce8:	24 2b       	or	r18, r20
    1cea:	25 2b       	or	r18, r21
    1cec:	21 f4       	brne	.+8      	; 0x1cf6 <__fp_cmp+0x3e>
    1cee:	08 95       	ret
    1cf0:	0a 26       	eor	r0, r26
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <__fp_cmp+0x3e>
    1cf4:	a1 40       	sbci	r26, 0x01	; 1
    1cf6:	a6 95       	lsr	r26
    1cf8:	8f ef       	ldi	r24, 0xFF	; 255
    1cfa:	81 1d       	adc	r24, r1
    1cfc:	81 1d       	adc	r24, r1
    1cfe:	08 95       	ret

00001d00 <__fp_inf>:
    1d00:	97 f9       	bld	r25, 7
    1d02:	9f 67       	ori	r25, 0x7F	; 127
    1d04:	80 e8       	ldi	r24, 0x80	; 128
    1d06:	70 e0       	ldi	r23, 0x00	; 0
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	08 95       	ret

00001d0c <__fp_nan>:
    1d0c:	9f ef       	ldi	r25, 0xFF	; 255
    1d0e:	80 ec       	ldi	r24, 0xC0	; 192
    1d10:	08 95       	ret

00001d12 <__fp_pscA>:
    1d12:	00 24       	eor	r0, r0
    1d14:	0a 94       	dec	r0
    1d16:	16 16       	cp	r1, r22
    1d18:	17 06       	cpc	r1, r23
    1d1a:	18 06       	cpc	r1, r24
    1d1c:	09 06       	cpc	r0, r25
    1d1e:	08 95       	ret

00001d20 <__fp_pscB>:
    1d20:	00 24       	eor	r0, r0
    1d22:	0a 94       	dec	r0
    1d24:	12 16       	cp	r1, r18
    1d26:	13 06       	cpc	r1, r19
    1d28:	14 06       	cpc	r1, r20
    1d2a:	05 06       	cpc	r0, r21
    1d2c:	08 95       	ret

00001d2e <__fp_round>:
    1d2e:	09 2e       	mov	r0, r25
    1d30:	03 94       	inc	r0
    1d32:	00 0c       	add	r0, r0
    1d34:	11 f4       	brne	.+4      	; 0x1d3a <__fp_round+0xc>
    1d36:	88 23       	and	r24, r24
    1d38:	52 f0       	brmi	.+20     	; 0x1d4e <__fp_round+0x20>
    1d3a:	bb 0f       	add	r27, r27
    1d3c:	40 f4       	brcc	.+16     	; 0x1d4e <__fp_round+0x20>
    1d3e:	bf 2b       	or	r27, r31
    1d40:	11 f4       	brne	.+4      	; 0x1d46 <__fp_round+0x18>
    1d42:	60 ff       	sbrs	r22, 0
    1d44:	04 c0       	rjmp	.+8      	; 0x1d4e <__fp_round+0x20>
    1d46:	6f 5f       	subi	r22, 0xFF	; 255
    1d48:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4e:	08 95       	ret

00001d50 <__fp_split3>:
    1d50:	57 fd       	sbrc	r21, 7
    1d52:	90 58       	subi	r25, 0x80	; 128
    1d54:	44 0f       	add	r20, r20
    1d56:	55 1f       	adc	r21, r21
    1d58:	59 f0       	breq	.+22     	; 0x1d70 <__fp_splitA+0x10>
    1d5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d5c:	71 f0       	breq	.+28     	; 0x1d7a <__fp_splitA+0x1a>
    1d5e:	47 95       	ror	r20

00001d60 <__fp_splitA>:
    1d60:	88 0f       	add	r24, r24
    1d62:	97 fb       	bst	r25, 7
    1d64:	99 1f       	adc	r25, r25
    1d66:	61 f0       	breq	.+24     	; 0x1d80 <__fp_splitA+0x20>
    1d68:	9f 3f       	cpi	r25, 0xFF	; 255
    1d6a:	79 f0       	breq	.+30     	; 0x1d8a <__fp_splitA+0x2a>
    1d6c:	87 95       	ror	r24
    1d6e:	08 95       	ret
    1d70:	12 16       	cp	r1, r18
    1d72:	13 06       	cpc	r1, r19
    1d74:	14 06       	cpc	r1, r20
    1d76:	55 1f       	adc	r21, r21
    1d78:	f2 cf       	rjmp	.-28     	; 0x1d5e <__fp_split3+0xe>
    1d7a:	46 95       	lsr	r20
    1d7c:	f1 df       	rcall	.-30     	; 0x1d60 <__fp_splitA>
    1d7e:	08 c0       	rjmp	.+16     	; 0x1d90 <__fp_splitA+0x30>
    1d80:	16 16       	cp	r1, r22
    1d82:	17 06       	cpc	r1, r23
    1d84:	18 06       	cpc	r1, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	f1 cf       	rjmp	.-30     	; 0x1d6c <__fp_splitA+0xc>
    1d8a:	86 95       	lsr	r24
    1d8c:	71 05       	cpc	r23, r1
    1d8e:	61 05       	cpc	r22, r1
    1d90:	08 94       	sec
    1d92:	08 95       	ret

00001d94 <__fp_zero>:
    1d94:	e8 94       	clt

00001d96 <__fp_szero>:
    1d96:	bb 27       	eor	r27, r27
    1d98:	66 27       	eor	r22, r22
    1d9a:	77 27       	eor	r23, r23
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	97 f9       	bld	r25, 7
    1da0:	08 95       	ret

00001da2 <__gesf2>:
    1da2:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__fp_cmp>
    1da6:	08 f4       	brcc	.+2      	; 0x1daa <__gesf2+0x8>
    1da8:	8f ef       	ldi	r24, 0xFF	; 255
    1daa:	08 95       	ret

00001dac <__mulsf3>:
    1dac:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__mulsf3x>
    1db0:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <__fp_round>
    1db4:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__fp_pscA>
    1db8:	38 f0       	brcs	.+14     	; 0x1dc8 <__mulsf3+0x1c>
    1dba:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fp_pscB>
    1dbe:	20 f0       	brcs	.+8      	; 0x1dc8 <__mulsf3+0x1c>
    1dc0:	95 23       	and	r25, r21
    1dc2:	11 f0       	breq	.+4      	; 0x1dc8 <__mulsf3+0x1c>
    1dc4:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__fp_inf>
    1dc8:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__fp_nan>
    1dcc:	11 24       	eor	r1, r1
    1dce:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <__fp_szero>

00001dd2 <__mulsf3x>:
    1dd2:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <__fp_split3>
    1dd6:	70 f3       	brcs	.-36     	; 0x1db4 <__mulsf3+0x8>

00001dd8 <__mulsf3_pse>:
    1dd8:	95 9f       	mul	r25, r21
    1dda:	c1 f3       	breq	.-16     	; 0x1dcc <__mulsf3+0x20>
    1ddc:	95 0f       	add	r25, r21
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	55 1f       	adc	r21, r21
    1de2:	62 9f       	mul	r22, r18
    1de4:	f0 01       	movw	r30, r0
    1de6:	72 9f       	mul	r23, r18
    1de8:	bb 27       	eor	r27, r27
    1dea:	f0 0d       	add	r31, r0
    1dec:	b1 1d       	adc	r27, r1
    1dee:	63 9f       	mul	r22, r19
    1df0:	aa 27       	eor	r26, r26
    1df2:	f0 0d       	add	r31, r0
    1df4:	b1 1d       	adc	r27, r1
    1df6:	aa 1f       	adc	r26, r26
    1df8:	64 9f       	mul	r22, r20
    1dfa:	66 27       	eor	r22, r22
    1dfc:	b0 0d       	add	r27, r0
    1dfe:	a1 1d       	adc	r26, r1
    1e00:	66 1f       	adc	r22, r22
    1e02:	82 9f       	mul	r24, r18
    1e04:	22 27       	eor	r18, r18
    1e06:	b0 0d       	add	r27, r0
    1e08:	a1 1d       	adc	r26, r1
    1e0a:	62 1f       	adc	r22, r18
    1e0c:	73 9f       	mul	r23, r19
    1e0e:	b0 0d       	add	r27, r0
    1e10:	a1 1d       	adc	r26, r1
    1e12:	62 1f       	adc	r22, r18
    1e14:	83 9f       	mul	r24, r19
    1e16:	a0 0d       	add	r26, r0
    1e18:	61 1d       	adc	r22, r1
    1e1a:	22 1f       	adc	r18, r18
    1e1c:	74 9f       	mul	r23, r20
    1e1e:	33 27       	eor	r19, r19
    1e20:	a0 0d       	add	r26, r0
    1e22:	61 1d       	adc	r22, r1
    1e24:	23 1f       	adc	r18, r19
    1e26:	84 9f       	mul	r24, r20
    1e28:	60 0d       	add	r22, r0
    1e2a:	21 1d       	adc	r18, r1
    1e2c:	82 2f       	mov	r24, r18
    1e2e:	76 2f       	mov	r23, r22
    1e30:	6a 2f       	mov	r22, r26
    1e32:	11 24       	eor	r1, r1
    1e34:	9f 57       	subi	r25, 0x7F	; 127
    1e36:	50 40       	sbci	r21, 0x00	; 0
    1e38:	9a f0       	brmi	.+38     	; 0x1e60 <__mulsf3_pse+0x88>
    1e3a:	f1 f0       	breq	.+60     	; 0x1e78 <__mulsf3_pse+0xa0>
    1e3c:	88 23       	and	r24, r24
    1e3e:	4a f0       	brmi	.+18     	; 0x1e52 <__mulsf3_pse+0x7a>
    1e40:	ee 0f       	add	r30, r30
    1e42:	ff 1f       	adc	r31, r31
    1e44:	bb 1f       	adc	r27, r27
    1e46:	66 1f       	adc	r22, r22
    1e48:	77 1f       	adc	r23, r23
    1e4a:	88 1f       	adc	r24, r24
    1e4c:	91 50       	subi	r25, 0x01	; 1
    1e4e:	50 40       	sbci	r21, 0x00	; 0
    1e50:	a9 f7       	brne	.-22     	; 0x1e3c <__mulsf3_pse+0x64>
    1e52:	9e 3f       	cpi	r25, 0xFE	; 254
    1e54:	51 05       	cpc	r21, r1
    1e56:	80 f0       	brcs	.+32     	; 0x1e78 <__mulsf3_pse+0xa0>
    1e58:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__fp_inf>
    1e5c:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <__fp_szero>
    1e60:	5f 3f       	cpi	r21, 0xFF	; 255
    1e62:	e4 f3       	brlt	.-8      	; 0x1e5c <__mulsf3_pse+0x84>
    1e64:	98 3e       	cpi	r25, 0xE8	; 232
    1e66:	d4 f3       	brlt	.-12     	; 0x1e5c <__mulsf3_pse+0x84>
    1e68:	86 95       	lsr	r24
    1e6a:	77 95       	ror	r23
    1e6c:	67 95       	ror	r22
    1e6e:	b7 95       	ror	r27
    1e70:	f7 95       	ror	r31
    1e72:	e7 95       	ror	r30
    1e74:	9f 5f       	subi	r25, 0xFF	; 255
    1e76:	c1 f7       	brne	.-16     	; 0x1e68 <__mulsf3_pse+0x90>
    1e78:	fe 2b       	or	r31, r30
    1e7a:	88 0f       	add	r24, r24
    1e7c:	91 1d       	adc	r25, r1
    1e7e:	96 95       	lsr	r25
    1e80:	87 95       	ror	r24
    1e82:	97 f9       	bld	r25, 7
    1e84:	08 95       	ret

00001e86 <pow>:
    1e86:	fa 01       	movw	r30, r20
    1e88:	ee 0f       	add	r30, r30
    1e8a:	ff 1f       	adc	r31, r31
    1e8c:	30 96       	adiw	r30, 0x00	; 0
    1e8e:	21 05       	cpc	r18, r1
    1e90:	31 05       	cpc	r19, r1
    1e92:	a1 f1       	breq	.+104    	; 0x1efc <pow+0x76>
    1e94:	61 15       	cp	r22, r1
    1e96:	71 05       	cpc	r23, r1
    1e98:	61 f4       	brne	.+24     	; 0x1eb2 <pow+0x2c>
    1e9a:	80 38       	cpi	r24, 0x80	; 128
    1e9c:	bf e3       	ldi	r27, 0x3F	; 63
    1e9e:	9b 07       	cpc	r25, r27
    1ea0:	49 f1       	breq	.+82     	; 0x1ef4 <pow+0x6e>
    1ea2:	68 94       	set
    1ea4:	90 38       	cpi	r25, 0x80	; 128
    1ea6:	81 05       	cpc	r24, r1
    1ea8:	61 f0       	breq	.+24     	; 0x1ec2 <pow+0x3c>
    1eaa:	80 38       	cpi	r24, 0x80	; 128
    1eac:	bf ef       	ldi	r27, 0xFF	; 255
    1eae:	9b 07       	cpc	r25, r27
    1eb0:	41 f0       	breq	.+16     	; 0x1ec2 <pow+0x3c>
    1eb2:	99 23       	and	r25, r25
    1eb4:	4a f5       	brpl	.+82     	; 0x1f08 <pow+0x82>
    1eb6:	ff 3f       	cpi	r31, 0xFF	; 255
    1eb8:	e1 05       	cpc	r30, r1
    1eba:	31 05       	cpc	r19, r1
    1ebc:	21 05       	cpc	r18, r1
    1ebe:	19 f1       	breq	.+70     	; 0x1f06 <pow+0x80>
    1ec0:	e8 94       	clt
    1ec2:	08 94       	sec
    1ec4:	e7 95       	ror	r30
    1ec6:	d9 01       	movw	r26, r18
    1ec8:	aa 23       	and	r26, r26
    1eca:	29 f4       	brne	.+10     	; 0x1ed6 <pow+0x50>
    1ecc:	ab 2f       	mov	r26, r27
    1ece:	be 2f       	mov	r27, r30
    1ed0:	f8 5f       	subi	r31, 0xF8	; 248
    1ed2:	d0 f3       	brcs	.-12     	; 0x1ec8 <pow+0x42>
    1ed4:	10 c0       	rjmp	.+32     	; 0x1ef6 <pow+0x70>
    1ed6:	ff 5f       	subi	r31, 0xFF	; 255
    1ed8:	70 f4       	brcc	.+28     	; 0x1ef6 <pow+0x70>
    1eda:	a6 95       	lsr	r26
    1edc:	e0 f7       	brcc	.-8      	; 0x1ed6 <pow+0x50>
    1ede:	f7 39       	cpi	r31, 0x97	; 151
    1ee0:	50 f0       	brcs	.+20     	; 0x1ef6 <pow+0x70>
    1ee2:	19 f0       	breq	.+6      	; 0x1eea <pow+0x64>
    1ee4:	ff 3a       	cpi	r31, 0xAF	; 175
    1ee6:	38 f4       	brcc	.+14     	; 0x1ef6 <pow+0x70>
    1ee8:	9f 77       	andi	r25, 0x7F	; 127
    1eea:	9f 93       	push	r25
    1eec:	0d d0       	rcall	.+26     	; 0x1f08 <pow+0x82>
    1eee:	0f 90       	pop	r0
    1ef0:	07 fc       	sbrc	r0, 7
    1ef2:	90 58       	subi	r25, 0x80	; 128
    1ef4:	08 95       	ret
    1ef6:	46 f0       	brts	.+16     	; 0x1f08 <pow+0x82>
    1ef8:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__fp_nan>
    1efc:	60 e0       	ldi	r22, 0x00	; 0
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	80 e8       	ldi	r24, 0x80	; 128
    1f02:	9f e3       	ldi	r25, 0x3F	; 63
    1f04:	08 95       	ret
    1f06:	4f e7       	ldi	r20, 0x7F	; 127
    1f08:	9f 77       	andi	r25, 0x7F	; 127
    1f0a:	5f 93       	push	r21
    1f0c:	4f 93       	push	r20
    1f0e:	3f 93       	push	r19
    1f10:	2f 93       	push	r18
    1f12:	0e 94 3e 10 	call	0x207c	; 0x207c <log>
    1f16:	2f 91       	pop	r18
    1f18:	3f 91       	pop	r19
    1f1a:	4f 91       	pop	r20
    1f1c:	5f 91       	pop	r21
    1f1e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__mulsf3>
    1f22:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <exp>
    1f26:	29 f4       	brne	.+10     	; 0x1f32 <pow+0xac>
    1f28:	16 f0       	brts	.+4      	; 0x1f2e <pow+0xa8>
    1f2a:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__fp_inf>
    1f2e:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__fp_zero>
    1f32:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__fp_nan>

00001f36 <exp>:
    1f36:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__fp_splitA>
    1f3a:	a8 f3       	brcs	.-22     	; 0x1f26 <pow+0xa0>
    1f3c:	96 38       	cpi	r25, 0x86	; 134
    1f3e:	a0 f7       	brcc	.-24     	; 0x1f28 <pow+0xa2>
    1f40:	07 f8       	bld	r0, 7
    1f42:	0f 92       	push	r0
    1f44:	e8 94       	clt
    1f46:	2b e3       	ldi	r18, 0x3B	; 59
    1f48:	3a ea       	ldi	r19, 0xAA	; 170
    1f4a:	48 eb       	ldi	r20, 0xB8	; 184
    1f4c:	5f e7       	ldi	r21, 0x7F	; 127
    1f4e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__mulsf3_pse>
    1f52:	0f 92       	push	r0
    1f54:	0f 92       	push	r0
    1f56:	0f 92       	push	r0
    1f58:	4d b7       	in	r20, 0x3d	; 61
    1f5a:	5e b7       	in	r21, 0x3e	; 62
    1f5c:	0f 92       	push	r0
    1f5e:	0e 94 86 10 	call	0x210c	; 0x210c <modf>
    1f62:	e4 e5       	ldi	r30, 0x54	; 84
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__fp_powser>
    1f6a:	4f 91       	pop	r20
    1f6c:	5f 91       	pop	r21
    1f6e:	ef 91       	pop	r30
    1f70:	ff 91       	pop	r31
    1f72:	e5 95       	asr	r30
    1f74:	ee 1f       	adc	r30, r30
    1f76:	ff 1f       	adc	r31, r31
    1f78:	49 f0       	breq	.+18     	; 0x1f8c <exp+0x56>
    1f7a:	fe 57       	subi	r31, 0x7E	; 126
    1f7c:	e0 68       	ori	r30, 0x80	; 128
    1f7e:	44 27       	eor	r20, r20
    1f80:	ee 0f       	add	r30, r30
    1f82:	44 1f       	adc	r20, r20
    1f84:	fa 95       	dec	r31
    1f86:	e1 f7       	brne	.-8      	; 0x1f80 <exp+0x4a>
    1f88:	41 95       	neg	r20
    1f8a:	55 0b       	sbc	r21, r21
    1f8c:	0e 94 00 10 	call	0x2000	; 0x2000 <ldexp>
    1f90:	0f 90       	pop	r0
    1f92:	07 fe       	sbrs	r0, 7
    1f94:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <inverse>
    1f98:	08 95       	ret

00001f9a <__fp_powser>:
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	1f 93       	push	r17
    1fa0:	0f 93       	push	r16
    1fa2:	ff 92       	push	r15
    1fa4:	ef 92       	push	r14
    1fa6:	df 92       	push	r13
    1fa8:	7b 01       	movw	r14, r22
    1faa:	8c 01       	movw	r16, r24
    1fac:	68 94       	set
    1fae:	06 c0       	rjmp	.+12     	; 0x1fbc <__fp_powser+0x22>
    1fb0:	da 2e       	mov	r13, r26
    1fb2:	ef 01       	movw	r28, r30
    1fb4:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__mulsf3x>
    1fb8:	fe 01       	movw	r30, r28
    1fba:	e8 94       	clt
    1fbc:	a5 91       	lpm	r26, Z+
    1fbe:	25 91       	lpm	r18, Z+
    1fc0:	35 91       	lpm	r19, Z+
    1fc2:	45 91       	lpm	r20, Z+
    1fc4:	55 91       	lpm	r21, Z+
    1fc6:	a6 f3       	brts	.-24     	; 0x1fb0 <__fp_powser+0x16>
    1fc8:	ef 01       	movw	r28, r30
    1fca:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__addsf3x>
    1fce:	fe 01       	movw	r30, r28
    1fd0:	97 01       	movw	r18, r14
    1fd2:	a8 01       	movw	r20, r16
    1fd4:	da 94       	dec	r13
    1fd6:	69 f7       	brne	.-38     	; 0x1fb2 <__fp_powser+0x18>
    1fd8:	df 90       	pop	r13
    1fda:	ef 90       	pop	r14
    1fdc:	ff 90       	pop	r15
    1fde:	0f 91       	pop	r16
    1fe0:	1f 91       	pop	r17
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <inverse>:
    1fe8:	9b 01       	movw	r18, r22
    1fea:	ac 01       	movw	r20, r24
    1fec:	60 e0       	ldi	r22, 0x00	; 0
    1fee:	70 e0       	ldi	r23, 0x00	; 0
    1ff0:	80 e8       	ldi	r24, 0x80	; 128
    1ff2:	9f e3       	ldi	r25, 0x3F	; 63
    1ff4:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__divsf3>
    1ff8:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__fp_inf>
    1ffc:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__fp_mpack>

00002000 <ldexp>:
    2000:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__fp_splitA>
    2004:	d8 f3       	brcs	.-10     	; 0x1ffc <inverse+0x14>
    2006:	99 23       	and	r25, r25
    2008:	c9 f3       	breq	.-14     	; 0x1ffc <inverse+0x14>
    200a:	94 0f       	add	r25, r20
    200c:	51 1d       	adc	r21, r1
    200e:	a3 f3       	brvs	.-24     	; 0x1ff8 <inverse+0x10>
    2010:	91 50       	subi	r25, 0x01	; 1
    2012:	50 40       	sbci	r21, 0x00	; 0
    2014:	94 f0       	brlt	.+36     	; 0x203a <ldexp+0x3a>
    2016:	59 f0       	breq	.+22     	; 0x202e <ldexp+0x2e>
    2018:	88 23       	and	r24, r24
    201a:	32 f0       	brmi	.+12     	; 0x2028 <ldexp+0x28>
    201c:	66 0f       	add	r22, r22
    201e:	77 1f       	adc	r23, r23
    2020:	88 1f       	adc	r24, r24
    2022:	91 50       	subi	r25, 0x01	; 1
    2024:	50 40       	sbci	r21, 0x00	; 0
    2026:	c1 f7       	brne	.-16     	; 0x2018 <ldexp+0x18>
    2028:	9e 3f       	cpi	r25, 0xFE	; 254
    202a:	51 05       	cpc	r21, r1
    202c:	2c f7       	brge	.-54     	; 0x1ff8 <inverse+0x10>
    202e:	88 0f       	add	r24, r24
    2030:	91 1d       	adc	r25, r1
    2032:	96 95       	lsr	r25
    2034:	87 95       	ror	r24
    2036:	97 f9       	bld	r25, 7
    2038:	08 95       	ret
    203a:	5f 3f       	cpi	r21, 0xFF	; 255
    203c:	ac f0       	brlt	.+42     	; 0x2068 <ldexp+0x68>
    203e:	98 3e       	cpi	r25, 0xE8	; 232
    2040:	9c f0       	brlt	.+38     	; 0x2068 <ldexp+0x68>
    2042:	bb 27       	eor	r27, r27
    2044:	86 95       	lsr	r24
    2046:	77 95       	ror	r23
    2048:	67 95       	ror	r22
    204a:	b7 95       	ror	r27
    204c:	08 f4       	brcc	.+2      	; 0x2050 <ldexp+0x50>
    204e:	b1 60       	ori	r27, 0x01	; 1
    2050:	93 95       	inc	r25
    2052:	c1 f7       	brne	.-16     	; 0x2044 <ldexp+0x44>
    2054:	bb 0f       	add	r27, r27
    2056:	58 f7       	brcc	.-42     	; 0x202e <ldexp+0x2e>
    2058:	11 f4       	brne	.+4      	; 0x205e <ldexp+0x5e>
    205a:	60 ff       	sbrs	r22, 0
    205c:	e8 cf       	rjmp	.-48     	; 0x202e <ldexp+0x2e>
    205e:	6f 5f       	subi	r22, 0xFF	; 255
    2060:	7f 4f       	sbci	r23, 0xFF	; 255
    2062:	8f 4f       	sbci	r24, 0xFF	; 255
    2064:	9f 4f       	sbci	r25, 0xFF	; 255
    2066:	e3 cf       	rjmp	.-58     	; 0x202e <ldexp+0x2e>
    2068:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <__fp_szero>
    206c:	16 f0       	brts	.+4      	; 0x2072 <ldexp+0x72>
    206e:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__fp_mpack>
    2072:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__fp_nan>
    2076:	68 94       	set
    2078:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__fp_inf>

0000207c <log>:
    207c:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__fp_splitA>
    2080:	a8 f3       	brcs	.-22     	; 0x206c <ldexp+0x6c>
    2082:	99 23       	and	r25, r25
    2084:	c1 f3       	breq	.-16     	; 0x2076 <ldexp+0x76>
    2086:	ae f3       	brts	.-22     	; 0x2072 <ldexp+0x72>
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	1f 93       	push	r17
    208e:	0f 93       	push	r16
    2090:	ff 92       	push	r15
    2092:	c9 2f       	mov	r28, r25
    2094:	dd 27       	eor	r29, r29
    2096:	88 23       	and	r24, r24
    2098:	2a f0       	brmi	.+10     	; 0x20a4 <log+0x28>
    209a:	21 97       	sbiw	r28, 0x01	; 1
    209c:	66 0f       	add	r22, r22
    209e:	77 1f       	adc	r23, r23
    20a0:	88 1f       	adc	r24, r24
    20a2:	da f7       	brpl	.-10     	; 0x209a <log+0x1e>
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f eb       	ldi	r21, 0xBF	; 191
    20ac:	9f e3       	ldi	r25, 0x3F	; 63
    20ae:	88 39       	cpi	r24, 0x98	; 152
    20b0:	20 f0       	brcs	.+8      	; 0x20ba <log+0x3e>
    20b2:	80 3e       	cpi	r24, 0xE0	; 224
    20b4:	38 f0       	brcs	.+14     	; 0x20c4 <log+0x48>
    20b6:	21 96       	adiw	r28, 0x01	; 1
    20b8:	8f 77       	andi	r24, 0x7F	; 127
    20ba:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__addsf3>
    20be:	ec e7       	ldi	r30, 0x7C	; 124
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	04 c0       	rjmp	.+8      	; 0x20cc <log+0x50>
    20c4:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__addsf3>
    20c8:	e9 ea       	ldi	r30, 0xA9	; 169
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__fp_powser>
    20d0:	8b 01       	movw	r16, r22
    20d2:	be 01       	movw	r22, r28
    20d4:	ec 01       	movw	r28, r24
    20d6:	fb 2e       	mov	r15, r27
    20d8:	6f 57       	subi	r22, 0x7F	; 127
    20da:	71 09       	sbc	r23, r1
    20dc:	75 95       	asr	r23
    20de:	77 1f       	adc	r23, r23
    20e0:	88 0b       	sbc	r24, r24
    20e2:	99 0b       	sbc	r25, r25
    20e4:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <__floatsisf>
    20e8:	28 e1       	ldi	r18, 0x18	; 24
    20ea:	32 e7       	ldi	r19, 0x72	; 114
    20ec:	41 e3       	ldi	r20, 0x31	; 49
    20ee:	5f e3       	ldi	r21, 0x3F	; 63
    20f0:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <__mulsf3x>
    20f4:	af 2d       	mov	r26, r15
    20f6:	98 01       	movw	r18, r16
    20f8:	ae 01       	movw	r20, r28
    20fa:	ff 90       	pop	r15
    20fc:	0f 91       	pop	r16
    20fe:	1f 91       	pop	r17
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__addsf3x>
    2108:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <__fp_round>

0000210c <modf>:
    210c:	fa 01       	movw	r30, r20
    210e:	dc 01       	movw	r26, r24
    2110:	aa 0f       	add	r26, r26
    2112:	bb 1f       	adc	r27, r27
    2114:	9b 01       	movw	r18, r22
    2116:	ac 01       	movw	r20, r24
    2118:	bf 57       	subi	r27, 0x7F	; 127
    211a:	28 f4       	brcc	.+10     	; 0x2126 <modf+0x1a>
    211c:	22 27       	eor	r18, r18
    211e:	33 27       	eor	r19, r19
    2120:	44 27       	eor	r20, r20
    2122:	50 78       	andi	r21, 0x80	; 128
    2124:	20 c0       	rjmp	.+64     	; 0x2166 <modf+0x5a>
    2126:	b7 51       	subi	r27, 0x17	; 23
    2128:	90 f4       	brcc	.+36     	; 0x214e <modf+0x42>
    212a:	ab 2f       	mov	r26, r27
    212c:	00 24       	eor	r0, r0
    212e:	46 95       	lsr	r20
    2130:	37 95       	ror	r19
    2132:	27 95       	ror	r18
    2134:	01 1c       	adc	r0, r1
    2136:	a3 95       	inc	r26
    2138:	d2 f3       	brmi	.-12     	; 0x212e <modf+0x22>
    213a:	00 20       	and	r0, r0
    213c:	71 f0       	breq	.+28     	; 0x215a <modf+0x4e>
    213e:	22 0f       	add	r18, r18
    2140:	33 1f       	adc	r19, r19
    2142:	44 1f       	adc	r20, r20
    2144:	b3 95       	inc	r27
    2146:	da f3       	brmi	.-10     	; 0x213e <modf+0x32>
    2148:	0e d0       	rcall	.+28     	; 0x2166 <modf+0x5a>
    214a:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__subsf3>
    214e:	61 30       	cpi	r22, 0x01	; 1
    2150:	71 05       	cpc	r23, r1
    2152:	a0 e8       	ldi	r26, 0x80	; 128
    2154:	8a 07       	cpc	r24, r26
    2156:	b9 46       	sbci	r27, 0x69	; 105
    2158:	30 f4       	brcc	.+12     	; 0x2166 <modf+0x5a>
    215a:	9b 01       	movw	r18, r22
    215c:	ac 01       	movw	r20, r24
    215e:	66 27       	eor	r22, r22
    2160:	77 27       	eor	r23, r23
    2162:	88 27       	eor	r24, r24
    2164:	90 78       	andi	r25, 0x80	; 128
    2166:	30 96       	adiw	r30, 0x00	; 0
    2168:	21 f0       	breq	.+8      	; 0x2172 <modf+0x66>
    216a:	20 83       	st	Z, r18
    216c:	31 83       	std	Z+1, r19	; 0x01
    216e:	42 83       	std	Z+2, r20	; 0x02
    2170:	53 83       	std	Z+3, r21	; 0x03
    2172:	08 95       	ret

00002174 <__fp_mpack>:
    2174:	9f 3f       	cpi	r25, 0xFF	; 255
    2176:	31 f0       	breq	.+12     	; 0x2184 <__fp_mpack_finite+0xc>

00002178 <__fp_mpack_finite>:
    2178:	91 50       	subi	r25, 0x01	; 1
    217a:	20 f4       	brcc	.+8      	; 0x2184 <__fp_mpack_finite+0xc>
    217c:	87 95       	ror	r24
    217e:	77 95       	ror	r23
    2180:	67 95       	ror	r22
    2182:	b7 95       	ror	r27
    2184:	88 0f       	add	r24, r24
    2186:	91 1d       	adc	r25, r1
    2188:	96 95       	lsr	r25
    218a:	87 95       	ror	r24
    218c:	97 f9       	bld	r25, 7
    218e:	08 95       	ret

00002190 <strcmp>:
    2190:	fb 01       	movw	r30, r22
    2192:	dc 01       	movw	r26, r24
    2194:	8d 91       	ld	r24, X+
    2196:	01 90       	ld	r0, Z+
    2198:	80 19       	sub	r24, r0
    219a:	01 10       	cpse	r0, r1
    219c:	d9 f3       	breq	.-10     	; 0x2194 <strcmp+0x4>
    219e:	99 0b       	sbc	r25, r25
    21a0:	08 95       	ret

000021a2 <_exit>:
    21a2:	f8 94       	cli

000021a4 <__stop_program>:
    21a4:	ff cf       	rjmp	.-2      	; 0x21a4 <__stop_program>
