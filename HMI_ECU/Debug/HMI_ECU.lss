
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002896  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  00002896  0000292a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000076  008001a8  008001a8  00002a72  2**0
                  ALLOC
  3 .stab         00003138  00000000  00000000  00002a74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014b7  00000000  00000000  00005bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007063  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007074  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  000075de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00007ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  00007adf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__vector_6>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <__vector_9>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__vector_19>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	21 04       	cpc	r2, r1
      56:	23 04       	cpc	r2, r3
      58:	25 04       	cpc	r2, r5
      5a:	27 04       	cpc	r2, r7
      5c:	29 04       	cpc	r2, r9
      5e:	2b 04       	cpc	r2, r11
      60:	2d 04       	cpc	r2, r13
      62:	2f 04       	cpc	r2, r15
      64:	31 04       	cpc	r3, r1
      66:	33 04       	cpc	r3, r3
      68:	35 04       	cpc	r3, r5
      6a:	37 04       	cpc	r3, r7
      6c:	39 04       	cpc	r3, r9
      6e:	3b 04       	cpc	r3, r11
      70:	3d 04       	cpc	r3, r13
      72:	3f 04       	cpc	r3, r15

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf e5       	ldi	r28, 0x5F	; 95
      7a:	d4 e0       	ldi	r29, 0x04	; 4
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	11 e0       	ldi	r17, 0x01	; 1
      82:	a0 e6       	ldi	r26, 0x60	; 96
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	e6 e9       	ldi	r30, 0x96	; 150
      88:	f8 e2       	ldi	r31, 0x28	; 40
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a8 3a       	cpi	r26, 0xA8	; 168
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	22 e0       	ldi	r18, 0x02	; 2
      98:	a8 ea       	ldi	r26, 0xA8	; 168
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	ae 31       	cpi	r26, 0x1E	; 30
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
      aa:	0c 94 49 14 	jmp	0x2892	; 0x2892 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:
void readPassword(uint8 *data);

UART_configurationType UART_config ;
int main()

{	SREG|=(1<<7); /*Global interrupt enable */
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
      ba:	e9 97       	sbiw	r28, 0x39	; 57
      bc:	0f b6       	in	r0, 0x3f	; 63
      be:	f8 94       	cli
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	0f be       	out	0x3f, r0	; 63
      c4:	cd bf       	out	0x3d, r28	; 61
      c6:	8f e5       	ldi	r24, 0x5F	; 95
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	2f e5       	ldi	r18, 0x5F	; 95
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	f9 01       	movw	r30, r18
      d0:	20 81       	ld	r18, Z
      d2:	20 68       	ori	r18, 0x80	; 128
      d4:	fc 01       	movw	r30, r24
      d6:	20 83       	st	Z, r18
/*	initialize peripheral  */
	/* UART initialization */
	UART_config.buadRate=9600;
      d8:	80 e8       	ldi	r24, 0x80	; 128
      da:	95 e2       	ldi	r25, 0x25	; 37
      dc:	a0 e0       	ldi	r26, 0x00	; 0
      de:	b0 e0       	ldi	r27, 0x00	; 0
      e0:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <UART_config+0x1>
      e4:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <UART_config+0x2>
      e8:	a0 93 f1 01 	sts	0x01F1, r26	; 0x8001f1 <UART_config+0x3>
      ec:	b0 93 f2 01 	sts	0x01F2, r27	; 0x8001f2 <UART_config+0x4>
	UART_config.character_size=8;
      f0:	88 e0       	ldi	r24, 0x08	; 8
      f2:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <UART_config>
	strcpy(UART_config.mode,"double speed");
      f6:	8d e0       	ldi	r24, 0x0D	; 13
      f8:	e5 ec       	ldi	r30, 0xC5	; 197
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	a3 ef       	ldi	r26, 0xF3	; 243
      fe:	b1 e0       	ldi	r27, 0x01	; 1
     100:	01 90       	ld	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	8a 95       	dec	r24
     106:	e1 f7       	brne	.-8      	; 0x100 <main+0x4e>
	strcpy(UART_config.parity,"disable");
     108:	88 e0       	ldi	r24, 0x08	; 8
     10a:	e2 ed       	ldi	r30, 0xD2	; 210
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	a7 e0       	ldi	r26, 0x07	; 7
     110:	b2 e0       	ldi	r27, 0x02	; 2
     112:	01 90       	ld	r0, Z+
     114:	0d 92       	st	X+, r0
     116:	8a 95       	dec	r24
     118:	e1 f7       	brne	.-8      	; 0x112 <main+0x60>
	UART_config.stop_bit_number=1;
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <UART_config+0x2d>
	UART_init(&UART_config);
     120:	8e ee       	ldi	r24, 0xEE	; 238
     122:	91 e0       	ldi	r25, 0x01	; 1
     124:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <UART_init>

	/* LCD initialization */
LCD_init();
     128:	0e 94 45 04 	call	0x88a	; 0x88a <LCD_init>


while(1)
{
	/*receive the character from CONTROL ECU which indicate to specific action */
data=UART_receiveByte();
     12c:	0e 94 2c 11 	call	0x2258	; 0x2258 <UART_receiveByte>
     130:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <data>

/***************************************************************
* 		CASE 2 : first time and user should set password	*
* *************************************************************
*/
	if(data=='s')
     134:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <data>
     138:	83 37       	cpi	r24, 0x73	; 115
     13a:	09 f0       	breq	.+2      	; 0x13e <main+0x8c>
     13c:	9c c1       	rjmp	.+824    	; 0x476 <__stack+0x17>
				{/* read from user the password and confirm it
				*then compare the password and its confirm
				*if they are typical send them to CONTROL ECU to store it in EEPROM
				*else request it again
				*/
				LCD_clearScreen();
     13e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_clearScreen>
				LCD_displayString("set password");
     142:	8a ed       	ldi	r24, 0xDA	; 218
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <LCD_displayString>
				readPassword(set_password);
     14a:	89 ea       	ldi	r24, 0xA9	; 169
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	0e 94 0d 03 	call	0x61a	; 0x61a <readPassword>
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	aa ef       	ldi	r26, 0xFA	; 250
     158:	b3 e4       	ldi	r27, 0x43	; 67
     15a:	8d 83       	std	Y+5, r24	; 0x05
     15c:	9e 83       	std	Y+6, r25	; 0x06
     15e:	af 83       	std	Y+7, r26	; 0x07
     160:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     162:	20 e0       	ldi	r18, 0x00	; 0
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	4a ef       	ldi	r20, 0xFA	; 250
     168:	54 e4       	ldi	r21, 0x44	; 68
     16a:	6d 81       	ldd	r22, Y+5	; 0x05
     16c:	7e 81       	ldd	r23, Y+6	; 0x06
     16e:	8f 81       	ldd	r24, Y+7	; 0x07
     170:	98 85       	ldd	r25, Y+8	; 0x08
     172:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     176:	dc 01       	movw	r26, r24
     178:	cb 01       	movw	r24, r22
     17a:	8c 8f       	std	Y+28, r24	; 0x1c
     17c:	9d 8f       	std	Y+29, r25	; 0x1d
     17e:	ae 8f       	std	Y+30, r26	; 0x1e
     180:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	40 e8       	ldi	r20, 0x80	; 128
     188:	5f e3       	ldi	r21, 0x3F	; 63
     18a:	6c 8d       	ldd	r22, Y+28	; 0x1c
     18c:	7d 8d       	ldd	r23, Y+29	; 0x1d
     18e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     190:	9f 8d       	ldd	r25, Y+31	; 0x1f
     192:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__cmpsf2>
     196:	88 23       	and	r24, r24
     198:	2c f4       	brge	.+10     	; 0x1a4 <main+0xf2>
		__ticks = 1;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	99 a3       	std	Y+33, r25	; 0x21
     1a0:	88 a3       	std	Y+32, r24	; 0x20
     1a2:	3f c0       	rjmp	.+126    	; 0x222 <main+0x170>
	else if (__tmp > 65535)
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	3f ef       	ldi	r19, 0xFF	; 255
     1a8:	4f e7       	ldi	r20, 0x7F	; 127
     1aa:	57 e4       	ldi	r21, 0x47	; 71
     1ac:	6c 8d       	ldd	r22, Y+28	; 0x1c
     1ae:	7d 8d       	ldd	r23, Y+29	; 0x1d
     1b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     1b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     1b4:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
     1b8:	18 16       	cp	r1, r24
     1ba:	4c f5       	brge	.+82     	; 0x20e <main+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	40 e2       	ldi	r20, 0x20	; 32
     1c2:	51 e4       	ldi	r21, 0x41	; 65
     1c4:	6d 81       	ldd	r22, Y+5	; 0x05
     1c6:	7e 81       	ldd	r23, Y+6	; 0x06
     1c8:	8f 81       	ldd	r24, Y+7	; 0x07
     1ca:	98 85       	ldd	r25, Y+8	; 0x08
     1cc:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     1d0:	dc 01       	movw	r26, r24
     1d2:	cb 01       	movw	r24, r22
     1d4:	bc 01       	movw	r22, r24
     1d6:	cd 01       	movw	r24, r26
     1d8:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     1dc:	dc 01       	movw	r26, r24
     1de:	cb 01       	movw	r24, r22
     1e0:	99 a3       	std	Y+33, r25	; 0x21
     1e2:	88 a3       	std	Y+32, r24	; 0x20
     1e4:	0f c0       	rjmp	.+30     	; 0x204 <main+0x152>
     1e6:	88 ec       	ldi	r24, 0xC8	; 200
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	9b a3       	std	Y+35, r25	; 0x23
     1ec:	8a a3       	std	Y+34, r24	; 0x22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ee:	8a a1       	ldd	r24, Y+34	; 0x22
     1f0:	9b a1       	ldd	r25, Y+35	; 0x23
     1f2:	01 97       	sbiw	r24, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <main+0x140>
     1f6:	9b a3       	std	Y+35, r25	; 0x23
     1f8:	8a a3       	std	Y+34, r24	; 0x22
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1fa:	88 a1       	ldd	r24, Y+32	; 0x20
     1fc:	99 a1       	ldd	r25, Y+33	; 0x21
     1fe:	01 97       	sbiw	r24, 0x01	; 1
     200:	99 a3       	std	Y+33, r25	; 0x21
     202:	88 a3       	std	Y+32, r24	; 0x20
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     204:	88 a1       	ldd	r24, Y+32	; 0x20
     206:	99 a1       	ldd	r25, Y+33	; 0x21
     208:	89 2b       	or	r24, r25
     20a:	69 f7       	brne	.-38     	; 0x1e6 <main+0x134>
     20c:	14 c0       	rjmp	.+40     	; 0x236 <main+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     20e:	6c 8d       	ldd	r22, Y+28	; 0x1c
     210:	7d 8d       	ldd	r23, Y+29	; 0x1d
     212:	8e 8d       	ldd	r24, Y+30	; 0x1e
     214:	9f 8d       	ldd	r25, Y+31	; 0x1f
     216:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     21a:	dc 01       	movw	r26, r24
     21c:	cb 01       	movw	r24, r22
     21e:	99 a3       	std	Y+33, r25	; 0x21
     220:	88 a3       	std	Y+32, r24	; 0x20
     222:	88 a1       	ldd	r24, Y+32	; 0x20
     224:	99 a1       	ldd	r25, Y+33	; 0x21
     226:	9d a3       	std	Y+37, r25	; 0x25
     228:	8c a3       	std	Y+36, r24	; 0x24
     22a:	8c a1       	ldd	r24, Y+36	; 0x24
     22c:	9d a1       	ldd	r25, Y+37	; 0x25
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <main+0x17c>
     232:	9d a3       	std	Y+37, r25	; 0x25
     234:	8c a3       	std	Y+36, r24	; 0x24
				_delay_ms(500);
				LCD_clearScreen();
     236:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_clearScreen>
				LCD_displayString("confirm password");
     23a:	87 ee       	ldi	r24, 0xE7	; 231
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <LCD_displayString>
				readPassword(confirm_password);
     242:	89 eb       	ldi	r24, 0xB9	; 185
     244:	91 e0       	ldi	r25, 0x01	; 1
     246:	0e 94 0d 03 	call	0x61a	; 0x61a <readPassword>
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	aa ef       	ldi	r26, 0xFA	; 250
     250:	b3 e4       	ldi	r27, 0x43	; 67
     252:	8e 87       	std	Y+14, r24	; 0x0e
     254:	9f 87       	std	Y+15, r25	; 0x0f
     256:	a8 8b       	std	Y+16, r26	; 0x10
     258:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	4a ef       	ldi	r20, 0xFA	; 250
     260:	54 e4       	ldi	r21, 0x44	; 68
     262:	6e 85       	ldd	r22, Y+14	; 0x0e
     264:	7f 85       	ldd	r23, Y+15	; 0x0f
     266:	88 89       	ldd	r24, Y+16	; 0x10
     268:	99 89       	ldd	r25, Y+17	; 0x11
     26a:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     26e:	dc 01       	movw	r26, r24
     270:	cb 01       	movw	r24, r22
     272:	8a 8b       	std	Y+18, r24	; 0x12
     274:	9b 8b       	std	Y+19, r25	; 0x13
     276:	ac 8b       	std	Y+20, r26	; 0x14
     278:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e8       	ldi	r20, 0x80	; 128
     280:	5f e3       	ldi	r21, 0x3F	; 63
     282:	6a 89       	ldd	r22, Y+18	; 0x12
     284:	7b 89       	ldd	r23, Y+19	; 0x13
     286:	8c 89       	ldd	r24, Y+20	; 0x14
     288:	9d 89       	ldd	r25, Y+21	; 0x15
     28a:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__cmpsf2>
     28e:	88 23       	and	r24, r24
     290:	2c f4       	brge	.+10     	; 0x29c <main+0x1ea>
		__ticks = 1;
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	9f 8b       	std	Y+23, r25	; 0x17
     298:	8e 8b       	std	Y+22, r24	; 0x16
     29a:	3f c0       	rjmp	.+126    	; 0x31a <main+0x268>
	else if (__tmp > 65535)
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	3f ef       	ldi	r19, 0xFF	; 255
     2a0:	4f e7       	ldi	r20, 0x7F	; 127
     2a2:	57 e4       	ldi	r21, 0x47	; 71
     2a4:	6a 89       	ldd	r22, Y+18	; 0x12
     2a6:	7b 89       	ldd	r23, Y+19	; 0x13
     2a8:	8c 89       	ldd	r24, Y+20	; 0x14
     2aa:	9d 89       	ldd	r25, Y+21	; 0x15
     2ac:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
     2b0:	18 16       	cp	r1, r24
     2b2:	4c f5       	brge	.+82     	; 0x306 <main+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	40 e2       	ldi	r20, 0x20	; 32
     2ba:	51 e4       	ldi	r21, 0x41	; 65
     2bc:	6e 85       	ldd	r22, Y+14	; 0x0e
     2be:	7f 85       	ldd	r23, Y+15	; 0x0f
     2c0:	88 89       	ldd	r24, Y+16	; 0x10
     2c2:	99 89       	ldd	r25, Y+17	; 0x11
     2c4:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     2c8:	dc 01       	movw	r26, r24
     2ca:	cb 01       	movw	r24, r22
     2cc:	bc 01       	movw	r22, r24
     2ce:	cd 01       	movw	r24, r26
     2d0:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     2d4:	dc 01       	movw	r26, r24
     2d6:	cb 01       	movw	r24, r22
     2d8:	9f 8b       	std	Y+23, r25	; 0x17
     2da:	8e 8b       	std	Y+22, r24	; 0x16
     2dc:	0f c0       	rjmp	.+30     	; 0x2fc <main+0x24a>
     2de:	88 ec       	ldi	r24, 0xC8	; 200
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	99 8f       	std	Y+25, r25	; 0x19
     2e4:	88 8f       	std	Y+24, r24	; 0x18
     2e6:	88 8d       	ldd	r24, Y+24	; 0x18
     2e8:	99 8d       	ldd	r25, Y+25	; 0x19
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0x238>
     2ee:	99 8f       	std	Y+25, r25	; 0x19
     2f0:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2f2:	8e 89       	ldd	r24, Y+22	; 0x16
     2f4:	9f 89       	ldd	r25, Y+23	; 0x17
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	9f 8b       	std	Y+23, r25	; 0x17
     2fa:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2fc:	8e 89       	ldd	r24, Y+22	; 0x16
     2fe:	9f 89       	ldd	r25, Y+23	; 0x17
     300:	89 2b       	or	r24, r25
     302:	69 f7       	brne	.-38     	; 0x2de <main+0x22c>
     304:	14 c0       	rjmp	.+40     	; 0x32e <main+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     306:	6a 89       	ldd	r22, Y+18	; 0x12
     308:	7b 89       	ldd	r23, Y+19	; 0x13
     30a:	8c 89       	ldd	r24, Y+20	; 0x14
     30c:	9d 89       	ldd	r25, Y+21	; 0x15
     30e:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	9f 8b       	std	Y+23, r25	; 0x17
     318:	8e 8b       	std	Y+22, r24	; 0x16
     31a:	8e 89       	ldd	r24, Y+22	; 0x16
     31c:	9f 89       	ldd	r25, Y+23	; 0x17
     31e:	9b 8f       	std	Y+27, r25	; 0x1b
     320:	8a 8f       	std	Y+26, r24	; 0x1a
     322:	8a 8d       	ldd	r24, Y+26	; 0x1a
     324:	9b 8d       	ldd	r25, Y+27	; 0x1b
     326:	01 97       	sbiw	r24, 0x01	; 1
     328:	f1 f7       	brne	.-4      	; 0x326 <main+0x274>
     32a:	9b 8f       	std	Y+27, r25	; 0x1b
     32c:	8a 8f       	std	Y+26, r24	; 0x1a
				_delay_ms(500);
				LCD_clearScreen();
     32e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_clearScreen>

				if(!strcmp(set_password,confirm_password))
     332:	69 eb       	ldi	r22, 0xB9	; 185
     334:	71 e0       	ldi	r23, 0x01	; 1
     336:	89 ea       	ldi	r24, 0xA9	; 169
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
     33e:	89 2b       	or	r24, r25
     340:	09 f0       	breq	.+2      	; 0x344 <main+0x292>
     342:	fd ce       	rjmp	.-518    	; 0x13e <main+0x8c>
				{	LCD_clearScreen();
     344:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_clearScreen>
					LCD_displayString("saved");
     348:	88 ef       	ldi	r24, 0xF8	; 248
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <LCD_displayString>
					UART_sendString(confirm_password);
     350:	89 eb       	ldi	r24, 0xB9	; 185
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART_sendString>
					break;
     358:	00 00       	nop
					}
				}
		/*give user option to open the door */
		LCD_clearScreen();
     35a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_clearScreen>
		LCD_displayString("press enter to ");
     35e:	8e ef       	ldi	r24, 0xFE	; 254
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <LCD_displayString>
		LCD_displayStringRowColumn(1,0 ,"  open the door");
     366:	4e e0       	ldi	r20, 0x0E	; 14
     368:	51 e0       	ldi	r21, 0x01	; 1
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <LCD_displayStringRowColumn>
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	aa ef       	ldi	r26, 0xFA	; 250
     378:	b3 e4       	ldi	r27, 0x43	; 67
     37a:	89 83       	std	Y+1, r24	; 0x01
     37c:	9a 83       	std	Y+2, r25	; 0x02
     37e:	ab 83       	std	Y+3, r26	; 0x03
     380:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	4a ef       	ldi	r20, 0xFA	; 250
     388:	54 e4       	ldi	r21, 0x44	; 68
     38a:	69 81       	ldd	r22, Y+1	; 0x01
     38c:	7a 81       	ldd	r23, Y+2	; 0x02
     38e:	8b 81       	ldd	r24, Y+3	; 0x03
     390:	9c 81       	ldd	r25, Y+4	; 0x04
     392:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     396:	dc 01       	movw	r26, r24
     398:	cb 01       	movw	r24, r22
     39a:	8e a3       	std	Y+38, r24	; 0x26
     39c:	9f a3       	std	Y+39, r25	; 0x27
     39e:	a8 a7       	std	Y+40, r26	; 0x28
     3a0:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	40 e8       	ldi	r20, 0x80	; 128
     3a8:	5f e3       	ldi	r21, 0x3F	; 63
     3aa:	6e a1       	ldd	r22, Y+38	; 0x26
     3ac:	7f a1       	ldd	r23, Y+39	; 0x27
     3ae:	88 a5       	ldd	r24, Y+40	; 0x28
     3b0:	99 a5       	ldd	r25, Y+41	; 0x29
     3b2:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__cmpsf2>
     3b6:	88 23       	and	r24, r24
     3b8:	0c f0       	brlt	.+2      	; 0x3bc <main+0x30a>
     3ba:	05 c0       	rjmp	.+10     	; 0x3c6 <main+0x314>
		__ticks = 1;
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	9b a7       	std	Y+43, r25	; 0x2b
     3c2:	8a a7       	std	Y+42, r24	; 0x2a
     3c4:	3f c0       	rjmp	.+126    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	else if (__tmp > 65535)
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	3f ef       	ldi	r19, 0xFF	; 255
     3ca:	4f e7       	ldi	r20, 0x7F	; 127
     3cc:	57 e4       	ldi	r21, 0x47	; 71
     3ce:	6e a1       	ldd	r22, Y+38	; 0x26
     3d0:	7f a1       	ldd	r23, Y+39	; 0x27
     3d2:	88 a5       	ldd	r24, Y+40	; 0x28
     3d4:	99 a5       	ldd	r25, Y+41	; 0x29
     3d6:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
     3da:	18 16       	cp	r1, r24
     3dc:	4c f5       	brge	.+82     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	40 e2       	ldi	r20, 0x20	; 32
     3e4:	51 e4       	ldi	r21, 0x41	; 65
     3e6:	69 81       	ldd	r22, Y+1	; 0x01
     3e8:	7a 81       	ldd	r23, Y+2	; 0x02
     3ea:	8b 81       	ldd	r24, Y+3	; 0x03
     3ec:	9c 81       	ldd	r25, Y+4	; 0x04
     3ee:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     3f2:	dc 01       	movw	r26, r24
     3f4:	cb 01       	movw	r24, r22
     3f6:	bc 01       	movw	r22, r24
     3f8:	cd 01       	movw	r24, r26
     3fa:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     3fe:	dc 01       	movw	r26, r24
     400:	cb 01       	movw	r24, r22
     402:	9b a7       	std	Y+43, r25	; 0x2b
     404:	8a a7       	std	Y+42, r24	; 0x2a
     406:	0f c0       	rjmp	.+30     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     408:	88 ec       	ldi	r24, 0xC8	; 200
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	9d a7       	std	Y+45, r25	; 0x2d
     40e:	8c a7       	std	Y+44, r24	; 0x2c
     410:	8c a5       	ldd	r24, Y+44	; 0x2c
     412:	9d a5       	ldd	r25, Y+45	; 0x2d
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     418:	9d a7       	std	Y+45, r25	; 0x2d
     41a:	8c a7       	std	Y+44, r24	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     41c:	8a a5       	ldd	r24, Y+42	; 0x2a
     41e:	9b a5       	ldd	r25, Y+43	; 0x2b
     420:	01 97       	sbiw	r24, 0x01	; 1
     422:	9b a7       	std	Y+43, r25	; 0x2b
     424:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     426:	8a a5       	ldd	r24, Y+42	; 0x2a
     428:	9b a5       	ldd	r25, Y+43	; 0x2b
     42a:	89 2b       	or	r24, r25
     42c:	69 f7       	brne	.-38     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     42e:	14 c0       	rjmp	.+40     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     430:	6e a1       	ldd	r22, Y+38	; 0x26
     432:	7f a1       	ldd	r23, Y+39	; 0x27
     434:	88 a5       	ldd	r24, Y+40	; 0x28
     436:	99 a5       	ldd	r25, Y+41	; 0x29
     438:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     43c:	dc 01       	movw	r26, r24
     43e:	cb 01       	movw	r24, r22
     440:	9b a7       	std	Y+43, r25	; 0x2b
     442:	8a a7       	std	Y+42, r24	; 0x2a
     444:	8a a5       	ldd	r24, Y+42	; 0x2a
     446:	9b a5       	ldd	r25, Y+43	; 0x2b
     448:	9f a7       	std	Y+47, r25	; 0x2f
     44a:	8e a7       	std	Y+46, r24	; 0x2e
     44c:	8e a5       	ldd	r24, Y+46	; 0x2e
     44e:	9f a5       	ldd	r25, Y+47	; 0x2f
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	f1 f7       	brne	.-4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     454:	9f a7       	std	Y+47, r25	; 0x2f
     456:	8e a7       	std	Y+46, r24	; 0x2e
		_delay_ms(500);
		confirm_key=KeyPad_getPressedKey();
     458:	0e 94 b1 03 	call	0x762	; 0x762 <KeyPad_getPressedKey>
     45c:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <confirm_key>
		if(confirm_key==13)
     460:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <confirm_key>
     464:	8d 30       	cpi	r24, 0x0D	; 13
     466:	09 f0       	breq	.+2      	; 0x46a <__stack+0xb>
     468:	61 ce       	rjmp	.-830    	; 0x12c <main+0x7a>
		{
		UART_sendByte('o');
     46a:	8f e6       	ldi	r24, 0x6F	; 111
     46c:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
		LCD_clearScreen();
     470:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_clearScreen>
     474:	5b ce       	rjmp	.-842    	; 0x12c <main+0x7a>
	}
	/***************************************************************
	* 		CASE 0 : password already set	*
	* *************************************************************
	*/
	else if(data=='e')
     476:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <data>
     47a:	85 36       	cpi	r24, 0x65	; 101
     47c:	09 f0       	breq	.+2      	; 0x480 <__stack+0x21>
     47e:	ae c0       	rjmp	.+348    	; 0x5dc <__stack+0x17d>
		*if CONTROL ECU confirm the entered password
		*give the user two options open the door or set new password
		*else reruest the the password again
		*/
		while(1)
		{	LCD_clearScreen();
     480:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_clearScreen>
				LCD_displayString("enter password");
     484:	8e e1       	ldi	r24, 0x1E	; 30
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <LCD_displayString>
				readPassword(password);
     48c:	89 ec       	ldi	r24, 0xC9	; 201
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 0d 03 	call	0x61a	; 0x61a <readPassword>

				 	 UART_sendString(password);
     494:	89 ec       	ldi	r24, 0xC9	; 201
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	0e 94 62 11 	call	0x22c4	; 0x22c4 <UART_sendString>
				 	uint8 temp_data=UART_receiveByte();
     49c:	0e 94 2c 11 	call	0x2258	; 0x2258 <UART_receiveByte>
     4a0:	8d 87       	std	Y+13, r24	; 0x0d
				 	 if(temp_data=='w')
     4a2:	8d 85       	ldd	r24, Y+13	; 0x0d
     4a4:	87 37       	cpi	r24, 0x77	; 119
     4a6:	09 f0       	breq	.+2      	; 0x4aa <__stack+0x4b>
     4a8:	92 c0       	rjmp	.+292    	; 0x5ce <__stack+0x16f>
				 	 {
			 	LCD_clearScreen();
     4aa:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_clearScreen>
				LCD_displayString("press 1 to open");
     4ae:	8d e2       	ldi	r24, 0x2D	; 45
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <LCD_displayString>
				LCD_displayStringRowColumn(1,0 ,"2 to set password");
     4b6:	4d e3       	ldi	r20, 0x3D	; 61
     4b8:	51 e0       	ldi	r21, 0x01	; 1
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	0e 94 4a 0b 	call	0x1694	; 0x1694 <LCD_displayStringRowColumn>
				confirm_key2=KeyPad_getPressedKey();
     4c2:	0e 94 b1 03 	call	0x762	; 0x762 <KeyPad_getPressedKey>
     4c6:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <confirm_key2>
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	a8 ec       	ldi	r26, 0xC8	; 200
     4d0:	b3 e4       	ldi	r27, 0x43	; 67
     4d2:	89 87       	std	Y+9, r24	; 0x09
     4d4:	9a 87       	std	Y+10, r25	; 0x0a
     4d6:	ab 87       	std	Y+11, r26	; 0x0b
     4d8:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	4a ef       	ldi	r20, 0xFA	; 250
     4e0:	54 e4       	ldi	r21, 0x44	; 68
     4e2:	69 85       	ldd	r22, Y+9	; 0x09
     4e4:	7a 85       	ldd	r23, Y+10	; 0x0a
     4e6:	8b 85       	ldd	r24, Y+11	; 0x0b
     4e8:	9c 85       	ldd	r25, Y+12	; 0x0c
     4ea:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     4ee:	dc 01       	movw	r26, r24
     4f0:	cb 01       	movw	r24, r22
     4f2:	88 ab       	std	Y+48, r24	; 0x30
     4f4:	99 ab       	std	Y+49, r25	; 0x31
     4f6:	aa ab       	std	Y+50, r26	; 0x32
     4f8:	bb ab       	std	Y+51, r27	; 0x33
	if (__tmp < 1.0)
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	40 e8       	ldi	r20, 0x80	; 128
     500:	5f e3       	ldi	r21, 0x3F	; 63
     502:	68 a9       	ldd	r22, Y+48	; 0x30
     504:	79 a9       	ldd	r23, Y+49	; 0x31
     506:	8a a9       	ldd	r24, Y+50	; 0x32
     508:	9b a9       	ldd	r25, Y+51	; 0x33
     50a:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__cmpsf2>
     50e:	88 23       	and	r24, r24
     510:	2c f4       	brge	.+10     	; 0x51c <__stack+0xbd>
		__ticks = 1;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	9d ab       	std	Y+53, r25	; 0x35
     518:	8c ab       	std	Y+52, r24	; 0x34
     51a:	3f c0       	rjmp	.+126    	; 0x59a <__stack+0x13b>
	else if (__tmp > 65535)
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	3f ef       	ldi	r19, 0xFF	; 255
     520:	4f e7       	ldi	r20, 0x7F	; 127
     522:	57 e4       	ldi	r21, 0x47	; 71
     524:	68 a9       	ldd	r22, Y+48	; 0x30
     526:	79 a9       	ldd	r23, Y+49	; 0x31
     528:	8a a9       	ldd	r24, Y+50	; 0x32
     52a:	9b a9       	ldd	r25, Y+51	; 0x33
     52c:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
     530:	18 16       	cp	r1, r24
     532:	4c f5       	brge	.+82     	; 0x586 <__stack+0x127>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e2       	ldi	r20, 0x20	; 32
     53a:	51 e4       	ldi	r21, 0x41	; 65
     53c:	69 85       	ldd	r22, Y+9	; 0x09
     53e:	7a 85       	ldd	r23, Y+10	; 0x0a
     540:	8b 85       	ldd	r24, Y+11	; 0x0b
     542:	9c 85       	ldd	r25, Y+12	; 0x0c
     544:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     548:	dc 01       	movw	r26, r24
     54a:	cb 01       	movw	r24, r22
     54c:	bc 01       	movw	r22, r24
     54e:	cd 01       	movw	r24, r26
     550:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	9d ab       	std	Y+53, r25	; 0x35
     55a:	8c ab       	std	Y+52, r24	; 0x34
     55c:	0f c0       	rjmp	.+30     	; 0x57c <__stack+0x11d>
     55e:	88 ec       	ldi	r24, 0xC8	; 200
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	9f ab       	std	Y+55, r25	; 0x37
     564:	8e ab       	std	Y+54, r24	; 0x36
     566:	8e a9       	ldd	r24, Y+54	; 0x36
     568:	9f a9       	ldd	r25, Y+55	; 0x37
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <__stack+0x10b>
     56e:	9f ab       	std	Y+55, r25	; 0x37
     570:	8e ab       	std	Y+54, r24	; 0x36
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     572:	8c a9       	ldd	r24, Y+52	; 0x34
     574:	9d a9       	ldd	r25, Y+53	; 0x35
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	9d ab       	std	Y+53, r25	; 0x35
     57a:	8c ab       	std	Y+52, r24	; 0x34
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     57c:	8c a9       	ldd	r24, Y+52	; 0x34
     57e:	9d a9       	ldd	r25, Y+53	; 0x35
     580:	89 2b       	or	r24, r25
     582:	69 f7       	brne	.-38     	; 0x55e <__stack+0xff>
     584:	14 c0       	rjmp	.+40     	; 0x5ae <__stack+0x14f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     586:	68 a9       	ldd	r22, Y+48	; 0x30
     588:	79 a9       	ldd	r23, Y+49	; 0x31
     58a:	8a a9       	ldd	r24, Y+50	; 0x32
     58c:	9b a9       	ldd	r25, Y+51	; 0x33
     58e:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     592:	dc 01       	movw	r26, r24
     594:	cb 01       	movw	r24, r22
     596:	9d ab       	std	Y+53, r25	; 0x35
     598:	8c ab       	std	Y+52, r24	; 0x34
     59a:	8c a9       	ldd	r24, Y+52	; 0x34
     59c:	9d a9       	ldd	r25, Y+53	; 0x35
     59e:	99 af       	std	Y+57, r25	; 0x39
     5a0:	88 af       	std	Y+56, r24	; 0x38
     5a2:	88 ad       	ldd	r24, Y+56	; 0x38
     5a4:	99 ad       	ldd	r25, Y+57	; 0x39
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <__stack+0x147>
     5aa:	99 af       	std	Y+57, r25	; 0x39
     5ac:	88 af       	std	Y+56, r24	; 0x38
				_delay_ms(400);
						if(confirm_key2==2)
     5ae:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <confirm_key2>
     5b2:	82 30       	cpi	r24, 0x02	; 2
     5b4:	21 f4       	brne	.+8      	; 0x5be <__stack+0x15f>
						UART_sendByte('s');
     5b6:	83 e7       	ldi	r24, 0x73	; 115
     5b8:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
						else if(confirm_key2==1)
						UART_sendByte('o');
						break;
     5bc:	17 c0       	rjmp	.+46     	; 0x5ec <__stack+0x18d>
				LCD_displayStringRowColumn(1,0 ,"2 to set password");
				confirm_key2=KeyPad_getPressedKey();
				_delay_ms(400);
						if(confirm_key2==2)
						UART_sendByte('s');
						else if(confirm_key2==1)
     5be:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <confirm_key2>
     5c2:	81 30       	cpi	r24, 0x01	; 1
     5c4:	99 f4       	brne	.+38     	; 0x5ec <__stack+0x18d>
						UART_sendByte('o');
     5c6:	8f e6       	ldi	r24, 0x6F	; 111
     5c8:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
						break;
     5cc:	0f c0       	rjmp	.+30     	; 0x5ec <__stack+0x18d>
				 	 }
				 	 else if(temp_data=='B')
     5ce:	8d 85       	ldd	r24, Y+13	; 0x0d
     5d0:	82 34       	cpi	r24, 0x42	; 66
     5d2:	09 f0       	breq	.+2      	; 0x5d6 <__stack+0x177>
     5d4:	55 cf       	rjmp	.-342    	; 0x480 <__stack+0x21>
				 		 {LCD_clearScreen();
     5d6:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_clearScreen>
				 		 break;
     5da:	09 c0       	rjmp	.+18     	; 0x5ee <__stack+0x18f>
	}
	/*******************************************************************************
	* 		CASE 1 : password already set and user try enter password than 3 times	*
	* ******************************************************************************
	*/
	else if(data=='B')
     5dc:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <data>
     5e0:	82 34       	cpi	r24, 0x42	; 66
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <__stack+0x187>
     5e4:	a3 cd       	rjmp	.-1210   	; 0x12c <main+0x7a>
	{
		LCD_clearScreen();
     5e6:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <LCD_clearScreen>
     5ea:	a0 cd       	rjmp	.-1216   	; 0x12c <main+0x7a>
				_delay_ms(400);
						if(confirm_key2==2)
						UART_sendByte('s');
						else if(confirm_key2==1)
						UART_sendByte('o');
						break;
     5ec:	00 00       	nop
	{
		LCD_clearScreen();

	}

}
     5ee:	9e cd       	rjmp	.-1220   	; 0x12c <main+0x7a>

000005f0 <intgerToString>:
/***************************************************************
 * 					functions definition 			*
 * *************************************************************
 */
void intgerToString(int data)
{
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <intgerToString+0x6>
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	9a 83       	std	Y+2, r25	; 0x02
     5fc:	89 83       	std	Y+1, r24	; 0x01
	/* buffer to hold acii result */
	itoa(data,buff,10); /* 10 for decimal base */
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	9a 81       	ldd	r25, Y+2	; 0x02
     602:	4a e0       	ldi	r20, 0x0A	; 10
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	6d ed       	ldi	r22, 0xDD	; 221
     608:	71 e0       	ldi	r23, 0x01	; 1
     60a:	0e 94 09 14 	call	0x2812	; 0x2812 <itoa>
}
     60e:	00 00       	nop
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <readPassword>:

 void readPassword(uint8 *data)
 {
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	60 97       	sbiw	r28, 0x10	; 16
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	f8 94       	cli
     628:	de bf       	out	0x3e, r29	; 62
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	98 8b       	std	Y+16, r25	; 0x10
     630:	8f 87       	std	Y+15, r24	; 0x0f
	 	while(enter==1)
     632:	86 c0       	rjmp	.+268    	; 0x740 <readPassword+0x126>
	 	{
	 	key =KeyPad_getPressedKey();
     634:	0e 94 b1 03 	call	0x762	; 0x762 <KeyPad_getPressedKey>
     638:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <__data_end>
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	a8 ec       	ldi	r26, 0xC8	; 200
     642:	b3 e4       	ldi	r27, 0x43	; 67
     644:	89 83       	std	Y+1, r24	; 0x01
     646:	9a 83       	std	Y+2, r25	; 0x02
     648:	ab 83       	std	Y+3, r26	; 0x03
     64a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	4a ef       	ldi	r20, 0xFA	; 250
     652:	54 e4       	ldi	r21, 0x44	; 68
     654:	69 81       	ldd	r22, Y+1	; 0x01
     656:	7a 81       	ldd	r23, Y+2	; 0x02
     658:	8b 81       	ldd	r24, Y+3	; 0x03
     65a:	9c 81       	ldd	r25, Y+4	; 0x04
     65c:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     660:	dc 01       	movw	r26, r24
     662:	cb 01       	movw	r24, r22
     664:	8d 83       	std	Y+5, r24	; 0x05
     666:	9e 83       	std	Y+6, r25	; 0x06
     668:	af 83       	std	Y+7, r26	; 0x07
     66a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	40 e8       	ldi	r20, 0x80	; 128
     672:	5f e3       	ldi	r21, 0x3F	; 63
     674:	6d 81       	ldd	r22, Y+5	; 0x05
     676:	7e 81       	ldd	r23, Y+6	; 0x06
     678:	8f 81       	ldd	r24, Y+7	; 0x07
     67a:	98 85       	ldd	r25, Y+8	; 0x08
     67c:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__cmpsf2>
     680:	88 23       	and	r24, r24
     682:	2c f4       	brge	.+10     	; 0x68e <readPassword+0x74>
		__ticks = 1;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	9a 87       	std	Y+10, r25	; 0x0a
     68a:	89 87       	std	Y+9, r24	; 0x09
     68c:	3f c0       	rjmp	.+126    	; 0x70c <readPassword+0xf2>
	else if (__tmp > 65535)
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	3f ef       	ldi	r19, 0xFF	; 255
     692:	4f e7       	ldi	r20, 0x7F	; 127
     694:	57 e4       	ldi	r21, 0x47	; 71
     696:	6d 81       	ldd	r22, Y+5	; 0x05
     698:	7e 81       	ldd	r23, Y+6	; 0x06
     69a:	8f 81       	ldd	r24, Y+7	; 0x07
     69c:	98 85       	ldd	r25, Y+8	; 0x08
     69e:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
     6a2:	18 16       	cp	r1, r24
     6a4:	4c f5       	brge	.+82     	; 0x6f8 <readPassword+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	40 e2       	ldi	r20, 0x20	; 32
     6ac:	51 e4       	ldi	r21, 0x41	; 65
     6ae:	69 81       	ldd	r22, Y+1	; 0x01
     6b0:	7a 81       	ldd	r23, Y+2	; 0x02
     6b2:	8b 81       	ldd	r24, Y+3	; 0x03
     6b4:	9c 81       	ldd	r25, Y+4	; 0x04
     6b6:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     6ba:	dc 01       	movw	r26, r24
     6bc:	cb 01       	movw	r24, r22
     6be:	bc 01       	movw	r22, r24
     6c0:	cd 01       	movw	r24, r26
     6c2:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	9a 87       	std	Y+10, r25	; 0x0a
     6cc:	89 87       	std	Y+9, r24	; 0x09
     6ce:	0f c0       	rjmp	.+30     	; 0x6ee <readPassword+0xd4>
     6d0:	88 ec       	ldi	r24, 0xC8	; 200
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	9c 87       	std	Y+12, r25	; 0x0c
     6d6:	8b 87       	std	Y+11, r24	; 0x0b
     6d8:	8b 85       	ldd	r24, Y+11	; 0x0b
     6da:	9c 85       	ldd	r25, Y+12	; 0x0c
     6dc:	01 97       	sbiw	r24, 0x01	; 1
     6de:	f1 f7       	brne	.-4      	; 0x6dc <readPassword+0xc2>
     6e0:	9c 87       	std	Y+12, r25	; 0x0c
     6e2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6e4:	89 85       	ldd	r24, Y+9	; 0x09
     6e6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6e8:	01 97       	sbiw	r24, 0x01	; 1
     6ea:	9a 87       	std	Y+10, r25	; 0x0a
     6ec:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6ee:	89 85       	ldd	r24, Y+9	; 0x09
     6f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f2:	89 2b       	or	r24, r25
     6f4:	69 f7       	brne	.-38     	; 0x6d0 <readPassword+0xb6>
     6f6:	14 c0       	rjmp	.+40     	; 0x720 <readPassword+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6f8:	6d 81       	ldd	r22, Y+5	; 0x05
     6fa:	7e 81       	ldd	r23, Y+6	; 0x06
     6fc:	8f 81       	ldd	r24, Y+7	; 0x07
     6fe:	98 85       	ldd	r25, Y+8	; 0x08
     700:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     704:	dc 01       	movw	r26, r24
     706:	cb 01       	movw	r24, r22
     708:	9a 87       	std	Y+10, r25	; 0x0a
     70a:	89 87       	std	Y+9, r24	; 0x09
     70c:	89 85       	ldd	r24, Y+9	; 0x09
     70e:	9a 85       	ldd	r25, Y+10	; 0x0a
     710:	9e 87       	std	Y+14, r25	; 0x0e
     712:	8d 87       	std	Y+13, r24	; 0x0d
     714:	8d 85       	ldd	r24, Y+13	; 0x0d
     716:	9e 85       	ldd	r25, Y+14	; 0x0e
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	f1 f7       	brne	.-4      	; 0x718 <readPassword+0xfe>
     71c:	9e 87       	std	Y+14, r25	; 0x0e
     71e:	8d 87       	std	Y+13, r24	; 0x0d
	 	_delay_ms(400);
	 	if(key==13) /* enter*/
     720:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end>
     724:	8d 30       	cpi	r24, 0x0D	; 13
     726:	91 f0       	breq	.+36     	; 0x74c <readPassword+0x132>
	 		break;
	 	intgerToString(key);
     728:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <__data_end>
     72c:	88 2f       	mov	r24, r24
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <intgerToString>
	 	strcat(data,buff);
     734:	8f 85       	ldd	r24, Y+15	; 0x0f
     736:	98 89       	ldd	r25, Y+16	; 0x10
     738:	6d ed       	ldi	r22, 0xDD	; 221
     73a:	71 e0       	ldi	r23, 0x01	; 1
     73c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <strcat>
	itoa(data,buff,10); /* 10 for decimal base */
}

 void readPassword(uint8 *data)
 {
	 	while(enter==1)
     740:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <enter>
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	09 f4       	brne	.+2      	; 0x74a <readPassword+0x130>
     748:	75 cf       	rjmp	.-278    	; 0x634 <readPassword+0x1a>
	 	if(key==13) /* enter*/
	 		break;
	 	intgerToString(key);
	 	strcat(data,buff);
	 	}
 }
     74a:	01 c0       	rjmp	.+2      	; 0x74e <readPassword+0x134>
	 	while(enter==1)
	 	{
	 	key =KeyPad_getPressedKey();
	 	_delay_ms(400);
	 	if(key==13) /* enter*/
	 		break;
     74c:	00 00       	nop
	 	intgerToString(key);
	 	strcat(data,buff);
	 	}
 }
     74e:	00 00       	nop
     750:	60 96       	adiw	r28, 0x10	; 16
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <KeyPad_getPressedKey>:
/***************************************************************
 * 					function definition 						*
 * *************************************************************
 */

uint8 KeyPad_getPressedKey(void) {
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	00 d0       	rcall	.+0      	; 0x768 <KeyPad_getPressedKey+0x6>
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1)
	{
	for (col = 0; col < N_COL; col++) {
     76c:	1a 82       	std	Y+2, r1	; 0x02
     76e:	44 c0       	rjmp	.+136    	; 0x7f8 <KeyPad_getPressedKey+0x96>
		/* set the specified column in this trace output pin and the first 4 pins as input */
		KEYPAD_PORT_DIR = (0b00010000 << col);
     770:	8a e3       	ldi	r24, 0x3A	; 58
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	2a 81       	ldd	r18, Y+2	; 0x02
     776:	42 2f       	mov	r20, r18
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	20 e1       	ldi	r18, 0x10	; 16
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	02 c0       	rjmp	.+4      	; 0x784 <KeyPad_getPressedKey+0x22>
     780:	22 0f       	add	r18, r18
     782:	33 1f       	adc	r19, r19
     784:	4a 95       	dec	r20
     786:	e2 f7       	brpl	.-8      	; 0x780 <KeyPad_getPressedKey+0x1e>
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18
		/* put on the specified column in this trace output pin 0 and  make the first 4 pins as pull up */
		KEYPAD_PORT_OUT = (~(0b00010000 << col));
     78c:	8b e3       	ldi	r24, 0x3B	; 59
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	2a 81       	ldd	r18, Y+2	; 0x02
     792:	42 2f       	mov	r20, r18
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	20 e1       	ldi	r18, 0x10	; 16
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <KeyPad_getPressedKey+0x3e>
     79c:	22 0f       	add	r18, r18
     79e:	33 1f       	adc	r19, r19
     7a0:	4a 95       	dec	r20
     7a2:	e2 f7       	brpl	.-8      	; 0x79c <KeyPad_getPressedKey+0x3a>
     7a4:	20 95       	com	r18
     7a6:	fc 01       	movw	r30, r24
     7a8:	20 83       	st	Z, r18
		for (row = 0; row < N_ROW; row++) /* loop for rows */
     7aa:	19 82       	std	Y+1, r1	; 0x01
     7ac:	1f c0       	rjmp	.+62     	; 0x7ec <KeyPad_getPressedKey+0x8a>
		{
			if (BIT_IS_CLEAR(KEYPAD_PORT_IN, row))/* if the switch is pressed in this row */
     7ae:	89 e3       	ldi	r24, 0x39	; 57
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	fc 01       	movw	r30, r24
     7b4:	80 81       	ld	r24, Z
     7b6:	88 2f       	mov	r24, r24
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	29 81       	ldd	r18, Y+1	; 0x01
     7bc:	22 2f       	mov	r18, r18
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <KeyPad_getPressedKey+0x64>
     7c2:	95 95       	asr	r25
     7c4:	87 95       	ror	r24
     7c6:	2a 95       	dec	r18
     7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <KeyPad_getPressedKey+0x60>
     7ca:	81 70       	andi	r24, 0x01	; 1
     7cc:	99 27       	eor	r25, r25
     7ce:	89 2b       	or	r24, r25
     7d0:	51 f4       	brne	.+20     	; 0x7e6 <KeyPad_getPressedKey+0x84>
			{
				#if(N_COL==3)
				return KeyPad_4x3_adjustSwitchNumber((row * N_COL) + col + 1);
				#elif(N_COL==4)
				return KeyPad_4x4_adjustSwitchNumber((row * N_COL) + col + 1);
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	98 2f       	mov	r25, r24
     7d6:	99 0f       	add	r25, r25
     7d8:	99 0f       	add	r25, r25
     7da:	8a 81       	ldd	r24, Y+2	; 0x02
     7dc:	89 0f       	add	r24, r25
     7de:	8f 5f       	subi	r24, 0xFF	; 255
     7e0:	0e 94 06 04 	call	0x80c	; 0x80c <KeyPad_4x4_adjustSwitchNumber>
     7e4:	0e c0       	rjmp	.+28     	; 0x802 <KeyPad_getPressedKey+0xa0>
	for (col = 0; col < N_COL; col++) {
		/* set the specified column in this trace output pin and the first 4 pins as input */
		KEYPAD_PORT_DIR = (0b00010000 << col);
		/* put on the specified column in this trace output pin 0 and  make the first 4 pins as pull up */
		KEYPAD_PORT_OUT = (~(0b00010000 << col));
		for (row = 0; row < N_ROW; row++) /* loop for rows */
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
     7e8:	8f 5f       	subi	r24, 0xFF	; 255
     7ea:	89 83       	std	Y+1, r24	; 0x01
     7ec:	89 81       	ldd	r24, Y+1	; 0x01
     7ee:	84 30       	cpi	r24, 0x04	; 4
     7f0:	f0 f2       	brcs	.-68     	; 0x7ae <KeyPad_getPressedKey+0x4c>

uint8 KeyPad_getPressedKey(void) {
	uint8 row, col;
	while(1)
	{
	for (col = 0; col < N_COL; col++) {
     7f2:	8a 81       	ldd	r24, Y+2	; 0x02
     7f4:	8f 5f       	subi	r24, 0xFF	; 255
     7f6:	8a 83       	std	Y+2, r24	; 0x02
     7f8:	8a 81       	ldd	r24, Y+2	; 0x02
     7fa:	84 30       	cpi	r24, 0x04	; 4
     7fc:	08 f4       	brcc	.+2      	; 0x800 <KeyPad_getPressedKey+0x9e>
     7fe:	b8 cf       	rjmp	.-144    	; 0x770 <KeyPad_getPressedKey+0xe>
				#endif
			}
		}
	}

}
     800:	b5 cf       	rjmp	.-150    	; 0x76c <KeyPad_getPressedKey+0xa>
}
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	08 95       	ret

0000080c <KeyPad_4x4_adjustSwitchNumber>:
 }


#elif(N_COL==4)

static uint8 KeyPad_4x4_adjustSwitchNumber(uint8 a_number) {
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	1f 92       	push	r1
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	89 83       	std	Y+1, r24	; 0x01
	switch (a_number) {
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	88 2f       	mov	r24, r24
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	09 2e       	mov	r0, r25
     820:	00 0c       	add	r0, r0
     822:	aa 0b       	sbc	r26, r26
     824:	bb 0b       	sbc	r27, r27
     826:	41 e0       	ldi	r20, 0x01	; 1
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	2f e0       	ldi	r18, 0x0F	; 15
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	84 1b       	sub	r24, r20
     830:	95 0b       	sbc	r25, r21
     832:	28 17       	cp	r18, r24
     834:	39 07       	cpc	r19, r25
     836:	28 f1       	brcs	.+74     	; 0x882 <KeyPad_4x4_adjustSwitchNumber+0x76>
     838:	86 5d       	subi	r24, 0xD6	; 214
     83a:	9f 4f       	sbci	r25, 0xFF	; 255
     83c:	fc 01       	movw	r30, r24
     83e:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__tablejump2__>
	case 1:
		return 7;
     842:	87 e0       	ldi	r24, 0x07	; 7
     844:	1e c0       	rjmp	.+60     	; 0x882 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 2:
		return 8;
     846:	88 e0       	ldi	r24, 0x08	; 8
     848:	1c c0       	rjmp	.+56     	; 0x882 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 3:
		return 9;
     84a:	89 e0       	ldi	r24, 0x09	; 9
     84c:	1a c0       	rjmp	.+52     	; 0x882 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 4:
		return '/';
     84e:	8f e2       	ldi	r24, 0x2F	; 47
     850:	18 c0       	rjmp	.+48     	; 0x882 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 5:
		return 4;
     852:	84 e0       	ldi	r24, 0x04	; 4
     854:	16 c0       	rjmp	.+44     	; 0x882 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 6:
		return 5;
     856:	85 e0       	ldi	r24, 0x05	; 5
     858:	14 c0       	rjmp	.+40     	; 0x882 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 7:
		return 6;
     85a:	86 e0       	ldi	r24, 0x06	; 6
     85c:	12 c0       	rjmp	.+36     	; 0x882 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 8:
		return '*';
     85e:	8a e2       	ldi	r24, 0x2A	; 42
     860:	10 c0       	rjmp	.+32     	; 0x882 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 9:
		return 1;
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	0e c0       	rjmp	.+28     	; 0x882 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 10:
		return 2;
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	0c c0       	rjmp	.+24     	; 0x882 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 11:
		return 3;
     86a:	83 e0       	ldi	r24, 0x03	; 3
     86c:	0a c0       	rjmp	.+20     	; 0x882 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 12:
		return '-';
     86e:	8d e2       	ldi	r24, 0x2D	; 45
     870:	08 c0       	rjmp	.+16     	; 0x882 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 13:
		return 13;
     872:	8d e0       	ldi	r24, 0x0D	; 13
     874:	06 c0       	rjmp	.+12     	; 0x882 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 14:
		return 0;
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	04 c0       	rjmp	.+8      	; 0x882 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 15:
		return '=';
     87a:	8d e3       	ldi	r24, 0x3D	; 61
     87c:	02 c0       	rjmp	.+4      	; 0x882 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 16:
		return '+';
     87e:	8b e2       	ldi	r24, 0x2B	; 43
     880:	00 c0       	rjmp	.+0      	; 0x882 <KeyPad_4x4_adjustSwitchNumber+0x76>

	}
}
     882:	0f 90       	pop	r0
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	08 95       	ret

0000088a <LCD_init>:
 * 								Functions Definitions				   *
 ***********************************************************************
 */

void LCD_init(void)
{
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
LCD_CTRL_PORT_DIR |=(1<<4)|(1<<5)|(1<<6);/* configure control port pins(RS ,R/W ,ENABLE) AS OUTPUT*/
     892:	81 e3       	ldi	r24, 0x31	; 49
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	21 e3       	ldi	r18, 0x31	; 49
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	f9 01       	movw	r30, r18
     89c:	20 81       	ld	r18, Z
     89e:	20 67       	ori	r18, 0x70	; 112
     8a0:	fc 01       	movw	r30, r24
     8a2:	20 83       	st	Z, r18
LCD_DATA_PORT_DIR=0XFF; /* configure the data port as output port */
     8a4:	84 e3       	ldi	r24, 0x34	; 52
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	2f ef       	ldi	r18, 0xFF	; 255
     8aa:	fc 01       	movw	r30, r24
     8ac:	20 83       	st	Z, r18
LCD_sendCommand(FUNCTION_SET_8_BIT_2LINE); /* using 2 lines + LCD 8 bit mode + 5*7 dot  display mode*/
     8ae:	88 e3       	ldi	r24, 0x38	; 56
     8b0:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_sendCommand>
LCD_sendCommand(DISPLAY_CURSOR_OFF);
     8b4:	8c e0       	ldi	r24, 0x0C	; 12
     8b6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_sendCommand>
LCD_sendCommand(CLEAR_COMMAND);
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_sendCommand>

}
     8c0:	00 00       	nop
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62
     8d0:	e9 97       	sbiw	r28, 0x39	; 57
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	de bf       	out	0x3e, r29	; 62
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	cd bf       	out	0x3d, r28	; 61
     8dc:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS);/* instruction mode RS =0*/
     8de:	82 e3       	ldi	r24, 0x32	; 50
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	22 e3       	ldi	r18, 0x32	; 50
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	f9 01       	movw	r30, r18
     8e8:	20 81       	ld	r18, Z
     8ea:	2f 7e       	andi	r18, 0xEF	; 239
     8ec:	fc 01       	movw	r30, r24
     8ee:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_PORT,READWRITE); /* write data to LCD so readwrite=0*/
     8f0:	82 e3       	ldi	r24, 0x32	; 50
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	22 e3       	ldi	r18, 0x32	; 50
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	f9 01       	movw	r30, r18
     8fa:	20 81       	ld	r18, Z
     8fc:	2f 7d       	andi	r18, 0xDF	; 223
     8fe:	fc 01       	movw	r30, r24
     900:	20 83       	st	Z, r18
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e8       	ldi	r26, 0x80	; 128
     908:	bf e3       	ldi	r27, 0x3F	; 63
     90a:	89 83       	std	Y+1, r24	; 0x01
     90c:	9a 83       	std	Y+2, r25	; 0x02
     90e:	ab 83       	std	Y+3, r26	; 0x03
     910:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	4a ef       	ldi	r20, 0xFA	; 250
     918:	54 e4       	ldi	r21, 0x44	; 68
     91a:	69 81       	ldd	r22, Y+1	; 0x01
     91c:	7a 81       	ldd	r23, Y+2	; 0x02
     91e:	8b 81       	ldd	r24, Y+3	; 0x03
     920:	9c 81       	ldd	r25, Y+4	; 0x04
     922:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     926:	dc 01       	movw	r26, r24
     928:	cb 01       	movw	r24, r22
     92a:	8f a7       	std	Y+47, r24	; 0x2f
     92c:	98 ab       	std	Y+48, r25	; 0x30
     92e:	a9 ab       	std	Y+49, r26	; 0x31
     930:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	40 e8       	ldi	r20, 0x80	; 128
     938:	5f e3       	ldi	r21, 0x3F	; 63
     93a:	6f a5       	ldd	r22, Y+47	; 0x2f
     93c:	78 a9       	ldd	r23, Y+48	; 0x30
     93e:	89 a9       	ldd	r24, Y+49	; 0x31
     940:	9a a9       	ldd	r25, Y+50	; 0x32
     942:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__cmpsf2>
     946:	88 23       	and	r24, r24
     948:	2c f4       	brge	.+10     	; 0x954 <LCD_sendCommand+0x8c>
		__ticks = 1;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	9c ab       	std	Y+52, r25	; 0x34
     950:	8b ab       	std	Y+51, r24	; 0x33
     952:	3f c0       	rjmp	.+126    	; 0x9d2 <LCD_sendCommand+0x10a>
	else if (__tmp > 65535)
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	3f ef       	ldi	r19, 0xFF	; 255
     958:	4f e7       	ldi	r20, 0x7F	; 127
     95a:	57 e4       	ldi	r21, 0x47	; 71
     95c:	6f a5       	ldd	r22, Y+47	; 0x2f
     95e:	78 a9       	ldd	r23, Y+48	; 0x30
     960:	89 a9       	ldd	r24, Y+49	; 0x31
     962:	9a a9       	ldd	r25, Y+50	; 0x32
     964:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
     968:	18 16       	cp	r1, r24
     96a:	4c f5       	brge	.+82     	; 0x9be <LCD_sendCommand+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	40 e2       	ldi	r20, 0x20	; 32
     972:	51 e4       	ldi	r21, 0x41	; 65
     974:	69 81       	ldd	r22, Y+1	; 0x01
     976:	7a 81       	ldd	r23, Y+2	; 0x02
     978:	8b 81       	ldd	r24, Y+3	; 0x03
     97a:	9c 81       	ldd	r25, Y+4	; 0x04
     97c:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     980:	dc 01       	movw	r26, r24
     982:	cb 01       	movw	r24, r22
     984:	bc 01       	movw	r22, r24
     986:	cd 01       	movw	r24, r26
     988:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     98c:	dc 01       	movw	r26, r24
     98e:	cb 01       	movw	r24, r22
     990:	9c ab       	std	Y+52, r25	; 0x34
     992:	8b ab       	std	Y+51, r24	; 0x33
     994:	0f c0       	rjmp	.+30     	; 0x9b4 <LCD_sendCommand+0xec>
     996:	88 ec       	ldi	r24, 0xC8	; 200
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	9e ab       	std	Y+54, r25	; 0x36
     99c:	8d ab       	std	Y+53, r24	; 0x35
     99e:	8d a9       	ldd	r24, Y+53	; 0x35
     9a0:	9e a9       	ldd	r25, Y+54	; 0x36
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <LCD_sendCommand+0xda>
     9a6:	9e ab       	std	Y+54, r25	; 0x36
     9a8:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9aa:	8b a9       	ldd	r24, Y+51	; 0x33
     9ac:	9c a9       	ldd	r25, Y+52	; 0x34
     9ae:	01 97       	sbiw	r24, 0x01	; 1
     9b0:	9c ab       	std	Y+52, r25	; 0x34
     9b2:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9b4:	8b a9       	ldd	r24, Y+51	; 0x33
     9b6:	9c a9       	ldd	r25, Y+52	; 0x34
     9b8:	89 2b       	or	r24, r25
     9ba:	69 f7       	brne	.-38     	; 0x996 <LCD_sendCommand+0xce>
     9bc:	14 c0       	rjmp	.+40     	; 0x9e6 <LCD_sendCommand+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9be:	6f a5       	ldd	r22, Y+47	; 0x2f
     9c0:	78 a9       	ldd	r23, Y+48	; 0x30
     9c2:	89 a9       	ldd	r24, Y+49	; 0x31
     9c4:	9a a9       	ldd	r25, Y+50	; 0x32
     9c6:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     9ca:	dc 01       	movw	r26, r24
     9cc:	cb 01       	movw	r24, r22
     9ce:	9c ab       	std	Y+52, r25	; 0x34
     9d0:	8b ab       	std	Y+51, r24	; 0x33
     9d2:	8b a9       	ldd	r24, Y+51	; 0x33
     9d4:	9c a9       	ldd	r25, Y+52	; 0x34
     9d6:	98 af       	std	Y+56, r25	; 0x38
     9d8:	8f ab       	std	Y+55, r24	; 0x37
     9da:	8f a9       	ldd	r24, Y+55	; 0x37
     9dc:	98 ad       	ldd	r25, Y+56	; 0x38
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <LCD_sendCommand+0x116>
     9e2:	98 af       	std	Y+56, r25	; 0x38
     9e4:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1);/* delay for prossing tas=50ns*/
	SET_BIT(LCD_CTRL_PORT,LCD_ENABLE); /*enable LCD so enable pin =1*/
     9e6:	82 e3       	ldi	r24, 0x32	; 50
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	22 e3       	ldi	r18, 0x32	; 50
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	f9 01       	movw	r30, r18
     9f0:	20 81       	ld	r18, Z
     9f2:	20 64       	ori	r18, 0x40	; 64
     9f4:	fc 01       	movw	r30, r24
     9f6:	20 83       	st	Z, r18
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e8       	ldi	r26, 0x80	; 128
     9fe:	bf e3       	ldi	r27, 0x3F	; 63
     a00:	8d 83       	std	Y+5, r24	; 0x05
     a02:	9e 83       	std	Y+6, r25	; 0x06
     a04:	af 83       	std	Y+7, r26	; 0x07
     a06:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	4a ef       	ldi	r20, 0xFA	; 250
     a0e:	54 e4       	ldi	r21, 0x44	; 68
     a10:	6d 81       	ldd	r22, Y+5	; 0x05
     a12:	7e 81       	ldd	r23, Y+6	; 0x06
     a14:	8f 81       	ldd	r24, Y+7	; 0x07
     a16:	98 85       	ldd	r25, Y+8	; 0x08
     a18:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     a1c:	dc 01       	movw	r26, r24
     a1e:	cb 01       	movw	r24, r22
     a20:	8d a3       	std	Y+37, r24	; 0x25
     a22:	9e a3       	std	Y+38, r25	; 0x26
     a24:	af a3       	std	Y+39, r26	; 0x27
     a26:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	40 e8       	ldi	r20, 0x80	; 128
     a2e:	5f e3       	ldi	r21, 0x3F	; 63
     a30:	6d a1       	ldd	r22, Y+37	; 0x25
     a32:	7e a1       	ldd	r23, Y+38	; 0x26
     a34:	8f a1       	ldd	r24, Y+39	; 0x27
     a36:	98 a5       	ldd	r25, Y+40	; 0x28
     a38:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__cmpsf2>
     a3c:	88 23       	and	r24, r24
     a3e:	2c f4       	brge	.+10     	; 0xa4a <LCD_sendCommand+0x182>
		__ticks = 1;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	9a a7       	std	Y+42, r25	; 0x2a
     a46:	89 a7       	std	Y+41, r24	; 0x29
     a48:	3f c0       	rjmp	.+126    	; 0xac8 <LCD_sendCommand+0x200>
	else if (__tmp > 65535)
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	3f ef       	ldi	r19, 0xFF	; 255
     a4e:	4f e7       	ldi	r20, 0x7F	; 127
     a50:	57 e4       	ldi	r21, 0x47	; 71
     a52:	6d a1       	ldd	r22, Y+37	; 0x25
     a54:	7e a1       	ldd	r23, Y+38	; 0x26
     a56:	8f a1       	ldd	r24, Y+39	; 0x27
     a58:	98 a5       	ldd	r25, Y+40	; 0x28
     a5a:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
     a5e:	18 16       	cp	r1, r24
     a60:	4c f5       	brge	.+82     	; 0xab4 <LCD_sendCommand+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e2       	ldi	r20, 0x20	; 32
     a68:	51 e4       	ldi	r21, 0x41	; 65
     a6a:	6d 81       	ldd	r22, Y+5	; 0x05
     a6c:	7e 81       	ldd	r23, Y+6	; 0x06
     a6e:	8f 81       	ldd	r24, Y+7	; 0x07
     a70:	98 85       	ldd	r25, Y+8	; 0x08
     a72:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     a76:	dc 01       	movw	r26, r24
     a78:	cb 01       	movw	r24, r22
     a7a:	bc 01       	movw	r22, r24
     a7c:	cd 01       	movw	r24, r26
     a7e:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     a82:	dc 01       	movw	r26, r24
     a84:	cb 01       	movw	r24, r22
     a86:	9a a7       	std	Y+42, r25	; 0x2a
     a88:	89 a7       	std	Y+41, r24	; 0x29
     a8a:	0f c0       	rjmp	.+30     	; 0xaaa <LCD_sendCommand+0x1e2>
     a8c:	88 ec       	ldi	r24, 0xC8	; 200
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	9c a7       	std	Y+44, r25	; 0x2c
     a92:	8b a7       	std	Y+43, r24	; 0x2b
     a94:	8b a5       	ldd	r24, Y+43	; 0x2b
     a96:	9c a5       	ldd	r25, Y+44	; 0x2c
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	f1 f7       	brne	.-4      	; 0xa98 <LCD_sendCommand+0x1d0>
     a9c:	9c a7       	std	Y+44, r25	; 0x2c
     a9e:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aa0:	89 a5       	ldd	r24, Y+41	; 0x29
     aa2:	9a a5       	ldd	r25, Y+42	; 0x2a
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	9a a7       	std	Y+42, r25	; 0x2a
     aa8:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aaa:	89 a5       	ldd	r24, Y+41	; 0x29
     aac:	9a a5       	ldd	r25, Y+42	; 0x2a
     aae:	89 2b       	or	r24, r25
     ab0:	69 f7       	brne	.-38     	; 0xa8c <LCD_sendCommand+0x1c4>
     ab2:	14 c0       	rjmp	.+40     	; 0xadc <LCD_sendCommand+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ab4:	6d a1       	ldd	r22, Y+37	; 0x25
     ab6:	7e a1       	ldd	r23, Y+38	; 0x26
     ab8:	8f a1       	ldd	r24, Y+39	; 0x27
     aba:	98 a5       	ldd	r25, Y+40	; 0x28
     abc:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     ac0:	dc 01       	movw	r26, r24
     ac2:	cb 01       	movw	r24, r22
     ac4:	9a a7       	std	Y+42, r25	; 0x2a
     ac6:	89 a7       	std	Y+41, r24	; 0x29
     ac8:	89 a5       	ldd	r24, Y+41	; 0x29
     aca:	9a a5       	ldd	r25, Y+42	; 0x2a
     acc:	9e a7       	std	Y+46, r25	; 0x2e
     ace:	8d a7       	std	Y+45, r24	; 0x2d
     ad0:	8d a5       	ldd	r24, Y+45	; 0x2d
     ad2:	9e a5       	ldd	r25, Y+46	; 0x2e
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <LCD_sendCommand+0x20c>
     ad8:	9e a7       	std	Y+46, r25	; 0x2e
     ada:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(1); /*delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT=command;/* out the required command to the data bus D0--->D7*/
     adc:	85 e3       	ldi	r24, 0x35	; 53
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	29 ad       	ldd	r18, Y+57	; 0x39
     ae2:	fc 01       	movw	r30, r24
     ae4:	20 83       	st	Z, r18
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a0 e8       	ldi	r26, 0x80	; 128
     aec:	bf e3       	ldi	r27, 0x3F	; 63
     aee:	89 87       	std	Y+9, r24	; 0x09
     af0:	9a 87       	std	Y+10, r25	; 0x0a
     af2:	ab 87       	std	Y+11, r26	; 0x0b
     af4:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	4a ef       	ldi	r20, 0xFA	; 250
     afc:	54 e4       	ldi	r21, 0x44	; 68
     afe:	69 85       	ldd	r22, Y+9	; 0x09
     b00:	7a 85       	ldd	r23, Y+10	; 0x0a
     b02:	8b 85       	ldd	r24, Y+11	; 0x0b
     b04:	9c 85       	ldd	r25, Y+12	; 0x0c
     b06:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     b0a:	dc 01       	movw	r26, r24
     b0c:	cb 01       	movw	r24, r22
     b0e:	8b 8f       	std	Y+27, r24	; 0x1b
     b10:	9c 8f       	std	Y+28, r25	; 0x1c
     b12:	ad 8f       	std	Y+29, r26	; 0x1d
     b14:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e8       	ldi	r20, 0x80	; 128
     b1c:	5f e3       	ldi	r21, 0x3F	; 63
     b1e:	6b 8d       	ldd	r22, Y+27	; 0x1b
     b20:	7c 8d       	ldd	r23, Y+28	; 0x1c
     b22:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b24:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b26:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__cmpsf2>
     b2a:	88 23       	and	r24, r24
     b2c:	2c f4       	brge	.+10     	; 0xb38 <LCD_sendCommand+0x270>
		__ticks = 1;
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	98 a3       	std	Y+32, r25	; 0x20
     b34:	8f 8f       	std	Y+31, r24	; 0x1f
     b36:	3f c0       	rjmp	.+126    	; 0xbb6 <LCD_sendCommand+0x2ee>
	else if (__tmp > 65535)
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	3f ef       	ldi	r19, 0xFF	; 255
     b3c:	4f e7       	ldi	r20, 0x7F	; 127
     b3e:	57 e4       	ldi	r21, 0x47	; 71
     b40:	6b 8d       	ldd	r22, Y+27	; 0x1b
     b42:	7c 8d       	ldd	r23, Y+28	; 0x1c
     b44:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b46:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b48:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
     b4c:	18 16       	cp	r1, r24
     b4e:	4c f5       	brge	.+82     	; 0xba2 <LCD_sendCommand+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e2       	ldi	r20, 0x20	; 32
     b56:	51 e4       	ldi	r21, 0x41	; 65
     b58:	69 85       	ldd	r22, Y+9	; 0x09
     b5a:	7a 85       	ldd	r23, Y+10	; 0x0a
     b5c:	8b 85       	ldd	r24, Y+11	; 0x0b
     b5e:	9c 85       	ldd	r25, Y+12	; 0x0c
     b60:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     b64:	dc 01       	movw	r26, r24
     b66:	cb 01       	movw	r24, r22
     b68:	bc 01       	movw	r22, r24
     b6a:	cd 01       	movw	r24, r26
     b6c:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     b70:	dc 01       	movw	r26, r24
     b72:	cb 01       	movw	r24, r22
     b74:	98 a3       	std	Y+32, r25	; 0x20
     b76:	8f 8f       	std	Y+31, r24	; 0x1f
     b78:	0f c0       	rjmp	.+30     	; 0xb98 <LCD_sendCommand+0x2d0>
     b7a:	88 ec       	ldi	r24, 0xC8	; 200
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	9a a3       	std	Y+34, r25	; 0x22
     b80:	89 a3       	std	Y+33, r24	; 0x21
     b82:	89 a1       	ldd	r24, Y+33	; 0x21
     b84:	9a a1       	ldd	r25, Y+34	; 0x22
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	f1 f7       	brne	.-4      	; 0xb86 <LCD_sendCommand+0x2be>
     b8a:	9a a3       	std	Y+34, r25	; 0x22
     b8c:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b90:	98 a1       	ldd	r25, Y+32	; 0x20
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	98 a3       	std	Y+32, r25	; 0x20
     b96:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b98:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b9a:	98 a1       	ldd	r25, Y+32	; 0x20
     b9c:	89 2b       	or	r24, r25
     b9e:	69 f7       	brne	.-38     	; 0xb7a <LCD_sendCommand+0x2b2>
     ba0:	14 c0       	rjmp	.+40     	; 0xbca <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ba2:	6b 8d       	ldd	r22, Y+27	; 0x1b
     ba4:	7c 8d       	ldd	r23, Y+28	; 0x1c
     ba6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ba8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     baa:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	98 a3       	std	Y+32, r25	; 0x20
     bb4:	8f 8f       	std	Y+31, r24	; 0x1f
     bb6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bb8:	98 a1       	ldd	r25, Y+32	; 0x20
     bba:	9c a3       	std	Y+36, r25	; 0x24
     bbc:	8b a3       	std	Y+35, r24	; 0x23
     bbe:	8b a1       	ldd	r24, Y+35	; 0x23
     bc0:	9c a1       	ldd	r25, Y+36	; 0x24
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	f1 f7       	brne	.-4      	; 0xbc2 <LCD_sendCommand+0x2fa>
     bc6:	9c a3       	std	Y+36, r25	; 0x24
     bc8:	8b a3       	std	Y+35, r24	; 0x23
	_delay_ms(1);/* delay for processing command setup time tdsw =60ns */
	CLEAR_BIT(LCD_CTRL_PORT,LCD_ENABLE); /* disable LCD so enable pin =0 */
     bca:	82 e3       	ldi	r24, 0x32	; 50
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	22 e3       	ldi	r18, 0x32	; 50
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	f9 01       	movw	r30, r18
     bd4:	20 81       	ld	r18, Z
     bd6:	2f 7b       	andi	r18, 0xBF	; 191
     bd8:	fc 01       	movw	r30, r24
     bda:	20 83       	st	Z, r18
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	a0 e8       	ldi	r26, 0x80	; 128
     be2:	bf e3       	ldi	r27, 0x3F	; 63
     be4:	8d 87       	std	Y+13, r24	; 0x0d
     be6:	9e 87       	std	Y+14, r25	; 0x0e
     be8:	af 87       	std	Y+15, r26	; 0x0f
     bea:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	4a ef       	ldi	r20, 0xFA	; 250
     bf2:	54 e4       	ldi	r21, 0x44	; 68
     bf4:	6d 85       	ldd	r22, Y+13	; 0x0d
     bf6:	7e 85       	ldd	r23, Y+14	; 0x0e
     bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
     bfa:	98 89       	ldd	r25, Y+16	; 0x10
     bfc:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	89 8b       	std	Y+17, r24	; 0x11
     c06:	9a 8b       	std	Y+18, r25	; 0x12
     c08:	ab 8b       	std	Y+19, r26	; 0x13
     c0a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	40 e8       	ldi	r20, 0x80	; 128
     c12:	5f e3       	ldi	r21, 0x3F	; 63
     c14:	69 89       	ldd	r22, Y+17	; 0x11
     c16:	7a 89       	ldd	r23, Y+18	; 0x12
     c18:	8b 89       	ldd	r24, Y+19	; 0x13
     c1a:	9c 89       	ldd	r25, Y+20	; 0x14
     c1c:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__cmpsf2>
     c20:	88 23       	and	r24, r24
     c22:	2c f4       	brge	.+10     	; 0xc2e <LCD_sendCommand+0x366>
		__ticks = 1;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	9e 8b       	std	Y+22, r25	; 0x16
     c2a:	8d 8b       	std	Y+21, r24	; 0x15
     c2c:	3f c0       	rjmp	.+126    	; 0xcac <LCD_sendCommand+0x3e4>
	else if (__tmp > 65535)
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	3f ef       	ldi	r19, 0xFF	; 255
     c32:	4f e7       	ldi	r20, 0x7F	; 127
     c34:	57 e4       	ldi	r21, 0x47	; 71
     c36:	69 89       	ldd	r22, Y+17	; 0x11
     c38:	7a 89       	ldd	r23, Y+18	; 0x12
     c3a:	8b 89       	ldd	r24, Y+19	; 0x13
     c3c:	9c 89       	ldd	r25, Y+20	; 0x14
     c3e:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
     c42:	18 16       	cp	r1, r24
     c44:	4c f5       	brge	.+82     	; 0xc98 <LCD_sendCommand+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e2       	ldi	r20, 0x20	; 32
     c4c:	51 e4       	ldi	r21, 0x41	; 65
     c4e:	6d 85       	ldd	r22, Y+13	; 0x0d
     c50:	7e 85       	ldd	r23, Y+14	; 0x0e
     c52:	8f 85       	ldd	r24, Y+15	; 0x0f
     c54:	98 89       	ldd	r25, Y+16	; 0x10
     c56:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     c5a:	dc 01       	movw	r26, r24
     c5c:	cb 01       	movw	r24, r22
     c5e:	bc 01       	movw	r22, r24
     c60:	cd 01       	movw	r24, r26
     c62:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     c66:	dc 01       	movw	r26, r24
     c68:	cb 01       	movw	r24, r22
     c6a:	9e 8b       	std	Y+22, r25	; 0x16
     c6c:	8d 8b       	std	Y+21, r24	; 0x15
     c6e:	0f c0       	rjmp	.+30     	; 0xc8e <LCD_sendCommand+0x3c6>
     c70:	88 ec       	ldi	r24, 0xC8	; 200
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	98 8f       	std	Y+24, r25	; 0x18
     c76:	8f 8b       	std	Y+23, r24	; 0x17
     c78:	8f 89       	ldd	r24, Y+23	; 0x17
     c7a:	98 8d       	ldd	r25, Y+24	; 0x18
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <LCD_sendCommand+0x3b4>
     c80:	98 8f       	std	Y+24, r25	; 0x18
     c82:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c84:	8d 89       	ldd	r24, Y+21	; 0x15
     c86:	9e 89       	ldd	r25, Y+22	; 0x16
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	9e 8b       	std	Y+22, r25	; 0x16
     c8c:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c8e:	8d 89       	ldd	r24, Y+21	; 0x15
     c90:	9e 89       	ldd	r25, Y+22	; 0x16
     c92:	89 2b       	or	r24, r25
     c94:	69 f7       	brne	.-38     	; 0xc70 <LCD_sendCommand+0x3a8>
	_delay_ms(1); /* delay for processing hold time th=10ns */

}
     c96:	14 c0       	rjmp	.+40     	; 0xcc0 <LCD_sendCommand+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c98:	69 89       	ldd	r22, Y+17	; 0x11
     c9a:	7a 89       	ldd	r23, Y+18	; 0x12
     c9c:	8b 89       	ldd	r24, Y+19	; 0x13
     c9e:	9c 89       	ldd	r25, Y+20	; 0x14
     ca0:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	9e 8b       	std	Y+22, r25	; 0x16
     caa:	8d 8b       	std	Y+21, r24	; 0x15
     cac:	8d 89       	ldd	r24, Y+21	; 0x15
     cae:	9e 89       	ldd	r25, Y+22	; 0x16
     cb0:	9a 8f       	std	Y+26, r25	; 0x1a
     cb2:	89 8f       	std	Y+25, r24	; 0x19
     cb4:	89 8d       	ldd	r24, Y+25	; 0x19
     cb6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	f1 f7       	brne	.-4      	; 0xcb8 <LCD_sendCommand+0x3f0>
     cbc:	9a 8f       	std	Y+26, r25	; 0x1a
     cbe:	89 8f       	std	Y+25, r24	; 0x19
     cc0:	00 00       	nop
     cc2:	e9 96       	adiw	r28, 0x39	; 57
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data)
{
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	cb 56       	subi	r28, 0x6B	; 107
     ce2:	d1 09       	sbc	r29, r1
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	9e 01       	movw	r18, r28
     cf0:	25 59       	subi	r18, 0x95	; 149
     cf2:	3f 4f       	sbci	r19, 0xFF	; 255
     cf4:	f9 01       	movw	r30, r18
     cf6:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* data mode so RS =1*/
     cf8:	82 e3       	ldi	r24, 0x32	; 50
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	22 e3       	ldi	r18, 0x32	; 50
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	f9 01       	movw	r30, r18
     d02:	20 81       	ld	r18, Z
     d04:	20 61       	ori	r18, 0x10	; 16
     d06:	fc 01       	movw	r30, r24
     d08:	20 83       	st	Z, r18
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	a0 e8       	ldi	r26, 0x80	; 128
     d10:	bf e3       	ldi	r27, 0x3F	; 63
     d12:	89 83       	std	Y+1, r24	; 0x01
     d14:	9a 83       	std	Y+2, r25	; 0x02
     d16:	ab 83       	std	Y+3, r26	; 0x03
     d18:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     d1a:	8e 01       	movw	r16, r28
     d1c:	01 5b       	subi	r16, 0xB1	; 177
     d1e:	1f 4f       	sbci	r17, 0xFF	; 255
     d20:	2b ea       	ldi	r18, 0xAB	; 171
     d22:	3a ea       	ldi	r19, 0xAA	; 170
     d24:	4a e2       	ldi	r20, 0x2A	; 42
     d26:	50 e4       	ldi	r21, 0x40	; 64
     d28:	69 81       	ldd	r22, Y+1	; 0x01
     d2a:	7a 81       	ldd	r23, Y+2	; 0x02
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	9c 81       	ldd	r25, Y+4	; 0x04
     d30:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	f8 01       	movw	r30, r16
     d3a:	80 83       	st	Z, r24
     d3c:	91 83       	std	Z+1, r25	; 0x01
     d3e:	a2 83       	std	Z+2, r26	; 0x02
     d40:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     d42:	8e 01       	movw	r16, r28
     d44:	0d 5a       	subi	r16, 0xAD	; 173
     d46:	1f 4f       	sbci	r17, 0xFF	; 255
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	ab 81       	ldd	r26, Y+3	; 0x03
     d4e:	bc 81       	ldd	r27, Y+4	; 0x04
     d50:	9c 01       	movw	r18, r24
     d52:	ad 01       	movw	r20, r26
     d54:	bc 01       	movw	r22, r24
     d56:	cd 01       	movw	r24, r26
     d58:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__addsf3>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	f8 01       	movw	r30, r16
     d62:	80 83       	st	Z, r24
     d64:	91 83       	std	Z+1, r25	; 0x01
     d66:	a2 83       	std	Z+2, r26	; 0x02
     d68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d6a:	ce 01       	movw	r24, r28
     d6c:	81 5b       	subi	r24, 0xB1	; 177
     d6e:	9f 4f       	sbci	r25, 0xFF	; 255
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	40 e8       	ldi	r20, 0x80	; 128
     d76:	5f e3       	ldi	r21, 0x3F	; 63
     d78:	fc 01       	movw	r30, r24
     d7a:	60 81       	ld	r22, Z
     d7c:	71 81       	ldd	r23, Z+1	; 0x01
     d7e:	82 81       	ldd	r24, Z+2	; 0x02
     d80:	93 81       	ldd	r25, Z+3	; 0x03
     d82:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__cmpsf2>
     d86:	88 23       	and	r24, r24
     d88:	3c f4       	brge	.+14     	; 0xd98 <LCD_displayCharacter+0xc4>
		__ticks = 1;
     d8a:	ce 01       	movw	r24, r28
     d8c:	89 5a       	subi	r24, 0xA9	; 169
     d8e:	9f 4f       	sbci	r25, 0xFF	; 255
     d90:	21 e0       	ldi	r18, 0x01	; 1
     d92:	fc 01       	movw	r30, r24
     d94:	20 83       	st	Z, r18
     d96:	2c c1       	rjmp	.+600    	; 0xff0 <LCD_displayCharacter+0x31c>
	else if (__tmp2 > 65535)
     d98:	ce 01       	movw	r24, r28
     d9a:	8d 5a       	subi	r24, 0xAD	; 173
     d9c:	9f 4f       	sbci	r25, 0xFF	; 255
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	3f ef       	ldi	r19, 0xFF	; 255
     da2:	4f e7       	ldi	r20, 0x7F	; 127
     da4:	57 e4       	ldi	r21, 0x47	; 71
     da6:	fc 01       	movw	r30, r24
     da8:	60 81       	ld	r22, Z
     daa:	71 81       	ldd	r23, Z+1	; 0x01
     dac:	82 81       	ldd	r24, Z+2	; 0x02
     dae:	93 81       	ldd	r25, Z+3	; 0x03
     db0:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
     db4:	18 16       	cp	r1, r24
     db6:	0c f0       	brlt	.+2      	; 0xdba <LCD_displayCharacter+0xe6>
     db8:	cd c0       	rjmp	.+410    	; 0xf54 <LCD_displayCharacter+0x280>
	{
		_delay_ms(__us / 1000.0);
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	4a e7       	ldi	r20, 0x7A	; 122
     dc0:	54 e4       	ldi	r21, 0x44	; 68
     dc2:	69 81       	ldd	r22, Y+1	; 0x01
     dc4:	7a 81       	ldd	r23, Y+2	; 0x02
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	9c 81       	ldd	r25, Y+4	; 0x04
     dca:	0e 94 6d 12 	call	0x24da	; 0x24da <__divsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	9e 01       	movw	r18, r28
     dd4:	28 5a       	subi	r18, 0xA8	; 168
     dd6:	3f 4f       	sbci	r19, 0xFF	; 255
     dd8:	f9 01       	movw	r30, r18
     dda:	80 83       	st	Z, r24
     ddc:	91 83       	std	Z+1, r25	; 0x01
     dde:	a2 83       	std	Z+2, r26	; 0x02
     de0:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     de2:	8e 01       	movw	r16, r28
     de4:	04 5a       	subi	r16, 0xA4	; 164
     de6:	1f 4f       	sbci	r17, 0xFF	; 255
     de8:	ce 01       	movw	r24, r28
     dea:	88 5a       	subi	r24, 0xA8	; 168
     dec:	9f 4f       	sbci	r25, 0xFF	; 255
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	4a ef       	ldi	r20, 0xFA	; 250
     df4:	54 e4       	ldi	r21, 0x44	; 68
     df6:	fc 01       	movw	r30, r24
     df8:	60 81       	ld	r22, Z
     dfa:	71 81       	ldd	r23, Z+1	; 0x01
     dfc:	82 81       	ldd	r24, Z+2	; 0x02
     dfe:	93 81       	ldd	r25, Z+3	; 0x03
     e00:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	f8 01       	movw	r30, r16
     e0a:	80 83       	st	Z, r24
     e0c:	91 83       	std	Z+1, r25	; 0x01
     e0e:	a2 83       	std	Z+2, r26	; 0x02
     e10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e12:	ce 01       	movw	r24, r28
     e14:	84 5a       	subi	r24, 0xA4	; 164
     e16:	9f 4f       	sbci	r25, 0xFF	; 255
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e8       	ldi	r20, 0x80	; 128
     e1e:	5f e3       	ldi	r21, 0x3F	; 63
     e20:	fc 01       	movw	r30, r24
     e22:	60 81       	ld	r22, Z
     e24:	71 81       	ldd	r23, Z+1	; 0x01
     e26:	82 81       	ldd	r24, Z+2	; 0x02
     e28:	93 81       	ldd	r25, Z+3	; 0x03
     e2a:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__cmpsf2>
     e2e:	88 23       	and	r24, r24
     e30:	4c f4       	brge	.+18     	; 0xe44 <LCD_displayCharacter+0x170>
		__ticks = 1;
     e32:	ce 01       	movw	r24, r28
     e34:	80 5a       	subi	r24, 0xA0	; 160
     e36:	9f 4f       	sbci	r25, 0xFF	; 255
     e38:	21 e0       	ldi	r18, 0x01	; 1
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	fc 01       	movw	r30, r24
     e3e:	31 83       	std	Z+1, r19	; 0x01
     e40:	20 83       	st	Z, r18
     e42:	6d c0       	rjmp	.+218    	; 0xf1e <LCD_displayCharacter+0x24a>
	else if (__tmp > 65535)
     e44:	ce 01       	movw	r24, r28
     e46:	84 5a       	subi	r24, 0xA4	; 164
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	3f ef       	ldi	r19, 0xFF	; 255
     e4e:	4f e7       	ldi	r20, 0x7F	; 127
     e50:	57 e4       	ldi	r21, 0x47	; 71
     e52:	fc 01       	movw	r30, r24
     e54:	60 81       	ld	r22, Z
     e56:	71 81       	ldd	r23, Z+1	; 0x01
     e58:	82 81       	ldd	r24, Z+2	; 0x02
     e5a:	93 81       	ldd	r25, Z+3	; 0x03
     e5c:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
     e60:	18 16       	cp	r1, r24
     e62:	0c f0       	brlt	.+2      	; 0xe66 <LCD_displayCharacter+0x192>
     e64:	4a c0       	rjmp	.+148    	; 0xefa <LCD_displayCharacter+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e66:	ce 01       	movw	r24, r28
     e68:	88 5a       	subi	r24, 0xA8	; 168
     e6a:	9f 4f       	sbci	r25, 0xFF	; 255
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e2       	ldi	r20, 0x20	; 32
     e72:	51 e4       	ldi	r21, 0x41	; 65
     e74:	fc 01       	movw	r30, r24
     e76:	60 81       	ld	r22, Z
     e78:	71 81       	ldd	r23, Z+1	; 0x01
     e7a:	82 81       	ldd	r24, Z+2	; 0x02
     e7c:	93 81       	ldd	r25, Z+3	; 0x03
     e7e:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	8e 01       	movw	r16, r28
     e88:	00 5a       	subi	r16, 0xA0	; 160
     e8a:	1f 4f       	sbci	r17, 0xFF	; 255
     e8c:	bc 01       	movw	r22, r24
     e8e:	cd 01       	movw	r24, r26
     e90:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	f8 01       	movw	r30, r16
     e9a:	91 83       	std	Z+1, r25	; 0x01
     e9c:	80 83       	st	Z, r24
     e9e:	24 c0       	rjmp	.+72     	; 0xee8 <LCD_displayCharacter+0x214>
     ea0:	ce 01       	movw	r24, r28
     ea2:	8e 59       	subi	r24, 0x9E	; 158
     ea4:	9f 4f       	sbci	r25, 0xFF	; 255
     ea6:	28 ec       	ldi	r18, 0xC8	; 200
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	fc 01       	movw	r30, r24
     eac:	31 83       	std	Z+1, r19	; 0x01
     eae:	20 83       	st	Z, r18
     eb0:	ce 01       	movw	r24, r28
     eb2:	8e 59       	subi	r24, 0x9E	; 158
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	fc 01       	movw	r30, r24
     eb8:	80 81       	ld	r24, Z
     eba:	91 81       	ldd	r25, Z+1	; 0x01
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	f1 f7       	brne	.-4      	; 0xebc <LCD_displayCharacter+0x1e8>
     ec0:	9e 01       	movw	r18, r28
     ec2:	2e 59       	subi	r18, 0x9E	; 158
     ec4:	3f 4f       	sbci	r19, 0xFF	; 255
     ec6:	f9 01       	movw	r30, r18
     ec8:	91 83       	std	Z+1, r25	; 0x01
     eca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ecc:	ce 01       	movw	r24, r28
     ece:	80 5a       	subi	r24, 0xA0	; 160
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	9e 01       	movw	r18, r28
     ed4:	20 5a       	subi	r18, 0xA0	; 160
     ed6:	3f 4f       	sbci	r19, 0xFF	; 255
     ed8:	f9 01       	movw	r30, r18
     eda:	20 81       	ld	r18, Z
     edc:	31 81       	ldd	r19, Z+1	; 0x01
     ede:	21 50       	subi	r18, 0x01	; 1
     ee0:	31 09       	sbc	r19, r1
     ee2:	fc 01       	movw	r30, r24
     ee4:	31 83       	std	Z+1, r19	; 0x01
     ee6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee8:	ce 01       	movw	r24, r28
     eea:	80 5a       	subi	r24, 0xA0	; 160
     eec:	9f 4f       	sbci	r25, 0xFF	; 255
     eee:	fc 01       	movw	r30, r24
     ef0:	80 81       	ld	r24, Z
     ef2:	91 81       	ldd	r25, Z+1	; 0x01
     ef4:	89 2b       	or	r24, r25
     ef6:	a1 f6       	brne	.-88     	; 0xea0 <LCD_displayCharacter+0x1cc>
     ef8:	7b c0       	rjmp	.+246    	; 0xff0 <LCD_displayCharacter+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     efa:	8e 01       	movw	r16, r28
     efc:	00 5a       	subi	r16, 0xA0	; 160
     efe:	1f 4f       	sbci	r17, 0xFF	; 255
     f00:	ce 01       	movw	r24, r28
     f02:	84 5a       	subi	r24, 0xA4	; 164
     f04:	9f 4f       	sbci	r25, 0xFF	; 255
     f06:	fc 01       	movw	r30, r24
     f08:	60 81       	ld	r22, Z
     f0a:	71 81       	ldd	r23, Z+1	; 0x01
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	93 81       	ldd	r25, Z+3	; 0x03
     f10:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	f8 01       	movw	r30, r16
     f1a:	91 83       	std	Z+1, r25	; 0x01
     f1c:	80 83       	st	Z, r24
     f1e:	ce 01       	movw	r24, r28
     f20:	8c 59       	subi	r24, 0x9C	; 156
     f22:	9f 4f       	sbci	r25, 0xFF	; 255
     f24:	9e 01       	movw	r18, r28
     f26:	20 5a       	subi	r18, 0xA0	; 160
     f28:	3f 4f       	sbci	r19, 0xFF	; 255
     f2a:	f9 01       	movw	r30, r18
     f2c:	20 81       	ld	r18, Z
     f2e:	31 81       	ldd	r19, Z+1	; 0x01
     f30:	fc 01       	movw	r30, r24
     f32:	31 83       	std	Z+1, r19	; 0x01
     f34:	20 83       	st	Z, r18
     f36:	ce 01       	movw	r24, r28
     f38:	8c 59       	subi	r24, 0x9C	; 156
     f3a:	9f 4f       	sbci	r25, 0xFF	; 255
     f3c:	fc 01       	movw	r30, r24
     f3e:	80 81       	ld	r24, Z
     f40:	91 81       	ldd	r25, Z+1	; 0x01
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	f1 f7       	brne	.-4      	; 0xf42 <LCD_displayCharacter+0x26e>
     f46:	9e 01       	movw	r18, r28
     f48:	2c 59       	subi	r18, 0x9C	; 156
     f4a:	3f 4f       	sbci	r19, 0xFF	; 255
     f4c:	f9 01       	movw	r30, r18
     f4e:	91 83       	std	Z+1, r25	; 0x01
     f50:	80 83       	st	Z, r24
     f52:	4e c0       	rjmp	.+156    	; 0xff0 <LCD_displayCharacter+0x31c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     f54:	ce 01       	movw	r24, r28
     f56:	81 5b       	subi	r24, 0xB1	; 177
     f58:	9f 4f       	sbci	r25, 0xFF	; 255
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	4f e7       	ldi	r20, 0x7F	; 127
     f60:	53 e4       	ldi	r21, 0x43	; 67
     f62:	fc 01       	movw	r30, r24
     f64:	60 81       	ld	r22, Z
     f66:	71 81       	ldd	r23, Z+1	; 0x01
     f68:	82 81       	ldd	r24, Z+2	; 0x02
     f6a:	93 81       	ldd	r25, Z+3	; 0x03
     f6c:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
     f70:	18 16       	cp	r1, r24
     f72:	6c f5       	brge	.+90     	; 0xfce <LCD_displayCharacter+0x2fa>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     f74:	8e 01       	movw	r16, r28
     f76:	0a 59       	subi	r16, 0x9A	; 154
     f78:	1f 4f       	sbci	r17, 0xFF	; 255
     f7a:	ce 01       	movw	r24, r28
     f7c:	8d 5a       	subi	r24, 0xAD	; 173
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	fc 01       	movw	r30, r24
     f82:	60 81       	ld	r22, Z
     f84:	71 81       	ldd	r23, Z+1	; 0x01
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	f8 01       	movw	r30, r16
     f94:	91 83       	std	Z+1, r25	; 0x01
     f96:	80 83       	st	Z, r24
     f98:	ce 01       	movw	r24, r28
     f9a:	88 59       	subi	r24, 0x98	; 152
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	9e 01       	movw	r18, r28
     fa0:	2a 59       	subi	r18, 0x9A	; 154
     fa2:	3f 4f       	sbci	r19, 0xFF	; 255
     fa4:	f9 01       	movw	r30, r18
     fa6:	20 81       	ld	r18, Z
     fa8:	31 81       	ldd	r19, Z+1	; 0x01
     faa:	fc 01       	movw	r30, r24
     fac:	31 83       	std	Z+1, r19	; 0x01
     fae:	20 83       	st	Z, r18
     fb0:	ce 01       	movw	r24, r28
     fb2:	88 59       	subi	r24, 0x98	; 152
     fb4:	9f 4f       	sbci	r25, 0xFF	; 255
     fb6:	fc 01       	movw	r30, r24
     fb8:	80 81       	ld	r24, Z
     fba:	91 81       	ldd	r25, Z+1	; 0x01
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <LCD_displayCharacter+0x2e8>
     fc0:	9e 01       	movw	r18, r28
     fc2:	28 59       	subi	r18, 0x98	; 152
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	f9 01       	movw	r30, r18
     fc8:	91 83       	std	Z+1, r25	; 0x01
     fca:	80 83       	st	Z, r24
     fcc:	28 c0       	rjmp	.+80     	; 0x101e <LCD_displayCharacter+0x34a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fce:	8e 01       	movw	r16, r28
     fd0:	09 5a       	subi	r16, 0xA9	; 169
     fd2:	1f 4f       	sbci	r17, 0xFF	; 255
     fd4:	ce 01       	movw	r24, r28
     fd6:	81 5b       	subi	r24, 0xB1	; 177
     fd8:	9f 4f       	sbci	r25, 0xFF	; 255
     fda:	fc 01       	movw	r30, r24
     fdc:	60 81       	ld	r22, Z
     fde:	71 81       	ldd	r23, Z+1	; 0x01
     fe0:	82 81       	ldd	r24, Z+2	; 0x02
     fe2:	93 81       	ldd	r25, Z+3	; 0x03
     fe4:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	f8 01       	movw	r30, r16
     fee:	80 83       	st	Z, r24
     ff0:	ce 01       	movw	r24, r28
     ff2:	86 59       	subi	r24, 0x96	; 150
     ff4:	9f 4f       	sbci	r25, 0xFF	; 255
     ff6:	9e 01       	movw	r18, r28
     ff8:	29 5a       	subi	r18, 0xA9	; 169
     ffa:	3f 4f       	sbci	r19, 0xFF	; 255
     ffc:	f9 01       	movw	r30, r18
     ffe:	20 81       	ld	r18, Z
    1000:	fc 01       	movw	r30, r24
    1002:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1004:	ce 01       	movw	r24, r28
    1006:	86 59       	subi	r24, 0x96	; 150
    1008:	9f 4f       	sbci	r25, 0xFF	; 255
    100a:	fc 01       	movw	r30, r24
    100c:	80 81       	ld	r24, Z
    100e:	28 2f       	mov	r18, r24
    1010:	2a 95       	dec	r18
    1012:	f1 f7       	brne	.-4      	; 0x1010 <LCD_displayCharacter+0x33c>
    1014:	ce 01       	movw	r24, r28
    1016:	86 59       	subi	r24, 0x96	; 150
    1018:	9f 4f       	sbci	r25, 0xFF	; 255
    101a:	fc 01       	movw	r30, r24
    101c:	20 83       	st	Z, r18
	_delay_us(1);/*delay processing RS set time tas=40ns */
	CLEAR_BIT(LCD_CTRL_PORT,READWRITE); /*write data to LCD so READWRITE =0 */
    101e:	82 e3       	ldi	r24, 0x32	; 50
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	22 e3       	ldi	r18, 0x32	; 50
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	f9 01       	movw	r30, r18
    1028:	20 81       	ld	r18, Z
    102a:	2f 7d       	andi	r18, 0xDF	; 223
    102c:	fc 01       	movw	r30, r24
    102e:	20 83       	st	Z, r18
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a0 e8       	ldi	r26, 0x80	; 128
    1036:	bf e3       	ldi	r27, 0x3F	; 63
    1038:	8d 83       	std	Y+5, r24	; 0x05
    103a:	9e 83       	std	Y+6, r25	; 0x06
    103c:	af 83       	std	Y+7, r26	; 0x07
    103e:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1040:	2b ea       	ldi	r18, 0xAB	; 171
    1042:	3a ea       	ldi	r19, 0xAA	; 170
    1044:	4a e2       	ldi	r20, 0x2A	; 42
    1046:	50 e4       	ldi	r21, 0x40	; 64
    1048:	6d 81       	ldd	r22, Y+5	; 0x05
    104a:	7e 81       	ldd	r23, Y+6	; 0x06
    104c:	8f 81       	ldd	r24, Y+7	; 0x07
    104e:	98 85       	ldd	r25, Y+8	; 0x08
    1050:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	8b ab       	std	Y+51, r24	; 0x33
    105a:	9c ab       	std	Y+52, r25	; 0x34
    105c:	ad ab       	std	Y+53, r26	; 0x35
    105e:	be ab       	std	Y+54, r27	; 0x36
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	af 81       	ldd	r26, Y+7	; 0x07
    1066:	b8 85       	ldd	r27, Y+8	; 0x08
    1068:	9c 01       	movw	r18, r24
    106a:	ad 01       	movw	r20, r26
    106c:	bc 01       	movw	r22, r24
    106e:	cd 01       	movw	r24, r26
    1070:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__addsf3>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	8f ab       	std	Y+55, r24	; 0x37
    107a:	98 af       	std	Y+56, r25	; 0x38
    107c:	a9 af       	std	Y+57, r26	; 0x39
    107e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	40 e8       	ldi	r20, 0x80	; 128
    1086:	5f e3       	ldi	r21, 0x3F	; 63
    1088:	6b a9       	ldd	r22, Y+51	; 0x33
    108a:	7c a9       	ldd	r23, Y+52	; 0x34
    108c:	8d a9       	ldd	r24, Y+53	; 0x35
    108e:	9e a9       	ldd	r25, Y+54	; 0x36
    1090:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__cmpsf2>
    1094:	88 23       	and	r24, r24
    1096:	1c f4       	brge	.+6      	; 0x109e <LCD_displayCharacter+0x3ca>
		__ticks = 1;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	8b af       	std	Y+59, r24	; 0x3b
    109c:	0c c1       	rjmp	.+536    	; 0x12b6 <LCD_displayCharacter+0x5e2>
	else if (__tmp2 > 65535)
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	3f ef       	ldi	r19, 0xFF	; 255
    10a2:	4f e7       	ldi	r20, 0x7F	; 127
    10a4:	57 e4       	ldi	r21, 0x47	; 71
    10a6:	6f a9       	ldd	r22, Y+55	; 0x37
    10a8:	78 ad       	ldd	r23, Y+56	; 0x38
    10aa:	89 ad       	ldd	r24, Y+57	; 0x39
    10ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    10ae:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
    10b2:	18 16       	cp	r1, r24
    10b4:	0c f0       	brlt	.+2      	; 0x10b8 <LCD_displayCharacter+0x3e4>
    10b6:	c1 c0       	rjmp	.+386    	; 0x123a <LCD_displayCharacter+0x566>
	{
		_delay_ms(__us / 1000.0);
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	4a e7       	ldi	r20, 0x7A	; 122
    10be:	54 e4       	ldi	r21, 0x44	; 68
    10c0:	6d 81       	ldd	r22, Y+5	; 0x05
    10c2:	7e 81       	ldd	r23, Y+6	; 0x06
    10c4:	8f 81       	ldd	r24, Y+7	; 0x07
    10c6:	98 85       	ldd	r25, Y+8	; 0x08
    10c8:	0e 94 6d 12 	call	0x24da	; 0x24da <__divsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	8c af       	std	Y+60, r24	; 0x3c
    10d2:	9d af       	std	Y+61, r25	; 0x3d
    10d4:	ae af       	std	Y+62, r26	; 0x3e
    10d6:	bf af       	std	Y+63, r27	; 0x3f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    10d8:	8e 01       	movw	r16, r28
    10da:	00 5c       	subi	r16, 0xC0	; 192
    10dc:	1f 4f       	sbci	r17, 0xFF	; 255
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	4a ef       	ldi	r20, 0xFA	; 250
    10e4:	54 e4       	ldi	r21, 0x44	; 68
    10e6:	6c ad       	ldd	r22, Y+60	; 0x3c
    10e8:	7d ad       	ldd	r23, Y+61	; 0x3d
    10ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    10ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    10ee:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	f8 01       	movw	r30, r16
    10f8:	80 83       	st	Z, r24
    10fa:	91 83       	std	Z+1, r25	; 0x01
    10fc:	a2 83       	std	Z+2, r26	; 0x02
    10fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1100:	ce 01       	movw	r24, r28
    1102:	80 5c       	subi	r24, 0xC0	; 192
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	40 e8       	ldi	r20, 0x80	; 128
    110c:	5f e3       	ldi	r21, 0x3F	; 63
    110e:	fc 01       	movw	r30, r24
    1110:	60 81       	ld	r22, Z
    1112:	71 81       	ldd	r23, Z+1	; 0x01
    1114:	82 81       	ldd	r24, Z+2	; 0x02
    1116:	93 81       	ldd	r25, Z+3	; 0x03
    1118:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__cmpsf2>
    111c:	88 23       	and	r24, r24
    111e:	4c f4       	brge	.+18     	; 0x1132 <LCD_displayCharacter+0x45e>
		__ticks = 1;
    1120:	ce 01       	movw	r24, r28
    1122:	8c 5b       	subi	r24, 0xBC	; 188
    1124:	9f 4f       	sbci	r25, 0xFF	; 255
    1126:	21 e0       	ldi	r18, 0x01	; 1
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	fc 01       	movw	r30, r24
    112c:	31 83       	std	Z+1, r19	; 0x01
    112e:	20 83       	st	Z, r18
    1130:	69 c0       	rjmp	.+210    	; 0x1204 <LCD_displayCharacter+0x530>
	else if (__tmp > 65535)
    1132:	ce 01       	movw	r24, r28
    1134:	80 5c       	subi	r24, 0xC0	; 192
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	3f ef       	ldi	r19, 0xFF	; 255
    113c:	4f e7       	ldi	r20, 0x7F	; 127
    113e:	57 e4       	ldi	r21, 0x47	; 71
    1140:	fc 01       	movw	r30, r24
    1142:	60 81       	ld	r22, Z
    1144:	71 81       	ldd	r23, Z+1	; 0x01
    1146:	82 81       	ldd	r24, Z+2	; 0x02
    1148:	93 81       	ldd	r25, Z+3	; 0x03
    114a:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
    114e:	18 16       	cp	r1, r24
    1150:	0c f0       	brlt	.+2      	; 0x1154 <LCD_displayCharacter+0x480>
    1152:	46 c0       	rjmp	.+140    	; 0x11e0 <LCD_displayCharacter+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e2       	ldi	r20, 0x20	; 32
    115a:	51 e4       	ldi	r21, 0x41	; 65
    115c:	6c ad       	ldd	r22, Y+60	; 0x3c
    115e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1160:	8e ad       	ldd	r24, Y+62	; 0x3e
    1162:	9f ad       	ldd	r25, Y+63	; 0x3f
    1164:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	8e 01       	movw	r16, r28
    116e:	0c 5b       	subi	r16, 0xBC	; 188
    1170:	1f 4f       	sbci	r17, 0xFF	; 255
    1172:	bc 01       	movw	r22, r24
    1174:	cd 01       	movw	r24, r26
    1176:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	f8 01       	movw	r30, r16
    1180:	91 83       	std	Z+1, r25	; 0x01
    1182:	80 83       	st	Z, r24
    1184:	24 c0       	rjmp	.+72     	; 0x11ce <LCD_displayCharacter+0x4fa>
    1186:	ce 01       	movw	r24, r28
    1188:	8a 5b       	subi	r24, 0xBA	; 186
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	28 ec       	ldi	r18, 0xC8	; 200
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	fc 01       	movw	r30, r24
    1192:	31 83       	std	Z+1, r19	; 0x01
    1194:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1196:	ce 01       	movw	r24, r28
    1198:	8a 5b       	subi	r24, 0xBA	; 186
    119a:	9f 4f       	sbci	r25, 0xFF	; 255
    119c:	fc 01       	movw	r30, r24
    119e:	80 81       	ld	r24, Z
    11a0:	91 81       	ldd	r25, Z+1	; 0x01
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <LCD_displayCharacter+0x4ce>
    11a6:	9e 01       	movw	r18, r28
    11a8:	2a 5b       	subi	r18, 0xBA	; 186
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    11ac:	f9 01       	movw	r30, r18
    11ae:	91 83       	std	Z+1, r25	; 0x01
    11b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b2:	ce 01       	movw	r24, r28
    11b4:	8c 5b       	subi	r24, 0xBC	; 188
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	9e 01       	movw	r18, r28
    11ba:	2c 5b       	subi	r18, 0xBC	; 188
    11bc:	3f 4f       	sbci	r19, 0xFF	; 255
    11be:	f9 01       	movw	r30, r18
    11c0:	20 81       	ld	r18, Z
    11c2:	31 81       	ldd	r19, Z+1	; 0x01
    11c4:	21 50       	subi	r18, 0x01	; 1
    11c6:	31 09       	sbc	r19, r1
    11c8:	fc 01       	movw	r30, r24
    11ca:	31 83       	std	Z+1, r19	; 0x01
    11cc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ce:	ce 01       	movw	r24, r28
    11d0:	8c 5b       	subi	r24, 0xBC	; 188
    11d2:	9f 4f       	sbci	r25, 0xFF	; 255
    11d4:	fc 01       	movw	r30, r24
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	89 2b       	or	r24, r25
    11dc:	a1 f6       	brne	.-88     	; 0x1186 <LCD_displayCharacter+0x4b2>
    11de:	6b c0       	rjmp	.+214    	; 0x12b6 <LCD_displayCharacter+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e0:	8e 01       	movw	r16, r28
    11e2:	0c 5b       	subi	r16, 0xBC	; 188
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	ce 01       	movw	r24, r28
    11e8:	80 5c       	subi	r24, 0xC0	; 192
    11ea:	9f 4f       	sbci	r25, 0xFF	; 255
    11ec:	fc 01       	movw	r30, r24
    11ee:	60 81       	ld	r22, Z
    11f0:	71 81       	ldd	r23, Z+1	; 0x01
    11f2:	82 81       	ldd	r24, Z+2	; 0x02
    11f4:	93 81       	ldd	r25, Z+3	; 0x03
    11f6:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	f8 01       	movw	r30, r16
    1200:	91 83       	std	Z+1, r25	; 0x01
    1202:	80 83       	st	Z, r24
    1204:	ce 01       	movw	r24, r28
    1206:	88 5b       	subi	r24, 0xB8	; 184
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	9e 01       	movw	r18, r28
    120c:	2c 5b       	subi	r18, 0xBC	; 188
    120e:	3f 4f       	sbci	r19, 0xFF	; 255
    1210:	f9 01       	movw	r30, r18
    1212:	20 81       	ld	r18, Z
    1214:	31 81       	ldd	r19, Z+1	; 0x01
    1216:	fc 01       	movw	r30, r24
    1218:	31 83       	std	Z+1, r19	; 0x01
    121a:	20 83       	st	Z, r18
    121c:	ce 01       	movw	r24, r28
    121e:	88 5b       	subi	r24, 0xB8	; 184
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	fc 01       	movw	r30, r24
    1224:	80 81       	ld	r24, Z
    1226:	91 81       	ldd	r25, Z+1	; 0x01
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	f1 f7       	brne	.-4      	; 0x1228 <LCD_displayCharacter+0x554>
    122c:	9e 01       	movw	r18, r28
    122e:	28 5b       	subi	r18, 0xB8	; 184
    1230:	3f 4f       	sbci	r19, 0xFF	; 255
    1232:	f9 01       	movw	r30, r18
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	80 83       	st	Z, r24
    1238:	3e c0       	rjmp	.+124    	; 0x12b6 <LCD_displayCharacter+0x5e2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	4f e7       	ldi	r20, 0x7F	; 127
    1240:	53 e4       	ldi	r21, 0x43	; 67
    1242:	6b a9       	ldd	r22, Y+51	; 0x33
    1244:	7c a9       	ldd	r23, Y+52	; 0x34
    1246:	8d a9       	ldd	r24, Y+53	; 0x35
    1248:	9e a9       	ldd	r25, Y+54	; 0x36
    124a:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
    124e:	18 16       	cp	r1, r24
    1250:	4c f5       	brge	.+82     	; 0x12a4 <LCD_displayCharacter+0x5d0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1252:	8e 01       	movw	r16, r28
    1254:	06 5b       	subi	r16, 0xB6	; 182
    1256:	1f 4f       	sbci	r17, 0xFF	; 255
    1258:	6f a9       	ldd	r22, Y+55	; 0x37
    125a:	78 ad       	ldd	r23, Y+56	; 0x38
    125c:	89 ad       	ldd	r24, Y+57	; 0x39
    125e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1260:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	f8 01       	movw	r30, r16
    126a:	91 83       	std	Z+1, r25	; 0x01
    126c:	80 83       	st	Z, r24
    126e:	ce 01       	movw	r24, r28
    1270:	84 5b       	subi	r24, 0xB4	; 180
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	9e 01       	movw	r18, r28
    1276:	26 5b       	subi	r18, 0xB6	; 182
    1278:	3f 4f       	sbci	r19, 0xFF	; 255
    127a:	f9 01       	movw	r30, r18
    127c:	20 81       	ld	r18, Z
    127e:	31 81       	ldd	r19, Z+1	; 0x01
    1280:	fc 01       	movw	r30, r24
    1282:	31 83       	std	Z+1, r19	; 0x01
    1284:	20 83       	st	Z, r18
    1286:	ce 01       	movw	r24, r28
    1288:	84 5b       	subi	r24, 0xB4	; 180
    128a:	9f 4f       	sbci	r25, 0xFF	; 255
    128c:	fc 01       	movw	r30, r24
    128e:	80 81       	ld	r24, Z
    1290:	91 81       	ldd	r25, Z+1	; 0x01
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	f1 f7       	brne	.-4      	; 0x1292 <LCD_displayCharacter+0x5be>
    1296:	9e 01       	movw	r18, r28
    1298:	24 5b       	subi	r18, 0xB4	; 180
    129a:	3f 4f       	sbci	r19, 0xFF	; 255
    129c:	f9 01       	movw	r30, r18
    129e:	91 83       	std	Z+1, r25	; 0x01
    12a0:	80 83       	st	Z, r24
    12a2:	1c c0       	rjmp	.+56     	; 0x12dc <LCD_displayCharacter+0x608>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12a4:	6b a9       	ldd	r22, Y+51	; 0x33
    12a6:	7c a9       	ldd	r23, Y+52	; 0x34
    12a8:	8d a9       	ldd	r24, Y+53	; 0x35
    12aa:	9e a9       	ldd	r25, Y+54	; 0x36
    12ac:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	8b af       	std	Y+59, r24	; 0x3b
    12b6:	ce 01       	movw	r24, r28
    12b8:	82 5b       	subi	r24, 0xB2	; 178
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	2b ad       	ldd	r18, Y+59	; 0x3b
    12be:	fc 01       	movw	r30, r24
    12c0:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12c2:	ce 01       	movw	r24, r28
    12c4:	82 5b       	subi	r24, 0xB2	; 178
    12c6:	9f 4f       	sbci	r25, 0xFF	; 255
    12c8:	fc 01       	movw	r30, r24
    12ca:	80 81       	ld	r24, Z
    12cc:	28 2f       	mov	r18, r24
    12ce:	2a 95       	dec	r18
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <LCD_displayCharacter+0x5fa>
    12d2:	ce 01       	movw	r24, r28
    12d4:	82 5b       	subi	r24, 0xB2	; 178
    12d6:	9f 4f       	sbci	r25, 0xFF	; 255
    12d8:	fc 01       	movw	r30, r24
    12da:	20 83       	st	Z, r18
	_delay_us(1);/* delay processing R/W set time tas =40ns */
	SET_BIT(LCD_CTRL_PORT,LCD_ENABLE); /* enable LCD so enable =1 */
    12dc:	82 e3       	ldi	r24, 0x32	; 50
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	22 e3       	ldi	r18, 0x32	; 50
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	f9 01       	movw	r30, r18
    12e6:	20 81       	ld	r18, Z
    12e8:	20 64       	ori	r18, 0x40	; 64
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	a0 e8       	ldi	r26, 0x80	; 128
    12f4:	bf e3       	ldi	r27, 0x3F	; 63
    12f6:	89 87       	std	Y+9, r24	; 0x09
    12f8:	9a 87       	std	Y+10, r25	; 0x0a
    12fa:	ab 87       	std	Y+11, r26	; 0x0b
    12fc:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	4a ef       	ldi	r20, 0xFA	; 250
    1304:	54 e4       	ldi	r21, 0x44	; 68
    1306:	69 85       	ldd	r22, Y+9	; 0x09
    1308:	7a 85       	ldd	r23, Y+10	; 0x0a
    130a:	8b 85       	ldd	r24, Y+11	; 0x0b
    130c:	9c 85       	ldd	r25, Y+12	; 0x0c
    130e:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	89 a7       	std	Y+41, r24	; 0x29
    1318:	9a a7       	std	Y+42, r25	; 0x2a
    131a:	ab a7       	std	Y+43, r26	; 0x2b
    131c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e8       	ldi	r20, 0x80	; 128
    1324:	5f e3       	ldi	r21, 0x3F	; 63
    1326:	69 a5       	ldd	r22, Y+41	; 0x29
    1328:	7a a5       	ldd	r23, Y+42	; 0x2a
    132a:	8b a5       	ldd	r24, Y+43	; 0x2b
    132c:	9c a5       	ldd	r25, Y+44	; 0x2c
    132e:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__cmpsf2>
    1332:	88 23       	and	r24, r24
    1334:	2c f4       	brge	.+10     	; 0x1340 <LCD_displayCharacter+0x66c>
		__ticks = 1;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	9e a7       	std	Y+46, r25	; 0x2e
    133c:	8d a7       	std	Y+45, r24	; 0x2d
    133e:	3f c0       	rjmp	.+126    	; 0x13be <LCD_displayCharacter+0x6ea>
	else if (__tmp > 65535)
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	3f ef       	ldi	r19, 0xFF	; 255
    1344:	4f e7       	ldi	r20, 0x7F	; 127
    1346:	57 e4       	ldi	r21, 0x47	; 71
    1348:	69 a5       	ldd	r22, Y+41	; 0x29
    134a:	7a a5       	ldd	r23, Y+42	; 0x2a
    134c:	8b a5       	ldd	r24, Y+43	; 0x2b
    134e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1350:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
    1354:	18 16       	cp	r1, r24
    1356:	4c f5       	brge	.+82     	; 0x13aa <LCD_displayCharacter+0x6d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e2       	ldi	r20, 0x20	; 32
    135e:	51 e4       	ldi	r21, 0x41	; 65
    1360:	69 85       	ldd	r22, Y+9	; 0x09
    1362:	7a 85       	ldd	r23, Y+10	; 0x0a
    1364:	8b 85       	ldd	r24, Y+11	; 0x0b
    1366:	9c 85       	ldd	r25, Y+12	; 0x0c
    1368:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	9e a7       	std	Y+46, r25	; 0x2e
    137e:	8d a7       	std	Y+45, r24	; 0x2d
    1380:	0f c0       	rjmp	.+30     	; 0x13a0 <LCD_displayCharacter+0x6cc>
    1382:	88 ec       	ldi	r24, 0xC8	; 200
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	98 ab       	std	Y+48, r25	; 0x30
    1388:	8f a7       	std	Y+47, r24	; 0x2f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    138a:	8f a5       	ldd	r24, Y+47	; 0x2f
    138c:	98 a9       	ldd	r25, Y+48	; 0x30
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <LCD_displayCharacter+0x6ba>
    1392:	98 ab       	std	Y+48, r25	; 0x30
    1394:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1396:	8d a5       	ldd	r24, Y+45	; 0x2d
    1398:	9e a5       	ldd	r25, Y+46	; 0x2e
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	9e a7       	std	Y+46, r25	; 0x2e
    139e:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    13a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    13a4:	89 2b       	or	r24, r25
    13a6:	69 f7       	brne	.-38     	; 0x1382 <LCD_displayCharacter+0x6ae>
    13a8:	14 c0       	rjmp	.+40     	; 0x13d2 <LCD_displayCharacter+0x6fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13aa:	69 a5       	ldd	r22, Y+41	; 0x29
    13ac:	7a a5       	ldd	r23, Y+42	; 0x2a
    13ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    13b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    13b2:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	9e a7       	std	Y+46, r25	; 0x2e
    13bc:	8d a7       	std	Y+45, r24	; 0x2d
    13be:	8d a5       	ldd	r24, Y+45	; 0x2d
    13c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    13c2:	9a ab       	std	Y+50, r25	; 0x32
    13c4:	89 ab       	std	Y+49, r24	; 0x31
    13c6:	89 a9       	ldd	r24, Y+49	; 0x31
    13c8:	9a a9       	ldd	r25, Y+50	; 0x32
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <LCD_displayCharacter+0x6f6>
    13ce:	9a ab       	std	Y+50, r25	; 0x32
    13d0:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1); /*delay for processing Tpw - Tdws = 190ns*/
	PORTC=data; /* out the required data to output data bus D0-->D7 */
    13d2:	85 e3       	ldi	r24, 0x35	; 53
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9e 01       	movw	r18, r28
    13d8:	25 59       	subi	r18, 0x95	; 149
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	f9 01       	movw	r30, r18
    13de:	20 81       	ld	r18, Z
    13e0:	fc 01       	movw	r30, r24
    13e2:	20 83       	st	Z, r18
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a0 e8       	ldi	r26, 0x80	; 128
    13ea:	bf e3       	ldi	r27, 0x3F	; 63
    13ec:	8d 87       	std	Y+13, r24	; 0x0d
    13ee:	9e 87       	std	Y+14, r25	; 0x0e
    13f0:	af 87       	std	Y+15, r26	; 0x0f
    13f2:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	4a ef       	ldi	r20, 0xFA	; 250
    13fa:	54 e4       	ldi	r21, 0x44	; 68
    13fc:	6d 85       	ldd	r22, Y+13	; 0x0d
    13fe:	7e 85       	ldd	r23, Y+14	; 0x0e
    1400:	8f 85       	ldd	r24, Y+15	; 0x0f
    1402:	98 89       	ldd	r25, Y+16	; 0x10
    1404:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	8f 8f       	std	Y+31, r24	; 0x1f
    140e:	98 a3       	std	Y+32, r25	; 0x20
    1410:	a9 a3       	std	Y+33, r26	; 0x21
    1412:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	40 e8       	ldi	r20, 0x80	; 128
    141a:	5f e3       	ldi	r21, 0x3F	; 63
    141c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    141e:	78 a1       	ldd	r23, Y+32	; 0x20
    1420:	89 a1       	ldd	r24, Y+33	; 0x21
    1422:	9a a1       	ldd	r25, Y+34	; 0x22
    1424:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__cmpsf2>
    1428:	88 23       	and	r24, r24
    142a:	2c f4       	brge	.+10     	; 0x1436 <LCD_displayCharacter+0x762>
		__ticks = 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9c a3       	std	Y+36, r25	; 0x24
    1432:	8b a3       	std	Y+35, r24	; 0x23
    1434:	3f c0       	rjmp	.+126    	; 0x14b4 <LCD_displayCharacter+0x7e0>
	else if (__tmp > 65535)
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	3f ef       	ldi	r19, 0xFF	; 255
    143a:	4f e7       	ldi	r20, 0x7F	; 127
    143c:	57 e4       	ldi	r21, 0x47	; 71
    143e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1440:	78 a1       	ldd	r23, Y+32	; 0x20
    1442:	89 a1       	ldd	r24, Y+33	; 0x21
    1444:	9a a1       	ldd	r25, Y+34	; 0x22
    1446:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
    144a:	18 16       	cp	r1, r24
    144c:	4c f5       	brge	.+82     	; 0x14a0 <LCD_displayCharacter+0x7cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e2       	ldi	r20, 0x20	; 32
    1454:	51 e4       	ldi	r21, 0x41	; 65
    1456:	6d 85       	ldd	r22, Y+13	; 0x0d
    1458:	7e 85       	ldd	r23, Y+14	; 0x0e
    145a:	8f 85       	ldd	r24, Y+15	; 0x0f
    145c:	98 89       	ldd	r25, Y+16	; 0x10
    145e:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9c a3       	std	Y+36, r25	; 0x24
    1474:	8b a3       	std	Y+35, r24	; 0x23
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <LCD_displayCharacter+0x7c2>
    1478:	88 ec       	ldi	r24, 0xC8	; 200
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9e a3       	std	Y+38, r25	; 0x26
    147e:	8d a3       	std	Y+37, r24	; 0x25
    1480:	8d a1       	ldd	r24, Y+37	; 0x25
    1482:	9e a1       	ldd	r25, Y+38	; 0x26
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <LCD_displayCharacter+0x7b0>
    1488:	9e a3       	std	Y+38, r25	; 0x26
    148a:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148c:	8b a1       	ldd	r24, Y+35	; 0x23
    148e:	9c a1       	ldd	r25, Y+36	; 0x24
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	9c a3       	std	Y+36, r25	; 0x24
    1494:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1496:	8b a1       	ldd	r24, Y+35	; 0x23
    1498:	9c a1       	ldd	r25, Y+36	; 0x24
    149a:	89 2b       	or	r24, r25
    149c:	69 f7       	brne	.-38     	; 0x1478 <LCD_displayCharacter+0x7a4>
    149e:	14 c0       	rjmp	.+40     	; 0x14c8 <LCD_displayCharacter+0x7f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    14a2:	78 a1       	ldd	r23, Y+32	; 0x20
    14a4:	89 a1       	ldd	r24, Y+33	; 0x21
    14a6:	9a a1       	ldd	r25, Y+34	; 0x22
    14a8:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9c a3       	std	Y+36, r25	; 0x24
    14b2:	8b a3       	std	Y+35, r24	; 0x23
    14b4:	8b a1       	ldd	r24, Y+35	; 0x23
    14b6:	9c a1       	ldd	r25, Y+36	; 0x24
    14b8:	98 a7       	std	Y+40, r25	; 0x28
    14ba:	8f a3       	std	Y+39, r24	; 0x27
    14bc:	8f a1       	ldd	r24, Y+39	; 0x27
    14be:	98 a5       	ldd	r25, Y+40	; 0x28
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <LCD_displayCharacter+0x7ec>
    14c4:	98 a7       	std	Y+40, r25	; 0x28
    14c6:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(1);/* delay processing command setup time tdsw=60ns */
	CLEAR_BIT(LCD_CTRL_PORT,6); /* disable LCD so enable pin =0*/
    14c8:	82 e3       	ldi	r24, 0x32	; 50
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	22 e3       	ldi	r18, 0x32	; 50
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	f9 01       	movw	r30, r18
    14d2:	20 81       	ld	r18, Z
    14d4:	2f 7b       	andi	r18, 0xBF	; 191
    14d6:	fc 01       	movw	r30, r24
    14d8:	20 83       	st	Z, r18
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a0 e8       	ldi	r26, 0x80	; 128
    14e0:	bf e3       	ldi	r27, 0x3F	; 63
    14e2:	89 8b       	std	Y+17, r24	; 0x11
    14e4:	9a 8b       	std	Y+18, r25	; 0x12
    14e6:	ab 8b       	std	Y+19, r26	; 0x13
    14e8:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	4a ef       	ldi	r20, 0xFA	; 250
    14f0:	54 e4       	ldi	r21, 0x44	; 68
    14f2:	69 89       	ldd	r22, Y+17	; 0x11
    14f4:	7a 89       	ldd	r23, Y+18	; 0x12
    14f6:	8b 89       	ldd	r24, Y+19	; 0x13
    14f8:	9c 89       	ldd	r25, Y+20	; 0x14
    14fa:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	8d 8b       	std	Y+21, r24	; 0x15
    1504:	9e 8b       	std	Y+22, r25	; 0x16
    1506:	af 8b       	std	Y+23, r26	; 0x17
    1508:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	40 e8       	ldi	r20, 0x80	; 128
    1510:	5f e3       	ldi	r21, 0x3F	; 63
    1512:	6d 89       	ldd	r22, Y+21	; 0x15
    1514:	7e 89       	ldd	r23, Y+22	; 0x16
    1516:	8f 89       	ldd	r24, Y+23	; 0x17
    1518:	98 8d       	ldd	r25, Y+24	; 0x18
    151a:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__cmpsf2>
    151e:	88 23       	and	r24, r24
    1520:	2c f4       	brge	.+10     	; 0x152c <LCD_displayCharacter+0x858>
		__ticks = 1;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	9a 8f       	std	Y+26, r25	; 0x1a
    1528:	89 8f       	std	Y+25, r24	; 0x19
    152a:	3f c0       	rjmp	.+126    	; 0x15aa <LCD_displayCharacter+0x8d6>
	else if (__tmp > 65535)
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	3f ef       	ldi	r19, 0xFF	; 255
    1530:	4f e7       	ldi	r20, 0x7F	; 127
    1532:	57 e4       	ldi	r21, 0x47	; 71
    1534:	6d 89       	ldd	r22, Y+21	; 0x15
    1536:	7e 89       	ldd	r23, Y+22	; 0x16
    1538:	8f 89       	ldd	r24, Y+23	; 0x17
    153a:	98 8d       	ldd	r25, Y+24	; 0x18
    153c:	0e 94 83 13 	call	0x2706	; 0x2706 <__gesf2>
    1540:	18 16       	cp	r1, r24
    1542:	4c f5       	brge	.+82     	; 0x1596 <LCD_displayCharacter+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e2       	ldi	r20, 0x20	; 32
    154a:	51 e4       	ldi	r21, 0x41	; 65
    154c:	69 89       	ldd	r22, Y+17	; 0x11
    154e:	7a 89       	ldd	r23, Y+18	; 0x12
    1550:	8b 89       	ldd	r24, Y+19	; 0x13
    1552:	9c 89       	ldd	r25, Y+20	; 0x14
    1554:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulsf3>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	9a 8f       	std	Y+26, r25	; 0x1a
    156a:	89 8f       	std	Y+25, r24	; 0x19
    156c:	0f c0       	rjmp	.+30     	; 0x158c <LCD_displayCharacter+0x8b8>
    156e:	88 ec       	ldi	r24, 0xC8	; 200
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	9c 8f       	std	Y+28, r25	; 0x1c
    1574:	8b 8f       	std	Y+27, r24	; 0x1b
    1576:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1578:	9c 8d       	ldd	r25, Y+28	; 0x1c
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <LCD_displayCharacter+0x8a6>
    157e:	9c 8f       	std	Y+28, r25	; 0x1c
    1580:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1582:	89 8d       	ldd	r24, Y+25	; 0x19
    1584:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	9a 8f       	std	Y+26, r25	; 0x1a
    158a:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158c:	89 8d       	ldd	r24, Y+25	; 0x19
    158e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1590:	89 2b       	or	r24, r25
    1592:	69 f7       	brne	.-38     	; 0x156e <LCD_displayCharacter+0x89a>
	_delay_ms(1); /* delay for processing hold time th =10ns*/
}
    1594:	14 c0       	rjmp	.+40     	; 0x15be <LCD_displayCharacter+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1596:	6d 89       	ldd	r22, Y+21	; 0x15
    1598:	7e 89       	ldd	r23, Y+22	; 0x16
    159a:	8f 89       	ldd	r24, Y+23	; 0x17
    159c:	98 8d       	ldd	r25, Y+24	; 0x18
    159e:	0e 94 df 12 	call	0x25be	; 0x25be <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	9a 8f       	std	Y+26, r25	; 0x1a
    15a8:	89 8f       	std	Y+25, r24	; 0x19
    15aa:	89 8d       	ldd	r24, Y+25	; 0x19
    15ac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    15ae:	9e 8f       	std	Y+30, r25	; 0x1e
    15b0:	8d 8f       	std	Y+29, r24	; 0x1d
    15b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <LCD_displayCharacter+0x8e2>
    15ba:	9e 8f       	std	Y+30, r25	; 0x1e
    15bc:	8d 8f       	std	Y+29, r24	; 0x1d
    15be:	00 00       	nop
    15c0:	c5 59       	subi	r28, 0x95	; 149
    15c2:	df 4f       	sbci	r29, 0xFF	; 255
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	08 95       	ret

000015d8 <LCD_displayString>:
void LCD_displayString(uint8 *str)
{
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	00 d0       	rcall	.+0      	; 0x15de <LCD_displayString+0x6>
    15de:	1f 92       	push	r1
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	9b 83       	std	Y+3, r25	; 0x03
    15e6:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0 ;str[i]!='\0';i++)
    15e8:	19 82       	std	Y+1, r1	; 0x01
    15ea:	0e c0       	rjmp	.+28     	; 0x1608 <LCD_displayString+0x30>
	LCD_displayCharacter( str[i]);
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	88 2f       	mov	r24, r24
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	2a 81       	ldd	r18, Y+2	; 0x02
    15f4:	3b 81       	ldd	r19, Y+3	; 0x03
    15f6:	82 0f       	add	r24, r18
    15f8:	93 1f       	adc	r25, r19
    15fa:	fc 01       	movw	r30, r24
    15fc:	80 81       	ld	r24, Z
    15fe:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCD_displayCharacter>
	CLEAR_BIT(LCD_CTRL_PORT,6); /* disable LCD so enable pin =0*/
	_delay_ms(1); /* delay for processing hold time th =10ns*/
}
void LCD_displayString(uint8 *str)
{
	for(uint8 i=0 ;str[i]!='\0';i++)
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	8f 5f       	subi	r24, 0xFF	; 255
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	88 2f       	mov	r24, r24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	2a 81       	ldd	r18, Y+2	; 0x02
    1610:	3b 81       	ldd	r19, Y+3	; 0x03
    1612:	82 0f       	add	r24, r18
    1614:	93 1f       	adc	r25, r19
    1616:	fc 01       	movw	r30, r24
    1618:	80 81       	ld	r24, Z
    161a:	88 23       	and	r24, r24
    161c:	39 f7       	brne	.-50     	; 0x15ec <LCD_displayString+0x14>
	LCD_displayCharacter( str[i]);
}
    161e:	00 00       	nop
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	08 95       	ret

0000162c <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{	/* first of all calculate the required address */
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	00 d0       	rcall	.+0      	; 0x1632 <LCD_goToRowColumn+0x6>
    1632:	1f 92       	push	r1
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	8a 83       	std	Y+2, r24	; 0x02
    163a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	88 2f       	mov	r24, r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	91 05       	cpc	r25, r1
    1646:	79 f0       	breq	.+30     	; 0x1666 <LCD_goToRowColumn+0x3a>
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	91 05       	cpc	r25, r1
    164c:	1c f4       	brge	.+6      	; 0x1654 <LCD_goToRowColumn+0x28>
    164e:	89 2b       	or	r24, r25
    1650:	39 f0       	breq	.+14     	; 0x1660 <LCD_goToRowColumn+0x34>
    1652:	15 c0       	rjmp	.+42     	; 0x167e <LCD_goToRowColumn+0x52>
    1654:	82 30       	cpi	r24, 0x02	; 2
    1656:	91 05       	cpc	r25, r1
    1658:	51 f0       	breq	.+20     	; 0x166e <LCD_goToRowColumn+0x42>
    165a:	03 97       	sbiw	r24, 0x03	; 3
    165c:	61 f0       	breq	.+24     	; 0x1676 <LCD_goToRowColumn+0x4a>
    165e:	0f c0       	rjmp	.+30     	; 0x167e <LCD_goToRowColumn+0x52>
	{
	case 0:
		address=col;
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	89 83       	std	Y+1, r24	; 0x01
		break;
    1664:	0c c0       	rjmp	.+24     	; 0x167e <LCD_goToRowColumn+0x52>
	case 1:
		address=0x40+col;
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	80 5c       	subi	r24, 0xC0	; 192
    166a:	89 83       	std	Y+1, r24	; 0x01
		break;
    166c:	08 c0       	rjmp	.+16     	; 0x167e <LCD_goToRowColumn+0x52>
	case 2:
		address=0x10+col;
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	80 5f       	subi	r24, 0xF0	; 240
    1672:	89 83       	std	Y+1, r24	; 0x01
		break;
    1674:	04 c0       	rjmp	.+8      	; 0x167e <LCD_goToRowColumn+0x52>
	case 3:
		address=0x50+col;
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	80 5b       	subi	r24, 0xB0	; 176
    167a:	89 83       	std	Y+1, r24	; 0x01
		break;
    167c:	00 00       	nop
		}
	/* pass the specific address to the LCD
	 * to change the address you should add 0x80 to address
	 */
	LCD_sendCommand(address|0x80);
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	80 68       	ori	r24, 0x80	; 128
    1682:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_sendCommand>
}
    1686:	00 00       	nop
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row, uint8 col ,uint8 *str)
{
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	00 d0       	rcall	.+0      	; 0x169a <LCD_displayStringRowColumn+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <LCD_displayStringRowColumn+0x8>
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	6a 83       	std	Y+2, r22	; 0x02
    16a4:	5c 83       	std	Y+4, r21	; 0x04
    16a6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn( row, col);/* go to the required position*/
    16a8:	6a 81       	ldd	r22, Y+2	; 0x02
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_goToRowColumn>
	LCD_displayString(str);/* display the string*/
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <LCD_displayString>
}
    16b8:	00 00       	nop
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	08 95       	ret

000016c8 <LCD_clearScreen>:
void LCD_clearScreen()
{
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);/* clear display*/
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_sendCommand>
}
    16d6:	00 00       	nop
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	08 95       	ret

000016de <LCD_intgerToString>:
void LCD_intgerToString(int data)
{
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	62 97       	sbiw	r28, 0x12	; 18
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	9a 8b       	std	Y+18, r25	; 0x12
    16f4:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];/* buffer to hold acii result */
	itoa(data,buff,10); /* 10 for decimal base */
    16f6:	89 89       	ldd	r24, Y+17	; 0x11
    16f8:	9a 89       	ldd	r25, Y+18	; 0x12
    16fa:	4a e0       	ldi	r20, 0x0A	; 10
    16fc:	50 e0       	ldi	r21, 0x00	; 0
    16fe:	9e 01       	movw	r18, r28
    1700:	2f 5f       	subi	r18, 0xFF	; 255
    1702:	3f 4f       	sbci	r19, 0xFF	; 255
    1704:	b9 01       	movw	r22, r18
    1706:	0e 94 09 14 	call	0x2812	; 0x2812 <itoa>
	LCD_displayString(buff);
    170a:	ce 01       	movw	r24, r28
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <LCD_displayString>
}
    1712:	00 00       	nop
    1714:	62 96       	adiw	r28, 0x12	; 18
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	08 95       	ret

00001726 <__vector_19>:

#include"timer.h"
static volatile  void(*g_callBackPtr)(void)= NULL_PTR;
static volatile TIMER_configurationType * configPtr;
ISR(TIMER0_COMP_vect)
{
    1726:	1f 92       	push	r1
    1728:	0f 92       	push	r0
    172a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    172e:	0f 92       	push	r0
    1730:	11 24       	eor	r1, r1
    1732:	2f 93       	push	r18
    1734:	3f 93       	push	r19
    1736:	4f 93       	push	r20
    1738:	5f 93       	push	r21
    173a:	6f 93       	push	r22
    173c:	7f 93       	push	r23
    173e:	8f 93       	push	r24
    1740:	9f 93       	push	r25
    1742:	af 93       	push	r26
    1744:	bf 93       	push	r27
    1746:	ef 93       	push	r30
    1748:	ff 93       	push	r31
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    1752:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <g_callBackPtr>
    1756:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <g_callBackPtr+0x1>
    175a:	89 2b       	or	r24, r25
    175c:	31 f0       	breq	.+12     	; 0x176a <__vector_19+0x44>
		g_callBackPtr();
    175e:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <g_callBackPtr>
    1762:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <g_callBackPtr+0x1>
    1766:	fc 01       	movw	r30, r24
    1768:	09 95       	icall

}
    176a:	00 00       	nop
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	ff 91       	pop	r31
    1772:	ef 91       	pop	r30
    1774:	bf 91       	pop	r27
    1776:	af 91       	pop	r26
    1778:	9f 91       	pop	r25
    177a:	8f 91       	pop	r24
    177c:	7f 91       	pop	r23
    177e:	6f 91       	pop	r22
    1780:	5f 91       	pop	r21
    1782:	4f 91       	pop	r20
    1784:	3f 91       	pop	r19
    1786:	2f 91       	pop	r18
    1788:	0f 90       	pop	r0
    178a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    178e:	0f 90       	pop	r0
    1790:	1f 90       	pop	r1
    1792:	18 95       	reti

00001794 <__vector_9>:
ISR(TIMER0_OVF_vect)
{
    1794:	1f 92       	push	r1
    1796:	0f 92       	push	r0
    1798:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    179c:	0f 92       	push	r0
    179e:	11 24       	eor	r1, r1
    17a0:	2f 93       	push	r18
    17a2:	3f 93       	push	r19
    17a4:	4f 93       	push	r20
    17a6:	5f 93       	push	r21
    17a8:	6f 93       	push	r22
    17aa:	7f 93       	push	r23
    17ac:	8f 93       	push	r24
    17ae:	9f 93       	push	r25
    17b0:	af 93       	push	r26
    17b2:	bf 93       	push	r27
    17b4:	ef 93       	push	r30
    17b6:	ff 93       	push	r31
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    17c0:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <g_callBackPtr>
    17c4:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <g_callBackPtr+0x1>
    17c8:	89 2b       	or	r24, r25
    17ca:	31 f0       	breq	.+12     	; 0x17d8 <__vector_9+0x44>
		g_callBackPtr();
    17cc:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <g_callBackPtr>
    17d0:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <g_callBackPtr+0x1>
    17d4:	fc 01       	movw	r30, r24
    17d6:	09 95       	icall

}
    17d8:	00 00       	nop
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	ff 91       	pop	r31
    17e0:	ef 91       	pop	r30
    17e2:	bf 91       	pop	r27
    17e4:	af 91       	pop	r26
    17e6:	9f 91       	pop	r25
    17e8:	8f 91       	pop	r24
    17ea:	7f 91       	pop	r23
    17ec:	6f 91       	pop	r22
    17ee:	5f 91       	pop	r21
    17f0:	4f 91       	pop	r20
    17f2:	3f 91       	pop	r19
    17f4:	2f 91       	pop	r18
    17f6:	0f 90       	pop	r0
    17f8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    17fc:	0f 90       	pop	r0
    17fe:	1f 90       	pop	r1
    1800:	18 95       	reti

00001802 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    1802:	1f 92       	push	r1
    1804:	0f 92       	push	r0
    1806:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    180a:	0f 92       	push	r0
    180c:	11 24       	eor	r1, r1
    180e:	2f 93       	push	r18
    1810:	3f 93       	push	r19
    1812:	4f 93       	push	r20
    1814:	5f 93       	push	r21
    1816:	6f 93       	push	r22
    1818:	7f 93       	push	r23
    181a:	8f 93       	push	r24
    181c:	9f 93       	push	r25
    181e:	af 93       	push	r26
    1820:	bf 93       	push	r27
    1822:	ef 93       	push	r30
    1824:	ff 93       	push	r31
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    182e:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <g_callBackPtr>
    1832:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <g_callBackPtr+0x1>
    1836:	89 2b       	or	r24, r25
    1838:	31 f0       	breq	.+12     	; 0x1846 <__vector_6+0x44>
			g_callBackPtr();
    183a:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <g_callBackPtr>
    183e:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <g_callBackPtr+0x1>
    1842:	fc 01       	movw	r30, r24
    1844:	09 95       	icall
}
    1846:	00 00       	nop
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	ff 91       	pop	r31
    184e:	ef 91       	pop	r30
    1850:	bf 91       	pop	r27
    1852:	af 91       	pop	r26
    1854:	9f 91       	pop	r25
    1856:	8f 91       	pop	r24
    1858:	7f 91       	pop	r23
    185a:	6f 91       	pop	r22
    185c:	5f 91       	pop	r21
    185e:	4f 91       	pop	r20
    1860:	3f 91       	pop	r19
    1862:	2f 91       	pop	r18
    1864:	0f 90       	pop	r0
    1866:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    186a:	0f 90       	pop	r0
    186c:	1f 90       	pop	r1
    186e:	18 95       	reti

00001870 <TIMER_init>:
void TIMER_init( TIMER_configurationType * config)
{configPtr=config;
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	00 d0       	rcall	.+0      	; 0x1876 <TIMER_init+0x6>
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	9a 83       	std	Y+2, r25	; 0x02
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <configPtr+0x1>
    1886:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <configPtr>
	if(config->timerNumber==0)
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	9a 81       	ldd	r25, Y+2	; 0x02
    188e:	fc 01       	movw	r30, r24
    1890:	80 81       	ld	r24, Z
    1892:	88 23       	and	r24, r24
    1894:	09 f0       	breq	.+2      	; 0x1898 <TIMER_init+0x28>
    1896:	22 c1       	rjmp	.+580    	; 0x1adc <TIMER_init+0x26c>
	{
		TCCR0=0;
    1898:	83 e5       	ldi	r24, 0x53	; 83
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	fc 01       	movw	r30, r24
    189e:	10 82       	st	Z, r1
	switch(config->prescaler)
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	fc 01       	movw	r30, r24
    18a6:	85 89       	ldd	r24, Z+21	; 0x15
    18a8:	96 89       	ldd	r25, Z+22	; 0x16
    18aa:	80 34       	cpi	r24, 0x40	; 64
    18ac:	91 05       	cpc	r25, r1
    18ae:	c1 f0       	breq	.+48     	; 0x18e0 <TIMER_init+0x70>
    18b0:	81 34       	cpi	r24, 0x41	; 65
    18b2:	91 05       	cpc	r25, r1
    18b4:	18 f4       	brcc	.+6      	; 0x18bc <TIMER_init+0x4c>
    18b6:	08 97       	sbiw	r24, 0x08	; 8
    18b8:	49 f0       	breq	.+18     	; 0x18cc <TIMER_init+0x5c>
    18ba:	30 c0       	rjmp	.+96     	; 0x191c <TIMER_init+0xac>
    18bc:	81 15       	cp	r24, r1
    18be:	f1 e0       	ldi	r31, 0x01	; 1
    18c0:	9f 07       	cpc	r25, r31
    18c2:	c1 f0       	breq	.+48     	; 0x18f4 <TIMER_init+0x84>
    18c4:	81 15       	cp	r24, r1
    18c6:	94 40       	sbci	r25, 0x04	; 4
    18c8:	f9 f0       	breq	.+62     	; 0x1908 <TIMER_init+0x98>
    18ca:	28 c0       	rjmp	.+80     	; 0x191c <TIMER_init+0xac>
	{
	case 8:
		TCCR0|=(1<<CS01);
    18cc:	83 e5       	ldi	r24, 0x53	; 83
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	23 e5       	ldi	r18, 0x53	; 83
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	f9 01       	movw	r30, r18
    18d6:	20 81       	ld	r18, Z
    18d8:	22 60       	ori	r18, 0x02	; 2
    18da:	fc 01       	movw	r30, r24
    18dc:	20 83       	st	Z, r18
		break;
    18de:	27 c0       	rjmp	.+78     	; 0x192e <TIMER_init+0xbe>
	case 64:
			TCCR0|=(1<<CS00)|(1<<CS01);
    18e0:	83 e5       	ldi	r24, 0x53	; 83
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	23 e5       	ldi	r18, 0x53	; 83
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	f9 01       	movw	r30, r18
    18ea:	20 81       	ld	r18, Z
    18ec:	23 60       	ori	r18, 0x03	; 3
    18ee:	fc 01       	movw	r30, r24
    18f0:	20 83       	st	Z, r18
			break;
    18f2:	1d c0       	rjmp	.+58     	; 0x192e <TIMER_init+0xbe>
	case 256:
			TCCR0|=(1<<CS02);
    18f4:	83 e5       	ldi	r24, 0x53	; 83
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	23 e5       	ldi	r18, 0x53	; 83
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	f9 01       	movw	r30, r18
    18fe:	20 81       	ld	r18, Z
    1900:	24 60       	ori	r18, 0x04	; 4
    1902:	fc 01       	movw	r30, r24
    1904:	20 83       	st	Z, r18
			break;
    1906:	13 c0       	rjmp	.+38     	; 0x192e <TIMER_init+0xbe>
	case 1024:
			TCCR0|=(1<<CS00)|(1<<CS02);
    1908:	83 e5       	ldi	r24, 0x53	; 83
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	23 e5       	ldi	r18, 0x53	; 83
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	f9 01       	movw	r30, r18
    1912:	20 81       	ld	r18, Z
    1914:	25 60       	ori	r18, 0x05	; 5
    1916:	fc 01       	movw	r30, r24
    1918:	20 83       	st	Z, r18
			break;
    191a:	09 c0       	rjmp	.+18     	; 0x192e <TIMER_init+0xbe>
	default:
			TCCR0|=(1<<CS00);
    191c:	83 e5       	ldi	r24, 0x53	; 83
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	23 e5       	ldi	r18, 0x53	; 83
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	f9 01       	movw	r30, r18
    1926:	20 81       	ld	r18, Z
    1928:	21 60       	ori	r18, 0x01	; 1
    192a:	fc 01       	movw	r30, r24
    192c:	20 83       	st	Z, r18

		}

	if(!strcmp(config->mode,"compare"))
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	9a 81       	ldd	r25, Y+2	; 0x02
    1932:	01 96       	adiw	r24, 0x01	; 1
    1934:	6f e4       	ldi	r22, 0x4F	; 79
    1936:	71 e0       	ldi	r23, 0x01	; 1
    1938:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    193c:	89 2b       	or	r24, r25
    193e:	09 f0       	breq	.+2      	; 0x1942 <TIMER_init+0xd2>
    1940:	62 c0       	rjmp	.+196    	; 0x1a06 <TIMER_init+0x196>
	{	TCCR0|=(1<<FOC0)|(1<<WGM01);
    1942:	83 e5       	ldi	r24, 0x53	; 83
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	23 e5       	ldi	r18, 0x53	; 83
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	f9 01       	movw	r30, r18
    194c:	20 81       	ld	r18, Z
    194e:	28 68       	ori	r18, 0x88	; 136
    1950:	fc 01       	movw	r30, r24
    1952:	20 83       	st	Z, r18

		if(!strcmp(config->compareMatchMode,"toggle"))
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	9a 81       	ldd	r25, Y+2	; 0x02
    1958:	47 96       	adiw	r24, 0x17	; 23
    195a:	67 e5       	ldi	r22, 0x57	; 87
    195c:	71 e0       	ldi	r23, 0x01	; 1
    195e:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    1962:	89 2b       	or	r24, r25
    1964:	99 f4       	brne	.+38     	; 0x198c <TIMER_init+0x11c>
		{
		TCCR0|=(1<<COM00);
    1966:	83 e5       	ldi	r24, 0x53	; 83
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	23 e5       	ldi	r18, 0x53	; 83
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	f9 01       	movw	r30, r18
    1970:	20 81       	ld	r18, Z
    1972:	20 61       	ori	r18, 0x10	; 16
    1974:	fc 01       	movw	r30, r24
    1976:	20 83       	st	Z, r18
		SET_BIT(DDRB,3);
    1978:	87 e3       	ldi	r24, 0x37	; 55
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	27 e3       	ldi	r18, 0x37	; 55
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	f9 01       	movw	r30, r18
    1982:	20 81       	ld	r18, Z
    1984:	28 60       	ori	r18, 0x08	; 8
    1986:	fc 01       	movw	r30, r24
    1988:	20 83       	st	Z, r18
    198a:	37 c0       	rjmp	.+110    	; 0x19fa <TIMER_init+0x18a>
		}
		else if(!strcmp(config->compareMatchMode,"clear"))
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	9a 81       	ldd	r25, Y+2	; 0x02
    1990:	47 96       	adiw	r24, 0x17	; 23
    1992:	6e e5       	ldi	r22, 0x5E	; 94
    1994:	71 e0       	ldi	r23, 0x01	; 1
    1996:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    199a:	89 2b       	or	r24, r25
    199c:	99 f4       	brne	.+38     	; 0x19c4 <TIMER_init+0x154>
			{
			TCCR0|=(1<<COM01);
    199e:	83 e5       	ldi	r24, 0x53	; 83
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	23 e5       	ldi	r18, 0x53	; 83
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	f9 01       	movw	r30, r18
    19a8:	20 81       	ld	r18, Z
    19aa:	20 62       	ori	r18, 0x20	; 32
    19ac:	fc 01       	movw	r30, r24
    19ae:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    19b0:	87 e3       	ldi	r24, 0x37	; 55
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	27 e3       	ldi	r18, 0x37	; 55
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	f9 01       	movw	r30, r18
    19ba:	20 81       	ld	r18, Z
    19bc:	28 60       	ori	r18, 0x08	; 8
    19be:	fc 01       	movw	r30, r24
    19c0:	20 83       	st	Z, r18
    19c2:	1b c0       	rjmp	.+54     	; 0x19fa <TIMER_init+0x18a>

			}
		else if(!strcmp(config->compareMatchMode,"set"))
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	9a 81       	ldd	r25, Y+2	; 0x02
    19c8:	47 96       	adiw	r24, 0x17	; 23
    19ca:	64 e6       	ldi	r22, 0x64	; 100
    19cc:	71 e0       	ldi	r23, 0x01	; 1
    19ce:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    19d2:	89 2b       	or	r24, r25
    19d4:	91 f4       	brne	.+36     	; 0x19fa <TIMER_init+0x18a>
			{
			TCCR0|=(1<<COM01)|(1<<COM00);
    19d6:	83 e5       	ldi	r24, 0x53	; 83
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	23 e5       	ldi	r18, 0x53	; 83
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	f9 01       	movw	r30, r18
    19e0:	20 81       	ld	r18, Z
    19e2:	20 63       	ori	r18, 0x30	; 48
    19e4:	fc 01       	movw	r30, r24
    19e6:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    19e8:	87 e3       	ldi	r24, 0x37	; 55
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	27 e3       	ldi	r18, 0x37	; 55
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	f9 01       	movw	r30, r18
    19f2:	20 81       	ld	r18, Z
    19f4:	28 60       	ori	r18, 0x08	; 8
    19f6:	fc 01       	movw	r30, r24
    19f8:	20 83       	st	Z, r18

			}
		//enable interrupt
		TIMSK=(1<<OCIE0);
    19fa:	89 e5       	ldi	r24, 0x59	; 89
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	22 e0       	ldi	r18, 0x02	; 2
    1a00:	fc 01       	movw	r30, r24
    1a02:	20 83       	st	Z, r18
    1a04:	6b c0       	rjmp	.+214    	; 0x1adc <TIMER_init+0x26c>

	}
	else if(!strcmp(config->mode,"normal"))
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0a:	01 96       	adiw	r24, 0x01	; 1
    1a0c:	68 e6       	ldi	r22, 0x68	; 104
    1a0e:	71 e0       	ldi	r23, 0x01	; 1
    1a10:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    1a14:	89 2b       	or	r24, r25
    1a16:	79 f4       	brne	.+30     	; 0x1a36 <TIMER_init+0x1c6>
	{
		TCCR0|=(1<<FOC0);
    1a18:	83 e5       	ldi	r24, 0x53	; 83
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	23 e5       	ldi	r18, 0x53	; 83
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	f9 01       	movw	r30, r18
    1a22:	20 81       	ld	r18, Z
    1a24:	20 68       	ori	r18, 0x80	; 128
    1a26:	fc 01       	movw	r30, r24
    1a28:	20 83       	st	Z, r18
		TIMSK=(1<<TOIE0);
    1a2a:	89 e5       	ldi	r24, 0x59	; 89
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	21 e0       	ldi	r18, 0x01	; 1
    1a30:	fc 01       	movw	r30, r24
    1a32:	20 83       	st	Z, r18
    1a34:	53 c0       	rjmp	.+166    	; 0x1adc <TIMER_init+0x26c>
	}
	else if(!strcmp(config->mode,"pwm"))
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3a:	01 96       	adiw	r24, 0x01	; 1
    1a3c:	6f e6       	ldi	r22, 0x6F	; 111
    1a3e:	71 e0       	ldi	r23, 0x01	; 1
    1a40:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    1a44:	89 2b       	or	r24, r25
    1a46:	09 f0       	breq	.+2      	; 0x1a4a <TIMER_init+0x1da>
    1a48:	49 c0       	rjmp	.+146    	; 0x1adc <TIMER_init+0x26c>
	{
		TCCR0 |=(1<<WGM00)|(1<<WGM01);
    1a4a:	83 e5       	ldi	r24, 0x53	; 83
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	23 e5       	ldi	r18, 0x53	; 83
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	f9 01       	movw	r30, r18
    1a54:	20 81       	ld	r18, Z
    1a56:	28 64       	ori	r18, 0x48	; 72
    1a58:	fc 01       	movw	r30, r24
    1a5a:	20 83       	st	Z, r18
		if(!strcmp(config->pwmMode,"inverting"))
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a60:	8b 96       	adiw	r24, 0x2b	; 43
    1a62:	63 e7       	ldi	r22, 0x73	; 115
    1a64:	71 e0       	ldi	r23, 0x01	; 1
    1a66:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    1a6a:	89 2b       	or	r24, r25
    1a6c:	e1 f4       	brne	.+56     	; 0x1aa6 <TIMER_init+0x236>
				{
				TCCR0|=(1<<COM00);
    1a6e:	83 e5       	ldi	r24, 0x53	; 83
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	23 e5       	ldi	r18, 0x53	; 83
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	f9 01       	movw	r30, r18
    1a78:	20 81       	ld	r18, Z
    1a7a:	20 61       	ori	r18, 0x10	; 16
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	20 83       	st	Z, r18
				TCCR0|=(1<<COM01);
    1a80:	83 e5       	ldi	r24, 0x53	; 83
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	23 e5       	ldi	r18, 0x53	; 83
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	f9 01       	movw	r30, r18
    1a8a:	20 81       	ld	r18, Z
    1a8c:	20 62       	ori	r18, 0x20	; 32
    1a8e:	fc 01       	movw	r30, r24
    1a90:	20 83       	st	Z, r18
				SET_BIT(DDRB,3);
    1a92:	87 e3       	ldi	r24, 0x37	; 55
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	27 e3       	ldi	r18, 0x37	; 55
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	f9 01       	movw	r30, r18
    1a9c:	20 81       	ld	r18, Z
    1a9e:	28 60       	ori	r18, 0x08	; 8
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	20 83       	st	Z, r18
    1aa4:	1b c0       	rjmp	.+54     	; 0x1adc <TIMER_init+0x26c>
				}
				else if(!strcmp(config->pwmMode,"non-inverting"))
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	8b 96       	adiw	r24, 0x2b	; 43
    1aac:	6d e7       	ldi	r22, 0x7D	; 125
    1aae:	71 e0       	ldi	r23, 0x01	; 1
    1ab0:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    1ab4:	89 2b       	or	r24, r25
    1ab6:	91 f4       	brne	.+36     	; 0x1adc <TIMER_init+0x26c>
					{
					TCCR0|=(1<<COM01);
    1ab8:	83 e5       	ldi	r24, 0x53	; 83
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	23 e5       	ldi	r18, 0x53	; 83
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	f9 01       	movw	r30, r18
    1ac2:	20 81       	ld	r18, Z
    1ac4:	20 62       	ori	r18, 0x20	; 32
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    1aca:	87 e3       	ldi	r24, 0x37	; 55
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	27 e3       	ldi	r18, 0x37	; 55
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	f9 01       	movw	r30, r18
    1ad4:	20 81       	ld	r18, Z
    1ad6:	28 60       	ori	r18, 0x08	; 8
    1ad8:	fc 01       	movw	r30, r24
    1ada:	20 83       	st	Z, r18

	}

	}
	///
	if(config->timerNumber==1)
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	80 81       	ld	r24, Z
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <TIMER_init+0x27a>
    1ae8:	30 c1       	rjmp	.+608    	; 0x1d4a <TIMER_init+0x4da>
		{
			TCCR1A=0;
    1aea:	8f e4       	ldi	r24, 0x4F	; 79
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	fc 01       	movw	r30, r24
    1af0:	10 82       	st	Z, r1
			TCCR1B=0;
    1af2:	8e e4       	ldi	r24, 0x4E	; 78
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	fc 01       	movw	r30, r24
    1af8:	10 82       	st	Z, r1

		switch(config->prescaler)
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	9a 81       	ldd	r25, Y+2	; 0x02
    1afe:	fc 01       	movw	r30, r24
    1b00:	85 89       	ldd	r24, Z+21	; 0x15
    1b02:	96 89       	ldd	r25, Z+22	; 0x16
    1b04:	80 34       	cpi	r24, 0x40	; 64
    1b06:	91 05       	cpc	r25, r1
    1b08:	c1 f0       	breq	.+48     	; 0x1b3a <TIMER_init+0x2ca>
    1b0a:	81 34       	cpi	r24, 0x41	; 65
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	18 f4       	brcc	.+6      	; 0x1b16 <TIMER_init+0x2a6>
    1b10:	08 97       	sbiw	r24, 0x08	; 8
    1b12:	49 f0       	breq	.+18     	; 0x1b26 <TIMER_init+0x2b6>
    1b14:	30 c0       	rjmp	.+96     	; 0x1b76 <TIMER_init+0x306>
    1b16:	81 15       	cp	r24, r1
    1b18:	f1 e0       	ldi	r31, 0x01	; 1
    1b1a:	9f 07       	cpc	r25, r31
    1b1c:	c1 f0       	breq	.+48     	; 0x1b4e <TIMER_init+0x2de>
    1b1e:	81 15       	cp	r24, r1
    1b20:	94 40       	sbci	r25, 0x04	; 4
    1b22:	f9 f0       	breq	.+62     	; 0x1b62 <TIMER_init+0x2f2>
    1b24:	28 c0       	rjmp	.+80     	; 0x1b76 <TIMER_init+0x306>
		{
		case 8:
			TCCR1B|=(1<<CS11);
    1b26:	8e e4       	ldi	r24, 0x4E	; 78
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	2e e4       	ldi	r18, 0x4E	; 78
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	f9 01       	movw	r30, r18
    1b30:	20 81       	ld	r18, Z
    1b32:	22 60       	ori	r18, 0x02	; 2
    1b34:	fc 01       	movw	r30, r24
    1b36:	20 83       	st	Z, r18
			break;
    1b38:	27 c0       	rjmp	.+78     	; 0x1b88 <TIMER_init+0x318>
		case 64:
				TCCR1B|=(1<<CS10)|(1<<CS11);
    1b3a:	8e e4       	ldi	r24, 0x4E	; 78
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	2e e4       	ldi	r18, 0x4E	; 78
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	f9 01       	movw	r30, r18
    1b44:	20 81       	ld	r18, Z
    1b46:	23 60       	ori	r18, 0x03	; 3
    1b48:	fc 01       	movw	r30, r24
    1b4a:	20 83       	st	Z, r18
				break;
    1b4c:	1d c0       	rjmp	.+58     	; 0x1b88 <TIMER_init+0x318>
		case 256:
				TCCR1B|=(1<<CS12);
    1b4e:	8e e4       	ldi	r24, 0x4E	; 78
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	2e e4       	ldi	r18, 0x4E	; 78
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	f9 01       	movw	r30, r18
    1b58:	20 81       	ld	r18, Z
    1b5a:	24 60       	ori	r18, 0x04	; 4
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	20 83       	st	Z, r18
				break;
    1b60:	13 c0       	rjmp	.+38     	; 0x1b88 <TIMER_init+0x318>
		case 1024:
				TCCR1B|=(1<<CS10)|(1<<CS12);
    1b62:	8e e4       	ldi	r24, 0x4E	; 78
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	2e e4       	ldi	r18, 0x4E	; 78
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	f9 01       	movw	r30, r18
    1b6c:	20 81       	ld	r18, Z
    1b6e:	25 60       	ori	r18, 0x05	; 5
    1b70:	fc 01       	movw	r30, r24
    1b72:	20 83       	st	Z, r18
				break;
    1b74:	09 c0       	rjmp	.+18     	; 0x1b88 <TIMER_init+0x318>
		default:
				TCCR1B|=(1<<CS10);
    1b76:	8e e4       	ldi	r24, 0x4E	; 78
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	2e e4       	ldi	r18, 0x4E	; 78
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	f9 01       	movw	r30, r18
    1b80:	20 81       	ld	r18, Z
    1b82:	21 60       	ori	r18, 0x01	; 1
    1b84:	fc 01       	movw	r30, r24
    1b86:	20 83       	st	Z, r18

			}
//FOR A
		if(!strcmp(config->mode,"compare"))
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8c:	01 96       	adiw	r24, 0x01	; 1
    1b8e:	6f e4       	ldi	r22, 0x4F	; 79
    1b90:	71 e0       	ldi	r23, 0x01	; 1
    1b92:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    1b96:	89 2b       	or	r24, r25
    1b98:	09 f0       	breq	.+2      	; 0x1b9c <TIMER_init+0x32c>
    1b9a:	6b c0       	rjmp	.+214    	; 0x1c72 <TIMER_init+0x402>
		{	TCCR1A|=(1<<FOC1A);
    1b9c:	8f e4       	ldi	r24, 0x4F	; 79
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	2f e4       	ldi	r18, 0x4F	; 79
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	f9 01       	movw	r30, r18
    1ba6:	20 81       	ld	r18, Z
    1ba8:	28 60       	ori	r18, 0x08	; 8
    1baa:	fc 01       	movw	r30, r24
    1bac:	20 83       	st	Z, r18
			TCCR1B|=(1<<WGM12);
    1bae:	8e e4       	ldi	r24, 0x4E	; 78
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	2e e4       	ldi	r18, 0x4E	; 78
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	f9 01       	movw	r30, r18
    1bb8:	20 81       	ld	r18, Z
    1bba:	28 60       	ori	r18, 0x08	; 8
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	20 83       	st	Z, r18
			if(!strcmp(config->compareMatchMode,"toggle"))
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc4:	47 96       	adiw	r24, 0x17	; 23
    1bc6:	67 e5       	ldi	r22, 0x57	; 87
    1bc8:	71 e0       	ldi	r23, 0x01	; 1
    1bca:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    1bce:	89 2b       	or	r24, r25
    1bd0:	99 f4       	brne	.+38     	; 0x1bf8 <TIMER_init+0x388>
			{
			TCCR1A|=(1<<COM1A0);
    1bd2:	8f e4       	ldi	r24, 0x4F	; 79
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	2f e4       	ldi	r18, 0x4F	; 79
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	f9 01       	movw	r30, r18
    1bdc:	20 81       	ld	r18, Z
    1bde:	20 64       	ori	r18, 0x40	; 64
    1be0:	fc 01       	movw	r30, r24
    1be2:	20 83       	st	Z, r18
			SET_BIT(DDRD,5);
    1be4:	81 e3       	ldi	r24, 0x31	; 49
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	21 e3       	ldi	r18, 0x31	; 49
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	f9 01       	movw	r30, r18
    1bee:	20 81       	ld	r18, Z
    1bf0:	20 62       	ori	r18, 0x20	; 32
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	20 83       	st	Z, r18
    1bf6:	37 c0       	rjmp	.+110    	; 0x1c66 <TIMER_init+0x3f6>
			}
			else if(!strcmp(config->compareMatchMode,"clear"))
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfc:	47 96       	adiw	r24, 0x17	; 23
    1bfe:	6e e5       	ldi	r22, 0x5E	; 94
    1c00:	71 e0       	ldi	r23, 0x01	; 1
    1c02:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    1c06:	89 2b       	or	r24, r25
    1c08:	99 f4       	brne	.+38     	; 0x1c30 <TIMER_init+0x3c0>
				{
				TCCR1A|=(1<<COM1A1);
    1c0a:	8f e4       	ldi	r24, 0x4F	; 79
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	2f e4       	ldi	r18, 0x4F	; 79
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	f9 01       	movw	r30, r18
    1c14:	20 81       	ld	r18, Z
    1c16:	20 68       	ori	r18, 0x80	; 128
    1c18:	fc 01       	movw	r30, r24
    1c1a:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    1c1c:	81 e3       	ldi	r24, 0x31	; 49
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	21 e3       	ldi	r18, 0x31	; 49
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	f9 01       	movw	r30, r18
    1c26:	20 81       	ld	r18, Z
    1c28:	20 62       	ori	r18, 0x20	; 32
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	20 83       	st	Z, r18
    1c2e:	1b c0       	rjmp	.+54     	; 0x1c66 <TIMER_init+0x3f6>

				}
			else if(!strcmp(config->compareMatchMode,"set"))
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	9a 81       	ldd	r25, Y+2	; 0x02
    1c34:	47 96       	adiw	r24, 0x17	; 23
    1c36:	64 e6       	ldi	r22, 0x64	; 100
    1c38:	71 e0       	ldi	r23, 0x01	; 1
    1c3a:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    1c3e:	89 2b       	or	r24, r25
    1c40:	91 f4       	brne	.+36     	; 0x1c66 <TIMER_init+0x3f6>
				{
				TCCR1A|=(1<<COM1A1)|(1<<COM1A0);
    1c42:	8f e4       	ldi	r24, 0x4F	; 79
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	2f e4       	ldi	r18, 0x4F	; 79
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	f9 01       	movw	r30, r18
    1c4c:	20 81       	ld	r18, Z
    1c4e:	20 6c       	ori	r18, 0xC0	; 192
    1c50:	fc 01       	movw	r30, r24
    1c52:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    1c54:	81 e3       	ldi	r24, 0x31	; 49
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	21 e3       	ldi	r18, 0x31	; 49
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	f9 01       	movw	r30, r18
    1c5e:	20 81       	ld	r18, Z
    1c60:	20 62       	ori	r18, 0x20	; 32
    1c62:	fc 01       	movw	r30, r24
    1c64:	20 83       	st	Z, r18

				}
			//enable interrupt
			TIMSK=(1<<OCIE1A);
    1c66:	89 e5       	ldi	r24, 0x59	; 89
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	20 e1       	ldi	r18, 0x10	; 16
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	20 83       	st	Z, r18
    1c70:	6b c0       	rjmp	.+214    	; 0x1d48 <TIMER_init+0x4d8>

		}
		else if(!strcmp(config->mode,"normal"))
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	9a 81       	ldd	r25, Y+2	; 0x02
    1c76:	01 96       	adiw	r24, 0x01	; 1
    1c78:	68 e6       	ldi	r22, 0x68	; 104
    1c7a:	71 e0       	ldi	r23, 0x01	; 1
    1c7c:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    1c80:	89 2b       	or	r24, r25
    1c82:	79 f4       	brne	.+30     	; 0x1ca2 <TIMER_init+0x432>
		{
			TCCR0|=(1<<FOC0);
    1c84:	83 e5       	ldi	r24, 0x53	; 83
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	23 e5       	ldi	r18, 0x53	; 83
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	f9 01       	movw	r30, r18
    1c8e:	20 81       	ld	r18, Z
    1c90:	20 68       	ori	r18, 0x80	; 128
    1c92:	fc 01       	movw	r30, r24
    1c94:	20 83       	st	Z, r18
			TIMSK=(1<<TOIE0);
    1c96:	89 e5       	ldi	r24, 0x59	; 89
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	21 e0       	ldi	r18, 0x01	; 1
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	20 83       	st	Z, r18
    1ca0:	53 c0       	rjmp	.+166    	; 0x1d48 <TIMER_init+0x4d8>
		}
		else if(!strcmp(config->mode,"pwm"))
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca6:	01 96       	adiw	r24, 0x01	; 1
    1ca8:	6f e6       	ldi	r22, 0x6F	; 111
    1caa:	71 e0       	ldi	r23, 0x01	; 1
    1cac:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    1cb0:	89 2b       	or	r24, r25
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <TIMER_init+0x446>
    1cb4:	49 c0       	rjmp	.+146    	; 0x1d48 <TIMER_init+0x4d8>
		{
			TCCR0 |=(1<<WGM00)|(1<<WGM01);
    1cb6:	83 e5       	ldi	r24, 0x53	; 83
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	23 e5       	ldi	r18, 0x53	; 83
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	f9 01       	movw	r30, r18
    1cc0:	20 81       	ld	r18, Z
    1cc2:	28 64       	ori	r18, 0x48	; 72
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	20 83       	st	Z, r18
			if(!strcmp(config->pwmMode,"inverting"))
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	8b 96       	adiw	r24, 0x2b	; 43
    1cce:	63 e7       	ldi	r22, 0x73	; 115
    1cd0:	71 e0       	ldi	r23, 0x01	; 1
    1cd2:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    1cd6:	89 2b       	or	r24, r25
    1cd8:	e1 f4       	brne	.+56     	; 0x1d12 <TIMER_init+0x4a2>
					{
					TCCR0|=(1<<COM00);
    1cda:	83 e5       	ldi	r24, 0x53	; 83
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	23 e5       	ldi	r18, 0x53	; 83
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	f9 01       	movw	r30, r18
    1ce4:	20 81       	ld	r18, Z
    1ce6:	20 61       	ori	r18, 0x10	; 16
    1ce8:	fc 01       	movw	r30, r24
    1cea:	20 83       	st	Z, r18
					TCCR0|=(1<<COM01);
    1cec:	83 e5       	ldi	r24, 0x53	; 83
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	23 e5       	ldi	r18, 0x53	; 83
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	f9 01       	movw	r30, r18
    1cf6:	20 81       	ld	r18, Z
    1cf8:	20 62       	ori	r18, 0x20	; 32
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    1cfe:	87 e3       	ldi	r24, 0x37	; 55
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	27 e3       	ldi	r18, 0x37	; 55
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	f9 01       	movw	r30, r18
    1d08:	20 81       	ld	r18, Z
    1d0a:	28 60       	ori	r18, 0x08	; 8
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	20 83       	st	Z, r18
    1d10:	1b c0       	rjmp	.+54     	; 0x1d48 <TIMER_init+0x4d8>
					}
					else if(!strcmp(config->pwmMode,"non-inverting"))
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	9a 81       	ldd	r25, Y+2	; 0x02
    1d16:	8b 96       	adiw	r24, 0x2b	; 43
    1d18:	6d e7       	ldi	r22, 0x7D	; 125
    1d1a:	71 e0       	ldi	r23, 0x01	; 1
    1d1c:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    1d20:	89 2b       	or	r24, r25
    1d22:	91 f4       	brne	.+36     	; 0x1d48 <TIMER_init+0x4d8>
						{
						TCCR0|=(1<<COM01);
    1d24:	83 e5       	ldi	r24, 0x53	; 83
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	23 e5       	ldi	r18, 0x53	; 83
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	f9 01       	movw	r30, r18
    1d2e:	20 81       	ld	r18, Z
    1d30:	20 62       	ori	r18, 0x20	; 32
    1d32:	fc 01       	movw	r30, r24
    1d34:	20 83       	st	Z, r18
						SET_BIT(DDRB,3);
    1d36:	87 e3       	ldi	r24, 0x37	; 55
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	27 e3       	ldi	r18, 0x37	; 55
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	f9 01       	movw	r30, r18
    1d40:	20 81       	ld	r18, Z
    1d42:	28 60       	ori	r18, 0x08	; 8
    1d44:	fc 01       	movw	r30, r24
    1d46:	20 83       	st	Z, r18
	//TCCR0=(1<<FOC0)|(1<<COM00)|(1<<CS00)|(1<<CS02);


	//enable

	sei();
    1d48:	78 94       	sei
}
}
    1d4a:	00 00       	nop
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	08 95       	ret

00001d56 <TIMER_setCompare>:

void TIMER_setCompare(uint16 compareValue)
{
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <TIMER_setCompare+0x6>
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	9a 83       	std	Y+2, r25	; 0x02
    1d62:	89 83       	std	Y+1, r24	; 0x01
	switch (configPtr->timerNumber)
    1d64:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <configPtr>
    1d68:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <configPtr+0x1>
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	80 81       	ld	r24, Z
    1d70:	88 2f       	mov	r24, r24
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	19 f0       	breq	.+6      	; 0x1d7e <TIMER_setCompare+0x28>
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	59 f0       	breq	.+22     	; 0x1d92 <TIMER_setCompare+0x3c>
	case 1:
		TCNT1=0;
		OCR1A=compareValue;
		break;
	}
}
    1d7c:	17 c0       	rjmp	.+46     	; 0x1dac <TIMER_setCompare+0x56>
void TIMER_setCompare(uint16 compareValue)
{
	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=0;
    1d7e:	82 e5       	ldi	r24, 0x52	; 82
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	fc 01       	movw	r30, r24
    1d84:	10 82       	st	Z, r1
		OCR0=compareValue;
    1d86:	8c e5       	ldi	r24, 0x5C	; 92
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	29 81       	ldd	r18, Y+1	; 0x01
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	20 83       	st	Z, r18
		break;
    1d90:	0d c0       	rjmp	.+26     	; 0x1dac <TIMER_setCompare+0x56>
	case 1:
		TCNT1=0;
    1d92:	8c e4       	ldi	r24, 0x4C	; 76
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	fc 01       	movw	r30, r24
    1d98:	11 82       	std	Z+1, r1	; 0x01
    1d9a:	10 82       	st	Z, r1
		OCR1A=compareValue;
    1d9c:	8a e4       	ldi	r24, 0x4A	; 74
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	29 81       	ldd	r18, Y+1	; 0x01
    1da2:	3a 81       	ldd	r19, Y+2	; 0x02
    1da4:	fc 01       	movw	r30, r24
    1da6:	31 83       	std	Z+1, r19	; 0x01
    1da8:	20 83       	st	Z, r18
		break;
    1daa:	00 00       	nop
	}
}
    1dac:	00 00       	nop
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	08 95       	ret

00001db8 <TIMER_setNormal>:
void TIMER_setNormal(uint8 initValue)

{
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	1f 92       	push	r1
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	89 83       	std	Y+1, r24	; 0x01

	switch (configPtr->timerNumber)
    1dc4:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <configPtr>
    1dc8:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <configPtr+0x1>
    1dcc:	fc 01       	movw	r30, r24
    1dce:	80 81       	ld	r24, Z
    1dd0:	88 2f       	mov	r24, r24
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	00 97       	sbiw	r24, 0x00	; 0
    1dd6:	19 f0       	breq	.+6      	; 0x1dde <TIMER_setNormal+0x26>
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	39 f0       	breq	.+14     	; 0x1dea <TIMER_setNormal+0x32>
		TCNT1=initValue;
		break;


}
}
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <TIMER_setNormal+0x44>
{

	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=initValue;
    1dde:	82 e5       	ldi	r24, 0x52	; 82
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	29 81       	ldd	r18, Y+1	; 0x01
    1de4:	fc 01       	movw	r30, r24
    1de6:	20 83       	st	Z, r18
		break;
    1de8:	09 c0       	rjmp	.+18     	; 0x1dfc <TIMER_setNormal+0x44>
	case 1:
		TCNT1=initValue;
    1dea:	8c e4       	ldi	r24, 0x4C	; 76
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	29 81       	ldd	r18, Y+1	; 0x01
    1df0:	22 2f       	mov	r18, r18
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	fc 01       	movw	r30, r24
    1df6:	31 83       	std	Z+1, r19	; 0x01
    1df8:	20 83       	st	Z, r18
		break;
    1dfa:	00 00       	nop


}
}
    1dfc:	00 00       	nop
    1dfe:	0f 90       	pop	r0
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	08 95       	ret

00001e06 <TIMER_setpwm>:
void TIMER_setpwm(uint8 dutyCycle)
{
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	1f 92       	push	r1
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
    1e12:	82 e5       	ldi	r24, 0x52	; 82
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	fc 01       	movw	r30, r24
    1e18:	10 82       	st	Z, r1
	OCR0=dutyCycle;
    1e1a:	8c e5       	ldi	r24, 0x5C	; 92
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	29 81       	ldd	r18, Y+1	; 0x01
    1e20:	fc 01       	movw	r30, r24
    1e22:	20 83       	st	Z, r18
}
    1e24:	00 00       	nop
    1e26:	0f 90       	pop	r0
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	08 95       	ret

00001e2e <TIMER_setCallBackPtr>:
void TIMER_setCallBackPtr(void(*a_ptr)(void))
{
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <TIMER_setCallBackPtr+0x6>
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	9a 83       	std	Y+2, r25	; 0x02
    1e3a:	89 83       	std	Y+1, r24	; 0x01
g_callBackPtr=a_ptr;
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e40:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <g_callBackPtr+0x1>
    1e44:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <g_callBackPtr>
}
    1e48:	00 00       	nop
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	08 95       	ret

00001e54 <TIMER_stop>:
void TIMER_stop()
{
    1e54:	cf 93       	push	r28
    1e56:	df 93       	push	r29
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
	switch (configPtr->timerNumber)
    1e5c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <configPtr>
    1e60:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <configPtr+0x1>
    1e64:	fc 01       	movw	r30, r24
    1e66:	80 81       	ld	r24, Z
    1e68:	88 2f       	mov	r24, r24
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	89 2b       	or	r24, r25
    1e6e:	51 f4       	brne	.+20     	; 0x1e84 <TIMER_stop+0x30>

{
case 0:
	TCCR0&=~(1<<CS00)&~(1<<CS01)&~(1<<CS02);
    1e70:	83 e5       	ldi	r24, 0x53	; 83
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	23 e5       	ldi	r18, 0x53	; 83
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	f9 01       	movw	r30, r18
    1e7a:	20 81       	ld	r18, Z
    1e7c:	28 7f       	andi	r18, 0xF8	; 248
    1e7e:	fc 01       	movw	r30, r24
    1e80:	20 83       	st	Z, r18
	break;
    1e82:	01 c0       	rjmp	.+2      	; 0x1e86 <TIMER_stop+0x32>
case 1:
	break;
    1e84:	00 00       	nop

}
}
    1e86:	00 00       	nop
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	08 95       	ret

00001e8e <UART_init>:
 */

/* configurate by passing UART  configuration structure */

void UART_init(UART_configurationType * config)
{/* put zeros into all bits in the registers */
    1e8e:	0f 93       	push	r16
    1e90:	1f 93       	push	r17
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	00 d0       	rcall	.+0      	; 0x1e98 <UART_init+0xa>
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	9a 83       	std	Y+2, r25	; 0x02
    1e9e:	89 83       	std	Y+1, r24	; 0x01
UCSRA=0;
    1ea0:	8b e2       	ldi	r24, 0x2B	; 43
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	10 82       	st	Z, r1
UCSRB=0;
    1ea8:	8a e2       	ldi	r24, 0x2A	; 42
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	fc 01       	movw	r30, r24
    1eae:	10 82       	st	Z, r1
UCSRC=0;
    1eb0:	80 e4       	ldi	r24, 0x40	; 64
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	10 82       	st	Z, r1
/* enables */
	if(!strcmp(config->mode,"normal"))
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebc:	05 96       	adiw	r24, 0x05	; 5
    1ebe:	6b e8       	ldi	r22, 0x8B	; 139
    1ec0:	71 e0       	ldi	r23, 0x01	; 1
    1ec2:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    1ec6:	89 2b       	or	r24, r25
    1ec8:	09 f0       	breq	.+2      	; 0x1ecc <UART_init+0x3e>
    1eca:	60 c0       	rjmp	.+192    	; 0x1f8c <UART_init+0xfe>
	{
CLEAR_BIT(UCSRA,U2X); /* disable double speed bit */
    1ecc:	8b e2       	ldi	r24, 0x2B	; 43
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	2b e2       	ldi	r18, 0x2B	; 43
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	f9 01       	movw	r30, r18
    1ed6:	20 81       	ld	r18, Z
    1ed8:	2d 7f       	andi	r18, 0xFD	; 253
    1eda:	fc 01       	movw	r30, r24
    1edc:	20 83       	st	Z, r18
/* store buad rate in register UBRR(16bits) ---> left register 8 bits and right 8bits */
UBRRL=((F_CPU /(16*config->buadRate))-1);
    1ede:	09 e2       	ldi	r16, 0x29	; 41
    1ee0:	10 e0       	ldi	r17, 0x00	; 0
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	81 81       	ldd	r24, Z+1	; 0x01
    1eea:	92 81       	ldd	r25, Z+2	; 0x02
    1eec:	a3 81       	ldd	r26, Z+3	; 0x03
    1eee:	b4 81       	ldd	r27, Z+4	; 0x04
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	aa 1f       	adc	r26, r26
    1ef6:	bb 1f       	adc	r27, r27
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	aa 1f       	adc	r26, r26
    1efe:	bb 1f       	adc	r27, r27
    1f00:	88 0f       	add	r24, r24
    1f02:	99 1f       	adc	r25, r25
    1f04:	aa 1f       	adc	r26, r26
    1f06:	bb 1f       	adc	r27, r27
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	aa 1f       	adc	r26, r26
    1f0e:	bb 1f       	adc	r27, r27
    1f10:	9c 01       	movw	r18, r24
    1f12:	ad 01       	movw	r20, r26
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	92 e1       	ldi	r25, 0x12	; 18
    1f18:	aa e7       	ldi	r26, 0x7A	; 122
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	bc 01       	movw	r22, r24
    1f1e:	cd 01       	movw	r24, r26
    1f20:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__udivmodsi4>
    1f24:	da 01       	movw	r26, r20
    1f26:	c9 01       	movw	r24, r18
    1f28:	81 50       	subi	r24, 0x01	; 1
    1f2a:	f8 01       	movw	r30, r16
    1f2c:	80 83       	st	Z, r24
UBRRH=((F_CPU /(16*config->buadRate))-1)>>8;
    1f2e:	00 e4       	ldi	r16, 0x40	; 64
    1f30:	10 e0       	ldi	r17, 0x00	; 0
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	9a 81       	ldd	r25, Y+2	; 0x02
    1f36:	fc 01       	movw	r30, r24
    1f38:	81 81       	ldd	r24, Z+1	; 0x01
    1f3a:	92 81       	ldd	r25, Z+2	; 0x02
    1f3c:	a3 81       	ldd	r26, Z+3	; 0x03
    1f3e:	b4 81       	ldd	r27, Z+4	; 0x04
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	aa 1f       	adc	r26, r26
    1f46:	bb 1f       	adc	r27, r27
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	aa 1f       	adc	r26, r26
    1f4e:	bb 1f       	adc	r27, r27
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	aa 1f       	adc	r26, r26
    1f56:	bb 1f       	adc	r27, r27
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	aa 1f       	adc	r26, r26
    1f5e:	bb 1f       	adc	r27, r27
    1f60:	9c 01       	movw	r18, r24
    1f62:	ad 01       	movw	r20, r26
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	92 e1       	ldi	r25, 0x12	; 18
    1f68:	aa e7       	ldi	r26, 0x7A	; 122
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__udivmodsi4>
    1f74:	da 01       	movw	r26, r20
    1f76:	c9 01       	movw	r24, r18
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	a1 09       	sbc	r26, r1
    1f7c:	b1 09       	sbc	r27, r1
    1f7e:	89 2f       	mov	r24, r25
    1f80:	9a 2f       	mov	r25, r26
    1f82:	ab 2f       	mov	r26, r27
    1f84:	bb 27       	eor	r27, r27
    1f86:	f8 01       	movw	r30, r16
    1f88:	80 83       	st	Z, r24
    1f8a:	61 c0       	rjmp	.+194    	; 0x204e <UART_init+0x1c0>


	}
	else if(!strcmp(config->mode,"double speed"))
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f90:	05 96       	adiw	r24, 0x05	; 5
    1f92:	62 e9       	ldi	r22, 0x92	; 146
    1f94:	71 e0       	ldi	r23, 0x01	; 1
    1f96:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    1f9a:	89 2b       	or	r24, r25
    1f9c:	09 f0       	breq	.+2      	; 0x1fa0 <UART_init+0x112>
    1f9e:	57 c0       	rjmp	.+174    	; 0x204e <UART_init+0x1c0>
	{
		SET_BIT(UCSRA,U2X);/* enable double speed bit */
    1fa0:	8b e2       	ldi	r24, 0x2B	; 43
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	2b e2       	ldi	r18, 0x2B	; 43
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	f9 01       	movw	r30, r18
    1faa:	20 81       	ld	r18, Z
    1fac:	22 60       	ori	r18, 0x02	; 2
    1fae:	fc 01       	movw	r30, r24
    1fb0:	20 83       	st	Z, r18
		/* store buad rate in register UBRR(16bits) ---> left register 8 bits and right 8bits */
		UBRRL=((F_CPU /(8*config->buadRate))-1);
    1fb2:	09 e2       	ldi	r16, 0x29	; 41
    1fb4:	10 e0       	ldi	r17, 0x00	; 0
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fba:	fc 01       	movw	r30, r24
    1fbc:	81 81       	ldd	r24, Z+1	; 0x01
    1fbe:	92 81       	ldd	r25, Z+2	; 0x02
    1fc0:	a3 81       	ldd	r26, Z+3	; 0x03
    1fc2:	b4 81       	ldd	r27, Z+4	; 0x04
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	aa 1f       	adc	r26, r26
    1fca:	bb 1f       	adc	r27, r27
    1fcc:	88 0f       	add	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	aa 1f       	adc	r26, r26
    1fd2:	bb 1f       	adc	r27, r27
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	aa 1f       	adc	r26, r26
    1fda:	bb 1f       	adc	r27, r27
    1fdc:	9c 01       	movw	r18, r24
    1fde:	ad 01       	movw	r20, r26
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	92 e1       	ldi	r25, 0x12	; 18
    1fe4:	aa e7       	ldi	r26, 0x7A	; 122
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__udivmodsi4>
    1ff0:	da 01       	movw	r26, r20
    1ff2:	c9 01       	movw	r24, r18
    1ff4:	81 50       	subi	r24, 0x01	; 1
    1ff6:	f8 01       	movw	r30, r16
    1ff8:	80 83       	st	Z, r24
		UBRRH=((F_CPU /(8*config->buadRate))-1)>>8;
    1ffa:	00 e4       	ldi	r16, 0x40	; 64
    1ffc:	10 e0       	ldi	r17, 0x00	; 0
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	fc 01       	movw	r30, r24
    2004:	81 81       	ldd	r24, Z+1	; 0x01
    2006:	92 81       	ldd	r25, Z+2	; 0x02
    2008:	a3 81       	ldd	r26, Z+3	; 0x03
    200a:	b4 81       	ldd	r27, Z+4	; 0x04
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	aa 1f       	adc	r26, r26
    2012:	bb 1f       	adc	r27, r27
    2014:	88 0f       	add	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	aa 1f       	adc	r26, r26
    201a:	bb 1f       	adc	r27, r27
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	aa 1f       	adc	r26, r26
    2022:	bb 1f       	adc	r27, r27
    2024:	9c 01       	movw	r18, r24
    2026:	ad 01       	movw	r20, r26
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	92 e1       	ldi	r25, 0x12	; 18
    202c:	aa e7       	ldi	r26, 0x7A	; 122
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__udivmodsi4>
    2038:	da 01       	movw	r26, r20
    203a:	c9 01       	movw	r24, r18
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	a1 09       	sbc	r26, r1
    2040:	b1 09       	sbc	r27, r1
    2042:	89 2f       	mov	r24, r25
    2044:	9a 2f       	mov	r25, r26
    2046:	ab 2f       	mov	r26, r27
    2048:	bb 27       	eor	r27, r27
    204a:	f8 01       	movw	r30, r16
    204c:	80 83       	st	Z, r24

	}


/* TO enable writing on Register UCSRC (used for define the frame )as it has the same address with UBRR register */
SET_BIT(UCSRC,URSEL);
    204e:	80 e4       	ldi	r24, 0x40	; 64
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	20 e4       	ldi	r18, 0x40	; 64
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	f9 01       	movw	r30, r18
    2058:	20 81       	ld	r18, Z
    205a:	20 68       	ori	r18, 0x80	; 128
    205c:	fc 01       	movw	r30, r24
    205e:	20 83       	st	Z, r18
/* the UART frame parameters*/
/* character size */

switch(config->character_size)
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	9a 81       	ldd	r25, Y+2	; 0x02
    2064:	fc 01       	movw	r30, r24
    2066:	80 81       	ld	r24, Z
    2068:	88 2f       	mov	r24, r24
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	86 30       	cpi	r24, 0x06	; 6
    206e:	91 05       	cpc	r25, r1
    2070:	f9 f0       	breq	.+62     	; 0x20b0 <UART_init+0x222>
    2072:	87 30       	cpi	r24, 0x07	; 7
    2074:	91 05       	cpc	r25, r1
    2076:	1c f4       	brge	.+6      	; 0x207e <UART_init+0x1f0>
    2078:	05 97       	sbiw	r24, 0x05	; 5
    207a:	39 f0       	breq	.+14     	; 0x208a <UART_init+0x1fc>
    207c:	5b c0       	rjmp	.+182    	; 0x2134 <UART_init+0x2a6>
    207e:	87 30       	cpi	r24, 0x07	; 7
    2080:	91 05       	cpc	r25, r1
    2082:	49 f1       	breq	.+82     	; 0x20d6 <UART_init+0x248>
    2084:	09 97       	sbiw	r24, 0x09	; 9
    2086:	d1 f1       	breq	.+116    	; 0x20fc <UART_init+0x26e>
    2088:	55 c0       	rjmp	.+170    	; 0x2134 <UART_init+0x2a6>
{
case 5:
	/* UCSZ0 =0, UCSZ1=0,UCSZ2=0 */
	CLEAR_BIT(UCSRC,UCSZ0);
    208a:	80 e4       	ldi	r24, 0x40	; 64
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	20 e4       	ldi	r18, 0x40	; 64
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	f9 01       	movw	r30, r18
    2094:	20 81       	ld	r18, Z
    2096:	2d 7f       	andi	r18, 0xFD	; 253
    2098:	fc 01       	movw	r30, r24
    209a:	20 83       	st	Z, r18
	CLEAR_BIT(UCSRC,UCSZ1);
    209c:	80 e4       	ldi	r24, 0x40	; 64
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	20 e4       	ldi	r18, 0x40	; 64
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	f9 01       	movw	r30, r18
    20a6:	20 81       	ld	r18, Z
    20a8:	2b 7f       	andi	r18, 0xFB	; 251
    20aa:	fc 01       	movw	r30, r24
    20ac:	20 83       	st	Z, r18
	break;
    20ae:	54 c0       	rjmp	.+168    	; 0x2158 <UART_init+0x2ca>

case 6:
	/* UCSZ0 =0, UCSZ1=1,UCSZ2=0 */
	CLEAR_BIT(UCSRC,UCSZ0);
    20b0:	80 e4       	ldi	r24, 0x40	; 64
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	20 e4       	ldi	r18, 0x40	; 64
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	f9 01       	movw	r30, r18
    20ba:	20 81       	ld	r18, Z
    20bc:	2d 7f       	andi	r18, 0xFD	; 253
    20be:	fc 01       	movw	r30, r24
    20c0:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    20c2:	80 e4       	ldi	r24, 0x40	; 64
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	20 e4       	ldi	r18, 0x40	; 64
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	f9 01       	movw	r30, r18
    20cc:	20 81       	ld	r18, Z
    20ce:	24 60       	ori	r18, 0x04	; 4
    20d0:	fc 01       	movw	r30, r24
    20d2:	20 83       	st	Z, r18
	break;
    20d4:	41 c0       	rjmp	.+130    	; 0x2158 <UART_init+0x2ca>
case 7:
	/* UCSZ0 =1, UCSZ=0,UCSZ2=0 */
	CLEAR_BIT(UCSRC,UCSZ1);
    20d6:	80 e4       	ldi	r24, 0x40	; 64
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	20 e4       	ldi	r18, 0x40	; 64
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	f9 01       	movw	r30, r18
    20e0:	20 81       	ld	r18, Z
    20e2:	2b 7f       	andi	r18, 0xFB	; 251
    20e4:	fc 01       	movw	r30, r24
    20e6:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ0);
    20e8:	80 e4       	ldi	r24, 0x40	; 64
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	20 e4       	ldi	r18, 0x40	; 64
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	f9 01       	movw	r30, r18
    20f2:	20 81       	ld	r18, Z
    20f4:	22 60       	ori	r18, 0x02	; 2
    20f6:	fc 01       	movw	r30, r24
    20f8:	20 83       	st	Z, r18
		break;
    20fa:	2e c0       	rjmp	.+92     	; 0x2158 <UART_init+0x2ca>
case 9:
	/* UCSZ0 =1, UCSZ1=0,UCSZ2=1 */
	SET_BIT(UCSRC,UCSZ0);
    20fc:	80 e4       	ldi	r24, 0x40	; 64
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	20 e4       	ldi	r18, 0x40	; 64
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	f9 01       	movw	r30, r18
    2106:	20 81       	ld	r18, Z
    2108:	22 60       	ori	r18, 0x02	; 2
    210a:	fc 01       	movw	r30, r24
    210c:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    210e:	80 e4       	ldi	r24, 0x40	; 64
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	20 e4       	ldi	r18, 0x40	; 64
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	f9 01       	movw	r30, r18
    2118:	20 81       	ld	r18, Z
    211a:	24 60       	ori	r18, 0x04	; 4
    211c:	fc 01       	movw	r30, r24
    211e:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ2);
    2120:	80 e4       	ldi	r24, 0x40	; 64
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	20 e4       	ldi	r18, 0x40	; 64
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	f9 01       	movw	r30, r18
    212a:	20 81       	ld	r18, Z
    212c:	24 60       	ori	r18, 0x04	; 4
    212e:	fc 01       	movw	r30, r24
    2130:	20 83       	st	Z, r18


	break;
    2132:	12 c0       	rjmp	.+36     	; 0x2158 <UART_init+0x2ca>

default :
	/* the default will be 8bits */
	/* UCSZ0 =1, UCSZ1=1,UCSZ2=0 */
	SET_BIT(UCSRC,UCSZ0);
    2134:	80 e4       	ldi	r24, 0x40	; 64
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	20 e4       	ldi	r18, 0x40	; 64
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	f9 01       	movw	r30, r18
    213e:	20 81       	ld	r18, Z
    2140:	22 60       	ori	r18, 0x02	; 2
    2142:	fc 01       	movw	r30, r24
    2144:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    2146:	80 e4       	ldi	r24, 0x40	; 64
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	20 e4       	ldi	r18, 0x40	; 64
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	f9 01       	movw	r30, r18
    2150:	20 81       	ld	r18, Z
    2152:	24 60       	ori	r18, 0x04	; 4
    2154:	fc 01       	movw	r30, r24
    2156:	20 83       	st	Z, r18
}
switch(config->stop_bit_number)
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	9a 81       	ldd	r25, Y+2	; 0x02
    215c:	fc 01       	movw	r30, r24
    215e:	85 a5       	ldd	r24, Z+45	; 0x2d
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	02 97       	sbiw	r24, 0x02	; 2
    2166:	51 f0       	breq	.+20     	; 0x217c <UART_init+0x2ee>
{
default : /* STOP BIT =1 */
	SET_BIT(UCSRC,USBS);
    2168:	80 e4       	ldi	r24, 0x40	; 64
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	20 e4       	ldi	r18, 0x40	; 64
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	f9 01       	movw	r30, r18
    2172:	20 81       	ld	r18, Z
    2174:	28 60       	ori	r18, 0x08	; 8
    2176:	fc 01       	movw	r30, r24
    2178:	20 83       	st	Z, r18
	break;
    217a:	0a c0       	rjmp	.+20     	; 0x2190 <UART_init+0x302>
case 2 : /* STOP BIT =2 */
	CLEAR_BIT(UCSRC,USBS);
    217c:	80 e4       	ldi	r24, 0x40	; 64
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	20 e4       	ldi	r18, 0x40	; 64
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	f9 01       	movw	r30, r18
    2186:	20 81       	ld	r18, Z
    2188:	27 7f       	andi	r18, 0xF7	; 247
    218a:	fc 01       	movw	r30, r24
    218c:	20 83       	st	Z, r18
	break;
    218e:	00 00       	nop

}
if(!strcmp(config->parity,"odd"))
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	9a 81       	ldd	r25, Y+2	; 0x02
    2194:	49 96       	adiw	r24, 0x19	; 25
    2196:	6f e9       	ldi	r22, 0x9F	; 159
    2198:	71 e0       	ldi	r23, 0x01	; 1
    219a:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    219e:	89 2b       	or	r24, r25
    21a0:	99 f4       	brne	.+38     	; 0x21c8 <UART_init+0x33a>
		{
		SET_BIT(UCSRC,UPM0);
    21a2:	80 e4       	ldi	r24, 0x40	; 64
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	20 e4       	ldi	r18, 0x40	; 64
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	f9 01       	movw	r30, r18
    21ac:	20 81       	ld	r18, Z
    21ae:	20 61       	ori	r18, 0x10	; 16
    21b0:	fc 01       	movw	r30, r24
    21b2:	20 83       	st	Z, r18
		SET_BIT(UCSRC,UPM1);
    21b4:	80 e4       	ldi	r24, 0x40	; 64
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	20 e4       	ldi	r18, 0x40	; 64
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	f9 01       	movw	r30, r18
    21be:	20 81       	ld	r18, Z
    21c0:	20 62       	ori	r18, 0x20	; 32
    21c2:	fc 01       	movw	r30, r24
    21c4:	20 83       	st	Z, r18
    21c6:	2e c0       	rjmp	.+92     	; 0x2224 <UART_init+0x396>
		}
else if(!strcmp(config->parity,"even"))
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	9a 81       	ldd	r25, Y+2	; 0x02
    21cc:	49 96       	adiw	r24, 0x19	; 25
    21ce:	63 ea       	ldi	r22, 0xA3	; 163
    21d0:	71 e0       	ldi	r23, 0x01	; 1
    21d2:	0e 94 00 14 	call	0x2800	; 0x2800 <strcmp>
    21d6:	89 2b       	or	r24, r25
    21d8:	99 f4       	brne	.+38     	; 0x2200 <UART_init+0x372>
		{
		SET_BIT(UCSRC,UPM0);
    21da:	80 e4       	ldi	r24, 0x40	; 64
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	20 e4       	ldi	r18, 0x40	; 64
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	f9 01       	movw	r30, r18
    21e4:	20 81       	ld	r18, Z
    21e6:	20 61       	ori	r18, 0x10	; 16
    21e8:	fc 01       	movw	r30, r24
    21ea:	20 83       	st	Z, r18
		CLEAR_BIT(UCSRC,UPM1);
    21ec:	80 e4       	ldi	r24, 0x40	; 64
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	20 e4       	ldi	r18, 0x40	; 64
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	f9 01       	movw	r30, r18
    21f6:	20 81       	ld	r18, Z
    21f8:	2f 7d       	andi	r18, 0xDF	; 223
    21fa:	fc 01       	movw	r30, r24
    21fc:	20 83       	st	Z, r18
    21fe:	12 c0       	rjmp	.+36     	; 0x2224 <UART_init+0x396>
		}
else
{
	CLEAR_BIT(UCSRC,UPM0);
    2200:	80 e4       	ldi	r24, 0x40	; 64
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	20 e4       	ldi	r18, 0x40	; 64
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	f9 01       	movw	r30, r18
    220a:	20 81       	ld	r18, Z
    220c:	2f 7e       	andi	r18, 0xEF	; 239
    220e:	fc 01       	movw	r30, r24
    2210:	20 83       	st	Z, r18
	CLEAR_BIT(UCSRC,UPM1);
    2212:	80 e4       	ldi	r24, 0x40	; 64
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	20 e4       	ldi	r18, 0x40	; 64
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	f9 01       	movw	r30, r18
    221c:	20 81       	ld	r18, Z
    221e:	2f 7d       	andi	r18, 0xDF	; 223
    2220:	fc 01       	movw	r30, r24
    2222:	20 83       	st	Z, r18
}
/* enable uart receive and transmit */
SET_BIT(UCSRB,RXEN);
    2224:	8a e2       	ldi	r24, 0x2A	; 42
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	2a e2       	ldi	r18, 0x2A	; 42
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	f9 01       	movw	r30, r18
    222e:	20 81       	ld	r18, Z
    2230:	20 61       	ori	r18, 0x10	; 16
    2232:	fc 01       	movw	r30, r24
    2234:	20 83       	st	Z, r18
SET_BIT(UCSRB,TXEN);
    2236:	8a e2       	ldi	r24, 0x2A	; 42
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	2a e2       	ldi	r18, 0x2A	; 42
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	f9 01       	movw	r30, r18
    2240:	20 81       	ld	r18, Z
    2242:	28 60       	ori	r18, 0x08	; 8
    2244:	fc 01       	movw	r30, r24
    2246:	20 83       	st	Z, r18
}
    2248:	00 00       	nop
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	1f 91       	pop	r17
    2254:	0f 91       	pop	r16
    2256:	08 95       	ret

00002258 <UART_receiveByte>:

uint8 UART_receiveByte(void)
{
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)); /* wait until RXC  flag be 1 it means that there is data not read */
    2260:	00 00       	nop
    2262:	8b e2       	ldi	r24, 0x2B	; 43
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	fc 01       	movw	r30, r24
    2268:	80 81       	ld	r24, Z
    226a:	88 23       	and	r24, r24
    226c:	d4 f7       	brge	.-12     	; 0x2262 <UART_receiveByte+0xa>

	return UDR;/* read and return RXC flag to zero */
    226e:	8c e2       	ldi	r24, 0x2C	; 44
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	fc 01       	movw	r30, r24
    2274:	80 81       	ld	r24, Z
}
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	08 95       	ret

0000227c <UART_sendByte>:
void UART_sendByte(const uint8 data)
{
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	1f 92       	push	r1
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	89 83       	std	Y+1, r24	; 0x01
	UDR=data; /*store data in shift register UDR from less significant bit */
    2288:	8c e2       	ldi	r24, 0x2C	; 44
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	29 81       	ldd	r18, Y+1	; 0x01
    228e:	fc 01       	movw	r30, r24
    2290:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(UCSRA,TXC));/*wait until send data txc =1*/
    2292:	00 00       	nop
    2294:	8b e2       	ldi	r24, 0x2B	; 43
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	fc 01       	movw	r30, r24
    229a:	80 81       	ld	r24, Z
    229c:	88 2f       	mov	r24, r24
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	80 74       	andi	r24, 0x40	; 64
    22a2:	99 27       	eor	r25, r25
    22a4:	89 2b       	or	r24, r25
    22a6:	b1 f3       	breq	.-20     	; 0x2294 <UART_sendByte+0x18>
	SET_BIT(UCSRA,TXC); /*clear the flag as it doesnt clear automatically as no interrupt or ISR*/
    22a8:	8b e2       	ldi	r24, 0x2B	; 43
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	2b e2       	ldi	r18, 0x2B	; 43
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	f9 01       	movw	r30, r18
    22b2:	20 81       	ld	r18, Z
    22b4:	20 64       	ori	r18, 0x40	; 64
    22b6:	fc 01       	movw	r30, r24
    22b8:	20 83       	st	Z, r18

}
    22ba:	00 00       	nop
    22bc:	0f 90       	pop	r0
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	08 95       	ret

000022c4 <UART_sendString>:
void UART_sendString(uint8 *str)
{
    22c4:	cf 93       	push	r28
    22c6:	df 93       	push	r29
    22c8:	00 d0       	rcall	.+0      	; 0x22ca <UART_sendString+0x6>
    22ca:	1f 92       	push	r1
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	9b 83       	std	Y+3, r25	; 0x03
    22d2:	8a 83       	std	Y+2, r24	; 0x02
	/* send byte by byte until end of string (\0)
	 * and at the end of string send # as defined pattern because we cant send null
	 */

	uint8 i = 0;
    22d4:	19 82       	std	Y+1, r1	; 0x01
		while(str[i] != '\0')
    22d6:	0e c0       	rjmp	.+28     	; 0x22f4 <UART_sendString+0x30>
		{
			UART_sendByte(str[i]);
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	88 2f       	mov	r24, r24
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	2a 81       	ldd	r18, Y+2	; 0x02
    22e0:	3b 81       	ldd	r19, Y+3	; 0x03
    22e2:	82 0f       	add	r24, r18
    22e4:	93 1f       	adc	r25, r19
    22e6:	fc 01       	movw	r30, r24
    22e8:	80 81       	ld	r24, Z
    22ea:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>
			i++;
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	8f 5f       	subi	r24, 0xFF	; 255
    22f2:	89 83       	std	Y+1, r24	; 0x01
	/* send byte by byte until end of string (\0)
	 * and at the end of string send # as defined pattern because we cant send null
	 */

	uint8 i = 0;
		while(str[i] != '\0')
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	88 2f       	mov	r24, r24
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	2a 81       	ldd	r18, Y+2	; 0x02
    22fc:	3b 81       	ldd	r19, Y+3	; 0x03
    22fe:	82 0f       	add	r24, r18
    2300:	93 1f       	adc	r25, r19
    2302:	fc 01       	movw	r30, r24
    2304:	80 81       	ld	r24, Z
    2306:	88 23       	and	r24, r24
    2308:	39 f7       	brne	.-50     	; 0x22d8 <UART_sendString+0x14>
		{
			UART_sendByte(str[i]);
			i++;
		}
	UART_sendByte('#');
    230a:	83 e2       	ldi	r24, 0x23	; 35
    230c:	0e 94 3e 11 	call	0x227c	; 0x227c <UART_sendByte>

}
    2310:	00 00       	nop
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	df 91       	pop	r29
    231a:	cf 91       	pop	r28
    231c:	08 95       	ret

0000231e <UART_receiveString>:
void UART_receiveString(uint8 *str)
{ /*
    231e:	0f 93       	push	r16
    2320:	1f 93       	push	r17
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	00 d0       	rcall	.+0      	; 0x2328 <UART_receiveString+0xa>
    2328:	1f 92       	push	r1
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	9b 83       	std	Y+3, r25	; 0x03
    2330:	8a 83       	std	Y+2, r24	; 0x02
at first receive first byte then check the  pre define pattern # may be empty string ""
then enter the while loop  and receive byte by byte  until reach pre define pattern #
and replace it with null '\0' to make string */

	uint8 i = 0;
    2332:	19 82       	std	Y+1, r1	; 0x01
		str[i] = UART_receiveByte();
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	88 2f       	mov	r24, r24
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	2a 81       	ldd	r18, Y+2	; 0x02
    233c:	3b 81       	ldd	r19, Y+3	; 0x03
    233e:	89 01       	movw	r16, r18
    2340:	08 0f       	add	r16, r24
    2342:	19 1f       	adc	r17, r25
    2344:	0e 94 2c 11 	call	0x2258	; 0x2258 <UART_receiveByte>
    2348:	f8 01       	movw	r30, r16
    234a:	80 83       	st	Z, r24
		while(str[i] != '#')
    234c:	0f c0       	rjmp	.+30     	; 0x236c <UART_receiveString+0x4e>
		{
			i++;
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	8f 5f       	subi	r24, 0xFF	; 255
    2352:	89 83       	std	Y+1, r24	; 0x01
			str[i] = UART_receiveByte();
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	88 2f       	mov	r24, r24
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	2a 81       	ldd	r18, Y+2	; 0x02
    235c:	3b 81       	ldd	r19, Y+3	; 0x03
    235e:	89 01       	movw	r16, r18
    2360:	08 0f       	add	r16, r24
    2362:	19 1f       	adc	r17, r25
    2364:	0e 94 2c 11 	call	0x2258	; 0x2258 <UART_receiveByte>
    2368:	f8 01       	movw	r30, r16
    236a:	80 83       	st	Z, r24
then enter the while loop  and receive byte by byte  until reach pre define pattern #
and replace it with null '\0' to make string */

	uint8 i = 0;
		str[i] = UART_receiveByte();
		while(str[i] != '#')
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	88 2f       	mov	r24, r24
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	2a 81       	ldd	r18, Y+2	; 0x02
    2374:	3b 81       	ldd	r19, Y+3	; 0x03
    2376:	82 0f       	add	r24, r18
    2378:	93 1f       	adc	r25, r19
    237a:	fc 01       	movw	r30, r24
    237c:	80 81       	ld	r24, Z
    237e:	83 32       	cpi	r24, 0x23	; 35
    2380:	31 f7       	brne	.-52     	; 0x234e <UART_receiveString+0x30>
		{
			i++;
			str[i] = UART_receiveByte();
		}
		str[i] = '\0';
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	88 2f       	mov	r24, r24
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	2a 81       	ldd	r18, Y+2	; 0x02
    238a:	3b 81       	ldd	r19, Y+3	; 0x03
    238c:	82 0f       	add	r24, r18
    238e:	93 1f       	adc	r25, r19
    2390:	fc 01       	movw	r30, r24
    2392:	10 82       	st	Z, r1
}
    2394:	00 00       	nop
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	df 91       	pop	r29
    239e:	cf 91       	pop	r28
    23a0:	1f 91       	pop	r17
    23a2:	0f 91       	pop	r16
    23a4:	08 95       	ret

000023a6 <__udivmodsi4>:
    23a6:	a1 e2       	ldi	r26, 0x21	; 33
    23a8:	1a 2e       	mov	r1, r26
    23aa:	aa 1b       	sub	r26, r26
    23ac:	bb 1b       	sub	r27, r27
    23ae:	fd 01       	movw	r30, r26
    23b0:	0d c0       	rjmp	.+26     	; 0x23cc <__udivmodsi4_ep>

000023b2 <__udivmodsi4_loop>:
    23b2:	aa 1f       	adc	r26, r26
    23b4:	bb 1f       	adc	r27, r27
    23b6:	ee 1f       	adc	r30, r30
    23b8:	ff 1f       	adc	r31, r31
    23ba:	a2 17       	cp	r26, r18
    23bc:	b3 07       	cpc	r27, r19
    23be:	e4 07       	cpc	r30, r20
    23c0:	f5 07       	cpc	r31, r21
    23c2:	20 f0       	brcs	.+8      	; 0x23cc <__udivmodsi4_ep>
    23c4:	a2 1b       	sub	r26, r18
    23c6:	b3 0b       	sbc	r27, r19
    23c8:	e4 0b       	sbc	r30, r20
    23ca:	f5 0b       	sbc	r31, r21

000023cc <__udivmodsi4_ep>:
    23cc:	66 1f       	adc	r22, r22
    23ce:	77 1f       	adc	r23, r23
    23d0:	88 1f       	adc	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	1a 94       	dec	r1
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <__udivmodsi4_loop>
    23d8:	60 95       	com	r22
    23da:	70 95       	com	r23
    23dc:	80 95       	com	r24
    23de:	90 95       	com	r25
    23e0:	9b 01       	movw	r18, r22
    23e2:	ac 01       	movw	r20, r24
    23e4:	bd 01       	movw	r22, r26
    23e6:	cf 01       	movw	r24, r30
    23e8:	08 95       	ret

000023ea <__tablejump2__>:
    23ea:	ee 0f       	add	r30, r30
    23ec:	ff 1f       	adc	r31, r31
    23ee:	05 90       	lpm	r0, Z+
    23f0:	f4 91       	lpm	r31, Z
    23f2:	e0 2d       	mov	r30, r0
    23f4:	09 94       	ijmp

000023f6 <__subsf3>:
    23f6:	50 58       	subi	r21, 0x80	; 128

000023f8 <__addsf3>:
    23f8:	bb 27       	eor	r27, r27
    23fa:	aa 27       	eor	r26, r26
    23fc:	0e 94 13 12 	call	0x2426	; 0x2426 <__addsf3x>
    2400:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__fp_round>
    2404:	0e 94 3b 13 	call	0x2676	; 0x2676 <__fp_pscA>
    2408:	38 f0       	brcs	.+14     	; 0x2418 <__addsf3+0x20>
    240a:	0e 94 42 13 	call	0x2684	; 0x2684 <__fp_pscB>
    240e:	20 f0       	brcs	.+8      	; 0x2418 <__addsf3+0x20>
    2410:	39 f4       	brne	.+14     	; 0x2420 <__addsf3+0x28>
    2412:	9f 3f       	cpi	r25, 0xFF	; 255
    2414:	19 f4       	brne	.+6      	; 0x241c <__addsf3+0x24>
    2416:	26 f4       	brtc	.+8      	; 0x2420 <__addsf3+0x28>
    2418:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__fp_nan>
    241c:	0e f4       	brtc	.+2      	; 0x2420 <__addsf3+0x28>
    241e:	e0 95       	com	r30
    2420:	e7 fb       	bst	r30, 7
    2422:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__fp_inf>

00002426 <__addsf3x>:
    2426:	e9 2f       	mov	r30, r25
    2428:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__fp_split3>
    242c:	58 f3       	brcs	.-42     	; 0x2404 <__addsf3+0xc>
    242e:	ba 17       	cp	r27, r26
    2430:	62 07       	cpc	r22, r18
    2432:	73 07       	cpc	r23, r19
    2434:	84 07       	cpc	r24, r20
    2436:	95 07       	cpc	r25, r21
    2438:	20 f0       	brcs	.+8      	; 0x2442 <__addsf3x+0x1c>
    243a:	79 f4       	brne	.+30     	; 0x245a <__addsf3x+0x34>
    243c:	a6 f5       	brtc	.+104    	; 0x24a6 <__addsf3x+0x80>
    243e:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__fp_zero>
    2442:	0e f4       	brtc	.+2      	; 0x2446 <__addsf3x+0x20>
    2444:	e0 95       	com	r30
    2446:	0b 2e       	mov	r0, r27
    2448:	ba 2f       	mov	r27, r26
    244a:	a0 2d       	mov	r26, r0
    244c:	0b 01       	movw	r0, r22
    244e:	b9 01       	movw	r22, r18
    2450:	90 01       	movw	r18, r0
    2452:	0c 01       	movw	r0, r24
    2454:	ca 01       	movw	r24, r20
    2456:	a0 01       	movw	r20, r0
    2458:	11 24       	eor	r1, r1
    245a:	ff 27       	eor	r31, r31
    245c:	59 1b       	sub	r21, r25
    245e:	99 f0       	breq	.+38     	; 0x2486 <__addsf3x+0x60>
    2460:	59 3f       	cpi	r21, 0xF9	; 249
    2462:	50 f4       	brcc	.+20     	; 0x2478 <__addsf3x+0x52>
    2464:	50 3e       	cpi	r21, 0xE0	; 224
    2466:	68 f1       	brcs	.+90     	; 0x24c2 <__addsf3x+0x9c>
    2468:	1a 16       	cp	r1, r26
    246a:	f0 40       	sbci	r31, 0x00	; 0
    246c:	a2 2f       	mov	r26, r18
    246e:	23 2f       	mov	r18, r19
    2470:	34 2f       	mov	r19, r20
    2472:	44 27       	eor	r20, r20
    2474:	58 5f       	subi	r21, 0xF8	; 248
    2476:	f3 cf       	rjmp	.-26     	; 0x245e <__addsf3x+0x38>
    2478:	46 95       	lsr	r20
    247a:	37 95       	ror	r19
    247c:	27 95       	ror	r18
    247e:	a7 95       	ror	r26
    2480:	f0 40       	sbci	r31, 0x00	; 0
    2482:	53 95       	inc	r21
    2484:	c9 f7       	brne	.-14     	; 0x2478 <__addsf3x+0x52>
    2486:	7e f4       	brtc	.+30     	; 0x24a6 <__addsf3x+0x80>
    2488:	1f 16       	cp	r1, r31
    248a:	ba 0b       	sbc	r27, r26
    248c:	62 0b       	sbc	r22, r18
    248e:	73 0b       	sbc	r23, r19
    2490:	84 0b       	sbc	r24, r20
    2492:	ba f0       	brmi	.+46     	; 0x24c2 <__addsf3x+0x9c>
    2494:	91 50       	subi	r25, 0x01	; 1
    2496:	a1 f0       	breq	.+40     	; 0x24c0 <__addsf3x+0x9a>
    2498:	ff 0f       	add	r31, r31
    249a:	bb 1f       	adc	r27, r27
    249c:	66 1f       	adc	r22, r22
    249e:	77 1f       	adc	r23, r23
    24a0:	88 1f       	adc	r24, r24
    24a2:	c2 f7       	brpl	.-16     	; 0x2494 <__addsf3x+0x6e>
    24a4:	0e c0       	rjmp	.+28     	; 0x24c2 <__addsf3x+0x9c>
    24a6:	ba 0f       	add	r27, r26
    24a8:	62 1f       	adc	r22, r18
    24aa:	73 1f       	adc	r23, r19
    24ac:	84 1f       	adc	r24, r20
    24ae:	48 f4       	brcc	.+18     	; 0x24c2 <__addsf3x+0x9c>
    24b0:	87 95       	ror	r24
    24b2:	77 95       	ror	r23
    24b4:	67 95       	ror	r22
    24b6:	b7 95       	ror	r27
    24b8:	f7 95       	ror	r31
    24ba:	9e 3f       	cpi	r25, 0xFE	; 254
    24bc:	08 f0       	brcs	.+2      	; 0x24c0 <__addsf3x+0x9a>
    24be:	b0 cf       	rjmp	.-160    	; 0x2420 <__addsf3+0x28>
    24c0:	93 95       	inc	r25
    24c2:	88 0f       	add	r24, r24
    24c4:	08 f0       	brcs	.+2      	; 0x24c8 <__addsf3x+0xa2>
    24c6:	99 27       	eor	r25, r25
    24c8:	ee 0f       	add	r30, r30
    24ca:	97 95       	ror	r25
    24cc:	87 95       	ror	r24
    24ce:	08 95       	ret

000024d0 <__cmpsf2>:
    24d0:	0e 94 0e 13 	call	0x261c	; 0x261c <__fp_cmp>
    24d4:	08 f4       	brcc	.+2      	; 0x24d8 <__cmpsf2+0x8>
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	08 95       	ret

000024da <__divsf3>:
    24da:	0e 94 81 12 	call	0x2502	; 0x2502 <__divsf3x>
    24de:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__fp_round>
    24e2:	0e 94 42 13 	call	0x2684	; 0x2684 <__fp_pscB>
    24e6:	58 f0       	brcs	.+22     	; 0x24fe <__divsf3+0x24>
    24e8:	0e 94 3b 13 	call	0x2676	; 0x2676 <__fp_pscA>
    24ec:	40 f0       	brcs	.+16     	; 0x24fe <__divsf3+0x24>
    24ee:	29 f4       	brne	.+10     	; 0x24fa <__divsf3+0x20>
    24f0:	5f 3f       	cpi	r21, 0xFF	; 255
    24f2:	29 f0       	breq	.+10     	; 0x24fe <__divsf3+0x24>
    24f4:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__fp_inf>
    24f8:	51 11       	cpse	r21, r1
    24fa:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__fp_szero>
    24fe:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__fp_nan>

00002502 <__divsf3x>:
    2502:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__fp_split3>
    2506:	68 f3       	brcs	.-38     	; 0x24e2 <__divsf3+0x8>

00002508 <__divsf3_pse>:
    2508:	99 23       	and	r25, r25
    250a:	b1 f3       	breq	.-20     	; 0x24f8 <__divsf3+0x1e>
    250c:	55 23       	and	r21, r21
    250e:	91 f3       	breq	.-28     	; 0x24f4 <__divsf3+0x1a>
    2510:	95 1b       	sub	r25, r21
    2512:	55 0b       	sbc	r21, r21
    2514:	bb 27       	eor	r27, r27
    2516:	aa 27       	eor	r26, r26
    2518:	62 17       	cp	r22, r18
    251a:	73 07       	cpc	r23, r19
    251c:	84 07       	cpc	r24, r20
    251e:	38 f0       	brcs	.+14     	; 0x252e <__divsf3_pse+0x26>
    2520:	9f 5f       	subi	r25, 0xFF	; 255
    2522:	5f 4f       	sbci	r21, 0xFF	; 255
    2524:	22 0f       	add	r18, r18
    2526:	33 1f       	adc	r19, r19
    2528:	44 1f       	adc	r20, r20
    252a:	aa 1f       	adc	r26, r26
    252c:	a9 f3       	breq	.-22     	; 0x2518 <__divsf3_pse+0x10>
    252e:	35 d0       	rcall	.+106    	; 0x259a <__divsf3_pse+0x92>
    2530:	0e 2e       	mov	r0, r30
    2532:	3a f0       	brmi	.+14     	; 0x2542 <__divsf3_pse+0x3a>
    2534:	e0 e8       	ldi	r30, 0x80	; 128
    2536:	32 d0       	rcall	.+100    	; 0x259c <__divsf3_pse+0x94>
    2538:	91 50       	subi	r25, 0x01	; 1
    253a:	50 40       	sbci	r21, 0x00	; 0
    253c:	e6 95       	lsr	r30
    253e:	00 1c       	adc	r0, r0
    2540:	ca f7       	brpl	.-14     	; 0x2534 <__divsf3_pse+0x2c>
    2542:	2b d0       	rcall	.+86     	; 0x259a <__divsf3_pse+0x92>
    2544:	fe 2f       	mov	r31, r30
    2546:	29 d0       	rcall	.+82     	; 0x259a <__divsf3_pse+0x92>
    2548:	66 0f       	add	r22, r22
    254a:	77 1f       	adc	r23, r23
    254c:	88 1f       	adc	r24, r24
    254e:	bb 1f       	adc	r27, r27
    2550:	26 17       	cp	r18, r22
    2552:	37 07       	cpc	r19, r23
    2554:	48 07       	cpc	r20, r24
    2556:	ab 07       	cpc	r26, r27
    2558:	b0 e8       	ldi	r27, 0x80	; 128
    255a:	09 f0       	breq	.+2      	; 0x255e <__divsf3_pse+0x56>
    255c:	bb 0b       	sbc	r27, r27
    255e:	80 2d       	mov	r24, r0
    2560:	bf 01       	movw	r22, r30
    2562:	ff 27       	eor	r31, r31
    2564:	93 58       	subi	r25, 0x83	; 131
    2566:	5f 4f       	sbci	r21, 0xFF	; 255
    2568:	3a f0       	brmi	.+14     	; 0x2578 <__divsf3_pse+0x70>
    256a:	9e 3f       	cpi	r25, 0xFE	; 254
    256c:	51 05       	cpc	r21, r1
    256e:	78 f0       	brcs	.+30     	; 0x258e <__divsf3_pse+0x86>
    2570:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__fp_inf>
    2574:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__fp_szero>
    2578:	5f 3f       	cpi	r21, 0xFF	; 255
    257a:	e4 f3       	brlt	.-8      	; 0x2574 <__divsf3_pse+0x6c>
    257c:	98 3e       	cpi	r25, 0xE8	; 232
    257e:	d4 f3       	brlt	.-12     	; 0x2574 <__divsf3_pse+0x6c>
    2580:	86 95       	lsr	r24
    2582:	77 95       	ror	r23
    2584:	67 95       	ror	r22
    2586:	b7 95       	ror	r27
    2588:	f7 95       	ror	r31
    258a:	9f 5f       	subi	r25, 0xFF	; 255
    258c:	c9 f7       	brne	.-14     	; 0x2580 <__divsf3_pse+0x78>
    258e:	88 0f       	add	r24, r24
    2590:	91 1d       	adc	r25, r1
    2592:	96 95       	lsr	r25
    2594:	87 95       	ror	r24
    2596:	97 f9       	bld	r25, 7
    2598:	08 95       	ret
    259a:	e1 e0       	ldi	r30, 0x01	; 1
    259c:	66 0f       	add	r22, r22
    259e:	77 1f       	adc	r23, r23
    25a0:	88 1f       	adc	r24, r24
    25a2:	bb 1f       	adc	r27, r27
    25a4:	62 17       	cp	r22, r18
    25a6:	73 07       	cpc	r23, r19
    25a8:	84 07       	cpc	r24, r20
    25aa:	ba 07       	cpc	r27, r26
    25ac:	20 f0       	brcs	.+8      	; 0x25b6 <__divsf3_pse+0xae>
    25ae:	62 1b       	sub	r22, r18
    25b0:	73 0b       	sbc	r23, r19
    25b2:	84 0b       	sbc	r24, r20
    25b4:	ba 0b       	sbc	r27, r26
    25b6:	ee 1f       	adc	r30, r30
    25b8:	88 f7       	brcc	.-30     	; 0x259c <__divsf3_pse+0x94>
    25ba:	e0 95       	com	r30
    25bc:	08 95       	ret

000025be <__fixunssfsi>:
    25be:	0e 94 62 13 	call	0x26c4	; 0x26c4 <__fp_splitA>
    25c2:	88 f0       	brcs	.+34     	; 0x25e6 <__fixunssfsi+0x28>
    25c4:	9f 57       	subi	r25, 0x7F	; 127
    25c6:	98 f0       	brcs	.+38     	; 0x25ee <__fixunssfsi+0x30>
    25c8:	b9 2f       	mov	r27, r25
    25ca:	99 27       	eor	r25, r25
    25cc:	b7 51       	subi	r27, 0x17	; 23
    25ce:	b0 f0       	brcs	.+44     	; 0x25fc <__fixunssfsi+0x3e>
    25d0:	e1 f0       	breq	.+56     	; 0x260a <__fixunssfsi+0x4c>
    25d2:	66 0f       	add	r22, r22
    25d4:	77 1f       	adc	r23, r23
    25d6:	88 1f       	adc	r24, r24
    25d8:	99 1f       	adc	r25, r25
    25da:	1a f0       	brmi	.+6      	; 0x25e2 <__fixunssfsi+0x24>
    25dc:	ba 95       	dec	r27
    25de:	c9 f7       	brne	.-14     	; 0x25d2 <__fixunssfsi+0x14>
    25e0:	14 c0       	rjmp	.+40     	; 0x260a <__fixunssfsi+0x4c>
    25e2:	b1 30       	cpi	r27, 0x01	; 1
    25e4:	91 f0       	breq	.+36     	; 0x260a <__fixunssfsi+0x4c>
    25e6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fp_zero>
    25ea:	b1 e0       	ldi	r27, 0x01	; 1
    25ec:	08 95       	ret
    25ee:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__fp_zero>
    25f2:	67 2f       	mov	r22, r23
    25f4:	78 2f       	mov	r23, r24
    25f6:	88 27       	eor	r24, r24
    25f8:	b8 5f       	subi	r27, 0xF8	; 248
    25fa:	39 f0       	breq	.+14     	; 0x260a <__fixunssfsi+0x4c>
    25fc:	b9 3f       	cpi	r27, 0xF9	; 249
    25fe:	cc f3       	brlt	.-14     	; 0x25f2 <__fixunssfsi+0x34>
    2600:	86 95       	lsr	r24
    2602:	77 95       	ror	r23
    2604:	67 95       	ror	r22
    2606:	b3 95       	inc	r27
    2608:	d9 f7       	brne	.-10     	; 0x2600 <__fixunssfsi+0x42>
    260a:	3e f4       	brtc	.+14     	; 0x261a <__fixunssfsi+0x5c>
    260c:	90 95       	com	r25
    260e:	80 95       	com	r24
    2610:	70 95       	com	r23
    2612:	61 95       	neg	r22
    2614:	7f 4f       	sbci	r23, 0xFF	; 255
    2616:	8f 4f       	sbci	r24, 0xFF	; 255
    2618:	9f 4f       	sbci	r25, 0xFF	; 255
    261a:	08 95       	ret

0000261c <__fp_cmp>:
    261c:	99 0f       	add	r25, r25
    261e:	00 08       	sbc	r0, r0
    2620:	55 0f       	add	r21, r21
    2622:	aa 0b       	sbc	r26, r26
    2624:	e0 e8       	ldi	r30, 0x80	; 128
    2626:	fe ef       	ldi	r31, 0xFE	; 254
    2628:	16 16       	cp	r1, r22
    262a:	17 06       	cpc	r1, r23
    262c:	e8 07       	cpc	r30, r24
    262e:	f9 07       	cpc	r31, r25
    2630:	c0 f0       	brcs	.+48     	; 0x2662 <__fp_cmp+0x46>
    2632:	12 16       	cp	r1, r18
    2634:	13 06       	cpc	r1, r19
    2636:	e4 07       	cpc	r30, r20
    2638:	f5 07       	cpc	r31, r21
    263a:	98 f0       	brcs	.+38     	; 0x2662 <__fp_cmp+0x46>
    263c:	62 1b       	sub	r22, r18
    263e:	73 0b       	sbc	r23, r19
    2640:	84 0b       	sbc	r24, r20
    2642:	95 0b       	sbc	r25, r21
    2644:	39 f4       	brne	.+14     	; 0x2654 <__fp_cmp+0x38>
    2646:	0a 26       	eor	r0, r26
    2648:	61 f0       	breq	.+24     	; 0x2662 <__fp_cmp+0x46>
    264a:	23 2b       	or	r18, r19
    264c:	24 2b       	or	r18, r20
    264e:	25 2b       	or	r18, r21
    2650:	21 f4       	brne	.+8      	; 0x265a <__fp_cmp+0x3e>
    2652:	08 95       	ret
    2654:	0a 26       	eor	r0, r26
    2656:	09 f4       	brne	.+2      	; 0x265a <__fp_cmp+0x3e>
    2658:	a1 40       	sbci	r26, 0x01	; 1
    265a:	a6 95       	lsr	r26
    265c:	8f ef       	ldi	r24, 0xFF	; 255
    265e:	81 1d       	adc	r24, r1
    2660:	81 1d       	adc	r24, r1
    2662:	08 95       	ret

00002664 <__fp_inf>:
    2664:	97 f9       	bld	r25, 7
    2666:	9f 67       	ori	r25, 0x7F	; 127
    2668:	80 e8       	ldi	r24, 0x80	; 128
    266a:	70 e0       	ldi	r23, 0x00	; 0
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	08 95       	ret

00002670 <__fp_nan>:
    2670:	9f ef       	ldi	r25, 0xFF	; 255
    2672:	80 ec       	ldi	r24, 0xC0	; 192
    2674:	08 95       	ret

00002676 <__fp_pscA>:
    2676:	00 24       	eor	r0, r0
    2678:	0a 94       	dec	r0
    267a:	16 16       	cp	r1, r22
    267c:	17 06       	cpc	r1, r23
    267e:	18 06       	cpc	r1, r24
    2680:	09 06       	cpc	r0, r25
    2682:	08 95       	ret

00002684 <__fp_pscB>:
    2684:	00 24       	eor	r0, r0
    2686:	0a 94       	dec	r0
    2688:	12 16       	cp	r1, r18
    268a:	13 06       	cpc	r1, r19
    268c:	14 06       	cpc	r1, r20
    268e:	05 06       	cpc	r0, r21
    2690:	08 95       	ret

00002692 <__fp_round>:
    2692:	09 2e       	mov	r0, r25
    2694:	03 94       	inc	r0
    2696:	00 0c       	add	r0, r0
    2698:	11 f4       	brne	.+4      	; 0x269e <__fp_round+0xc>
    269a:	88 23       	and	r24, r24
    269c:	52 f0       	brmi	.+20     	; 0x26b2 <__fp_round+0x20>
    269e:	bb 0f       	add	r27, r27
    26a0:	40 f4       	brcc	.+16     	; 0x26b2 <__fp_round+0x20>
    26a2:	bf 2b       	or	r27, r31
    26a4:	11 f4       	brne	.+4      	; 0x26aa <__fp_round+0x18>
    26a6:	60 ff       	sbrs	r22, 0
    26a8:	04 c0       	rjmp	.+8      	; 0x26b2 <__fp_round+0x20>
    26aa:	6f 5f       	subi	r22, 0xFF	; 255
    26ac:	7f 4f       	sbci	r23, 0xFF	; 255
    26ae:	8f 4f       	sbci	r24, 0xFF	; 255
    26b0:	9f 4f       	sbci	r25, 0xFF	; 255
    26b2:	08 95       	ret

000026b4 <__fp_split3>:
    26b4:	57 fd       	sbrc	r21, 7
    26b6:	90 58       	subi	r25, 0x80	; 128
    26b8:	44 0f       	add	r20, r20
    26ba:	55 1f       	adc	r21, r21
    26bc:	59 f0       	breq	.+22     	; 0x26d4 <__fp_splitA+0x10>
    26be:	5f 3f       	cpi	r21, 0xFF	; 255
    26c0:	71 f0       	breq	.+28     	; 0x26de <__fp_splitA+0x1a>
    26c2:	47 95       	ror	r20

000026c4 <__fp_splitA>:
    26c4:	88 0f       	add	r24, r24
    26c6:	97 fb       	bst	r25, 7
    26c8:	99 1f       	adc	r25, r25
    26ca:	61 f0       	breq	.+24     	; 0x26e4 <__fp_splitA+0x20>
    26cc:	9f 3f       	cpi	r25, 0xFF	; 255
    26ce:	79 f0       	breq	.+30     	; 0x26ee <__fp_splitA+0x2a>
    26d0:	87 95       	ror	r24
    26d2:	08 95       	ret
    26d4:	12 16       	cp	r1, r18
    26d6:	13 06       	cpc	r1, r19
    26d8:	14 06       	cpc	r1, r20
    26da:	55 1f       	adc	r21, r21
    26dc:	f2 cf       	rjmp	.-28     	; 0x26c2 <__fp_split3+0xe>
    26de:	46 95       	lsr	r20
    26e0:	f1 df       	rcall	.-30     	; 0x26c4 <__fp_splitA>
    26e2:	08 c0       	rjmp	.+16     	; 0x26f4 <__fp_splitA+0x30>
    26e4:	16 16       	cp	r1, r22
    26e6:	17 06       	cpc	r1, r23
    26e8:	18 06       	cpc	r1, r24
    26ea:	99 1f       	adc	r25, r25
    26ec:	f1 cf       	rjmp	.-30     	; 0x26d0 <__fp_splitA+0xc>
    26ee:	86 95       	lsr	r24
    26f0:	71 05       	cpc	r23, r1
    26f2:	61 05       	cpc	r22, r1
    26f4:	08 94       	sec
    26f6:	08 95       	ret

000026f8 <__fp_zero>:
    26f8:	e8 94       	clt

000026fa <__fp_szero>:
    26fa:	bb 27       	eor	r27, r27
    26fc:	66 27       	eor	r22, r22
    26fe:	77 27       	eor	r23, r23
    2700:	cb 01       	movw	r24, r22
    2702:	97 f9       	bld	r25, 7
    2704:	08 95       	ret

00002706 <__gesf2>:
    2706:	0e 94 0e 13 	call	0x261c	; 0x261c <__fp_cmp>
    270a:	08 f4       	brcc	.+2      	; 0x270e <__gesf2+0x8>
    270c:	8f ef       	ldi	r24, 0xFF	; 255
    270e:	08 95       	ret

00002710 <__mulsf3>:
    2710:	0e 94 9b 13 	call	0x2736	; 0x2736 <__mulsf3x>
    2714:	0c 94 49 13 	jmp	0x2692	; 0x2692 <__fp_round>
    2718:	0e 94 3b 13 	call	0x2676	; 0x2676 <__fp_pscA>
    271c:	38 f0       	brcs	.+14     	; 0x272c <__mulsf3+0x1c>
    271e:	0e 94 42 13 	call	0x2684	; 0x2684 <__fp_pscB>
    2722:	20 f0       	brcs	.+8      	; 0x272c <__mulsf3+0x1c>
    2724:	95 23       	and	r25, r21
    2726:	11 f0       	breq	.+4      	; 0x272c <__mulsf3+0x1c>
    2728:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__fp_inf>
    272c:	0c 94 38 13 	jmp	0x2670	; 0x2670 <__fp_nan>
    2730:	11 24       	eor	r1, r1
    2732:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__fp_szero>

00002736 <__mulsf3x>:
    2736:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__fp_split3>
    273a:	70 f3       	brcs	.-36     	; 0x2718 <__mulsf3+0x8>

0000273c <__mulsf3_pse>:
    273c:	95 9f       	mul	r25, r21
    273e:	c1 f3       	breq	.-16     	; 0x2730 <__mulsf3+0x20>
    2740:	95 0f       	add	r25, r21
    2742:	50 e0       	ldi	r21, 0x00	; 0
    2744:	55 1f       	adc	r21, r21
    2746:	62 9f       	mul	r22, r18
    2748:	f0 01       	movw	r30, r0
    274a:	72 9f       	mul	r23, r18
    274c:	bb 27       	eor	r27, r27
    274e:	f0 0d       	add	r31, r0
    2750:	b1 1d       	adc	r27, r1
    2752:	63 9f       	mul	r22, r19
    2754:	aa 27       	eor	r26, r26
    2756:	f0 0d       	add	r31, r0
    2758:	b1 1d       	adc	r27, r1
    275a:	aa 1f       	adc	r26, r26
    275c:	64 9f       	mul	r22, r20
    275e:	66 27       	eor	r22, r22
    2760:	b0 0d       	add	r27, r0
    2762:	a1 1d       	adc	r26, r1
    2764:	66 1f       	adc	r22, r22
    2766:	82 9f       	mul	r24, r18
    2768:	22 27       	eor	r18, r18
    276a:	b0 0d       	add	r27, r0
    276c:	a1 1d       	adc	r26, r1
    276e:	62 1f       	adc	r22, r18
    2770:	73 9f       	mul	r23, r19
    2772:	b0 0d       	add	r27, r0
    2774:	a1 1d       	adc	r26, r1
    2776:	62 1f       	adc	r22, r18
    2778:	83 9f       	mul	r24, r19
    277a:	a0 0d       	add	r26, r0
    277c:	61 1d       	adc	r22, r1
    277e:	22 1f       	adc	r18, r18
    2780:	74 9f       	mul	r23, r20
    2782:	33 27       	eor	r19, r19
    2784:	a0 0d       	add	r26, r0
    2786:	61 1d       	adc	r22, r1
    2788:	23 1f       	adc	r18, r19
    278a:	84 9f       	mul	r24, r20
    278c:	60 0d       	add	r22, r0
    278e:	21 1d       	adc	r18, r1
    2790:	82 2f       	mov	r24, r18
    2792:	76 2f       	mov	r23, r22
    2794:	6a 2f       	mov	r22, r26
    2796:	11 24       	eor	r1, r1
    2798:	9f 57       	subi	r25, 0x7F	; 127
    279a:	50 40       	sbci	r21, 0x00	; 0
    279c:	9a f0       	brmi	.+38     	; 0x27c4 <__mulsf3_pse+0x88>
    279e:	f1 f0       	breq	.+60     	; 0x27dc <__mulsf3_pse+0xa0>
    27a0:	88 23       	and	r24, r24
    27a2:	4a f0       	brmi	.+18     	; 0x27b6 <__mulsf3_pse+0x7a>
    27a4:	ee 0f       	add	r30, r30
    27a6:	ff 1f       	adc	r31, r31
    27a8:	bb 1f       	adc	r27, r27
    27aa:	66 1f       	adc	r22, r22
    27ac:	77 1f       	adc	r23, r23
    27ae:	88 1f       	adc	r24, r24
    27b0:	91 50       	subi	r25, 0x01	; 1
    27b2:	50 40       	sbci	r21, 0x00	; 0
    27b4:	a9 f7       	brne	.-22     	; 0x27a0 <__mulsf3_pse+0x64>
    27b6:	9e 3f       	cpi	r25, 0xFE	; 254
    27b8:	51 05       	cpc	r21, r1
    27ba:	80 f0       	brcs	.+32     	; 0x27dc <__mulsf3_pse+0xa0>
    27bc:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__fp_inf>
    27c0:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__fp_szero>
    27c4:	5f 3f       	cpi	r21, 0xFF	; 255
    27c6:	e4 f3       	brlt	.-8      	; 0x27c0 <__mulsf3_pse+0x84>
    27c8:	98 3e       	cpi	r25, 0xE8	; 232
    27ca:	d4 f3       	brlt	.-12     	; 0x27c0 <__mulsf3_pse+0x84>
    27cc:	86 95       	lsr	r24
    27ce:	77 95       	ror	r23
    27d0:	67 95       	ror	r22
    27d2:	b7 95       	ror	r27
    27d4:	f7 95       	ror	r31
    27d6:	e7 95       	ror	r30
    27d8:	9f 5f       	subi	r25, 0xFF	; 255
    27da:	c1 f7       	brne	.-16     	; 0x27cc <__mulsf3_pse+0x90>
    27dc:	fe 2b       	or	r31, r30
    27de:	88 0f       	add	r24, r24
    27e0:	91 1d       	adc	r25, r1
    27e2:	96 95       	lsr	r25
    27e4:	87 95       	ror	r24
    27e6:	97 f9       	bld	r25, 7
    27e8:	08 95       	ret

000027ea <strcat>:
    27ea:	fb 01       	movw	r30, r22
    27ec:	dc 01       	movw	r26, r24
    27ee:	0d 90       	ld	r0, X+
    27f0:	00 20       	and	r0, r0
    27f2:	e9 f7       	brne	.-6      	; 0x27ee <strcat+0x4>
    27f4:	11 97       	sbiw	r26, 0x01	; 1
    27f6:	01 90       	ld	r0, Z+
    27f8:	0d 92       	st	X+, r0
    27fa:	00 20       	and	r0, r0
    27fc:	e1 f7       	brne	.-8      	; 0x27f6 <strcat+0xc>
    27fe:	08 95       	ret

00002800 <strcmp>:
    2800:	fb 01       	movw	r30, r22
    2802:	dc 01       	movw	r26, r24
    2804:	8d 91       	ld	r24, X+
    2806:	01 90       	ld	r0, Z+
    2808:	80 19       	sub	r24, r0
    280a:	01 10       	cpse	r0, r1
    280c:	d9 f3       	breq	.-10     	; 0x2804 <strcmp+0x4>
    280e:	99 0b       	sbc	r25, r25
    2810:	08 95       	ret

00002812 <itoa>:
    2812:	45 32       	cpi	r20, 0x25	; 37
    2814:	51 05       	cpc	r21, r1
    2816:	20 f4       	brcc	.+8      	; 0x2820 <itoa+0xe>
    2818:	42 30       	cpi	r20, 0x02	; 2
    281a:	10 f0       	brcs	.+4      	; 0x2820 <itoa+0xe>
    281c:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__itoa_ncheck>
    2820:	fb 01       	movw	r30, r22
    2822:	10 82       	st	Z, r1
    2824:	cb 01       	movw	r24, r22
    2826:	08 95       	ret

00002828 <__itoa_ncheck>:
    2828:	bb 27       	eor	r27, r27
    282a:	4a 30       	cpi	r20, 0x0A	; 10
    282c:	31 f4       	brne	.+12     	; 0x283a <__itoa_ncheck+0x12>
    282e:	99 23       	and	r25, r25
    2830:	22 f4       	brpl	.+8      	; 0x283a <__itoa_ncheck+0x12>
    2832:	bd e2       	ldi	r27, 0x2D	; 45
    2834:	90 95       	com	r25
    2836:	81 95       	neg	r24
    2838:	9f 4f       	sbci	r25, 0xFF	; 255
    283a:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__utoa_common>

0000283e <__utoa_ncheck>:
    283e:	bb 27       	eor	r27, r27

00002840 <__utoa_common>:
    2840:	fb 01       	movw	r30, r22
    2842:	55 27       	eor	r21, r21
    2844:	aa 27       	eor	r26, r26
    2846:	88 0f       	add	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	aa 1f       	adc	r26, r26
    284c:	a4 17       	cp	r26, r20
    284e:	10 f0       	brcs	.+4      	; 0x2854 <__utoa_common+0x14>
    2850:	a4 1b       	sub	r26, r20
    2852:	83 95       	inc	r24
    2854:	50 51       	subi	r21, 0x10	; 16
    2856:	b9 f7       	brne	.-18     	; 0x2846 <__utoa_common+0x6>
    2858:	a0 5d       	subi	r26, 0xD0	; 208
    285a:	aa 33       	cpi	r26, 0x3A	; 58
    285c:	08 f0       	brcs	.+2      	; 0x2860 <__utoa_common+0x20>
    285e:	a9 5d       	subi	r26, 0xD9	; 217
    2860:	a1 93       	st	Z+, r26
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	79 f7       	brne	.-34     	; 0x2844 <__utoa_common+0x4>
    2866:	b1 11       	cpse	r27, r1
    2868:	b1 93       	st	Z+, r27
    286a:	11 92       	st	Z+, r1
    286c:	cb 01       	movw	r24, r22
    286e:	0c 94 39 14 	jmp	0x2872	; 0x2872 <strrev>

00002872 <strrev>:
    2872:	dc 01       	movw	r26, r24
    2874:	fc 01       	movw	r30, r24
    2876:	67 2f       	mov	r22, r23
    2878:	71 91       	ld	r23, Z+
    287a:	77 23       	and	r23, r23
    287c:	e1 f7       	brne	.-8      	; 0x2876 <strrev+0x4>
    287e:	32 97       	sbiw	r30, 0x02	; 2
    2880:	04 c0       	rjmp	.+8      	; 0x288a <strrev+0x18>
    2882:	7c 91       	ld	r23, X
    2884:	6d 93       	st	X+, r22
    2886:	70 83       	st	Z, r23
    2888:	62 91       	ld	r22, -Z
    288a:	ae 17       	cp	r26, r30
    288c:	bf 07       	cpc	r27, r31
    288e:	c8 f3       	brcs	.-14     	; 0x2882 <strrev+0x10>
    2890:	08 95       	ret

00002892 <_exit>:
    2892:	f8 94       	cli

00002894 <__stop_program>:
    2894:	ff cf       	rjmp	.-2      	; 0x2894 <__stop_program>
