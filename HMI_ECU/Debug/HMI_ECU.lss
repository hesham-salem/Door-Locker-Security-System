
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  00002c10  00002ca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b6  008000ce  008000ce  00002d12  2**0
                  ALLOC
  3 .stab         00003840  00000000  00000000  00002d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015db  00000000  00000000  00006554  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007b2f  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007b40  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00007b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  000080aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00008591  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  000085ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__ctors_end>
       4:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
       8:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
       c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
      10:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
      14:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
      18:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__vector_6>
      1c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
      20:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
      24:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__vector_9>
      28:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
      2c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
      30:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
      34:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
      38:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
      3c:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
      40:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
      44:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
      48:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
      4c:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__vector_19>
      50:	0c 94 98 00 	jmp	0x130	; 0x130 <__bad_interrupt>
      54:	85 04       	cpc	r8, r5
      56:	87 04       	cpc	r8, r7
      58:	89 04       	cpc	r8, r9
      5a:	8b 04       	cpc	r8, r11
      5c:	8d 04       	cpc	r8, r13
      5e:	8f 04       	cpc	r8, r15
      60:	91 04       	cpc	r9, r1
      62:	93 04       	cpc	r9, r3
      64:	95 04       	cpc	r9, r5
      66:	97 04       	cpc	r9, r7
      68:	99 04       	cpc	r9, r9
      6a:	9b 04       	cpc	r9, r11
      6c:	9d 04       	cpc	r9, r13
      6e:	9f 04       	cpc	r9, r15
      70:	a1 04       	cpc	r10, r1
      72:	a3 04       	cpc	r10, r3
      74:	07 63       	ori	r16, 0x37	; 55
      76:	42 36       	cpi	r20, 0x62	; 98
      78:	b7 9b       	sbis	0x16, 7	; 22
      7a:	d8 a7       	std	Y+40, r29	; 0x28
      7c:	1a 39       	cpi	r17, 0x9A	; 154
      7e:	68 56       	subi	r22, 0x68	; 104
      80:	18 ae       	std	Y+56, r1	; 0x38
      82:	ba ab       	std	Y+50, r27	; 0x32
      84:	55 8c       	ldd	r5, Z+29	; 0x1d
      86:	1d 3c       	cpi	r17, 0xCD	; 205
      88:	b7 cc       	rjmp	.-1682   	; 0xfffff9f8 <__eeprom_end+0xff7ef9f8>
      8a:	57 63       	ori	r21, 0x37	; 55
      8c:	bd 6d       	ori	r27, 0xDD	; 221
      8e:	ed fd       	.word	0xfded	; ????
      90:	75 3e       	cpi	r23, 0xE5	; 229
      92:	f6 17       	cp	r31, r22
      94:	72 31       	cpi	r23, 0x12	; 18
      96:	bf 00       	.word	0x00bf	; ????
      98:	00 00       	nop
      9a:	80 3f       	cpi	r24, 0xF0	; 240
      9c:	08 00       	.word	0x0008	; ????
      9e:	00 00       	nop
      a0:	be 92       	st	-X, r11
      a2:	24 49       	sbci	r18, 0x94	; 148
      a4:	12 3e       	cpi	r17, 0xE2	; 226
      a6:	ab aa       	std	Y+51, r10	; 0x33
      a8:	aa 2a       	or	r10, r26
      aa:	be cd       	rjmp	.-1156   	; 0xfffffc28 <__eeprom_end+0xff7efc28>
      ac:	cc cc       	rjmp	.-1640   	; 0xfffffa46 <__eeprom_end+0xff7efa46>
      ae:	4c 3e       	cpi	r20, 0xEC	; 236
      b0:	00 00       	nop
      b2:	00 80       	ld	r0, Z
      b4:	be ab       	std	Y+54, r27	; 0x36
      b6:	aa aa       	std	Y+50, r10	; 0x32
      b8:	aa 3e       	cpi	r26, 0xEA	; 234
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	bf 00       	.word	0x00bf	; ????
      c0:	00 00       	nop
      c2:	80 3f       	cpi	r24, 0xF0	; 240
      c4:	00 00       	nop
      c6:	00 00       	nop
      c8:	00 08       	sbc	r0, r0
      ca:	41 78       	andi	r20, 0x81	; 129
      cc:	d3 bb       	out	0x13, r29	; 19
      ce:	43 87       	std	Z+11, r20	; 0x0b
      d0:	d1 13       	cpse	r29, r17
      d2:	3d 19       	sub	r19, r13
      d4:	0e 3c       	cpi	r16, 0xCE	; 206
      d6:	c3 bd       	out	0x23, r28	; 35
      d8:	42 82       	std	Z+2, r4	; 0x02
      da:	ad 2b       	or	r26, r29
      dc:	3e 68       	ori	r19, 0x8E	; 142
      de:	ec 82       	std	Y+4, r14	; 0x04
      e0:	76 be       	out	0x36, r7	; 54
      e2:	d9 8f       	std	Y+25, r29	; 0x19
      e4:	e1 a9       	ldd	r30, Z+49	; 0x31
      e6:	3e 4c       	sbci	r19, 0xCE	; 206
      e8:	80 ef       	ldi	r24, 0xF0	; 240
      ea:	ff be       	out	0x3f, r15	; 63
      ec:	01 c4       	rjmp	.+2050   	; 0x8f0 <KeyPad_4x4_adjustSwitchNumber+0x1c>
      ee:	ff 7f       	andi	r31, 0xFF	; 255
      f0:	3f 00       	.word	0x003f	; ????
      f2:	00 00       	nop
	...

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf e5       	ldi	r28, 0x5F	; 95
      fc:	d4 e0       	ldi	r29, 0x04	; 4
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61

00000102 <__do_copy_data>:
     102:	10 e0       	ldi	r17, 0x00	; 0
     104:	a0 e6       	ldi	r26, 0x60	; 96
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	e0 e1       	ldi	r30, 0x10	; 16
     10a:	fc e2       	ldi	r31, 0x2C	; 44
     10c:	02 c0       	rjmp	.+4      	; 0x112 <__do_copy_data+0x10>
     10e:	05 90       	lpm	r0, Z+
     110:	0d 92       	st	X+, r0
     112:	ae 3c       	cpi	r26, 0xCE	; 206
     114:	b1 07       	cpc	r27, r17
     116:	d9 f7       	brne	.-10     	; 0x10e <__do_copy_data+0xc>

00000118 <__do_clear_bss>:
     118:	21 e0       	ldi	r18, 0x01	; 1
     11a:	ae ec       	ldi	r26, 0xCE	; 206
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	01 c0       	rjmp	.+2      	; 0x122 <.do_clear_bss_start>

00000120 <.do_clear_bss_loop>:
     120:	1d 92       	st	X+, r1

00000122 <.do_clear_bss_start>:
     122:	a4 38       	cpi	r26, 0x84	; 132
     124:	b2 07       	cpc	r27, r18
     126:	e1 f7       	brne	.-8      	; 0x120 <.do_clear_bss_loop>
     128:	0e 94 9a 00 	call	0x134	; 0x134 <main>
     12c:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <_exit>

00000130 <__bad_interrupt>:
     130:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000134 <main>:
uint8 enter=1;
uint8 strrr[16]="hesham";
void intgerToString(int data);
UART_configurationType UART_config ;
int main()
{
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
     13c:	2e 97       	sbiw	r28, 0x0e	; 14
     13e:	0f b6       	in	r0, 0x3f	; 63
     140:	f8 94       	cli
     142:	de bf       	out	0x3e, r29	; 62
     144:	0f be       	out	0x3f, r0	; 63
     146:	cd bf       	out	0x3d, r28	; 61
	UART_config.buadRate=9600;
     148:	80 e8       	ldi	r24, 0x80	; 128
     14a:	95 e2       	ldi	r25, 0x25	; 37
     14c:	a0 e0       	ldi	r26, 0x00	; 0
     14e:	b0 e0       	ldi	r27, 0x00	; 0
     150:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <UART_config+0x1>
     154:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <UART_config+0x2>
     158:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <UART_config+0x3>
     15c:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <UART_config+0x4>
	UART_config.character_size=8;
     160:	88 e0       	ldi	r24, 0x08	; 8
     162:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <UART_config>
	strcpy(UART_config.mode,"double speed");
     166:	8d e0       	ldi	r24, 0x0D	; 13
     168:	e1 e7       	ldi	r30, 0x71	; 113
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	ac e4       	ldi	r26, 0x4C	; 76
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	01 90       	ld	r0, Z+
     172:	0d 92       	st	X+, r0
     174:	8a 95       	dec	r24
     176:	e1 f7       	brne	.-8      	; 0x170 <main+0x3c>

LCD_init();
     178:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_init>
UART_init(&UART_config);
     17c:	87 e4       	ldi	r24, 0x47	; 71
     17e:	91 e0       	ldi	r25, 0x01	; 1
     180:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <UART_init>
EEPROM_init();
     184:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EEPROM_init>

while(1)
{


	key =KeyPad_getPressedKey();
     188:	0e 94 15 04 	call	0x82a	; 0x82a <KeyPad_getPressedKey>
     18c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__data_end>

	while(enter==1)
     190:	86 c0       	rjmp	.+268    	; 0x29e <main+0x16a>
	{
	key =KeyPad_getPressedKey();
     192:	0e 94 15 04 	call	0x82a	; 0x82a <KeyPad_getPressedKey>
     196:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__data_end>
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	a8 ec       	ldi	r26, 0xC8	; 200
     1a0:	b3 e4       	ldi	r27, 0x43	; 67
     1a2:	89 83       	std	Y+1, r24	; 0x01
     1a4:	9a 83       	std	Y+2, r25	; 0x02
     1a6:	ab 83       	std	Y+3, r26	; 0x03
     1a8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	4a ef       	ldi	r20, 0xFA	; 250
     1b0:	54 e4       	ldi	r21, 0x44	; 68
     1b2:	69 81       	ldd	r22, Y+1	; 0x01
     1b4:	7a 81       	ldd	r23, Y+2	; 0x02
     1b6:	8b 81       	ldd	r24, Y+3	; 0x03
     1b8:	9c 81       	ldd	r25, Y+4	; 0x04
     1ba:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
     1be:	dc 01       	movw	r26, r24
     1c0:	cb 01       	movw	r24, r22
     1c2:	8d 83       	std	Y+5, r24	; 0x05
     1c4:	9e 83       	std	Y+6, r25	; 0x06
     1c6:	af 83       	std	Y+7, r26	; 0x07
     1c8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	40 e8       	ldi	r20, 0x80	; 128
     1d0:	5f e3       	ldi	r21, 0x3F	; 63
     1d2:	6d 81       	ldd	r22, Y+5	; 0x05
     1d4:	7e 81       	ldd	r23, Y+6	; 0x06
     1d6:	8f 81       	ldd	r24, Y+7	; 0x07
     1d8:	98 85       	ldd	r25, Y+8	; 0x08
     1da:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__cmpsf2>
     1de:	88 23       	and	r24, r24
     1e0:	2c f4       	brge	.+10     	; 0x1ec <main+0xb8>
		__ticks = 1;
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	9a 87       	std	Y+10, r25	; 0x0a
     1e8:	89 87       	std	Y+9, r24	; 0x09
     1ea:	3f c0       	rjmp	.+126    	; 0x26a <main+0x136>
	else if (__tmp > 65535)
     1ec:	20 e0       	ldi	r18, 0x00	; 0
     1ee:	3f ef       	ldi	r19, 0xFF	; 255
     1f0:	4f e7       	ldi	r20, 0x7F	; 127
     1f2:	57 e4       	ldi	r21, 0x47	; 71
     1f4:	6d 81       	ldd	r22, Y+5	; 0x05
     1f6:	7e 81       	ldd	r23, Y+6	; 0x06
     1f8:	8f 81       	ldd	r24, Y+7	; 0x07
     1fa:	98 85       	ldd	r25, Y+8	; 0x08
     1fc:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gesf2>
     200:	18 16       	cp	r1, r24
     202:	4c f5       	brge	.+82     	; 0x256 <main+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	40 e2       	ldi	r20, 0x20	; 32
     20a:	51 e4       	ldi	r21, 0x41	; 65
     20c:	69 81       	ldd	r22, Y+1	; 0x01
     20e:	7a 81       	ldd	r23, Y+2	; 0x02
     210:	8b 81       	ldd	r24, Y+3	; 0x03
     212:	9c 81       	ldd	r25, Y+4	; 0x04
     214:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
     218:	dc 01       	movw	r26, r24
     21a:	cb 01       	movw	r24, r22
     21c:	bc 01       	movw	r22, r24
     21e:	cd 01       	movw	r24, r26
     220:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
     224:	dc 01       	movw	r26, r24
     226:	cb 01       	movw	r24, r22
     228:	9a 87       	std	Y+10, r25	; 0x0a
     22a:	89 87       	std	Y+9, r24	; 0x09
     22c:	0f c0       	rjmp	.+30     	; 0x24c <main+0x118>
     22e:	88 ec       	ldi	r24, 0xC8	; 200
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	9c 87       	std	Y+12, r25	; 0x0c
     234:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     236:	8b 85       	ldd	r24, Y+11	; 0x0b
     238:	9c 85       	ldd	r25, Y+12	; 0x0c
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <main+0x106>
     23e:	9c 87       	std	Y+12, r25	; 0x0c
     240:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     242:	89 85       	ldd	r24, Y+9	; 0x09
     244:	9a 85       	ldd	r25, Y+10	; 0x0a
     246:	01 97       	sbiw	r24, 0x01	; 1
     248:	9a 87       	std	Y+10, r25	; 0x0a
     24a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24c:	89 85       	ldd	r24, Y+9	; 0x09
     24e:	9a 85       	ldd	r25, Y+10	; 0x0a
     250:	89 2b       	or	r24, r25
     252:	69 f7       	brne	.-38     	; 0x22e <main+0xfa>
     254:	14 c0       	rjmp	.+40     	; 0x27e <main+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     256:	6d 81       	ldd	r22, Y+5	; 0x05
     258:	7e 81       	ldd	r23, Y+6	; 0x06
     25a:	8f 81       	ldd	r24, Y+7	; 0x07
     25c:	98 85       	ldd	r25, Y+8	; 0x08
     25e:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
     262:	dc 01       	movw	r26, r24
     264:	cb 01       	movw	r24, r22
     266:	9a 87       	std	Y+10, r25	; 0x0a
     268:	89 87       	std	Y+9, r24	; 0x09
     26a:	89 85       	ldd	r24, Y+9	; 0x09
     26c:	9a 85       	ldd	r25, Y+10	; 0x0a
     26e:	9e 87       	std	Y+14, r25	; 0x0e
     270:	8d 87       	std	Y+13, r24	; 0x0d
     272:	8d 85       	ldd	r24, Y+13	; 0x0d
     274:	9e 85       	ldd	r25, Y+14	; 0x0e
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	f1 f7       	brne	.-4      	; 0x276 <main+0x142>
     27a:	9e 87       	std	Y+14, r25	; 0x0e
     27c:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(400);
	if(key==13)
     27e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__data_end>
     282:	8d 30       	cpi	r24, 0x0D	; 13
     284:	91 f0       	breq	.+36     	; 0x2aa <main+0x176>
		break;
	intgerToString(key);
     286:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__data_end>
     28a:	88 2f       	mov	r24, r24
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 5f 01 	call	0x2be	; 0x2be <intgerToString>
	strcat(str,buff);
     292:	67 e3       	ldi	r22, 0x37	; 55
     294:	71 e0       	ldi	r23, 0x01	; 1
     296:	8f ec       	ldi	r24, 0xCF	; 207
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <strcat>
{


	key =KeyPad_getPressedKey();

	while(enter==1)
     29e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	09 f4       	brne	.+2      	; 0x2a8 <main+0x174>
     2a6:	75 cf       	rjmp	.-278    	; 0x192 <main+0x5e>
     2a8:	01 c0       	rjmp	.+2      	; 0x2ac <main+0x178>
	{
	key =KeyPad_getPressedKey();
	_delay_ms(400);
	if(key==13)
		break;
     2aa:	00 00       	nop
	intgerToString(key);
	strcat(str,buff);
	}
	LCD_displayString(str);
     2ac:	8f ec       	ldi	r24, 0xCF	; 207
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <LCD_displayString>
	UART_sendString(str);
     2b4:	8f ec       	ldi	r24, 0xCF	; 207
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 5d 11 	call	0x22ba	; 0x22ba <UART_sendString>
}
     2bc:	65 cf       	rjmp	.-310    	; 0x188 <main+0x54>

000002be <intgerToString>:
}
void intgerToString(int data)
{
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <intgerToString+0x6>
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	9a 83       	std	Y+2, r25	; 0x02
     2ca:	89 83       	std	Y+1, r24	; 0x01
	/* buffer to hold acii result */
	itoa(data,buff,10); /* 10 for decimal base */
     2cc:	89 81       	ldd	r24, Y+1	; 0x01
     2ce:	9a 81       	ldd	r25, Y+2	; 0x02
     2d0:	4a e0       	ldi	r20, 0x0A	; 10
     2d2:	50 e0       	ldi	r21, 0x00	; 0
     2d4:	67 e3       	ldi	r22, 0x37	; 55
     2d6:	71 e0       	ldi	r23, 0x01	; 1
     2d8:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <itoa>
}
     2dc:	00 00       	nop
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <EEPROM_init>:
#include "i2c.h"
#include "external_eeprom.h"

TWI_configurationType TWI_config;
void EEPROM_init(void)
{
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62
	TWI_config.baudRate=400000;
     2f0:	80 e8       	ldi	r24, 0x80	; 128
     2f2:	9a e1       	ldi	r25, 0x1A	; 26
     2f4:	a6 e0       	ldi	r26, 0x06	; 6
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <TWI_config>
     2fc:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <TWI_config+0x1>
     300:	a0 93 80 01 	sts	0x0180, r26	; 0x800180 <TWI_config+0x2>
     304:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <TWI_config+0x3>
	TWI_config.prescasler=0;
     308:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <TWI_config+0x4>
	TWI_config.slave_address=0b00001011;
     30c:	8b e0       	ldi	r24, 0x0B	; 11
     30e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <TWI_config+0x5>

TWI_init(&TWI_config);
     312:	8e e7       	ldi	r24, 0x7E	; 126
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	0e 94 12 03 	call	0x624	; 0x624 <TWI_init>
}
     31a:	00 00       	nop
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	00 d0       	rcall	.+0      	; 0x328 <EEPROM_writeByte+0x6>
     328:	1f 92       	push	r1
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	9a 83       	std	Y+2, r25	; 0x02
     330:	89 83       	std	Y+1, r24	; 0x01
     332:	6b 83       	std	Y+3, r22	; 0x03

	TWI_start();
     334:	0e 94 9e 03 	call	0x73c	; 0x73c <TWI_start>
	if(TWI_getStatus()!=TW_START)
     338:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     33c:	88 30       	cpi	r24, 0x08	; 8
     33e:	11 f0       	breq	.+4      	; 0x344 <EEPROM_writeByte+0x22>
	return 1;
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	27 c0       	rjmp	.+78     	; 0x392 <EEPROM_writeByte+0x70>

	TWI_write((uint8)(0xA0|((u16addr&0X0700)>>7)));
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	9a 81       	ldd	r25, Y+2	; 0x02
     348:	88 27       	eor	r24, r24
     34a:	97 70       	andi	r25, 0x07	; 7
     34c:	88 0f       	add	r24, r24
     34e:	89 2f       	mov	r24, r25
     350:	88 1f       	adc	r24, r24
     352:	99 0b       	sbc	r25, r25
     354:	91 95       	neg	r25
     356:	80 6a       	ori	r24, 0xA0	; 160
     358:	0e 94 bf 03 	call	0x77e	; 0x77e <TWI_write>
	if(TWI_getStatus()!=TW_MT_SLA_W_ACK)
     35c:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     360:	88 31       	cpi	r24, 0x18	; 24
     362:	11 f0       	breq	.+4      	; 0x368 <EEPROM_writeByte+0x46>
		return 2;
     364:	82 e0       	ldi	r24, 0x02	; 2
     366:	15 c0       	rjmp	.+42     	; 0x392 <EEPROM_writeByte+0x70>


	TWI_write((uint8)u16addr);
     368:	89 81       	ldd	r24, Y+1	; 0x01
     36a:	0e 94 bf 03 	call	0x77e	; 0x77e <TWI_write>
	if(TWI_getStatus()!=TW_MT_DATA_ACK)
     36e:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     372:	88 32       	cpi	r24, 0x28	; 40
     374:	11 f0       	breq	.+4      	; 0x37a <EEPROM_writeByte+0x58>
			return 0x80;
     376:	80 e8       	ldi	r24, 0x80	; 128
     378:	0c c0       	rjmp	.+24     	; 0x392 <EEPROM_writeByte+0x70>


	TWI_write(u8data);
     37a:	8b 81       	ldd	r24, Y+3	; 0x03
     37c:	0e 94 bf 03 	call	0x77e	; 0x77e <TWI_write>
	if(TWI_getStatus()!=TW_MT_DATA_ACK)
     380:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     384:	88 32       	cpi	r24, 0x28	; 40
     386:	11 f0       	breq	.+4      	; 0x38c <EEPROM_writeByte+0x6a>
			return 4;
     388:	84 e0       	ldi	r24, 0x04	; 4
     38a:	03 c0       	rjmp	.+6      	; 0x392 <EEPROM_writeByte+0x70>

	TWI_stop();
     38c:	0e 94 b2 03 	call	0x764	; 0x764 <TWI_stop>
	return 5;
     390:	85 e0       	ldi	r24, 0x05	; 5
}
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	08 95       	ret

0000039e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <EEPROM_readByte+0x6>
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <EEPROM_readByte+0x8>
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
     3aa:	9a 83       	std	Y+2, r25	; 0x02
     3ac:	89 83       	std	Y+1, r24	; 0x01
     3ae:	7c 83       	std	Y+4, r23	; 0x04
     3b0:	6b 83       	std	Y+3, r22	; 0x03
	TWI_start();
     3b2:	0e 94 9e 03 	call	0x73c	; 0x73c <TWI_start>
		if(TWI_getStatus()!=TW_START)
     3b6:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     3ba:	88 30       	cpi	r24, 0x08	; 8
     3bc:	11 f0       	breq	.+4      	; 0x3c2 <EEPROM_readByte+0x24>
		return ERROR;
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	49 c0       	rjmp	.+146    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>

		TWI_write((uint8)(0xA0|((u16addr&0X0700)>>7)));
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
     3c4:	9a 81       	ldd	r25, Y+2	; 0x02
     3c6:	88 27       	eor	r24, r24
     3c8:	97 70       	andi	r25, 0x07	; 7
     3ca:	88 0f       	add	r24, r24
     3cc:	89 2f       	mov	r24, r25
     3ce:	88 1f       	adc	r24, r24
     3d0:	99 0b       	sbc	r25, r25
     3d2:	91 95       	neg	r25
     3d4:	80 6a       	ori	r24, 0xA0	; 160
     3d6:	0e 94 bf 03 	call	0x77e	; 0x77e <TWI_write>
		if(TWI_getStatus()!=TW_MT_SLA_W_ACK)
     3da:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     3de:	88 31       	cpi	r24, 0x18	; 24
     3e0:	11 f0       	breq	.+4      	; 0x3e6 <EEPROM_readByte+0x48>
			return ERROR;
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	37 c0       	rjmp	.+110    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>


		TWI_write((uint8)u16addr);
     3e6:	89 81       	ldd	r24, Y+1	; 0x01
     3e8:	0e 94 bf 03 	call	0x77e	; 0x77e <TWI_write>
		if(TWI_getStatus()!=TW_MT_DATA_ACK)
     3ec:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     3f0:	88 32       	cpi	r24, 0x28	; 40
     3f2:	11 f0       	breq	.+4      	; 0x3f8 <EEPROM_readByte+0x5a>
				return ERROR;
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	2e c0       	rjmp	.+92     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>


		TWI_write(u8data);
     3f8:	8b 81       	ldd	r24, Y+3	; 0x03
     3fa:	9c 81       	ldd	r25, Y+4	; 0x04
     3fc:	0e 94 bf 03 	call	0x77e	; 0x77e <TWI_write>
		if(TWI_getStatus()!=TW_MT_DATA_ACK)
     400:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     404:	88 32       	cpi	r24, 0x28	; 40
     406:	11 f0       	breq	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
				return ERROR;
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	24 c0       	rjmp	.+72     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		TWI_start();
     40c:	0e 94 9e 03 	call	0x73c	; 0x73c <TWI_start>
		if(TWI_getStatus()!=TW_REP_START)
     410:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     414:	80 31       	cpi	r24, 0x10	; 16
     416:	11 f0       	breq	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
						return ERROR;
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	1c c0       	rjmp	.+56     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>

		TWI_write((uint8)((0xA0)|((u16addr&0X0700)>>7)|1));
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	9a 81       	ldd	r25, Y+2	; 0x02
     420:	88 27       	eor	r24, r24
     422:	97 70       	andi	r25, 0x07	; 7
     424:	88 0f       	add	r24, r24
     426:	89 2f       	mov	r24, r25
     428:	88 1f       	adc	r24, r24
     42a:	99 0b       	sbc	r25, r25
     42c:	91 95       	neg	r25
     42e:	81 6a       	ori	r24, 0xA1	; 161
     430:	0e 94 bf 03 	call	0x77e	; 0x77e <TWI_write>
		if(TWI_getStatus()!=TW_MT_SLA_R_ACK)
     434:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     438:	80 34       	cpi	r24, 0x40	; 64
     43a:	11 f0       	breq	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
						return ERROR;
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	0a c0       	rjmp	.+20     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>


			*u8data=TWI_read_with_NACK();
     440:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <TWI_read_with_NACK>
     444:	28 2f       	mov	r18, r24
     446:	8b 81       	ldd	r24, Y+3	; 0x03
     448:	9c 81       	ldd	r25, Y+4	; 0x04
     44a:	fc 01       	movw	r30, r24
     44c:	20 83       	st	Z, r18
			if(TWI_getStatus()!=TW_MR_DATA_NACK);
     44e:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
					return ERROR;
     452:	80 e0       	ldi	r24, 0x00	; 0

			TWI_stop();
			return SUCCESS;

}
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	08 95       	ret

00000462 <EEPROM_writeString>:
uint8 EEPROM_writeString(uint16 u16addr, uint8* str)
{
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	00 d0       	rcall	.+0      	; 0x468 <EEPROM_writeString+0x6>
     468:	00 d0       	rcall	.+0      	; 0x46a <EEPROM_writeString+0x8>
     46a:	1f 92       	push	r1
     46c:	cd b7       	in	r28, 0x3d	; 61
     46e:	de b7       	in	r29, 0x3e	; 62
     470:	9b 83       	std	Y+3, r25	; 0x03
     472:	8a 83       	std	Y+2, r24	; 0x02
     474:	7d 83       	std	Y+5, r23	; 0x05
     476:	6c 83       	std	Y+4, r22	; 0x04

	TWI_start();
     478:	0e 94 9e 03 	call	0x73c	; 0x73c <TWI_start>
	if(TWI_getStatus()!=TW_START)
     47c:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     480:	88 30       	cpi	r24, 0x08	; 8
     482:	11 f0       	breq	.+4      	; 0x488 <EEPROM_writeString+0x26>
	return 1;
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	42 c0       	rjmp	.+132    	; 0x50c <EEPROM_writeString+0xaa>

	TWI_write((uint8)(0xA0|((u16addr&0X0700)>>7)));
     488:	8a 81       	ldd	r24, Y+2	; 0x02
     48a:	9b 81       	ldd	r25, Y+3	; 0x03
     48c:	88 27       	eor	r24, r24
     48e:	97 70       	andi	r25, 0x07	; 7
     490:	88 0f       	add	r24, r24
     492:	89 2f       	mov	r24, r25
     494:	88 1f       	adc	r24, r24
     496:	99 0b       	sbc	r25, r25
     498:	91 95       	neg	r25
     49a:	80 6a       	ori	r24, 0xA0	; 160
     49c:	0e 94 bf 03 	call	0x77e	; 0x77e <TWI_write>
	if(TWI_getStatus()!=TW_MT_SLA_W_ACK)
     4a0:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     4a4:	88 31       	cpi	r24, 0x18	; 24
     4a6:	11 f0       	breq	.+4      	; 0x4ac <EEPROM_writeString+0x4a>
		return 2;
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	30 c0       	rjmp	.+96     	; 0x50c <EEPROM_writeString+0xaa>


	TWI_write((uint8)u16addr);
     4ac:	8a 81       	ldd	r24, Y+2	; 0x02
     4ae:	0e 94 bf 03 	call	0x77e	; 0x77e <TWI_write>
	if(TWI_getStatus()!=TW_MT_DATA_ACK)
     4b2:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     4b6:	88 32       	cpi	r24, 0x28	; 40
     4b8:	11 f0       	breq	.+4      	; 0x4be <EEPROM_writeString+0x5c>
			return 0x80;
     4ba:	80 e8       	ldi	r24, 0x80	; 128
     4bc:	27 c0       	rjmp	.+78     	; 0x50c <EEPROM_writeString+0xaa>

for(uint8 i=0;str[i]!='\0';i++)
     4be:	19 82       	std	Y+1, r1	; 0x01
     4c0:	14 c0       	rjmp	.+40     	; 0x4ea <EEPROM_writeString+0x88>
{


	TWI_write(str[i]);
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	88 2f       	mov	r24, r24
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	2c 81       	ldd	r18, Y+4	; 0x04
     4ca:	3d 81       	ldd	r19, Y+5	; 0x05
     4cc:	82 0f       	add	r24, r18
     4ce:	93 1f       	adc	r25, r19
     4d0:	fc 01       	movw	r30, r24
     4d2:	80 81       	ld	r24, Z
     4d4:	0e 94 bf 03 	call	0x77e	; 0x77e <TWI_write>
	if(TWI_getStatus()!=TW_MT_DATA_ACK)
     4d8:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     4dc:	88 32       	cpi	r24, 0x28	; 40
     4de:	11 f0       	breq	.+4      	; 0x4e4 <EEPROM_writeString+0x82>
			return 4;
     4e0:	84 e0       	ldi	r24, 0x04	; 4
     4e2:	14 c0       	rjmp	.+40     	; 0x50c <EEPROM_writeString+0xaa>

	TWI_write((uint8)u16addr);
	if(TWI_getStatus()!=TW_MT_DATA_ACK)
			return 0x80;

for(uint8 i=0;str[i]!='\0';i++)
     4e4:	89 81       	ldd	r24, Y+1	; 0x01
     4e6:	8f 5f       	subi	r24, 0xFF	; 255
     4e8:	89 83       	std	Y+1, r24	; 0x01
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	88 2f       	mov	r24, r24
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	2c 81       	ldd	r18, Y+4	; 0x04
     4f2:	3d 81       	ldd	r19, Y+5	; 0x05
     4f4:	82 0f       	add	r24, r18
     4f6:	93 1f       	adc	r25, r19
     4f8:	fc 01       	movw	r30, r24
     4fa:	80 81       	ld	r24, Z
     4fc:	88 23       	and	r24, r24
     4fe:	09 f7       	brne	.-62     	; 0x4c2 <EEPROM_writeString+0x60>

	TWI_write(str[i]);
	if(TWI_getStatus()!=TW_MT_DATA_ACK)
			return 4;
}
TWI_write('\0');
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 bf 03 	call	0x77e	; 0x77e <TWI_write>

	TWI_stop();
     506:	0e 94 b2 03 	call	0x764	; 0x764 <TWI_stop>
	return 5;
     50a:	85 e0       	ldi	r24, 0x05	; 5
}
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <EEPROM_readString>:
uint8 EEPROM_readString(uint16 u16addr, uint8 *str)
{
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	00 d0       	rcall	.+0      	; 0x526 <EEPROM_readString+0xa>
     526:	00 d0       	rcall	.+0      	; 0x528 <EEPROM_readString+0xc>
     528:	1f 92       	push	r1
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	9b 83       	std	Y+3, r25	; 0x03
     530:	8a 83       	std	Y+2, r24	; 0x02
     532:	7d 83       	std	Y+5, r23	; 0x05
     534:	6c 83       	std	Y+4, r22	; 0x04
	TWI_start();
     536:	0e 94 9e 03 	call	0x73c	; 0x73c <TWI_start>
		if(TWI_getStatus()!=TW_START)
     53a:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     53e:	88 30       	cpi	r24, 0x08	; 8
     540:	11 f0       	breq	.+4      	; 0x546 <EEPROM_readString+0x2a>
		return ERROR;
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	65 c0       	rjmp	.+202    	; 0x610 <EEPROM_readString+0xf4>

		TWI_write((uint8)(0xA0|((u16addr&0X0700)>>7)));
     546:	8a 81       	ldd	r24, Y+2	; 0x02
     548:	9b 81       	ldd	r25, Y+3	; 0x03
     54a:	88 27       	eor	r24, r24
     54c:	97 70       	andi	r25, 0x07	; 7
     54e:	88 0f       	add	r24, r24
     550:	89 2f       	mov	r24, r25
     552:	88 1f       	adc	r24, r24
     554:	99 0b       	sbc	r25, r25
     556:	91 95       	neg	r25
     558:	80 6a       	ori	r24, 0xA0	; 160
     55a:	0e 94 bf 03 	call	0x77e	; 0x77e <TWI_write>
		if(TWI_getStatus()!=TW_MT_SLA_W_ACK)
     55e:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     562:	88 31       	cpi	r24, 0x18	; 24
     564:	11 f0       	breq	.+4      	; 0x56a <EEPROM_readString+0x4e>
			return ERROR;
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	53 c0       	rjmp	.+166    	; 0x610 <EEPROM_readString+0xf4>


		TWI_write((uint8)u16addr);
     56a:	8a 81       	ldd	r24, Y+2	; 0x02
     56c:	0e 94 bf 03 	call	0x77e	; 0x77e <TWI_write>
		if(TWI_getStatus()!=TW_MT_DATA_ACK)
     570:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     574:	88 32       	cpi	r24, 0x28	; 40
     576:	11 f0       	breq	.+4      	; 0x57c <EEPROM_readString+0x60>
				return ERROR;
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	4a c0       	rjmp	.+148    	; 0x610 <EEPROM_readString+0xf4>


	//	TWI_write(u8data);
		//if(TWI_getStatus()!=TW_MT_DATA_ACK)
		//		return ERROR;
		TWI_start();
     57c:	0e 94 9e 03 	call	0x73c	; 0x73c <TWI_start>
		if(TWI_getStatus()!=TW_REP_START)
     580:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     584:	80 31       	cpi	r24, 0x10	; 16
     586:	11 f0       	breq	.+4      	; 0x58c <EEPROM_readString+0x70>
						return ERROR;
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	42 c0       	rjmp	.+132    	; 0x610 <EEPROM_readString+0xf4>

		TWI_write((uint8)((0xA0)|((u16addr&0X0700)>>7)|1));
     58c:	8a 81       	ldd	r24, Y+2	; 0x02
     58e:	9b 81       	ldd	r25, Y+3	; 0x03
     590:	88 27       	eor	r24, r24
     592:	97 70       	andi	r25, 0x07	; 7
     594:	88 0f       	add	r24, r24
     596:	89 2f       	mov	r24, r25
     598:	88 1f       	adc	r24, r24
     59a:	99 0b       	sbc	r25, r25
     59c:	91 95       	neg	r25
     59e:	81 6a       	ori	r24, 0xA1	; 161
     5a0:	0e 94 bf 03 	call	0x77e	; 0x77e <TWI_write>
		if(TWI_getStatus()!=TW_MT_SLA_R_ACK)
     5a4:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     5a8:	80 34       	cpi	r24, 0x40	; 64
     5aa:	11 f0       	breq	.+4      	; 0x5b0 <EEPROM_readString+0x94>
						return ERROR;
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	30 c0       	rjmp	.+96     	; 0x610 <EEPROM_readString+0xf4>
		uint8 i;
		str[0]=TWI_read_with_NACK();
     5b0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <TWI_read_with_NACK>
     5b4:	28 2f       	mov	r18, r24
     5b6:	8c 81       	ldd	r24, Y+4	; 0x04
     5b8:	9d 81       	ldd	r25, Y+5	; 0x05
     5ba:	fc 01       	movw	r30, r24
     5bc:	20 83       	st	Z, r18
				if(TWI_getStatus()!=TW_MR_DATA_NACK)
     5be:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     5c2:	88 35       	cpi	r24, 0x58	; 88
     5c4:	b9 f0       	breq	.+46     	; 0x5f4 <EEPROM_readString+0xd8>
					return ERROR;
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	23 c0       	rjmp	.+70     	; 0x610 <EEPROM_readString+0xf4>
		while(str[i]!='\0')
					{
			i++;
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	8f 5f       	subi	r24, 0xFF	; 255
     5ce:	89 83       	std	Y+1, r24	; 0x01
			str[i]=TWI_read_with_NACK();
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	88 2f       	mov	r24, r24
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	2c 81       	ldd	r18, Y+4	; 0x04
     5d8:	3d 81       	ldd	r19, Y+5	; 0x05
     5da:	89 01       	movw	r16, r18
     5dc:	08 0f       	add	r16, r24
     5de:	19 1f       	adc	r17, r25
     5e0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <TWI_read_with_NACK>
     5e4:	f8 01       	movw	r30, r16
     5e6:	80 83       	st	Z, r24
							if(TWI_getStatus()!=TW_MR_DATA_NACK)
     5e8:	0e 94 09 04 	call	0x812	; 0x812 <TWI_getStatus>
     5ec:	88 35       	cpi	r24, 0x58	; 88
     5ee:	11 f0       	breq	.+4      	; 0x5f4 <EEPROM_readString+0xd8>
								return ERROR;
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	0e c0       	rjmp	.+28     	; 0x610 <EEPROM_readString+0xf4>
						return ERROR;
		uint8 i;
		str[0]=TWI_read_with_NACK();
				if(TWI_getStatus()!=TW_MR_DATA_NACK)
					return ERROR;
		while(str[i]!='\0')
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	88 2f       	mov	r24, r24
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	2c 81       	ldd	r18, Y+4	; 0x04
     5fc:	3d 81       	ldd	r19, Y+5	; 0x05
     5fe:	82 0f       	add	r24, r18
     600:	93 1f       	adc	r25, r19
     602:	fc 01       	movw	r30, r24
     604:	80 81       	ld	r24, Z
     606:	88 23       	and	r24, r24
     608:	01 f7       	brne	.-64     	; 0x5ca <EEPROM_readString+0xae>
			i++;
			str[i]=TWI_read_with_NACK();
							if(TWI_getStatus()!=TW_MR_DATA_NACK)
								return ERROR;
					}
			TWI_stop();
     60a:	0e 94 b2 03 	call	0x764	; 0x764 <TWI_stop>
			return SUCCESS;
     60e:	81 e0       	ldi	r24, 0x01	; 1

}
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	08 95       	ret

00000624 <TWI_init>:
 *      Author: hesham
 */
#include"i2c.h"

void TWI_init(const TWI_configurationType *config)
{
     624:	cf 92       	push	r12
     626:	df 92       	push	r13
     628:	ef 92       	push	r14
     62a:	ff 92       	push	r15
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	00 d0       	rcall	.+0      	; 0x636 <TWI_init+0x12>
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	9a 83       	std	Y+2, r25	; 0x02
     63c:	89 83       	std	Y+1, r24	; 0x01
	//TWBR=0X02;//buad rate
	TWBR=((float)F_CPU/config->baudRate +16)/(2*pow(4,config->prescasler));
     63e:	00 e2       	ldi	r16, 0x20	; 32
     640:	10 e0       	ldi	r17, 0x00	; 0
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	9a 81       	ldd	r25, Y+2	; 0x02
     646:	fc 01       	movw	r30, r24
     648:	80 81       	ld	r24, Z
     64a:	91 81       	ldd	r25, Z+1	; 0x01
     64c:	a2 81       	ldd	r26, Z+2	; 0x02
     64e:	b3 81       	ldd	r27, Z+3	; 0x03
     650:	bc 01       	movw	r22, r24
     652:	cd 01       	movw	r24, r26
     654:	0e 94 09 13 	call	0x2612	; 0x2612 <__floatunsisf>
     658:	dc 01       	movw	r26, r24
     65a:	cb 01       	movw	r24, r22
     65c:	9c 01       	movw	r18, r24
     65e:	ad 01       	movw	r20, r26
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	74 e2       	ldi	r23, 0x24	; 36
     664:	84 ef       	ldi	r24, 0xF4	; 244
     666:	9a e4       	ldi	r25, 0x4A	; 74
     668:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__divsf3>
     66c:	dc 01       	movw	r26, r24
     66e:	cb 01       	movw	r24, r22
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	40 e8       	ldi	r20, 0x80	; 128
     676:	51 e4       	ldi	r21, 0x41	; 65
     678:	bc 01       	movw	r22, r24
     67a:	cd 01       	movw	r24, r26
     67c:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__addsf3>
     680:	dc 01       	movw	r26, r24
     682:	cb 01       	movw	r24, r22
     684:	6c 01       	movw	r12, r24
     686:	7d 01       	movw	r14, r26
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	9a 81       	ldd	r25, Y+2	; 0x02
     68c:	fc 01       	movw	r30, r24
     68e:	84 81       	ldd	r24, Z+4	; 0x04
     690:	88 2f       	mov	r24, r24
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	a0 e0       	ldi	r26, 0x00	; 0
     696:	b0 e0       	ldi	r27, 0x00	; 0
     698:	bc 01       	movw	r22, r24
     69a:	cd 01       	movw	r24, r26
     69c:	0e 94 09 13 	call	0x2612	; 0x2612 <__floatunsisf>
     6a0:	dc 01       	movw	r26, r24
     6a2:	cb 01       	movw	r24, r22
     6a4:	9c 01       	movw	r18, r24
     6a6:	ad 01       	movw	r20, r26
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	80 e8       	ldi	r24, 0x80	; 128
     6ae:	90 e4       	ldi	r25, 0x40	; 64
     6b0:	0e 94 2d 14 	call	0x285a	; 0x285a <pow>
     6b4:	dc 01       	movw	r26, r24
     6b6:	cb 01       	movw	r24, r22
     6b8:	9c 01       	movw	r18, r24
     6ba:	ad 01       	movw	r20, r26
     6bc:	bc 01       	movw	r22, r24
     6be:	cd 01       	movw	r24, r26
     6c0:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__addsf3>
     6c4:	dc 01       	movw	r26, r24
     6c6:	cb 01       	movw	r24, r22
     6c8:	9c 01       	movw	r18, r24
     6ca:	ad 01       	movw	r20, r26
     6cc:	c7 01       	movw	r24, r14
     6ce:	b6 01       	movw	r22, r12
     6d0:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__divsf3>
     6d4:	dc 01       	movw	r26, r24
     6d6:	cb 01       	movw	r24, r22
     6d8:	bc 01       	movw	r22, r24
     6da:	cd 01       	movw	r24, r26
     6dc:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
     6e0:	dc 01       	movw	r26, r24
     6e2:	cb 01       	movw	r24, r22
     6e4:	f8 01       	movw	r30, r16
     6e6:	80 83       	st	Z, r24
	TWSR=0X00; //prescaler
     6e8:	81 e2       	ldi	r24, 0x21	; 33
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	fc 01       	movw	r30, r24
     6ee:	10 82       	st	Z, r1
	TWSR=config->prescasler;
     6f0:	81 e2       	ldi	r24, 0x21	; 33
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	29 81       	ldd	r18, Y+1	; 0x01
     6f6:	3a 81       	ldd	r19, Y+2	; 0x02
     6f8:	f9 01       	movw	r30, r18
     6fa:	24 81       	ldd	r18, Z+4	; 0x04
     6fc:	fc 01       	movw	r30, r24
     6fe:	20 83       	st	Z, r18
	 TWAR=config->slave_address<<1;// adress+ other bit
     700:	82 e2       	ldi	r24, 0x22	; 34
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	29 81       	ldd	r18, Y+1	; 0x01
     706:	3a 81       	ldd	r19, Y+2	; 0x02
     708:	f9 01       	movw	r30, r18
     70a:	25 81       	ldd	r18, Z+5	; 0x05
     70c:	22 0f       	add	r18, r18
     70e:	fc 01       	movw	r30, r24
     710:	20 83       	st	Z, r18
	TWCR|=(1<<TWEN);// دائما فى الاخر
     712:	86 e5       	ldi	r24, 0x56	; 86
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	26 e5       	ldi	r18, 0x56	; 86
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	f9 01       	movw	r30, r18
     71c:	20 81       	ld	r18, Z
     71e:	24 60       	ori	r18, 0x04	; 4
     720:	fc 01       	movw	r30, r24
     722:	20 83       	st	Z, r18

}
     724:	00 00       	nop
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	cf 90       	pop	r12
     73a:	08 95       	ret

0000073c <TWI_start>:
void TWI_start(void)
{
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
	//make enable again to force other bits in the register to be zero
	//start bit and clear done flag
TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     744:	86 e5       	ldi	r24, 0x56	; 86
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	24 ea       	ldi	r18, 0xA4	; 164
     74a:	fc 01       	movw	r30, r24
     74c:	20 83       	st	Z, r18
while(BIT_IS_CLEAR(TWCR,TWINT));// WAIT acation done
     74e:	00 00       	nop
     750:	86 e5       	ldi	r24, 0x56	; 86
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	fc 01       	movw	r30, r24
     756:	80 81       	ld	r24, Z
     758:	88 23       	and	r24, r24
     75a:	d4 f7       	brge	.-12     	; 0x750 <TWI_start+0x14>
}
     75c:	00 00       	nop
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <TWI_stop>:
void TWI_stop(void)
{
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     76c:	86 e5       	ldi	r24, 0x56	; 86
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	24 e9       	ldi	r18, 0x94	; 148
     772:	fc 01       	movw	r30, r24
     774:	20 83       	st	Z, r18

//NO NEED TO WAIT twint flag
}
     776:	00 00       	nop
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	08 95       	ret

0000077e <TWI_write>:
void TWI_write(uint8 data)
{
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	1f 92       	push	r1
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	89 83       	std	Y+1, r24	; 0x01

	TWDR=data;
     78a:	83 e2       	ldi	r24, 0x23	; 35
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	29 81       	ldd	r18, Y+1	; 0x01
     790:	fc 01       	movw	r30, r24
     792:	20 83       	st	Z, r18

	TWCR=(1<<TWINT)|(1<<TWEN);
     794:	86 e5       	ldi	r24, 0x56	; 86
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	24 e8       	ldi	r18, 0x84	; 132
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18

	while(BIT_IS_CLEAR(TWCR,TWINT));
     79e:	00 00       	nop
     7a0:	86 e5       	ldi	r24, 0x56	; 86
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	fc 01       	movw	r30, r24
     7a6:	80 81       	ld	r24, Z
     7a8:	88 23       	and	r24, r24
     7aa:	d4 f7       	brge	.-12     	; 0x7a0 <TWI_write+0x22>

}
     7ac:	00 00       	nop
     7ae:	0f 90       	pop	r0
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <TWI_read_with_ACK>:
uint8 TWI_read_with_ACK(void)
{
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
     7be:	86 e5       	ldi	r24, 0x56	; 86
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	24 ec       	ldi	r18, 0xC4	; 196
     7c4:	fc 01       	movw	r30, r24
     7c6:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(TWCR,TWINT));
     7c8:	00 00       	nop
     7ca:	86 e5       	ldi	r24, 0x56	; 86
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	fc 01       	movw	r30, r24
     7d0:	80 81       	ld	r24, Z
     7d2:	88 23       	and	r24, r24
     7d4:	d4 f7       	brge	.-12     	; 0x7ca <TWI_read_with_ACK+0x14>
	//CLEAR flag before or after
	return TWDR;
     7d6:	83 e2       	ldi	r24, 0x23	; 35
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	fc 01       	movw	r30, r24
     7dc:	80 81       	ld	r24, Z
}
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	08 95       	ret

000007e4 <TWI_read_with_NACK>:

uint8 TWI_read_with_NACK(void)
{
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN);
     7ec:	86 e5       	ldi	r24, 0x56	; 86
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	24 e8       	ldi	r18, 0x84	; 132
     7f2:	fc 01       	movw	r30, r24
     7f4:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(TWCR,TWINT));
     7f6:	00 00       	nop
     7f8:	86 e5       	ldi	r24, 0x56	; 86
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	fc 01       	movw	r30, r24
     7fe:	80 81       	ld	r24, Z
     800:	88 23       	and	r24, r24
     802:	d4 f7       	brge	.-12     	; 0x7f8 <TWI_read_with_NACK+0x14>
	//CLEAR flag before or after
	return TWDR;
     804:	83 e2       	ldi	r24, 0x23	; 35
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	fc 01       	movw	r30, r24
     80a:	80 81       	ld	r24, Z
}
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	08 95       	ret

00000812 <TWI_getStatus>:
uint8 TWI_getStatus()
{
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
	return TWSR&0XF8;
     81a:	81 e2       	ldi	r24, 0x21	; 33
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	fc 01       	movw	r30, r24
     820:	80 81       	ld	r24, Z
     822:	88 7f       	andi	r24, 0xF8	; 248
}
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <KeyPad_getPressedKey>:
/***************************************************************
 * 					function definition 						*
 * *************************************************************
 */

uint8 KeyPad_getPressedKey(void) {
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	00 d0       	rcall	.+0      	; 0x830 <KeyPad_getPressedKey+0x6>
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1)
	{
	for (col = 0; col < N_COL; col++) {
     834:	1a 82       	std	Y+2, r1	; 0x02
     836:	44 c0       	rjmp	.+136    	; 0x8c0 <KeyPad_getPressedKey+0x96>
		/* set the specified column in this trace output pin and the first 4 pins as input */
		KEYPAD_PORT_DIR = (0b00010000 << col);
     838:	8a e3       	ldi	r24, 0x3A	; 58
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	2a 81       	ldd	r18, Y+2	; 0x02
     83e:	42 2f       	mov	r20, r18
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	20 e1       	ldi	r18, 0x10	; 16
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	02 c0       	rjmp	.+4      	; 0x84c <KeyPad_getPressedKey+0x22>
     848:	22 0f       	add	r18, r18
     84a:	33 1f       	adc	r19, r19
     84c:	4a 95       	dec	r20
     84e:	e2 f7       	brpl	.-8      	; 0x848 <KeyPad_getPressedKey+0x1e>
     850:	fc 01       	movw	r30, r24
     852:	20 83       	st	Z, r18
		/* put on the specified column in this trace output pin 0 and  make the first 4 pins as pull up */
		KEYPAD_PORT_OUT = (~(0b00010000 << col));
     854:	8b e3       	ldi	r24, 0x3B	; 59
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	2a 81       	ldd	r18, Y+2	; 0x02
     85a:	42 2f       	mov	r20, r18
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	20 e1       	ldi	r18, 0x10	; 16
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	02 c0       	rjmp	.+4      	; 0x868 <KeyPad_getPressedKey+0x3e>
     864:	22 0f       	add	r18, r18
     866:	33 1f       	adc	r19, r19
     868:	4a 95       	dec	r20
     86a:	e2 f7       	brpl	.-8      	; 0x864 <KeyPad_getPressedKey+0x3a>
     86c:	20 95       	com	r18
     86e:	fc 01       	movw	r30, r24
     870:	20 83       	st	Z, r18
		for (row = 0; row < N_ROW; row++) /* loop for rows */
     872:	19 82       	std	Y+1, r1	; 0x01
     874:	1f c0       	rjmp	.+62     	; 0x8b4 <KeyPad_getPressedKey+0x8a>
		{
			if (BIT_IS_CLEAR(KEYPAD_PORT_IN, row))/* if the switch is pressed in this row */
     876:	89 e3       	ldi	r24, 0x39	; 57
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	fc 01       	movw	r30, r24
     87c:	80 81       	ld	r24, Z
     87e:	88 2f       	mov	r24, r24
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	29 81       	ldd	r18, Y+1	; 0x01
     884:	22 2f       	mov	r18, r18
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	02 c0       	rjmp	.+4      	; 0x88e <KeyPad_getPressedKey+0x64>
     88a:	95 95       	asr	r25
     88c:	87 95       	ror	r24
     88e:	2a 95       	dec	r18
     890:	e2 f7       	brpl	.-8      	; 0x88a <KeyPad_getPressedKey+0x60>
     892:	81 70       	andi	r24, 0x01	; 1
     894:	99 27       	eor	r25, r25
     896:	89 2b       	or	r24, r25
     898:	51 f4       	brne	.+20     	; 0x8ae <KeyPad_getPressedKey+0x84>
			{
				#if(N_COL==3)
				return KeyPad_4x3_adjustSwitchNumber((row * N_COL) + col + 1);
				#elif(N_COL==4)
				return KeyPad_4x4_adjustSwitchNumber((row * N_COL) + col + 1);
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	98 2f       	mov	r25, r24
     89e:	99 0f       	add	r25, r25
     8a0:	99 0f       	add	r25, r25
     8a2:	8a 81       	ldd	r24, Y+2	; 0x02
     8a4:	89 0f       	add	r24, r25
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <KeyPad_4x4_adjustSwitchNumber>
     8ac:	0e c0       	rjmp	.+28     	; 0x8ca <KeyPad_getPressedKey+0xa0>
	for (col = 0; col < N_COL; col++) {
		/* set the specified column in this trace output pin and the first 4 pins as input */
		KEYPAD_PORT_DIR = (0b00010000 << col);
		/* put on the specified column in this trace output pin 0 and  make the first 4 pins as pull up */
		KEYPAD_PORT_OUT = (~(0b00010000 << col));
		for (row = 0; row < N_ROW; row++) /* loop for rows */
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
     8b0:	8f 5f       	subi	r24, 0xFF	; 255
     8b2:	89 83       	std	Y+1, r24	; 0x01
     8b4:	89 81       	ldd	r24, Y+1	; 0x01
     8b6:	84 30       	cpi	r24, 0x04	; 4
     8b8:	f0 f2       	brcs	.-68     	; 0x876 <KeyPad_getPressedKey+0x4c>

uint8 KeyPad_getPressedKey(void) {
	uint8 row, col;
	while(1)
	{
	for (col = 0; col < N_COL; col++) {
     8ba:	8a 81       	ldd	r24, Y+2	; 0x02
     8bc:	8f 5f       	subi	r24, 0xFF	; 255
     8be:	8a 83       	std	Y+2, r24	; 0x02
     8c0:	8a 81       	ldd	r24, Y+2	; 0x02
     8c2:	84 30       	cpi	r24, 0x04	; 4
     8c4:	08 f4       	brcc	.+2      	; 0x8c8 <KeyPad_getPressedKey+0x9e>
     8c6:	b8 cf       	rjmp	.-144    	; 0x838 <KeyPad_getPressedKey+0xe>
				#endif
			}
		}
	}

}
     8c8:	b5 cf       	rjmp	.-150    	; 0x834 <KeyPad_getPressedKey+0xa>
}
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <KeyPad_4x4_adjustSwitchNumber>:
 }


#elif(N_COL==4)

static uint8 KeyPad_4x4_adjustSwitchNumber(uint8 a_number) {
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	1f 92       	push	r1
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	89 83       	std	Y+1, r24	; 0x01
	switch (a_number) {
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	88 2f       	mov	r24, r24
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	09 2e       	mov	r0, r25
     8e8:	00 0c       	add	r0, r0
     8ea:	aa 0b       	sbc	r26, r26
     8ec:	bb 0b       	sbc	r27, r27
     8ee:	41 e0       	ldi	r20, 0x01	; 1
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	2f e0       	ldi	r18, 0x0F	; 15
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	84 1b       	sub	r24, r20
     8f8:	95 0b       	sbc	r25, r21
     8fa:	28 17       	cp	r18, r24
     8fc:	39 07       	cpc	r19, r25
     8fe:	28 f1       	brcs	.+74     	; 0x94a <KeyPad_4x4_adjustSwitchNumber+0x76>
     900:	86 5d       	subi	r24, 0xD6	; 214
     902:	9f 4f       	sbci	r25, 0xFF	; 255
     904:	fc 01       	movw	r30, r24
     906:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__tablejump2__>
	case 1:
		return 7;
     90a:	87 e0       	ldi	r24, 0x07	; 7
     90c:	1e c0       	rjmp	.+60     	; 0x94a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 2:
		return 8;
     90e:	88 e0       	ldi	r24, 0x08	; 8
     910:	1c c0       	rjmp	.+56     	; 0x94a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 3:
		return 9;
     912:	89 e0       	ldi	r24, 0x09	; 9
     914:	1a c0       	rjmp	.+52     	; 0x94a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 4:
		return '/';
     916:	8f e2       	ldi	r24, 0x2F	; 47
     918:	18 c0       	rjmp	.+48     	; 0x94a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 5:
		return 4;
     91a:	84 e0       	ldi	r24, 0x04	; 4
     91c:	16 c0       	rjmp	.+44     	; 0x94a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 6:
		return 5;
     91e:	85 e0       	ldi	r24, 0x05	; 5
     920:	14 c0       	rjmp	.+40     	; 0x94a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 7:
		return 6;
     922:	86 e0       	ldi	r24, 0x06	; 6
     924:	12 c0       	rjmp	.+36     	; 0x94a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 8:
		return '*';
     926:	8a e2       	ldi	r24, 0x2A	; 42
     928:	10 c0       	rjmp	.+32     	; 0x94a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 9:
		return 1;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	0e c0       	rjmp	.+28     	; 0x94a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 10:
		return 2;
     92e:	82 e0       	ldi	r24, 0x02	; 2
     930:	0c c0       	rjmp	.+24     	; 0x94a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 11:
		return 3;
     932:	83 e0       	ldi	r24, 0x03	; 3
     934:	0a c0       	rjmp	.+20     	; 0x94a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 12:
		return '-';
     936:	8d e2       	ldi	r24, 0x2D	; 45
     938:	08 c0       	rjmp	.+16     	; 0x94a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 13:
		return 13;
     93a:	8d e0       	ldi	r24, 0x0D	; 13
     93c:	06 c0       	rjmp	.+12     	; 0x94a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 14:
		return 0;
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	04 c0       	rjmp	.+8      	; 0x94a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 15:
		return '=';
     942:	8d e3       	ldi	r24, 0x3D	; 61
     944:	02 c0       	rjmp	.+4      	; 0x94a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 16:
		return '+';
     946:	8b e2       	ldi	r24, 0x2B	; 43
     948:	00 c0       	rjmp	.+0      	; 0x94a <KeyPad_4x4_adjustSwitchNumber+0x76>

	}
}
     94a:	0f 90       	pop	r0
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <LCD_init>:
 * 								Functions Definitions				   *
 ***********************************************************************
 */

void LCD_init(void)
{
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	cd b7       	in	r28, 0x3d	; 61
     958:	de b7       	in	r29, 0x3e	; 62
LCD_CTRL_PORT_DIR |=(1<<4)|(1<<5)|(1<<6);/* configure control port pins(RS ,R/W ,ENABLE) AS OUTPUT*/
     95a:	81 e3       	ldi	r24, 0x31	; 49
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	21 e3       	ldi	r18, 0x31	; 49
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	f9 01       	movw	r30, r18
     964:	20 81       	ld	r18, Z
     966:	20 67       	ori	r18, 0x70	; 112
     968:	fc 01       	movw	r30, r24
     96a:	20 83       	st	Z, r18
LCD_DATA_PORT_DIR=0XFF; /* configure the data port as output port */
     96c:	84 e3       	ldi	r24, 0x34	; 52
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	2f ef       	ldi	r18, 0xFF	; 255
     972:	fc 01       	movw	r30, r24
     974:	20 83       	st	Z, r18
LCD_sendCommand(FUNCTION_SET_8_BIT_2LINE); /* using 2 lines + LCD 8 bit mode + 5*7 dot  display mode*/
     976:	88 e3       	ldi	r24, 0x38	; 56
     978:	0e 94 c8 04 	call	0x990	; 0x990 <LCD_sendCommand>
LCD_sendCommand(DISPLAY_CURSOR_OFF);
     97c:	8c e0       	ldi	r24, 0x0C	; 12
     97e:	0e 94 c8 04 	call	0x990	; 0x990 <LCD_sendCommand>
LCD_sendCommand(CLEAR_COMMAND);
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	0e 94 c8 04 	call	0x990	; 0x990 <LCD_sendCommand>

}
     988:	00 00       	nop
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	e9 97       	sbiw	r28, 0x39	; 57
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	de bf       	out	0x3e, r29	; 62
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	cd bf       	out	0x3d, r28	; 61
     9a4:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS);/* instruction mode RS =0*/
     9a6:	82 e3       	ldi	r24, 0x32	; 50
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	22 e3       	ldi	r18, 0x32	; 50
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	f9 01       	movw	r30, r18
     9b0:	20 81       	ld	r18, Z
     9b2:	2f 7e       	andi	r18, 0xEF	; 239
     9b4:	fc 01       	movw	r30, r24
     9b6:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_PORT,READWRITE); /* write data to LCD so readwrite=0*/
     9b8:	82 e3       	ldi	r24, 0x32	; 50
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	22 e3       	ldi	r18, 0x32	; 50
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	f9 01       	movw	r30, r18
     9c2:	20 81       	ld	r18, Z
     9c4:	2f 7d       	andi	r18, 0xDF	; 223
     9c6:	fc 01       	movw	r30, r24
     9c8:	20 83       	st	Z, r18
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	a0 e8       	ldi	r26, 0x80	; 128
     9d0:	bf e3       	ldi	r27, 0x3F	; 63
     9d2:	89 83       	std	Y+1, r24	; 0x01
     9d4:	9a 83       	std	Y+2, r25	; 0x02
     9d6:	ab 83       	std	Y+3, r26	; 0x03
     9d8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	4a ef       	ldi	r20, 0xFA	; 250
     9e0:	54 e4       	ldi	r21, 0x44	; 68
     9e2:	69 81       	ldd	r22, Y+1	; 0x01
     9e4:	7a 81       	ldd	r23, Y+2	; 0x02
     9e6:	8b 81       	ldd	r24, Y+3	; 0x03
     9e8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ea:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
     9ee:	dc 01       	movw	r26, r24
     9f0:	cb 01       	movw	r24, r22
     9f2:	8f a7       	std	Y+47, r24	; 0x2f
     9f4:	98 ab       	std	Y+48, r25	; 0x30
     9f6:	a9 ab       	std	Y+49, r26	; 0x31
     9f8:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e8       	ldi	r20, 0x80	; 128
     a00:	5f e3       	ldi	r21, 0x3F	; 63
     a02:	6f a5       	ldd	r22, Y+47	; 0x2f
     a04:	78 a9       	ldd	r23, Y+48	; 0x30
     a06:	89 a9       	ldd	r24, Y+49	; 0x31
     a08:	9a a9       	ldd	r25, Y+50	; 0x32
     a0a:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__cmpsf2>
     a0e:	88 23       	and	r24, r24
     a10:	2c f4       	brge	.+10     	; 0xa1c <LCD_sendCommand+0x8c>
		__ticks = 1;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	9c ab       	std	Y+52, r25	; 0x34
     a18:	8b ab       	std	Y+51, r24	; 0x33
     a1a:	3f c0       	rjmp	.+126    	; 0xa9a <LCD_sendCommand+0x10a>
	else if (__tmp > 65535)
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	3f ef       	ldi	r19, 0xFF	; 255
     a20:	4f e7       	ldi	r20, 0x7F	; 127
     a22:	57 e4       	ldi	r21, 0x47	; 71
     a24:	6f a5       	ldd	r22, Y+47	; 0x2f
     a26:	78 a9       	ldd	r23, Y+48	; 0x30
     a28:	89 a9       	ldd	r24, Y+49	; 0x31
     a2a:	9a a9       	ldd	r25, Y+50	; 0x32
     a2c:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gesf2>
     a30:	18 16       	cp	r1, r24
     a32:	4c f5       	brge	.+82     	; 0xa86 <LCD_sendCommand+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	40 e2       	ldi	r20, 0x20	; 32
     a3a:	51 e4       	ldi	r21, 0x41	; 65
     a3c:	69 81       	ldd	r22, Y+1	; 0x01
     a3e:	7a 81       	ldd	r23, Y+2	; 0x02
     a40:	8b 81       	ldd	r24, Y+3	; 0x03
     a42:	9c 81       	ldd	r25, Y+4	; 0x04
     a44:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
     a48:	dc 01       	movw	r26, r24
     a4a:	cb 01       	movw	r24, r22
     a4c:	bc 01       	movw	r22, r24
     a4e:	cd 01       	movw	r24, r26
     a50:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
     a54:	dc 01       	movw	r26, r24
     a56:	cb 01       	movw	r24, r22
     a58:	9c ab       	std	Y+52, r25	; 0x34
     a5a:	8b ab       	std	Y+51, r24	; 0x33
     a5c:	0f c0       	rjmp	.+30     	; 0xa7c <LCD_sendCommand+0xec>
     a5e:	88 ec       	ldi	r24, 0xC8	; 200
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	9e ab       	std	Y+54, r25	; 0x36
     a64:	8d ab       	std	Y+53, r24	; 0x35
     a66:	8d a9       	ldd	r24, Y+53	; 0x35
     a68:	9e a9       	ldd	r25, Y+54	; 0x36
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <LCD_sendCommand+0xda>
     a6e:	9e ab       	std	Y+54, r25	; 0x36
     a70:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a72:	8b a9       	ldd	r24, Y+51	; 0x33
     a74:	9c a9       	ldd	r25, Y+52	; 0x34
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	9c ab       	std	Y+52, r25	; 0x34
     a7a:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a7c:	8b a9       	ldd	r24, Y+51	; 0x33
     a7e:	9c a9       	ldd	r25, Y+52	; 0x34
     a80:	89 2b       	or	r24, r25
     a82:	69 f7       	brne	.-38     	; 0xa5e <LCD_sendCommand+0xce>
     a84:	14 c0       	rjmp	.+40     	; 0xaae <LCD_sendCommand+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a86:	6f a5       	ldd	r22, Y+47	; 0x2f
     a88:	78 a9       	ldd	r23, Y+48	; 0x30
     a8a:	89 a9       	ldd	r24, Y+49	; 0x31
     a8c:	9a a9       	ldd	r25, Y+50	; 0x32
     a8e:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
     a92:	dc 01       	movw	r26, r24
     a94:	cb 01       	movw	r24, r22
     a96:	9c ab       	std	Y+52, r25	; 0x34
     a98:	8b ab       	std	Y+51, r24	; 0x33
     a9a:	8b a9       	ldd	r24, Y+51	; 0x33
     a9c:	9c a9       	ldd	r25, Y+52	; 0x34
     a9e:	98 af       	std	Y+56, r25	; 0x38
     aa0:	8f ab       	std	Y+55, r24	; 0x37
     aa2:	8f a9       	ldd	r24, Y+55	; 0x37
     aa4:	98 ad       	ldd	r25, Y+56	; 0x38
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	f1 f7       	brne	.-4      	; 0xaa6 <LCD_sendCommand+0x116>
     aaa:	98 af       	std	Y+56, r25	; 0x38
     aac:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1);/* delay for prossing tas=50ns*/
	SET_BIT(LCD_CTRL_PORT,LCD_ENABLE); /*enable LCD so enable pin =1*/
     aae:	82 e3       	ldi	r24, 0x32	; 50
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	22 e3       	ldi	r18, 0x32	; 50
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	f9 01       	movw	r30, r18
     ab8:	20 81       	ld	r18, Z
     aba:	20 64       	ori	r18, 0x40	; 64
     abc:	fc 01       	movw	r30, r24
     abe:	20 83       	st	Z, r18
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e8       	ldi	r26, 0x80	; 128
     ac6:	bf e3       	ldi	r27, 0x3F	; 63
     ac8:	8d 83       	std	Y+5, r24	; 0x05
     aca:	9e 83       	std	Y+6, r25	; 0x06
     acc:	af 83       	std	Y+7, r26	; 0x07
     ace:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	4a ef       	ldi	r20, 0xFA	; 250
     ad6:	54 e4       	ldi	r21, 0x44	; 68
     ad8:	6d 81       	ldd	r22, Y+5	; 0x05
     ada:	7e 81       	ldd	r23, Y+6	; 0x06
     adc:	8f 81       	ldd	r24, Y+7	; 0x07
     ade:	98 85       	ldd	r25, Y+8	; 0x08
     ae0:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
     ae4:	dc 01       	movw	r26, r24
     ae6:	cb 01       	movw	r24, r22
     ae8:	8d a3       	std	Y+37, r24	; 0x25
     aea:	9e a3       	std	Y+38, r25	; 0x26
     aec:	af a3       	std	Y+39, r26	; 0x27
     aee:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	40 e8       	ldi	r20, 0x80	; 128
     af6:	5f e3       	ldi	r21, 0x3F	; 63
     af8:	6d a1       	ldd	r22, Y+37	; 0x25
     afa:	7e a1       	ldd	r23, Y+38	; 0x26
     afc:	8f a1       	ldd	r24, Y+39	; 0x27
     afe:	98 a5       	ldd	r25, Y+40	; 0x28
     b00:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__cmpsf2>
     b04:	88 23       	and	r24, r24
     b06:	2c f4       	brge	.+10     	; 0xb12 <LCD_sendCommand+0x182>
		__ticks = 1;
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	9a a7       	std	Y+42, r25	; 0x2a
     b0e:	89 a7       	std	Y+41, r24	; 0x29
     b10:	3f c0       	rjmp	.+126    	; 0xb90 <LCD_sendCommand+0x200>
	else if (__tmp > 65535)
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	3f ef       	ldi	r19, 0xFF	; 255
     b16:	4f e7       	ldi	r20, 0x7F	; 127
     b18:	57 e4       	ldi	r21, 0x47	; 71
     b1a:	6d a1       	ldd	r22, Y+37	; 0x25
     b1c:	7e a1       	ldd	r23, Y+38	; 0x26
     b1e:	8f a1       	ldd	r24, Y+39	; 0x27
     b20:	98 a5       	ldd	r25, Y+40	; 0x28
     b22:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gesf2>
     b26:	18 16       	cp	r1, r24
     b28:	4c f5       	brge	.+82     	; 0xb7c <LCD_sendCommand+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	40 e2       	ldi	r20, 0x20	; 32
     b30:	51 e4       	ldi	r21, 0x41	; 65
     b32:	6d 81       	ldd	r22, Y+5	; 0x05
     b34:	7e 81       	ldd	r23, Y+6	; 0x06
     b36:	8f 81       	ldd	r24, Y+7	; 0x07
     b38:	98 85       	ldd	r25, Y+8	; 0x08
     b3a:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
     b3e:	dc 01       	movw	r26, r24
     b40:	cb 01       	movw	r24, r22
     b42:	bc 01       	movw	r22, r24
     b44:	cd 01       	movw	r24, r26
     b46:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
     b4a:	dc 01       	movw	r26, r24
     b4c:	cb 01       	movw	r24, r22
     b4e:	9a a7       	std	Y+42, r25	; 0x2a
     b50:	89 a7       	std	Y+41, r24	; 0x29
     b52:	0f c0       	rjmp	.+30     	; 0xb72 <LCD_sendCommand+0x1e2>
     b54:	88 ec       	ldi	r24, 0xC8	; 200
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	9c a7       	std	Y+44, r25	; 0x2c
     b5a:	8b a7       	std	Y+43, r24	; 0x2b
     b5c:	8b a5       	ldd	r24, Y+43	; 0x2b
     b5e:	9c a5       	ldd	r25, Y+44	; 0x2c
     b60:	01 97       	sbiw	r24, 0x01	; 1
     b62:	f1 f7       	brne	.-4      	; 0xb60 <LCD_sendCommand+0x1d0>
     b64:	9c a7       	std	Y+44, r25	; 0x2c
     b66:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b68:	89 a5       	ldd	r24, Y+41	; 0x29
     b6a:	9a a5       	ldd	r25, Y+42	; 0x2a
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	9a a7       	std	Y+42, r25	; 0x2a
     b70:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b72:	89 a5       	ldd	r24, Y+41	; 0x29
     b74:	9a a5       	ldd	r25, Y+42	; 0x2a
     b76:	89 2b       	or	r24, r25
     b78:	69 f7       	brne	.-38     	; 0xb54 <LCD_sendCommand+0x1c4>
     b7a:	14 c0       	rjmp	.+40     	; 0xba4 <LCD_sendCommand+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b7c:	6d a1       	ldd	r22, Y+37	; 0x25
     b7e:	7e a1       	ldd	r23, Y+38	; 0x26
     b80:	8f a1       	ldd	r24, Y+39	; 0x27
     b82:	98 a5       	ldd	r25, Y+40	; 0x28
     b84:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	9a a7       	std	Y+42, r25	; 0x2a
     b8e:	89 a7       	std	Y+41, r24	; 0x29
     b90:	89 a5       	ldd	r24, Y+41	; 0x29
     b92:	9a a5       	ldd	r25, Y+42	; 0x2a
     b94:	9e a7       	std	Y+46, r25	; 0x2e
     b96:	8d a7       	std	Y+45, r24	; 0x2d
     b98:	8d a5       	ldd	r24, Y+45	; 0x2d
     b9a:	9e a5       	ldd	r25, Y+46	; 0x2e
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <LCD_sendCommand+0x20c>
     ba0:	9e a7       	std	Y+46, r25	; 0x2e
     ba2:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(1); /*delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT=command;/* out the required command to the data bus D0--->D7*/
     ba4:	85 e3       	ldi	r24, 0x35	; 53
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	29 ad       	ldd	r18, Y+57	; 0x39
     baa:	fc 01       	movw	r30, r24
     bac:	20 83       	st	Z, r18
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	a0 e8       	ldi	r26, 0x80	; 128
     bb4:	bf e3       	ldi	r27, 0x3F	; 63
     bb6:	89 87       	std	Y+9, r24	; 0x09
     bb8:	9a 87       	std	Y+10, r25	; 0x0a
     bba:	ab 87       	std	Y+11, r26	; 0x0b
     bbc:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	4a ef       	ldi	r20, 0xFA	; 250
     bc4:	54 e4       	ldi	r21, 0x44	; 68
     bc6:	69 85       	ldd	r22, Y+9	; 0x09
     bc8:	7a 85       	ldd	r23, Y+10	; 0x0a
     bca:	8b 85       	ldd	r24, Y+11	; 0x0b
     bcc:	9c 85       	ldd	r25, Y+12	; 0x0c
     bce:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	8b 8f       	std	Y+27, r24	; 0x1b
     bd8:	9c 8f       	std	Y+28, r25	; 0x1c
     bda:	ad 8f       	std	Y+29, r26	; 0x1d
     bdc:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	40 e8       	ldi	r20, 0x80	; 128
     be4:	5f e3       	ldi	r21, 0x3F	; 63
     be6:	6b 8d       	ldd	r22, Y+27	; 0x1b
     be8:	7c 8d       	ldd	r23, Y+28	; 0x1c
     bea:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bec:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bee:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__cmpsf2>
     bf2:	88 23       	and	r24, r24
     bf4:	2c f4       	brge	.+10     	; 0xc00 <LCD_sendCommand+0x270>
		__ticks = 1;
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	98 a3       	std	Y+32, r25	; 0x20
     bfc:	8f 8f       	std	Y+31, r24	; 0x1f
     bfe:	3f c0       	rjmp	.+126    	; 0xc7e <LCD_sendCommand+0x2ee>
	else if (__tmp > 65535)
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	4f e7       	ldi	r20, 0x7F	; 127
     c06:	57 e4       	ldi	r21, 0x47	; 71
     c08:	6b 8d       	ldd	r22, Y+27	; 0x1b
     c0a:	7c 8d       	ldd	r23, Y+28	; 0x1c
     c0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c10:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gesf2>
     c14:	18 16       	cp	r1, r24
     c16:	4c f5       	brge	.+82     	; 0xc6a <LCD_sendCommand+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e2       	ldi	r20, 0x20	; 32
     c1e:	51 e4       	ldi	r21, 0x41	; 65
     c20:	69 85       	ldd	r22, Y+9	; 0x09
     c22:	7a 85       	ldd	r23, Y+10	; 0x0a
     c24:	8b 85       	ldd	r24, Y+11	; 0x0b
     c26:	9c 85       	ldd	r25, Y+12	; 0x0c
     c28:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	bc 01       	movw	r22, r24
     c32:	cd 01       	movw	r24, r26
     c34:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	98 a3       	std	Y+32, r25	; 0x20
     c3e:	8f 8f       	std	Y+31, r24	; 0x1f
     c40:	0f c0       	rjmp	.+30     	; 0xc60 <LCD_sendCommand+0x2d0>
     c42:	88 ec       	ldi	r24, 0xC8	; 200
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	9a a3       	std	Y+34, r25	; 0x22
     c48:	89 a3       	std	Y+33, r24	; 0x21
     c4a:	89 a1       	ldd	r24, Y+33	; 0x21
     c4c:	9a a1       	ldd	r25, Y+34	; 0x22
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <LCD_sendCommand+0x2be>
     c52:	9a a3       	std	Y+34, r25	; 0x22
     c54:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c56:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c58:	98 a1       	ldd	r25, Y+32	; 0x20
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	98 a3       	std	Y+32, r25	; 0x20
     c5e:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c60:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c62:	98 a1       	ldd	r25, Y+32	; 0x20
     c64:	89 2b       	or	r24, r25
     c66:	69 f7       	brne	.-38     	; 0xc42 <LCD_sendCommand+0x2b2>
     c68:	14 c0       	rjmp	.+40     	; 0xc92 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c6a:	6b 8d       	ldd	r22, Y+27	; 0x1b
     c6c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     c6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c70:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c72:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	98 a3       	std	Y+32, r25	; 0x20
     c7c:	8f 8f       	std	Y+31, r24	; 0x1f
     c7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c80:	98 a1       	ldd	r25, Y+32	; 0x20
     c82:	9c a3       	std	Y+36, r25	; 0x24
     c84:	8b a3       	std	Y+35, r24	; 0x23
     c86:	8b a1       	ldd	r24, Y+35	; 0x23
     c88:	9c a1       	ldd	r25, Y+36	; 0x24
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <LCD_sendCommand+0x2fa>
     c8e:	9c a3       	std	Y+36, r25	; 0x24
     c90:	8b a3       	std	Y+35, r24	; 0x23
	_delay_ms(1);/* delay for processing command setup time tdsw =60ns */
	CLEAR_BIT(LCD_CTRL_PORT,LCD_ENABLE); /* disable LCD so enable pin =0 */
     c92:	82 e3       	ldi	r24, 0x32	; 50
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	22 e3       	ldi	r18, 0x32	; 50
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	f9 01       	movw	r30, r18
     c9c:	20 81       	ld	r18, Z
     c9e:	2f 7b       	andi	r18, 0xBF	; 191
     ca0:	fc 01       	movw	r30, r24
     ca2:	20 83       	st	Z, r18
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	a0 e8       	ldi	r26, 0x80	; 128
     caa:	bf e3       	ldi	r27, 0x3F	; 63
     cac:	8d 87       	std	Y+13, r24	; 0x0d
     cae:	9e 87       	std	Y+14, r25	; 0x0e
     cb0:	af 87       	std	Y+15, r26	; 0x0f
     cb2:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	4a ef       	ldi	r20, 0xFA	; 250
     cba:	54 e4       	ldi	r21, 0x44	; 68
     cbc:	6d 85       	ldd	r22, Y+13	; 0x0d
     cbe:	7e 85       	ldd	r23, Y+14	; 0x0e
     cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     cc2:	98 89       	ldd	r25, Y+16	; 0x10
     cc4:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	89 8b       	std	Y+17, r24	; 0x11
     cce:	9a 8b       	std	Y+18, r25	; 0x12
     cd0:	ab 8b       	std	Y+19, r26	; 0x13
     cd2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e8       	ldi	r20, 0x80	; 128
     cda:	5f e3       	ldi	r21, 0x3F	; 63
     cdc:	69 89       	ldd	r22, Y+17	; 0x11
     cde:	7a 89       	ldd	r23, Y+18	; 0x12
     ce0:	8b 89       	ldd	r24, Y+19	; 0x13
     ce2:	9c 89       	ldd	r25, Y+20	; 0x14
     ce4:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__cmpsf2>
     ce8:	88 23       	and	r24, r24
     cea:	2c f4       	brge	.+10     	; 0xcf6 <LCD_sendCommand+0x366>
		__ticks = 1;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	9e 8b       	std	Y+22, r25	; 0x16
     cf2:	8d 8b       	std	Y+21, r24	; 0x15
     cf4:	3f c0       	rjmp	.+126    	; 0xd74 <LCD_sendCommand+0x3e4>
	else if (__tmp > 65535)
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	3f ef       	ldi	r19, 0xFF	; 255
     cfa:	4f e7       	ldi	r20, 0x7F	; 127
     cfc:	57 e4       	ldi	r21, 0x47	; 71
     cfe:	69 89       	ldd	r22, Y+17	; 0x11
     d00:	7a 89       	ldd	r23, Y+18	; 0x12
     d02:	8b 89       	ldd	r24, Y+19	; 0x13
     d04:	9c 89       	ldd	r25, Y+20	; 0x14
     d06:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gesf2>
     d0a:	18 16       	cp	r1, r24
     d0c:	4c f5       	brge	.+82     	; 0xd60 <LCD_sendCommand+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	40 e2       	ldi	r20, 0x20	; 32
     d14:	51 e4       	ldi	r21, 0x41	; 65
     d16:	6d 85       	ldd	r22, Y+13	; 0x0d
     d18:	7e 85       	ldd	r23, Y+14	; 0x0e
     d1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d1c:	98 89       	ldd	r25, Y+16	; 0x10
     d1e:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	bc 01       	movw	r22, r24
     d28:	cd 01       	movw	r24, r26
     d2a:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	9e 8b       	std	Y+22, r25	; 0x16
     d34:	8d 8b       	std	Y+21, r24	; 0x15
     d36:	0f c0       	rjmp	.+30     	; 0xd56 <LCD_sendCommand+0x3c6>
     d38:	88 ec       	ldi	r24, 0xC8	; 200
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	98 8f       	std	Y+24, r25	; 0x18
     d3e:	8f 8b       	std	Y+23, r24	; 0x17
     d40:	8f 89       	ldd	r24, Y+23	; 0x17
     d42:	98 8d       	ldd	r25, Y+24	; 0x18
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <LCD_sendCommand+0x3b4>
     d48:	98 8f       	std	Y+24, r25	; 0x18
     d4a:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4c:	8d 89       	ldd	r24, Y+21	; 0x15
     d4e:	9e 89       	ldd	r25, Y+22	; 0x16
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	9e 8b       	std	Y+22, r25	; 0x16
     d54:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d56:	8d 89       	ldd	r24, Y+21	; 0x15
     d58:	9e 89       	ldd	r25, Y+22	; 0x16
     d5a:	89 2b       	or	r24, r25
     d5c:	69 f7       	brne	.-38     	; 0xd38 <LCD_sendCommand+0x3a8>
	_delay_ms(1); /* delay for processing hold time th=10ns */

}
     d5e:	14 c0       	rjmp	.+40     	; 0xd88 <LCD_sendCommand+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d60:	69 89       	ldd	r22, Y+17	; 0x11
     d62:	7a 89       	ldd	r23, Y+18	; 0x12
     d64:	8b 89       	ldd	r24, Y+19	; 0x13
     d66:	9c 89       	ldd	r25, Y+20	; 0x14
     d68:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	9e 8b       	std	Y+22, r25	; 0x16
     d72:	8d 8b       	std	Y+21, r24	; 0x15
     d74:	8d 89       	ldd	r24, Y+21	; 0x15
     d76:	9e 89       	ldd	r25, Y+22	; 0x16
     d78:	9a 8f       	std	Y+26, r25	; 0x1a
     d7a:	89 8f       	std	Y+25, r24	; 0x19
     d7c:	89 8d       	ldd	r24, Y+25	; 0x19
     d7e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	f1 f7       	brne	.-4      	; 0xd80 <LCD_sendCommand+0x3f0>
     d84:	9a 8f       	std	Y+26, r25	; 0x1a
     d86:	89 8f       	std	Y+25, r24	; 0x19
     d88:	00 00       	nop
     d8a:	e9 96       	adiw	r28, 0x39	; 57
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data)
{
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	cb 56       	subi	r28, 0x6B	; 107
     daa:	d1 09       	sbc	r29, r1
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	9e 01       	movw	r18, r28
     db8:	25 59       	subi	r18, 0x95	; 149
     dba:	3f 4f       	sbci	r19, 0xFF	; 255
     dbc:	f9 01       	movw	r30, r18
     dbe:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* data mode so RS =1*/
     dc0:	82 e3       	ldi	r24, 0x32	; 50
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	22 e3       	ldi	r18, 0x32	; 50
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	f9 01       	movw	r30, r18
     dca:	20 81       	ld	r18, Z
     dcc:	20 61       	ori	r18, 0x10	; 16
     dce:	fc 01       	movw	r30, r24
     dd0:	20 83       	st	Z, r18
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e8       	ldi	r26, 0x80	; 128
     dd8:	bf e3       	ldi	r27, 0x3F	; 63
     dda:	89 83       	std	Y+1, r24	; 0x01
     ddc:	9a 83       	std	Y+2, r25	; 0x02
     dde:	ab 83       	std	Y+3, r26	; 0x03
     de0:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     de2:	8e 01       	movw	r16, r28
     de4:	01 5b       	subi	r16, 0xB1	; 177
     de6:	1f 4f       	sbci	r17, 0xFF	; 255
     de8:	2b ea       	ldi	r18, 0xAB	; 171
     dea:	3a ea       	ldi	r19, 0xAA	; 170
     dec:	4a e2       	ldi	r20, 0x2A	; 42
     dee:	50 e4       	ldi	r21, 0x40	; 64
     df0:	69 81       	ldd	r22, Y+1	; 0x01
     df2:	7a 81       	ldd	r23, Y+2	; 0x02
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	9c 81       	ldd	r25, Y+4	; 0x04
     df8:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	f8 01       	movw	r30, r16
     e02:	80 83       	st	Z, r24
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	a2 83       	std	Z+2, r26	; 0x02
     e08:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     e0a:	8e 01       	movw	r16, r28
     e0c:	0d 5a       	subi	r16, 0xAD	; 173
     e0e:	1f 4f       	sbci	r17, 0xFF	; 255
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	ab 81       	ldd	r26, Y+3	; 0x03
     e16:	bc 81       	ldd	r27, Y+4	; 0x04
     e18:	9c 01       	movw	r18, r24
     e1a:	ad 01       	movw	r20, r26
     e1c:	bc 01       	movw	r22, r24
     e1e:	cd 01       	movw	r24, r26
     e20:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__addsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	f8 01       	movw	r30, r16
     e2a:	80 83       	st	Z, r24
     e2c:	91 83       	std	Z+1, r25	; 0x01
     e2e:	a2 83       	std	Z+2, r26	; 0x02
     e30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e32:	ce 01       	movw	r24, r28
     e34:	81 5b       	subi	r24, 0xB1	; 177
     e36:	9f 4f       	sbci	r25, 0xFF	; 255
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	fc 01       	movw	r30, r24
     e42:	60 81       	ld	r22, Z
     e44:	71 81       	ldd	r23, Z+1	; 0x01
     e46:	82 81       	ldd	r24, Z+2	; 0x02
     e48:	93 81       	ldd	r25, Z+3	; 0x03
     e4a:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__cmpsf2>
     e4e:	88 23       	and	r24, r24
     e50:	3c f4       	brge	.+14     	; 0xe60 <LCD_displayCharacter+0xc4>
		__ticks = 1;
     e52:	ce 01       	movw	r24, r28
     e54:	89 5a       	subi	r24, 0xA9	; 169
     e56:	9f 4f       	sbci	r25, 0xFF	; 255
     e58:	21 e0       	ldi	r18, 0x01	; 1
     e5a:	fc 01       	movw	r30, r24
     e5c:	20 83       	st	Z, r18
     e5e:	2c c1       	rjmp	.+600    	; 0x10b8 <LCD_displayCharacter+0x31c>
	else if (__tmp2 > 65535)
     e60:	ce 01       	movw	r24, r28
     e62:	8d 5a       	subi	r24, 0xAD	; 173
     e64:	9f 4f       	sbci	r25, 0xFF	; 255
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	3f ef       	ldi	r19, 0xFF	; 255
     e6a:	4f e7       	ldi	r20, 0x7F	; 127
     e6c:	57 e4       	ldi	r21, 0x47	; 71
     e6e:	fc 01       	movw	r30, r24
     e70:	60 81       	ld	r22, Z
     e72:	71 81       	ldd	r23, Z+1	; 0x01
     e74:	82 81       	ldd	r24, Z+2	; 0x02
     e76:	93 81       	ldd	r25, Z+3	; 0x03
     e78:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gesf2>
     e7c:	18 16       	cp	r1, r24
     e7e:	0c f0       	brlt	.+2      	; 0xe82 <LCD_displayCharacter+0xe6>
     e80:	cd c0       	rjmp	.+410    	; 0x101c <LCD_displayCharacter+0x280>
	{
		_delay_ms(__us / 1000.0);
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	4a e7       	ldi	r20, 0x7A	; 122
     e88:	54 e4       	ldi	r21, 0x44	; 68
     e8a:	69 81       	ldd	r22, Y+1	; 0x01
     e8c:	7a 81       	ldd	r23, Y+2	; 0x02
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	9c 81       	ldd	r25, Y+4	; 0x04
     e92:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__divsf3>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	9e 01       	movw	r18, r28
     e9c:	28 5a       	subi	r18, 0xA8	; 168
     e9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ea0:	f9 01       	movw	r30, r18
     ea2:	80 83       	st	Z, r24
     ea4:	91 83       	std	Z+1, r25	; 0x01
     ea6:	a2 83       	std	Z+2, r26	; 0x02
     ea8:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     eaa:	8e 01       	movw	r16, r28
     eac:	04 5a       	subi	r16, 0xA4	; 164
     eae:	1f 4f       	sbci	r17, 0xFF	; 255
     eb0:	ce 01       	movw	r24, r28
     eb2:	88 5a       	subi	r24, 0xA8	; 168
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	4a ef       	ldi	r20, 0xFA	; 250
     ebc:	54 e4       	ldi	r21, 0x44	; 68
     ebe:	fc 01       	movw	r30, r24
     ec0:	60 81       	ld	r22, Z
     ec2:	71 81       	ldd	r23, Z+1	; 0x01
     ec4:	82 81       	ldd	r24, Z+2	; 0x02
     ec6:	93 81       	ldd	r25, Z+3	; 0x03
     ec8:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	f8 01       	movw	r30, r16
     ed2:	80 83       	st	Z, r24
     ed4:	91 83       	std	Z+1, r25	; 0x01
     ed6:	a2 83       	std	Z+2, r26	; 0x02
     ed8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     eda:	ce 01       	movw	r24, r28
     edc:	84 5a       	subi	r24, 0xA4	; 164
     ede:	9f 4f       	sbci	r25, 0xFF	; 255
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e8       	ldi	r20, 0x80	; 128
     ee6:	5f e3       	ldi	r21, 0x3F	; 63
     ee8:	fc 01       	movw	r30, r24
     eea:	60 81       	ld	r22, Z
     eec:	71 81       	ldd	r23, Z+1	; 0x01
     eee:	82 81       	ldd	r24, Z+2	; 0x02
     ef0:	93 81       	ldd	r25, Z+3	; 0x03
     ef2:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__cmpsf2>
     ef6:	88 23       	and	r24, r24
     ef8:	4c f4       	brge	.+18     	; 0xf0c <LCD_displayCharacter+0x170>
		__ticks = 1;
     efa:	ce 01       	movw	r24, r28
     efc:	80 5a       	subi	r24, 0xA0	; 160
     efe:	9f 4f       	sbci	r25, 0xFF	; 255
     f00:	21 e0       	ldi	r18, 0x01	; 1
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	fc 01       	movw	r30, r24
     f06:	31 83       	std	Z+1, r19	; 0x01
     f08:	20 83       	st	Z, r18
     f0a:	6d c0       	rjmp	.+218    	; 0xfe6 <LCD_displayCharacter+0x24a>
	else if (__tmp > 65535)
     f0c:	ce 01       	movw	r24, r28
     f0e:	84 5a       	subi	r24, 0xA4	; 164
     f10:	9f 4f       	sbci	r25, 0xFF	; 255
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	3f ef       	ldi	r19, 0xFF	; 255
     f16:	4f e7       	ldi	r20, 0x7F	; 127
     f18:	57 e4       	ldi	r21, 0x47	; 71
     f1a:	fc 01       	movw	r30, r24
     f1c:	60 81       	ld	r22, Z
     f1e:	71 81       	ldd	r23, Z+1	; 0x01
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	93 81       	ldd	r25, Z+3	; 0x03
     f24:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gesf2>
     f28:	18 16       	cp	r1, r24
     f2a:	0c f0       	brlt	.+2      	; 0xf2e <LCD_displayCharacter+0x192>
     f2c:	4a c0       	rjmp	.+148    	; 0xfc2 <LCD_displayCharacter+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2e:	ce 01       	movw	r24, r28
     f30:	88 5a       	subi	r24, 0xA8	; 168
     f32:	9f 4f       	sbci	r25, 0xFF	; 255
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e2       	ldi	r20, 0x20	; 32
     f3a:	51 e4       	ldi	r21, 0x41	; 65
     f3c:	fc 01       	movw	r30, r24
     f3e:	60 81       	ld	r22, Z
     f40:	71 81       	ldd	r23, Z+1	; 0x01
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	93 81       	ldd	r25, Z+3	; 0x03
     f46:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	8e 01       	movw	r16, r28
     f50:	00 5a       	subi	r16, 0xA0	; 160
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	bc 01       	movw	r22, r24
     f56:	cd 01       	movw	r24, r26
     f58:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	f8 01       	movw	r30, r16
     f62:	91 83       	std	Z+1, r25	; 0x01
     f64:	80 83       	st	Z, r24
     f66:	24 c0       	rjmp	.+72     	; 0xfb0 <LCD_displayCharacter+0x214>
     f68:	ce 01       	movw	r24, r28
     f6a:	8e 59       	subi	r24, 0x9E	; 158
     f6c:	9f 4f       	sbci	r25, 0xFF	; 255
     f6e:	28 ec       	ldi	r18, 0xC8	; 200
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	fc 01       	movw	r30, r24
     f74:	31 83       	std	Z+1, r19	; 0x01
     f76:	20 83       	st	Z, r18
     f78:	ce 01       	movw	r24, r28
     f7a:	8e 59       	subi	r24, 0x9E	; 158
     f7c:	9f 4f       	sbci	r25, 0xFF	; 255
     f7e:	fc 01       	movw	r30, r24
     f80:	80 81       	ld	r24, Z
     f82:	91 81       	ldd	r25, Z+1	; 0x01
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <LCD_displayCharacter+0x1e8>
     f88:	9e 01       	movw	r18, r28
     f8a:	2e 59       	subi	r18, 0x9E	; 158
     f8c:	3f 4f       	sbci	r19, 0xFF	; 255
     f8e:	f9 01       	movw	r30, r18
     f90:	91 83       	std	Z+1, r25	; 0x01
     f92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f94:	ce 01       	movw	r24, r28
     f96:	80 5a       	subi	r24, 0xA0	; 160
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	9e 01       	movw	r18, r28
     f9c:	20 5a       	subi	r18, 0xA0	; 160
     f9e:	3f 4f       	sbci	r19, 0xFF	; 255
     fa0:	f9 01       	movw	r30, r18
     fa2:	20 81       	ld	r18, Z
     fa4:	31 81       	ldd	r19, Z+1	; 0x01
     fa6:	21 50       	subi	r18, 0x01	; 1
     fa8:	31 09       	sbc	r19, r1
     faa:	fc 01       	movw	r30, r24
     fac:	31 83       	std	Z+1, r19	; 0x01
     fae:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb0:	ce 01       	movw	r24, r28
     fb2:	80 5a       	subi	r24, 0xA0	; 160
     fb4:	9f 4f       	sbci	r25, 0xFF	; 255
     fb6:	fc 01       	movw	r30, r24
     fb8:	80 81       	ld	r24, Z
     fba:	91 81       	ldd	r25, Z+1	; 0x01
     fbc:	89 2b       	or	r24, r25
     fbe:	a1 f6       	brne	.-88     	; 0xf68 <LCD_displayCharacter+0x1cc>
     fc0:	7b c0       	rjmp	.+246    	; 0x10b8 <LCD_displayCharacter+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc2:	8e 01       	movw	r16, r28
     fc4:	00 5a       	subi	r16, 0xA0	; 160
     fc6:	1f 4f       	sbci	r17, 0xFF	; 255
     fc8:	ce 01       	movw	r24, r28
     fca:	84 5a       	subi	r24, 0xA4	; 164
     fcc:	9f 4f       	sbci	r25, 0xFF	; 255
     fce:	fc 01       	movw	r30, r24
     fd0:	60 81       	ld	r22, Z
     fd2:	71 81       	ldd	r23, Z+1	; 0x01
     fd4:	82 81       	ldd	r24, Z+2	; 0x02
     fd6:	93 81       	ldd	r25, Z+3	; 0x03
     fd8:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	f8 01       	movw	r30, r16
     fe2:	91 83       	std	Z+1, r25	; 0x01
     fe4:	80 83       	st	Z, r24
     fe6:	ce 01       	movw	r24, r28
     fe8:	8c 59       	subi	r24, 0x9C	; 156
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	9e 01       	movw	r18, r28
     fee:	20 5a       	subi	r18, 0xA0	; 160
     ff0:	3f 4f       	sbci	r19, 0xFF	; 255
     ff2:	f9 01       	movw	r30, r18
     ff4:	20 81       	ld	r18, Z
     ff6:	31 81       	ldd	r19, Z+1	; 0x01
     ff8:	fc 01       	movw	r30, r24
     ffa:	31 83       	std	Z+1, r19	; 0x01
     ffc:	20 83       	st	Z, r18
     ffe:	ce 01       	movw	r24, r28
    1000:	8c 59       	subi	r24, 0x9C	; 156
    1002:	9f 4f       	sbci	r25, 0xFF	; 255
    1004:	fc 01       	movw	r30, r24
    1006:	80 81       	ld	r24, Z
    1008:	91 81       	ldd	r25, Z+1	; 0x01
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <LCD_displayCharacter+0x26e>
    100e:	9e 01       	movw	r18, r28
    1010:	2c 59       	subi	r18, 0x9C	; 156
    1012:	3f 4f       	sbci	r19, 0xFF	; 255
    1014:	f9 01       	movw	r30, r18
    1016:	91 83       	std	Z+1, r25	; 0x01
    1018:	80 83       	st	Z, r24
    101a:	4e c0       	rjmp	.+156    	; 0x10b8 <LCD_displayCharacter+0x31c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    101c:	ce 01       	movw	r24, r28
    101e:	81 5b       	subi	r24, 0xB1	; 177
    1020:	9f 4f       	sbci	r25, 0xFF	; 255
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	4f e7       	ldi	r20, 0x7F	; 127
    1028:	53 e4       	ldi	r21, 0x43	; 67
    102a:	fc 01       	movw	r30, r24
    102c:	60 81       	ld	r22, Z
    102e:	71 81       	ldd	r23, Z+1	; 0x01
    1030:	82 81       	ldd	r24, Z+2	; 0x02
    1032:	93 81       	ldd	r25, Z+3	; 0x03
    1034:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gesf2>
    1038:	18 16       	cp	r1, r24
    103a:	6c f5       	brge	.+90     	; 0x1096 <LCD_displayCharacter+0x2fa>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    103c:	8e 01       	movw	r16, r28
    103e:	0a 59       	subi	r16, 0x9A	; 154
    1040:	1f 4f       	sbci	r17, 0xFF	; 255
    1042:	ce 01       	movw	r24, r28
    1044:	8d 5a       	subi	r24, 0xAD	; 173
    1046:	9f 4f       	sbci	r25, 0xFF	; 255
    1048:	fc 01       	movw	r30, r24
    104a:	60 81       	ld	r22, Z
    104c:	71 81       	ldd	r23, Z+1	; 0x01
    104e:	82 81       	ldd	r24, Z+2	; 0x02
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	f8 01       	movw	r30, r16
    105c:	91 83       	std	Z+1, r25	; 0x01
    105e:	80 83       	st	Z, r24
    1060:	ce 01       	movw	r24, r28
    1062:	88 59       	subi	r24, 0x98	; 152
    1064:	9f 4f       	sbci	r25, 0xFF	; 255
    1066:	9e 01       	movw	r18, r28
    1068:	2a 59       	subi	r18, 0x9A	; 154
    106a:	3f 4f       	sbci	r19, 0xFF	; 255
    106c:	f9 01       	movw	r30, r18
    106e:	20 81       	ld	r18, Z
    1070:	31 81       	ldd	r19, Z+1	; 0x01
    1072:	fc 01       	movw	r30, r24
    1074:	31 83       	std	Z+1, r19	; 0x01
    1076:	20 83       	st	Z, r18
    1078:	ce 01       	movw	r24, r28
    107a:	88 59       	subi	r24, 0x98	; 152
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	fc 01       	movw	r30, r24
    1080:	80 81       	ld	r24, Z
    1082:	91 81       	ldd	r25, Z+1	; 0x01
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	f1 f7       	brne	.-4      	; 0x1084 <LCD_displayCharacter+0x2e8>
    1088:	9e 01       	movw	r18, r28
    108a:	28 59       	subi	r18, 0x98	; 152
    108c:	3f 4f       	sbci	r19, 0xFF	; 255
    108e:	f9 01       	movw	r30, r18
    1090:	91 83       	std	Z+1, r25	; 0x01
    1092:	80 83       	st	Z, r24
    1094:	28 c0       	rjmp	.+80     	; 0x10e6 <LCD_displayCharacter+0x34a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1096:	8e 01       	movw	r16, r28
    1098:	09 5a       	subi	r16, 0xA9	; 169
    109a:	1f 4f       	sbci	r17, 0xFF	; 255
    109c:	ce 01       	movw	r24, r28
    109e:	81 5b       	subi	r24, 0xB1	; 177
    10a0:	9f 4f       	sbci	r25, 0xFF	; 255
    10a2:	fc 01       	movw	r30, r24
    10a4:	60 81       	ld	r22, Z
    10a6:	71 81       	ldd	r23, Z+1	; 0x01
    10a8:	82 81       	ldd	r24, Z+2	; 0x02
    10aa:	93 81       	ldd	r25, Z+3	; 0x03
    10ac:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	f8 01       	movw	r30, r16
    10b6:	80 83       	st	Z, r24
    10b8:	ce 01       	movw	r24, r28
    10ba:	86 59       	subi	r24, 0x96	; 150
    10bc:	9f 4f       	sbci	r25, 0xFF	; 255
    10be:	9e 01       	movw	r18, r28
    10c0:	29 5a       	subi	r18, 0xA9	; 169
    10c2:	3f 4f       	sbci	r19, 0xFF	; 255
    10c4:	f9 01       	movw	r30, r18
    10c6:	20 81       	ld	r18, Z
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    10cc:	ce 01       	movw	r24, r28
    10ce:	86 59       	subi	r24, 0x96	; 150
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	fc 01       	movw	r30, r24
    10d4:	80 81       	ld	r24, Z
    10d6:	28 2f       	mov	r18, r24
    10d8:	2a 95       	dec	r18
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <LCD_displayCharacter+0x33c>
    10dc:	ce 01       	movw	r24, r28
    10de:	86 59       	subi	r24, 0x96	; 150
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	fc 01       	movw	r30, r24
    10e4:	20 83       	st	Z, r18
	_delay_us(1);/*delay processing RS set time tas=40ns */
	CLEAR_BIT(LCD_CTRL_PORT,READWRITE); /*write data to LCD so READWRITE =0 */
    10e6:	82 e3       	ldi	r24, 0x32	; 50
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	22 e3       	ldi	r18, 0x32	; 50
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	f9 01       	movw	r30, r18
    10f0:	20 81       	ld	r18, Z
    10f2:	2f 7d       	andi	r18, 0xDF	; 223
    10f4:	fc 01       	movw	r30, r24
    10f6:	20 83       	st	Z, r18
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a0 e8       	ldi	r26, 0x80	; 128
    10fe:	bf e3       	ldi	r27, 0x3F	; 63
    1100:	8d 83       	std	Y+5, r24	; 0x05
    1102:	9e 83       	std	Y+6, r25	; 0x06
    1104:	af 83       	std	Y+7, r26	; 0x07
    1106:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1108:	2b ea       	ldi	r18, 0xAB	; 171
    110a:	3a ea       	ldi	r19, 0xAA	; 170
    110c:	4a e2       	ldi	r20, 0x2A	; 42
    110e:	50 e4       	ldi	r21, 0x40	; 64
    1110:	6d 81       	ldd	r22, Y+5	; 0x05
    1112:	7e 81       	ldd	r23, Y+6	; 0x06
    1114:	8f 81       	ldd	r24, Y+7	; 0x07
    1116:	98 85       	ldd	r25, Y+8	; 0x08
    1118:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	8b ab       	std	Y+51, r24	; 0x33
    1122:	9c ab       	std	Y+52, r25	; 0x34
    1124:	ad ab       	std	Y+53, r26	; 0x35
    1126:	be ab       	std	Y+54, r27	; 0x36
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1128:	8d 81       	ldd	r24, Y+5	; 0x05
    112a:	9e 81       	ldd	r25, Y+6	; 0x06
    112c:	af 81       	ldd	r26, Y+7	; 0x07
    112e:	b8 85       	ldd	r27, Y+8	; 0x08
    1130:	9c 01       	movw	r18, r24
    1132:	ad 01       	movw	r20, r26
    1134:	bc 01       	movw	r22, r24
    1136:	cd 01       	movw	r24, r26
    1138:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__addsf3>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	8f ab       	std	Y+55, r24	; 0x37
    1142:	98 af       	std	Y+56, r25	; 0x38
    1144:	a9 af       	std	Y+57, r26	; 0x39
    1146:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e8       	ldi	r20, 0x80	; 128
    114e:	5f e3       	ldi	r21, 0x3F	; 63
    1150:	6b a9       	ldd	r22, Y+51	; 0x33
    1152:	7c a9       	ldd	r23, Y+52	; 0x34
    1154:	8d a9       	ldd	r24, Y+53	; 0x35
    1156:	9e a9       	ldd	r25, Y+54	; 0x36
    1158:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__cmpsf2>
    115c:	88 23       	and	r24, r24
    115e:	1c f4       	brge	.+6      	; 0x1166 <LCD_displayCharacter+0x3ca>
		__ticks = 1;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	8b af       	std	Y+59, r24	; 0x3b
    1164:	0c c1       	rjmp	.+536    	; 0x137e <LCD_displayCharacter+0x5e2>
	else if (__tmp2 > 65535)
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	3f ef       	ldi	r19, 0xFF	; 255
    116a:	4f e7       	ldi	r20, 0x7F	; 127
    116c:	57 e4       	ldi	r21, 0x47	; 71
    116e:	6f a9       	ldd	r22, Y+55	; 0x37
    1170:	78 ad       	ldd	r23, Y+56	; 0x38
    1172:	89 ad       	ldd	r24, Y+57	; 0x39
    1174:	9a ad       	ldd	r25, Y+58	; 0x3a
    1176:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gesf2>
    117a:	18 16       	cp	r1, r24
    117c:	0c f0       	brlt	.+2      	; 0x1180 <LCD_displayCharacter+0x3e4>
    117e:	c1 c0       	rjmp	.+386    	; 0x1302 <LCD_displayCharacter+0x566>
	{
		_delay_ms(__us / 1000.0);
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	4a e7       	ldi	r20, 0x7A	; 122
    1186:	54 e4       	ldi	r21, 0x44	; 68
    1188:	6d 81       	ldd	r22, Y+5	; 0x05
    118a:	7e 81       	ldd	r23, Y+6	; 0x06
    118c:	8f 81       	ldd	r24, Y+7	; 0x07
    118e:	98 85       	ldd	r25, Y+8	; 0x08
    1190:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__divsf3>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	8c af       	std	Y+60, r24	; 0x3c
    119a:	9d af       	std	Y+61, r25	; 0x3d
    119c:	ae af       	std	Y+62, r26	; 0x3e
    119e:	bf af       	std	Y+63, r27	; 0x3f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    11a0:	8e 01       	movw	r16, r28
    11a2:	00 5c       	subi	r16, 0xC0	; 192
    11a4:	1f 4f       	sbci	r17, 0xFF	; 255
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	4a ef       	ldi	r20, 0xFA	; 250
    11ac:	54 e4       	ldi	r21, 0x44	; 68
    11ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    11b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    11b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    11b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    11b6:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	f8 01       	movw	r30, r16
    11c0:	80 83       	st	Z, r24
    11c2:	91 83       	std	Z+1, r25	; 0x01
    11c4:	a2 83       	std	Z+2, r26	; 0x02
    11c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11c8:	ce 01       	movw	r24, r28
    11ca:	80 5c       	subi	r24, 0xC0	; 192
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e8       	ldi	r20, 0x80	; 128
    11d4:	5f e3       	ldi	r21, 0x3F	; 63
    11d6:	fc 01       	movw	r30, r24
    11d8:	60 81       	ld	r22, Z
    11da:	71 81       	ldd	r23, Z+1	; 0x01
    11dc:	82 81       	ldd	r24, Z+2	; 0x02
    11de:	93 81       	ldd	r25, Z+3	; 0x03
    11e0:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__cmpsf2>
    11e4:	88 23       	and	r24, r24
    11e6:	4c f4       	brge	.+18     	; 0x11fa <LCD_displayCharacter+0x45e>
		__ticks = 1;
    11e8:	ce 01       	movw	r24, r28
    11ea:	8c 5b       	subi	r24, 0xBC	; 188
    11ec:	9f 4f       	sbci	r25, 0xFF	; 255
    11ee:	21 e0       	ldi	r18, 0x01	; 1
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	fc 01       	movw	r30, r24
    11f4:	31 83       	std	Z+1, r19	; 0x01
    11f6:	20 83       	st	Z, r18
    11f8:	69 c0       	rjmp	.+210    	; 0x12cc <LCD_displayCharacter+0x530>
	else if (__tmp > 65535)
    11fa:	ce 01       	movw	r24, r28
    11fc:	80 5c       	subi	r24, 0xC0	; 192
    11fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	3f ef       	ldi	r19, 0xFF	; 255
    1204:	4f e7       	ldi	r20, 0x7F	; 127
    1206:	57 e4       	ldi	r21, 0x47	; 71
    1208:	fc 01       	movw	r30, r24
    120a:	60 81       	ld	r22, Z
    120c:	71 81       	ldd	r23, Z+1	; 0x01
    120e:	82 81       	ldd	r24, Z+2	; 0x02
    1210:	93 81       	ldd	r25, Z+3	; 0x03
    1212:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gesf2>
    1216:	18 16       	cp	r1, r24
    1218:	0c f0       	brlt	.+2      	; 0x121c <LCD_displayCharacter+0x480>
    121a:	46 c0       	rjmp	.+140    	; 0x12a8 <LCD_displayCharacter+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e2       	ldi	r20, 0x20	; 32
    1222:	51 e4       	ldi	r21, 0x41	; 65
    1224:	6c ad       	ldd	r22, Y+60	; 0x3c
    1226:	7d ad       	ldd	r23, Y+61	; 0x3d
    1228:	8e ad       	ldd	r24, Y+62	; 0x3e
    122a:	9f ad       	ldd	r25, Y+63	; 0x3f
    122c:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	8e 01       	movw	r16, r28
    1236:	0c 5b       	subi	r16, 0xBC	; 188
    1238:	1f 4f       	sbci	r17, 0xFF	; 255
    123a:	bc 01       	movw	r22, r24
    123c:	cd 01       	movw	r24, r26
    123e:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	f8 01       	movw	r30, r16
    1248:	91 83       	std	Z+1, r25	; 0x01
    124a:	80 83       	st	Z, r24
    124c:	24 c0       	rjmp	.+72     	; 0x1296 <LCD_displayCharacter+0x4fa>
    124e:	ce 01       	movw	r24, r28
    1250:	8a 5b       	subi	r24, 0xBA	; 186
    1252:	9f 4f       	sbci	r25, 0xFF	; 255
    1254:	28 ec       	ldi	r18, 0xC8	; 200
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	fc 01       	movw	r30, r24
    125a:	31 83       	std	Z+1, r19	; 0x01
    125c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    125e:	ce 01       	movw	r24, r28
    1260:	8a 5b       	subi	r24, 0xBA	; 186
    1262:	9f 4f       	sbci	r25, 0xFF	; 255
    1264:	fc 01       	movw	r30, r24
    1266:	80 81       	ld	r24, Z
    1268:	91 81       	ldd	r25, Z+1	; 0x01
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	f1 f7       	brne	.-4      	; 0x126a <LCD_displayCharacter+0x4ce>
    126e:	9e 01       	movw	r18, r28
    1270:	2a 5b       	subi	r18, 0xBA	; 186
    1272:	3f 4f       	sbci	r19, 0xFF	; 255
    1274:	f9 01       	movw	r30, r18
    1276:	91 83       	std	Z+1, r25	; 0x01
    1278:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    127a:	ce 01       	movw	r24, r28
    127c:	8c 5b       	subi	r24, 0xBC	; 188
    127e:	9f 4f       	sbci	r25, 0xFF	; 255
    1280:	9e 01       	movw	r18, r28
    1282:	2c 5b       	subi	r18, 0xBC	; 188
    1284:	3f 4f       	sbci	r19, 0xFF	; 255
    1286:	f9 01       	movw	r30, r18
    1288:	20 81       	ld	r18, Z
    128a:	31 81       	ldd	r19, Z+1	; 0x01
    128c:	21 50       	subi	r18, 0x01	; 1
    128e:	31 09       	sbc	r19, r1
    1290:	fc 01       	movw	r30, r24
    1292:	31 83       	std	Z+1, r19	; 0x01
    1294:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1296:	ce 01       	movw	r24, r28
    1298:	8c 5b       	subi	r24, 0xBC	; 188
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	fc 01       	movw	r30, r24
    129e:	80 81       	ld	r24, Z
    12a0:	91 81       	ldd	r25, Z+1	; 0x01
    12a2:	89 2b       	or	r24, r25
    12a4:	a1 f6       	brne	.-88     	; 0x124e <LCD_displayCharacter+0x4b2>
    12a6:	6b c0       	rjmp	.+214    	; 0x137e <LCD_displayCharacter+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a8:	8e 01       	movw	r16, r28
    12aa:	0c 5b       	subi	r16, 0xBC	; 188
    12ac:	1f 4f       	sbci	r17, 0xFF	; 255
    12ae:	ce 01       	movw	r24, r28
    12b0:	80 5c       	subi	r24, 0xC0	; 192
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	fc 01       	movw	r30, r24
    12b6:	60 81       	ld	r22, Z
    12b8:	71 81       	ldd	r23, Z+1	; 0x01
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	93 81       	ldd	r25, Z+3	; 0x03
    12be:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	f8 01       	movw	r30, r16
    12c8:	91 83       	std	Z+1, r25	; 0x01
    12ca:	80 83       	st	Z, r24
    12cc:	ce 01       	movw	r24, r28
    12ce:	88 5b       	subi	r24, 0xB8	; 184
    12d0:	9f 4f       	sbci	r25, 0xFF	; 255
    12d2:	9e 01       	movw	r18, r28
    12d4:	2c 5b       	subi	r18, 0xBC	; 188
    12d6:	3f 4f       	sbci	r19, 0xFF	; 255
    12d8:	f9 01       	movw	r30, r18
    12da:	20 81       	ld	r18, Z
    12dc:	31 81       	ldd	r19, Z+1	; 0x01
    12de:	fc 01       	movw	r30, r24
    12e0:	31 83       	std	Z+1, r19	; 0x01
    12e2:	20 83       	st	Z, r18
    12e4:	ce 01       	movw	r24, r28
    12e6:	88 5b       	subi	r24, 0xB8	; 184
    12e8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ea:	fc 01       	movw	r30, r24
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <LCD_displayCharacter+0x554>
    12f4:	9e 01       	movw	r18, r28
    12f6:	28 5b       	subi	r18, 0xB8	; 184
    12f8:	3f 4f       	sbci	r19, 0xFF	; 255
    12fa:	f9 01       	movw	r30, r18
    12fc:	91 83       	std	Z+1, r25	; 0x01
    12fe:	80 83       	st	Z, r24
    1300:	3e c0       	rjmp	.+124    	; 0x137e <LCD_displayCharacter+0x5e2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	4f e7       	ldi	r20, 0x7F	; 127
    1308:	53 e4       	ldi	r21, 0x43	; 67
    130a:	6b a9       	ldd	r22, Y+51	; 0x33
    130c:	7c a9       	ldd	r23, Y+52	; 0x34
    130e:	8d a9       	ldd	r24, Y+53	; 0x35
    1310:	9e a9       	ldd	r25, Y+54	; 0x36
    1312:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gesf2>
    1316:	18 16       	cp	r1, r24
    1318:	4c f5       	brge	.+82     	; 0x136c <LCD_displayCharacter+0x5d0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    131a:	8e 01       	movw	r16, r28
    131c:	06 5b       	subi	r16, 0xB6	; 182
    131e:	1f 4f       	sbci	r17, 0xFF	; 255
    1320:	6f a9       	ldd	r22, Y+55	; 0x37
    1322:	78 ad       	ldd	r23, Y+56	; 0x38
    1324:	89 ad       	ldd	r24, Y+57	; 0x39
    1326:	9a ad       	ldd	r25, Y+58	; 0x3a
    1328:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	f8 01       	movw	r30, r16
    1332:	91 83       	std	Z+1, r25	; 0x01
    1334:	80 83       	st	Z, r24
    1336:	ce 01       	movw	r24, r28
    1338:	84 5b       	subi	r24, 0xB4	; 180
    133a:	9f 4f       	sbci	r25, 0xFF	; 255
    133c:	9e 01       	movw	r18, r28
    133e:	26 5b       	subi	r18, 0xB6	; 182
    1340:	3f 4f       	sbci	r19, 0xFF	; 255
    1342:	f9 01       	movw	r30, r18
    1344:	20 81       	ld	r18, Z
    1346:	31 81       	ldd	r19, Z+1	; 0x01
    1348:	fc 01       	movw	r30, r24
    134a:	31 83       	std	Z+1, r19	; 0x01
    134c:	20 83       	st	Z, r18
    134e:	ce 01       	movw	r24, r28
    1350:	84 5b       	subi	r24, 0xB4	; 180
    1352:	9f 4f       	sbci	r25, 0xFF	; 255
    1354:	fc 01       	movw	r30, r24
    1356:	80 81       	ld	r24, Z
    1358:	91 81       	ldd	r25, Z+1	; 0x01
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	f1 f7       	brne	.-4      	; 0x135a <LCD_displayCharacter+0x5be>
    135e:	9e 01       	movw	r18, r28
    1360:	24 5b       	subi	r18, 0xB4	; 180
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	f9 01       	movw	r30, r18
    1366:	91 83       	std	Z+1, r25	; 0x01
    1368:	80 83       	st	Z, r24
    136a:	1c c0       	rjmp	.+56     	; 0x13a4 <LCD_displayCharacter+0x608>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    136c:	6b a9       	ldd	r22, Y+51	; 0x33
    136e:	7c a9       	ldd	r23, Y+52	; 0x34
    1370:	8d a9       	ldd	r24, Y+53	; 0x35
    1372:	9e a9       	ldd	r25, Y+54	; 0x36
    1374:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	8b af       	std	Y+59, r24	; 0x3b
    137e:	ce 01       	movw	r24, r28
    1380:	82 5b       	subi	r24, 0xB2	; 178
    1382:	9f 4f       	sbci	r25, 0xFF	; 255
    1384:	2b ad       	ldd	r18, Y+59	; 0x3b
    1386:	fc 01       	movw	r30, r24
    1388:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    138a:	ce 01       	movw	r24, r28
    138c:	82 5b       	subi	r24, 0xB2	; 178
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	fc 01       	movw	r30, r24
    1392:	80 81       	ld	r24, Z
    1394:	28 2f       	mov	r18, r24
    1396:	2a 95       	dec	r18
    1398:	f1 f7       	brne	.-4      	; 0x1396 <LCD_displayCharacter+0x5fa>
    139a:	ce 01       	movw	r24, r28
    139c:	82 5b       	subi	r24, 0xB2	; 178
    139e:	9f 4f       	sbci	r25, 0xFF	; 255
    13a0:	fc 01       	movw	r30, r24
    13a2:	20 83       	st	Z, r18
	_delay_us(1);/* delay processing R/W set time tas =40ns */
	SET_BIT(LCD_CTRL_PORT,LCD_ENABLE); /* enable LCD so enable =1 */
    13a4:	82 e3       	ldi	r24, 0x32	; 50
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	22 e3       	ldi	r18, 0x32	; 50
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	f9 01       	movw	r30, r18
    13ae:	20 81       	ld	r18, Z
    13b0:	20 64       	ori	r18, 0x40	; 64
    13b2:	fc 01       	movw	r30, r24
    13b4:	20 83       	st	Z, r18
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	a0 e8       	ldi	r26, 0x80	; 128
    13bc:	bf e3       	ldi	r27, 0x3F	; 63
    13be:	89 87       	std	Y+9, r24	; 0x09
    13c0:	9a 87       	std	Y+10, r25	; 0x0a
    13c2:	ab 87       	std	Y+11, r26	; 0x0b
    13c4:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	4a ef       	ldi	r20, 0xFA	; 250
    13cc:	54 e4       	ldi	r21, 0x44	; 68
    13ce:	69 85       	ldd	r22, Y+9	; 0x09
    13d0:	7a 85       	ldd	r23, Y+10	; 0x0a
    13d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    13d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    13d6:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	89 a7       	std	Y+41, r24	; 0x29
    13e0:	9a a7       	std	Y+42, r25	; 0x2a
    13e2:	ab a7       	std	Y+43, r26	; 0x2b
    13e4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e8       	ldi	r20, 0x80	; 128
    13ec:	5f e3       	ldi	r21, 0x3F	; 63
    13ee:	69 a5       	ldd	r22, Y+41	; 0x29
    13f0:	7a a5       	ldd	r23, Y+42	; 0x2a
    13f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    13f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    13f6:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__cmpsf2>
    13fa:	88 23       	and	r24, r24
    13fc:	2c f4       	brge	.+10     	; 0x1408 <LCD_displayCharacter+0x66c>
		__ticks = 1;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	9e a7       	std	Y+46, r25	; 0x2e
    1404:	8d a7       	std	Y+45, r24	; 0x2d
    1406:	3f c0       	rjmp	.+126    	; 0x1486 <LCD_displayCharacter+0x6ea>
	else if (__tmp > 65535)
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	3f ef       	ldi	r19, 0xFF	; 255
    140c:	4f e7       	ldi	r20, 0x7F	; 127
    140e:	57 e4       	ldi	r21, 0x47	; 71
    1410:	69 a5       	ldd	r22, Y+41	; 0x29
    1412:	7a a5       	ldd	r23, Y+42	; 0x2a
    1414:	8b a5       	ldd	r24, Y+43	; 0x2b
    1416:	9c a5       	ldd	r25, Y+44	; 0x2c
    1418:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gesf2>
    141c:	18 16       	cp	r1, r24
    141e:	4c f5       	brge	.+82     	; 0x1472 <LCD_displayCharacter+0x6d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	40 e2       	ldi	r20, 0x20	; 32
    1426:	51 e4       	ldi	r21, 0x41	; 65
    1428:	69 85       	ldd	r22, Y+9	; 0x09
    142a:	7a 85       	ldd	r23, Y+10	; 0x0a
    142c:	8b 85       	ldd	r24, Y+11	; 0x0b
    142e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1430:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	bc 01       	movw	r22, r24
    143a:	cd 01       	movw	r24, r26
    143c:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	9e a7       	std	Y+46, r25	; 0x2e
    1446:	8d a7       	std	Y+45, r24	; 0x2d
    1448:	0f c0       	rjmp	.+30     	; 0x1468 <LCD_displayCharacter+0x6cc>
    144a:	88 ec       	ldi	r24, 0xC8	; 200
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	98 ab       	std	Y+48, r25	; 0x30
    1450:	8f a7       	std	Y+47, r24	; 0x2f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1452:	8f a5       	ldd	r24, Y+47	; 0x2f
    1454:	98 a9       	ldd	r25, Y+48	; 0x30
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <LCD_displayCharacter+0x6ba>
    145a:	98 ab       	std	Y+48, r25	; 0x30
    145c:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1460:	9e a5       	ldd	r25, Y+46	; 0x2e
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	9e a7       	std	Y+46, r25	; 0x2e
    1466:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1468:	8d a5       	ldd	r24, Y+45	; 0x2d
    146a:	9e a5       	ldd	r25, Y+46	; 0x2e
    146c:	89 2b       	or	r24, r25
    146e:	69 f7       	brne	.-38     	; 0x144a <LCD_displayCharacter+0x6ae>
    1470:	14 c0       	rjmp	.+40     	; 0x149a <LCD_displayCharacter+0x6fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1472:	69 a5       	ldd	r22, Y+41	; 0x29
    1474:	7a a5       	ldd	r23, Y+42	; 0x2a
    1476:	8b a5       	ldd	r24, Y+43	; 0x2b
    1478:	9c a5       	ldd	r25, Y+44	; 0x2c
    147a:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	9e a7       	std	Y+46, r25	; 0x2e
    1484:	8d a7       	std	Y+45, r24	; 0x2d
    1486:	8d a5       	ldd	r24, Y+45	; 0x2d
    1488:	9e a5       	ldd	r25, Y+46	; 0x2e
    148a:	9a ab       	std	Y+50, r25	; 0x32
    148c:	89 ab       	std	Y+49, r24	; 0x31
    148e:	89 a9       	ldd	r24, Y+49	; 0x31
    1490:	9a a9       	ldd	r25, Y+50	; 0x32
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	f1 f7       	brne	.-4      	; 0x1492 <LCD_displayCharacter+0x6f6>
    1496:	9a ab       	std	Y+50, r25	; 0x32
    1498:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1); /*delay for processing Tpw - Tdws = 190ns*/
	PORTC=data; /* out the required data to output data bus D0-->D7 */
    149a:	85 e3       	ldi	r24, 0x35	; 53
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	9e 01       	movw	r18, r28
    14a0:	25 59       	subi	r18, 0x95	; 149
    14a2:	3f 4f       	sbci	r19, 0xFF	; 255
    14a4:	f9 01       	movw	r30, r18
    14a6:	20 81       	ld	r18, Z
    14a8:	fc 01       	movw	r30, r24
    14aa:	20 83       	st	Z, r18
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a0 e8       	ldi	r26, 0x80	; 128
    14b2:	bf e3       	ldi	r27, 0x3F	; 63
    14b4:	8d 87       	std	Y+13, r24	; 0x0d
    14b6:	9e 87       	std	Y+14, r25	; 0x0e
    14b8:	af 87       	std	Y+15, r26	; 0x0f
    14ba:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	4a ef       	ldi	r20, 0xFA	; 250
    14c2:	54 e4       	ldi	r21, 0x44	; 68
    14c4:	6d 85       	ldd	r22, Y+13	; 0x0d
    14c6:	7e 85       	ldd	r23, Y+14	; 0x0e
    14c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ca:	98 89       	ldd	r25, Y+16	; 0x10
    14cc:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	8f 8f       	std	Y+31, r24	; 0x1f
    14d6:	98 a3       	std	Y+32, r25	; 0x20
    14d8:	a9 a3       	std	Y+33, r26	; 0x21
    14da:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e8       	ldi	r20, 0x80	; 128
    14e2:	5f e3       	ldi	r21, 0x3F	; 63
    14e4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    14e6:	78 a1       	ldd	r23, Y+32	; 0x20
    14e8:	89 a1       	ldd	r24, Y+33	; 0x21
    14ea:	9a a1       	ldd	r25, Y+34	; 0x22
    14ec:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__cmpsf2>
    14f0:	88 23       	and	r24, r24
    14f2:	2c f4       	brge	.+10     	; 0x14fe <LCD_displayCharacter+0x762>
		__ticks = 1;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9c a3       	std	Y+36, r25	; 0x24
    14fa:	8b a3       	std	Y+35, r24	; 0x23
    14fc:	3f c0       	rjmp	.+126    	; 0x157c <LCD_displayCharacter+0x7e0>
	else if (__tmp > 65535)
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1508:	78 a1       	ldd	r23, Y+32	; 0x20
    150a:	89 a1       	ldd	r24, Y+33	; 0x21
    150c:	9a a1       	ldd	r25, Y+34	; 0x22
    150e:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gesf2>
    1512:	18 16       	cp	r1, r24
    1514:	4c f5       	brge	.+82     	; 0x1568 <LCD_displayCharacter+0x7cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e2       	ldi	r20, 0x20	; 32
    151c:	51 e4       	ldi	r21, 0x41	; 65
    151e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1520:	7e 85       	ldd	r23, Y+14	; 0x0e
    1522:	8f 85       	ldd	r24, Y+15	; 0x0f
    1524:	98 89       	ldd	r25, Y+16	; 0x10
    1526:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	bc 01       	movw	r22, r24
    1530:	cd 01       	movw	r24, r26
    1532:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	9c a3       	std	Y+36, r25	; 0x24
    153c:	8b a3       	std	Y+35, r24	; 0x23
    153e:	0f c0       	rjmp	.+30     	; 0x155e <LCD_displayCharacter+0x7c2>
    1540:	88 ec       	ldi	r24, 0xC8	; 200
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	9e a3       	std	Y+38, r25	; 0x26
    1546:	8d a3       	std	Y+37, r24	; 0x25
    1548:	8d a1       	ldd	r24, Y+37	; 0x25
    154a:	9e a1       	ldd	r25, Y+38	; 0x26
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <LCD_displayCharacter+0x7b0>
    1550:	9e a3       	std	Y+38, r25	; 0x26
    1552:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1554:	8b a1       	ldd	r24, Y+35	; 0x23
    1556:	9c a1       	ldd	r25, Y+36	; 0x24
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	9c a3       	std	Y+36, r25	; 0x24
    155c:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155e:	8b a1       	ldd	r24, Y+35	; 0x23
    1560:	9c a1       	ldd	r25, Y+36	; 0x24
    1562:	89 2b       	or	r24, r25
    1564:	69 f7       	brne	.-38     	; 0x1540 <LCD_displayCharacter+0x7a4>
    1566:	14 c0       	rjmp	.+40     	; 0x1590 <LCD_displayCharacter+0x7f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1568:	6f 8d       	ldd	r22, Y+31	; 0x1f
    156a:	78 a1       	ldd	r23, Y+32	; 0x20
    156c:	89 a1       	ldd	r24, Y+33	; 0x21
    156e:	9a a1       	ldd	r25, Y+34	; 0x22
    1570:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	9c a3       	std	Y+36, r25	; 0x24
    157a:	8b a3       	std	Y+35, r24	; 0x23
    157c:	8b a1       	ldd	r24, Y+35	; 0x23
    157e:	9c a1       	ldd	r25, Y+36	; 0x24
    1580:	98 a7       	std	Y+40, r25	; 0x28
    1582:	8f a3       	std	Y+39, r24	; 0x27
    1584:	8f a1       	ldd	r24, Y+39	; 0x27
    1586:	98 a5       	ldd	r25, Y+40	; 0x28
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	f1 f7       	brne	.-4      	; 0x1588 <LCD_displayCharacter+0x7ec>
    158c:	98 a7       	std	Y+40, r25	; 0x28
    158e:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(1);/* delay processing command setup time tdsw=60ns */
	CLEAR_BIT(LCD_CTRL_PORT,6); /* disable LCD so enable pin =0*/
    1590:	82 e3       	ldi	r24, 0x32	; 50
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	22 e3       	ldi	r18, 0x32	; 50
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	f9 01       	movw	r30, r18
    159a:	20 81       	ld	r18, Z
    159c:	2f 7b       	andi	r18, 0xBF	; 191
    159e:	fc 01       	movw	r30, r24
    15a0:	20 83       	st	Z, r18
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a0 e8       	ldi	r26, 0x80	; 128
    15a8:	bf e3       	ldi	r27, 0x3F	; 63
    15aa:	89 8b       	std	Y+17, r24	; 0x11
    15ac:	9a 8b       	std	Y+18, r25	; 0x12
    15ae:	ab 8b       	std	Y+19, r26	; 0x13
    15b0:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	4a ef       	ldi	r20, 0xFA	; 250
    15b8:	54 e4       	ldi	r21, 0x44	; 68
    15ba:	69 89       	ldd	r22, Y+17	; 0x11
    15bc:	7a 89       	ldd	r23, Y+18	; 0x12
    15be:	8b 89       	ldd	r24, Y+19	; 0x13
    15c0:	9c 89       	ldd	r25, Y+20	; 0x14
    15c2:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	8d 8b       	std	Y+21, r24	; 0x15
    15cc:	9e 8b       	std	Y+22, r25	; 0x16
    15ce:	af 8b       	std	Y+23, r26	; 0x17
    15d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	40 e8       	ldi	r20, 0x80	; 128
    15d8:	5f e3       	ldi	r21, 0x3F	; 63
    15da:	6d 89       	ldd	r22, Y+21	; 0x15
    15dc:	7e 89       	ldd	r23, Y+22	; 0x16
    15de:	8f 89       	ldd	r24, Y+23	; 0x17
    15e0:	98 8d       	ldd	r25, Y+24	; 0x18
    15e2:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__cmpsf2>
    15e6:	88 23       	and	r24, r24
    15e8:	2c f4       	brge	.+10     	; 0x15f4 <LCD_displayCharacter+0x858>
		__ticks = 1;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	9a 8f       	std	Y+26, r25	; 0x1a
    15f0:	89 8f       	std	Y+25, r24	; 0x19
    15f2:	3f c0       	rjmp	.+126    	; 0x1672 <LCD_displayCharacter+0x8d6>
	else if (__tmp > 65535)
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	3f ef       	ldi	r19, 0xFF	; 255
    15f8:	4f e7       	ldi	r20, 0x7F	; 127
    15fa:	57 e4       	ldi	r21, 0x47	; 71
    15fc:	6d 89       	ldd	r22, Y+21	; 0x15
    15fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1600:	8f 89       	ldd	r24, Y+23	; 0x17
    1602:	98 8d       	ldd	r25, Y+24	; 0x18
    1604:	0e 94 bb 13 	call	0x2776	; 0x2776 <__gesf2>
    1608:	18 16       	cp	r1, r24
    160a:	4c f5       	brge	.+82     	; 0x165e <LCD_displayCharacter+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	40 e2       	ldi	r20, 0x20	; 32
    1612:	51 e4       	ldi	r21, 0x41	; 65
    1614:	69 89       	ldd	r22, Y+17	; 0x11
    1616:	7a 89       	ldd	r23, Y+18	; 0x12
    1618:	8b 89       	ldd	r24, Y+19	; 0x13
    161a:	9c 89       	ldd	r25, Y+20	; 0x14
    161c:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	bc 01       	movw	r22, r24
    1626:	cd 01       	movw	r24, r26
    1628:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	9a 8f       	std	Y+26, r25	; 0x1a
    1632:	89 8f       	std	Y+25, r24	; 0x19
    1634:	0f c0       	rjmp	.+30     	; 0x1654 <LCD_displayCharacter+0x8b8>
    1636:	88 ec       	ldi	r24, 0xC8	; 200
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	9c 8f       	std	Y+28, r25	; 0x1c
    163c:	8b 8f       	std	Y+27, r24	; 0x1b
    163e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1640:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	f1 f7       	brne	.-4      	; 0x1642 <LCD_displayCharacter+0x8a6>
    1646:	9c 8f       	std	Y+28, r25	; 0x1c
    1648:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    164a:	89 8d       	ldd	r24, Y+25	; 0x19
    164c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	9a 8f       	std	Y+26, r25	; 0x1a
    1652:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1654:	89 8d       	ldd	r24, Y+25	; 0x19
    1656:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1658:	89 2b       	or	r24, r25
    165a:	69 f7       	brne	.-38     	; 0x1636 <LCD_displayCharacter+0x89a>
	_delay_ms(1); /* delay for processing hold time th =10ns*/
}
    165c:	14 c0       	rjmp	.+40     	; 0x1686 <LCD_displayCharacter+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    165e:	6d 89       	ldd	r22, Y+21	; 0x15
    1660:	7e 89       	ldd	r23, Y+22	; 0x16
    1662:	8f 89       	ldd	r24, Y+23	; 0x17
    1664:	98 8d       	ldd	r25, Y+24	; 0x18
    1666:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__fixunssfsi>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	9a 8f       	std	Y+26, r25	; 0x1a
    1670:	89 8f       	std	Y+25, r24	; 0x19
    1672:	89 8d       	ldd	r24, Y+25	; 0x19
    1674:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1676:	9e 8f       	std	Y+30, r25	; 0x1e
    1678:	8d 8f       	std	Y+29, r24	; 0x1d
    167a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    167c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	f1 f7       	brne	.-4      	; 0x167e <LCD_displayCharacter+0x8e2>
    1682:	9e 8f       	std	Y+30, r25	; 0x1e
    1684:	8d 8f       	std	Y+29, r24	; 0x1d
    1686:	00 00       	nop
    1688:	c5 59       	subi	r28, 0x95	; 149
    168a:	df 4f       	sbci	r29, 0xFF	; 255
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	08 95       	ret

000016a0 <LCD_displayString>:
void LCD_displayString(uint8 *str)
{
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <LCD_displayString+0x6>
    16a6:	1f 92       	push	r1
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	9b 83       	std	Y+3, r25	; 0x03
    16ae:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0 ;str[i]!='\0';i++)
    16b0:	19 82       	std	Y+1, r1	; 0x01
    16b2:	0e c0       	rjmp	.+28     	; 0x16d0 <LCD_displayString+0x30>
	LCD_displayCharacter( str[i]);
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	2a 81       	ldd	r18, Y+2	; 0x02
    16bc:	3b 81       	ldd	r19, Y+3	; 0x03
    16be:	82 0f       	add	r24, r18
    16c0:	93 1f       	adc	r25, r19
    16c2:	fc 01       	movw	r30, r24
    16c4:	80 81       	ld	r24, Z
    16c6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_displayCharacter>
	CLEAR_BIT(LCD_CTRL_PORT,6); /* disable LCD so enable pin =0*/
	_delay_ms(1); /* delay for processing hold time th =10ns*/
}
void LCD_displayString(uint8 *str)
{
	for(uint8 i=0 ;str[i]!='\0';i++)
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	8f 5f       	subi	r24, 0xFF	; 255
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	88 2f       	mov	r24, r24
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	2a 81       	ldd	r18, Y+2	; 0x02
    16d8:	3b 81       	ldd	r19, Y+3	; 0x03
    16da:	82 0f       	add	r24, r18
    16dc:	93 1f       	adc	r25, r19
    16de:	fc 01       	movw	r30, r24
    16e0:	80 81       	ld	r24, Z
    16e2:	88 23       	and	r24, r24
    16e4:	39 f7       	brne	.-50     	; 0x16b4 <LCD_displayString+0x14>
	LCD_displayCharacter( str[i]);
}
    16e6:	00 00       	nop
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
    16f2:	08 95       	ret

000016f4 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{	/* first of all calculate the required address */
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <LCD_goToRowColumn+0x6>
    16fa:	1f 92       	push	r1
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	8a 83       	std	Y+2, r24	; 0x02
    1702:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	91 05       	cpc	r25, r1
    170e:	79 f0       	breq	.+30     	; 0x172e <LCD_goToRowColumn+0x3a>
    1710:	82 30       	cpi	r24, 0x02	; 2
    1712:	91 05       	cpc	r25, r1
    1714:	1c f4       	brge	.+6      	; 0x171c <LCD_goToRowColumn+0x28>
    1716:	89 2b       	or	r24, r25
    1718:	39 f0       	breq	.+14     	; 0x1728 <LCD_goToRowColumn+0x34>
    171a:	15 c0       	rjmp	.+42     	; 0x1746 <LCD_goToRowColumn+0x52>
    171c:	82 30       	cpi	r24, 0x02	; 2
    171e:	91 05       	cpc	r25, r1
    1720:	51 f0       	breq	.+20     	; 0x1736 <LCD_goToRowColumn+0x42>
    1722:	03 97       	sbiw	r24, 0x03	; 3
    1724:	61 f0       	breq	.+24     	; 0x173e <LCD_goToRowColumn+0x4a>
    1726:	0f c0       	rjmp	.+30     	; 0x1746 <LCD_goToRowColumn+0x52>
	{
	case 0:
		address=col;
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	89 83       	std	Y+1, r24	; 0x01
		break;
    172c:	0c c0       	rjmp	.+24     	; 0x1746 <LCD_goToRowColumn+0x52>
	case 1:
		address=0x40+col;
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	80 5c       	subi	r24, 0xC0	; 192
    1732:	89 83       	std	Y+1, r24	; 0x01
		break;
    1734:	08 c0       	rjmp	.+16     	; 0x1746 <LCD_goToRowColumn+0x52>
	case 2:
		address=0x10+col;
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	80 5f       	subi	r24, 0xF0	; 240
    173a:	89 83       	std	Y+1, r24	; 0x01
		break;
    173c:	04 c0       	rjmp	.+8      	; 0x1746 <LCD_goToRowColumn+0x52>
	case 3:
		address=0x50+col;
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	80 5b       	subi	r24, 0xB0	; 176
    1742:	89 83       	std	Y+1, r24	; 0x01
		break;
    1744:	00 00       	nop
		}
	/* pass the specific address to the LCD
	 * to change the address you should add 0x80 to address
	 */
	LCD_sendCommand(address|0x80);
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	80 68       	ori	r24, 0x80	; 128
    174a:	0e 94 c8 04 	call	0x990	; 0x990 <LCD_sendCommand>
}
    174e:	00 00       	nop
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	08 95       	ret

0000175c <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row, uint8 col ,uint8 *str)
{
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	00 d0       	rcall	.+0      	; 0x1762 <LCD_displayStringRowColumn+0x6>
    1762:	00 d0       	rcall	.+0      	; 0x1764 <LCD_displayStringRowColumn+0x8>
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	6a 83       	std	Y+2, r22	; 0x02
    176c:	5c 83       	std	Y+4, r21	; 0x04
    176e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn( row, col);/* go to the required position*/
    1770:	6a 81       	ldd	r22, Y+2	; 0x02
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <LCD_goToRowColumn>
	LCD_displayString(str);/* display the string*/
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	9c 81       	ldd	r25, Y+4	; 0x04
    177c:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <LCD_displayString>
}
    1780:	00 00       	nop
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	08 95       	ret

00001790 <LCD_clearScreen>:
void LCD_clearScreen()
{
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);/* clear display*/
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	0e 94 c8 04 	call	0x990	; 0x990 <LCD_sendCommand>
}
    179e:	00 00       	nop
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	08 95       	ret

000017a6 <LCD_intgerToString>:
void LCD_intgerToString(int data)
{
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	62 97       	sbiw	r28, 0x12	; 18
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	9a 8b       	std	Y+18, r25	; 0x12
    17bc:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];/* buffer to hold acii result */
	itoa(data,buff,10); /* 10 for decimal base */
    17be:	89 89       	ldd	r24, Y+17	; 0x11
    17c0:	9a 89       	ldd	r25, Y+18	; 0x12
    17c2:	4a e0       	ldi	r20, 0x0A	; 10
    17c4:	50 e0       	ldi	r21, 0x00	; 0
    17c6:	9e 01       	movw	r18, r28
    17c8:	2f 5f       	subi	r18, 0xFF	; 255
    17ca:	3f 4f       	sbci	r19, 0xFF	; 255
    17cc:	b9 01       	movw	r22, r18
    17ce:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <itoa>
	LCD_displayString(buff);
    17d2:	ce 01       	movw	r24, r28
    17d4:	01 96       	adiw	r24, 0x01	; 1
    17d6:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <LCD_displayString>
}
    17da:	00 00       	nop
    17dc:	62 96       	adiw	r28, 0x12	; 18
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	08 95       	ret

000017ee <__vector_19>:

#include"timer.h"
static volatile  void(*g_callBackPtr)(void)= NULL_PTR;
static volatile TIMER_configurationType * configPtr;
ISR(TIMER0_COMP_vect)
{
    17ee:	1f 92       	push	r1
    17f0:	0f 92       	push	r0
    17f2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    17f6:	0f 92       	push	r0
    17f8:	11 24       	eor	r1, r1
    17fa:	2f 93       	push	r18
    17fc:	3f 93       	push	r19
    17fe:	4f 93       	push	r20
    1800:	5f 93       	push	r21
    1802:	6f 93       	push	r22
    1804:	7f 93       	push	r23
    1806:	8f 93       	push	r24
    1808:	9f 93       	push	r25
    180a:	af 93       	push	r26
    180c:	bf 93       	push	r27
    180e:	ef 93       	push	r30
    1810:	ff 93       	push	r31
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    181a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_callBackPtr>
    181e:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <g_callBackPtr+0x1>
    1822:	89 2b       	or	r24, r25
    1824:	31 f0       	breq	.+12     	; 0x1832 <__vector_19+0x44>
		g_callBackPtr();
    1826:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_callBackPtr>
    182a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <g_callBackPtr+0x1>
    182e:	fc 01       	movw	r30, r24
    1830:	09 95       	icall

}
    1832:	00 00       	nop
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	ff 91       	pop	r31
    183a:	ef 91       	pop	r30
    183c:	bf 91       	pop	r27
    183e:	af 91       	pop	r26
    1840:	9f 91       	pop	r25
    1842:	8f 91       	pop	r24
    1844:	7f 91       	pop	r23
    1846:	6f 91       	pop	r22
    1848:	5f 91       	pop	r21
    184a:	4f 91       	pop	r20
    184c:	3f 91       	pop	r19
    184e:	2f 91       	pop	r18
    1850:	0f 90       	pop	r0
    1852:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1856:	0f 90       	pop	r0
    1858:	1f 90       	pop	r1
    185a:	18 95       	reti

0000185c <__vector_9>:
ISR(TIMER0_OVF_vect)
{
    185c:	1f 92       	push	r1
    185e:	0f 92       	push	r0
    1860:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1864:	0f 92       	push	r0
    1866:	11 24       	eor	r1, r1
    1868:	2f 93       	push	r18
    186a:	3f 93       	push	r19
    186c:	4f 93       	push	r20
    186e:	5f 93       	push	r21
    1870:	6f 93       	push	r22
    1872:	7f 93       	push	r23
    1874:	8f 93       	push	r24
    1876:	9f 93       	push	r25
    1878:	af 93       	push	r26
    187a:	bf 93       	push	r27
    187c:	ef 93       	push	r30
    187e:	ff 93       	push	r31
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    1888:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_callBackPtr>
    188c:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <g_callBackPtr+0x1>
    1890:	89 2b       	or	r24, r25
    1892:	31 f0       	breq	.+12     	; 0x18a0 <__vector_9+0x44>
		g_callBackPtr();
    1894:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_callBackPtr>
    1898:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <g_callBackPtr+0x1>
    189c:	fc 01       	movw	r30, r24
    189e:	09 95       	icall

}
    18a0:	00 00       	nop
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	ff 91       	pop	r31
    18a8:	ef 91       	pop	r30
    18aa:	bf 91       	pop	r27
    18ac:	af 91       	pop	r26
    18ae:	9f 91       	pop	r25
    18b0:	8f 91       	pop	r24
    18b2:	7f 91       	pop	r23
    18b4:	6f 91       	pop	r22
    18b6:	5f 91       	pop	r21
    18b8:	4f 91       	pop	r20
    18ba:	3f 91       	pop	r19
    18bc:	2f 91       	pop	r18
    18be:	0f 90       	pop	r0
    18c0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18c4:	0f 90       	pop	r0
    18c6:	1f 90       	pop	r1
    18c8:	18 95       	reti

000018ca <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    18ca:	1f 92       	push	r1
    18cc:	0f 92       	push	r0
    18ce:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18d2:	0f 92       	push	r0
    18d4:	11 24       	eor	r1, r1
    18d6:	2f 93       	push	r18
    18d8:	3f 93       	push	r19
    18da:	4f 93       	push	r20
    18dc:	5f 93       	push	r21
    18de:	6f 93       	push	r22
    18e0:	7f 93       	push	r23
    18e2:	8f 93       	push	r24
    18e4:	9f 93       	push	r25
    18e6:	af 93       	push	r26
    18e8:	bf 93       	push	r27
    18ea:	ef 93       	push	r30
    18ec:	ff 93       	push	r31
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    18f6:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_callBackPtr>
    18fa:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <g_callBackPtr+0x1>
    18fe:	89 2b       	or	r24, r25
    1900:	31 f0       	breq	.+12     	; 0x190e <__vector_6+0x44>
			g_callBackPtr();
    1902:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_callBackPtr>
    1906:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <g_callBackPtr+0x1>
    190a:	fc 01       	movw	r30, r24
    190c:	09 95       	icall
}
    190e:	00 00       	nop
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	ff 91       	pop	r31
    1916:	ef 91       	pop	r30
    1918:	bf 91       	pop	r27
    191a:	af 91       	pop	r26
    191c:	9f 91       	pop	r25
    191e:	8f 91       	pop	r24
    1920:	7f 91       	pop	r23
    1922:	6f 91       	pop	r22
    1924:	5f 91       	pop	r21
    1926:	4f 91       	pop	r20
    1928:	3f 91       	pop	r19
    192a:	2f 91       	pop	r18
    192c:	0f 90       	pop	r0
    192e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1932:	0f 90       	pop	r0
    1934:	1f 90       	pop	r1
    1936:	18 95       	reti

00001938 <TIMER_init>:
void TIMER_init( TIMER_configurationType * config)
{configPtr=config;
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	00 d0       	rcall	.+0      	; 0x193e <TIMER_init+0x6>
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	9a 83       	std	Y+2, r25	; 0x02
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	9a 81       	ldd	r25, Y+2	; 0x02
    194a:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <configPtr+0x1>
    194e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <configPtr>
	if(config->timerNumber==0)
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	9a 81       	ldd	r25, Y+2	; 0x02
    1956:	fc 01       	movw	r30, r24
    1958:	80 81       	ld	r24, Z
    195a:	88 23       	and	r24, r24
    195c:	09 f0       	breq	.+2      	; 0x1960 <TIMER_init+0x28>
    195e:	22 c1       	rjmp	.+580    	; 0x1ba4 <TIMER_init+0x26c>
	{
		TCCR0=0;
    1960:	83 e5       	ldi	r24, 0x53	; 83
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	fc 01       	movw	r30, r24
    1966:	10 82       	st	Z, r1
	switch(config->prescaler)
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	9a 81       	ldd	r25, Y+2	; 0x02
    196c:	fc 01       	movw	r30, r24
    196e:	85 89       	ldd	r24, Z+21	; 0x15
    1970:	96 89       	ldd	r25, Z+22	; 0x16
    1972:	80 34       	cpi	r24, 0x40	; 64
    1974:	91 05       	cpc	r25, r1
    1976:	c1 f0       	breq	.+48     	; 0x19a8 <TIMER_init+0x70>
    1978:	81 34       	cpi	r24, 0x41	; 65
    197a:	91 05       	cpc	r25, r1
    197c:	18 f4       	brcc	.+6      	; 0x1984 <TIMER_init+0x4c>
    197e:	08 97       	sbiw	r24, 0x08	; 8
    1980:	49 f0       	breq	.+18     	; 0x1994 <TIMER_init+0x5c>
    1982:	30 c0       	rjmp	.+96     	; 0x19e4 <TIMER_init+0xac>
    1984:	81 15       	cp	r24, r1
    1986:	f1 e0       	ldi	r31, 0x01	; 1
    1988:	9f 07       	cpc	r25, r31
    198a:	c1 f0       	breq	.+48     	; 0x19bc <TIMER_init+0x84>
    198c:	81 15       	cp	r24, r1
    198e:	94 40       	sbci	r25, 0x04	; 4
    1990:	f9 f0       	breq	.+62     	; 0x19d0 <TIMER_init+0x98>
    1992:	28 c0       	rjmp	.+80     	; 0x19e4 <TIMER_init+0xac>
	{
	case 8:
		TCCR0|=(1<<CS01);
    1994:	83 e5       	ldi	r24, 0x53	; 83
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	23 e5       	ldi	r18, 0x53	; 83
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	f9 01       	movw	r30, r18
    199e:	20 81       	ld	r18, Z
    19a0:	22 60       	ori	r18, 0x02	; 2
    19a2:	fc 01       	movw	r30, r24
    19a4:	20 83       	st	Z, r18
		break;
    19a6:	27 c0       	rjmp	.+78     	; 0x19f6 <TIMER_init+0xbe>
	case 64:
			TCCR0|=(1<<CS00)|(1<<CS01);
    19a8:	83 e5       	ldi	r24, 0x53	; 83
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	23 e5       	ldi	r18, 0x53	; 83
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	f9 01       	movw	r30, r18
    19b2:	20 81       	ld	r18, Z
    19b4:	23 60       	ori	r18, 0x03	; 3
    19b6:	fc 01       	movw	r30, r24
    19b8:	20 83       	st	Z, r18
			break;
    19ba:	1d c0       	rjmp	.+58     	; 0x19f6 <TIMER_init+0xbe>
	case 256:
			TCCR0|=(1<<CS02);
    19bc:	83 e5       	ldi	r24, 0x53	; 83
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	23 e5       	ldi	r18, 0x53	; 83
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	f9 01       	movw	r30, r18
    19c6:	20 81       	ld	r18, Z
    19c8:	24 60       	ori	r18, 0x04	; 4
    19ca:	fc 01       	movw	r30, r24
    19cc:	20 83       	st	Z, r18
			break;
    19ce:	13 c0       	rjmp	.+38     	; 0x19f6 <TIMER_init+0xbe>
	case 1024:
			TCCR0|=(1<<CS00)|(1<<CS02);
    19d0:	83 e5       	ldi	r24, 0x53	; 83
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	23 e5       	ldi	r18, 0x53	; 83
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	f9 01       	movw	r30, r18
    19da:	20 81       	ld	r18, Z
    19dc:	25 60       	ori	r18, 0x05	; 5
    19de:	fc 01       	movw	r30, r24
    19e0:	20 83       	st	Z, r18
			break;
    19e2:	09 c0       	rjmp	.+18     	; 0x19f6 <TIMER_init+0xbe>
	default:
			TCCR0|=(1<<CS00);
    19e4:	83 e5       	ldi	r24, 0x53	; 83
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	23 e5       	ldi	r18, 0x53	; 83
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	f9 01       	movw	r30, r18
    19ee:	20 81       	ld	r18, Z
    19f0:	21 60       	ori	r18, 0x01	; 1
    19f2:	fc 01       	movw	r30, r24
    19f4:	20 83       	st	Z, r18

		}

	if(!strcmp(config->mode,"compare"))
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	9a 81       	ldd	r25, Y+2	; 0x02
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	6e e7       	ldi	r22, 0x7E	; 126
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strcmp>
    1a04:	89 2b       	or	r24, r25
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <TIMER_init+0xd2>
    1a08:	62 c0       	rjmp	.+196    	; 0x1ace <TIMER_init+0x196>
	{	TCCR0|=(1<<FOC0)|(1<<WGM01);
    1a0a:	83 e5       	ldi	r24, 0x53	; 83
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	23 e5       	ldi	r18, 0x53	; 83
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	f9 01       	movw	r30, r18
    1a14:	20 81       	ld	r18, Z
    1a16:	28 68       	ori	r18, 0x88	; 136
    1a18:	fc 01       	movw	r30, r24
    1a1a:	20 83       	st	Z, r18

		if(!strcmp(config->compareMatchMode,"toggle"))
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a20:	47 96       	adiw	r24, 0x17	; 23
    1a22:	66 e8       	ldi	r22, 0x86	; 134
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strcmp>
    1a2a:	89 2b       	or	r24, r25
    1a2c:	99 f4       	brne	.+38     	; 0x1a54 <TIMER_init+0x11c>
		{
		TCCR0|=(1<<COM00);
    1a2e:	83 e5       	ldi	r24, 0x53	; 83
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	23 e5       	ldi	r18, 0x53	; 83
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	f9 01       	movw	r30, r18
    1a38:	20 81       	ld	r18, Z
    1a3a:	20 61       	ori	r18, 0x10	; 16
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	20 83       	st	Z, r18
		SET_BIT(DDRB,3);
    1a40:	87 e3       	ldi	r24, 0x37	; 55
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	27 e3       	ldi	r18, 0x37	; 55
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	f9 01       	movw	r30, r18
    1a4a:	20 81       	ld	r18, Z
    1a4c:	28 60       	ori	r18, 0x08	; 8
    1a4e:	fc 01       	movw	r30, r24
    1a50:	20 83       	st	Z, r18
    1a52:	37 c0       	rjmp	.+110    	; 0x1ac2 <TIMER_init+0x18a>
		}
		else if(!strcmp(config->compareMatchMode,"clear"))
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	9a 81       	ldd	r25, Y+2	; 0x02
    1a58:	47 96       	adiw	r24, 0x17	; 23
    1a5a:	6d e8       	ldi	r22, 0x8D	; 141
    1a5c:	70 e0       	ldi	r23, 0x00	; 0
    1a5e:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strcmp>
    1a62:	89 2b       	or	r24, r25
    1a64:	99 f4       	brne	.+38     	; 0x1a8c <TIMER_init+0x154>
			{
			TCCR0|=(1<<COM01);
    1a66:	83 e5       	ldi	r24, 0x53	; 83
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	23 e5       	ldi	r18, 0x53	; 83
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	f9 01       	movw	r30, r18
    1a70:	20 81       	ld	r18, Z
    1a72:	20 62       	ori	r18, 0x20	; 32
    1a74:	fc 01       	movw	r30, r24
    1a76:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    1a78:	87 e3       	ldi	r24, 0x37	; 55
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	27 e3       	ldi	r18, 0x37	; 55
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	f9 01       	movw	r30, r18
    1a82:	20 81       	ld	r18, Z
    1a84:	28 60       	ori	r18, 0x08	; 8
    1a86:	fc 01       	movw	r30, r24
    1a88:	20 83       	st	Z, r18
    1a8a:	1b c0       	rjmp	.+54     	; 0x1ac2 <TIMER_init+0x18a>

			}
		else if(!strcmp(config->compareMatchMode,"set"))
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a90:	47 96       	adiw	r24, 0x17	; 23
    1a92:	63 e9       	ldi	r22, 0x93	; 147
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strcmp>
    1a9a:	89 2b       	or	r24, r25
    1a9c:	91 f4       	brne	.+36     	; 0x1ac2 <TIMER_init+0x18a>
			{
			TCCR0|=(1<<COM01)|(1<<COM00);
    1a9e:	83 e5       	ldi	r24, 0x53	; 83
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	23 e5       	ldi	r18, 0x53	; 83
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	f9 01       	movw	r30, r18
    1aa8:	20 81       	ld	r18, Z
    1aaa:	20 63       	ori	r18, 0x30	; 48
    1aac:	fc 01       	movw	r30, r24
    1aae:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    1ab0:	87 e3       	ldi	r24, 0x37	; 55
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	27 e3       	ldi	r18, 0x37	; 55
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	f9 01       	movw	r30, r18
    1aba:	20 81       	ld	r18, Z
    1abc:	28 60       	ori	r18, 0x08	; 8
    1abe:	fc 01       	movw	r30, r24
    1ac0:	20 83       	st	Z, r18

			}
		//enable interrupt
		TIMSK=(1<<OCIE0);
    1ac2:	89 e5       	ldi	r24, 0x59	; 89
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	22 e0       	ldi	r18, 0x02	; 2
    1ac8:	fc 01       	movw	r30, r24
    1aca:	20 83       	st	Z, r18
    1acc:	6b c0       	rjmp	.+214    	; 0x1ba4 <TIMER_init+0x26c>

	}
	else if(!strcmp(config->mode,"normal"))
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	67 e9       	ldi	r22, 0x97	; 151
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strcmp>
    1adc:	89 2b       	or	r24, r25
    1ade:	79 f4       	brne	.+30     	; 0x1afe <TIMER_init+0x1c6>
	{
		TCCR0|=(1<<FOC0);
    1ae0:	83 e5       	ldi	r24, 0x53	; 83
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	23 e5       	ldi	r18, 0x53	; 83
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	f9 01       	movw	r30, r18
    1aea:	20 81       	ld	r18, Z
    1aec:	20 68       	ori	r18, 0x80	; 128
    1aee:	fc 01       	movw	r30, r24
    1af0:	20 83       	st	Z, r18
		TIMSK=(1<<TOIE0);
    1af2:	89 e5       	ldi	r24, 0x59	; 89
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	21 e0       	ldi	r18, 0x01	; 1
    1af8:	fc 01       	movw	r30, r24
    1afa:	20 83       	st	Z, r18
    1afc:	53 c0       	rjmp	.+166    	; 0x1ba4 <TIMER_init+0x26c>
	}
	else if(!strcmp(config->mode,"pwm"))
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	9a 81       	ldd	r25, Y+2	; 0x02
    1b02:	01 96       	adiw	r24, 0x01	; 1
    1b04:	6e e9       	ldi	r22, 0x9E	; 158
    1b06:	70 e0       	ldi	r23, 0x00	; 0
    1b08:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strcmp>
    1b0c:	89 2b       	or	r24, r25
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <TIMER_init+0x1da>
    1b10:	49 c0       	rjmp	.+146    	; 0x1ba4 <TIMER_init+0x26c>
	{
		TCCR0 |=(1<<WGM00)|(1<<WGM01);
    1b12:	83 e5       	ldi	r24, 0x53	; 83
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	23 e5       	ldi	r18, 0x53	; 83
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	f9 01       	movw	r30, r18
    1b1c:	20 81       	ld	r18, Z
    1b1e:	28 64       	ori	r18, 0x48	; 72
    1b20:	fc 01       	movw	r30, r24
    1b22:	20 83       	st	Z, r18
		if(!strcmp(config->pwmMode,"inverting"))
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	8b 96       	adiw	r24, 0x2b	; 43
    1b2a:	62 ea       	ldi	r22, 0xA2	; 162
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strcmp>
    1b32:	89 2b       	or	r24, r25
    1b34:	e1 f4       	brne	.+56     	; 0x1b6e <TIMER_init+0x236>
				{
				TCCR0|=(1<<COM00);
    1b36:	83 e5       	ldi	r24, 0x53	; 83
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	23 e5       	ldi	r18, 0x53	; 83
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	f9 01       	movw	r30, r18
    1b40:	20 81       	ld	r18, Z
    1b42:	20 61       	ori	r18, 0x10	; 16
    1b44:	fc 01       	movw	r30, r24
    1b46:	20 83       	st	Z, r18
				TCCR0|=(1<<COM01);
    1b48:	83 e5       	ldi	r24, 0x53	; 83
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	23 e5       	ldi	r18, 0x53	; 83
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	f9 01       	movw	r30, r18
    1b52:	20 81       	ld	r18, Z
    1b54:	20 62       	ori	r18, 0x20	; 32
    1b56:	fc 01       	movw	r30, r24
    1b58:	20 83       	st	Z, r18
				SET_BIT(DDRB,3);
    1b5a:	87 e3       	ldi	r24, 0x37	; 55
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	27 e3       	ldi	r18, 0x37	; 55
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	f9 01       	movw	r30, r18
    1b64:	20 81       	ld	r18, Z
    1b66:	28 60       	ori	r18, 0x08	; 8
    1b68:	fc 01       	movw	r30, r24
    1b6a:	20 83       	st	Z, r18
    1b6c:	1b c0       	rjmp	.+54     	; 0x1ba4 <TIMER_init+0x26c>
				}
				else if(!strcmp(config->pwmMode,"non-inverting"))
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	8b 96       	adiw	r24, 0x2b	; 43
    1b74:	6c ea       	ldi	r22, 0xAC	; 172
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strcmp>
    1b7c:	89 2b       	or	r24, r25
    1b7e:	91 f4       	brne	.+36     	; 0x1ba4 <TIMER_init+0x26c>
					{
					TCCR0|=(1<<COM01);
    1b80:	83 e5       	ldi	r24, 0x53	; 83
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	23 e5       	ldi	r18, 0x53	; 83
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	f9 01       	movw	r30, r18
    1b8a:	20 81       	ld	r18, Z
    1b8c:	20 62       	ori	r18, 0x20	; 32
    1b8e:	fc 01       	movw	r30, r24
    1b90:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    1b92:	87 e3       	ldi	r24, 0x37	; 55
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	27 e3       	ldi	r18, 0x37	; 55
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	f9 01       	movw	r30, r18
    1b9c:	20 81       	ld	r18, Z
    1b9e:	28 60       	ori	r18, 0x08	; 8
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	20 83       	st	Z, r18

	}

	}
	///
	if(config->timerNumber==1)
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba8:	fc 01       	movw	r30, r24
    1baa:	80 81       	ld	r24, Z
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	09 f0       	breq	.+2      	; 0x1bb2 <TIMER_init+0x27a>
    1bb0:	30 c1       	rjmp	.+608    	; 0x1e12 <TIMER_init+0x4da>
		{
			TCCR1A=0;
    1bb2:	8f e4       	ldi	r24, 0x4F	; 79
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	10 82       	st	Z, r1
			TCCR1B=0;
    1bba:	8e e4       	ldi	r24, 0x4E	; 78
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	10 82       	st	Z, r1

		switch(config->prescaler)
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	85 89       	ldd	r24, Z+21	; 0x15
    1bca:	96 89       	ldd	r25, Z+22	; 0x16
    1bcc:	80 34       	cpi	r24, 0x40	; 64
    1bce:	91 05       	cpc	r25, r1
    1bd0:	c1 f0       	breq	.+48     	; 0x1c02 <TIMER_init+0x2ca>
    1bd2:	81 34       	cpi	r24, 0x41	; 65
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	18 f4       	brcc	.+6      	; 0x1bde <TIMER_init+0x2a6>
    1bd8:	08 97       	sbiw	r24, 0x08	; 8
    1bda:	49 f0       	breq	.+18     	; 0x1bee <TIMER_init+0x2b6>
    1bdc:	30 c0       	rjmp	.+96     	; 0x1c3e <TIMER_init+0x306>
    1bde:	81 15       	cp	r24, r1
    1be0:	f1 e0       	ldi	r31, 0x01	; 1
    1be2:	9f 07       	cpc	r25, r31
    1be4:	c1 f0       	breq	.+48     	; 0x1c16 <TIMER_init+0x2de>
    1be6:	81 15       	cp	r24, r1
    1be8:	94 40       	sbci	r25, 0x04	; 4
    1bea:	f9 f0       	breq	.+62     	; 0x1c2a <TIMER_init+0x2f2>
    1bec:	28 c0       	rjmp	.+80     	; 0x1c3e <TIMER_init+0x306>
		{
		case 8:
			TCCR1B|=(1<<CS11);
    1bee:	8e e4       	ldi	r24, 0x4E	; 78
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	2e e4       	ldi	r18, 0x4E	; 78
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	f9 01       	movw	r30, r18
    1bf8:	20 81       	ld	r18, Z
    1bfa:	22 60       	ori	r18, 0x02	; 2
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	20 83       	st	Z, r18
			break;
    1c00:	27 c0       	rjmp	.+78     	; 0x1c50 <TIMER_init+0x318>
		case 64:
				TCCR1B|=(1<<CS10)|(1<<CS11);
    1c02:	8e e4       	ldi	r24, 0x4E	; 78
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	2e e4       	ldi	r18, 0x4E	; 78
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	f9 01       	movw	r30, r18
    1c0c:	20 81       	ld	r18, Z
    1c0e:	23 60       	ori	r18, 0x03	; 3
    1c10:	fc 01       	movw	r30, r24
    1c12:	20 83       	st	Z, r18
				break;
    1c14:	1d c0       	rjmp	.+58     	; 0x1c50 <TIMER_init+0x318>
		case 256:
				TCCR1B|=(1<<CS12);
    1c16:	8e e4       	ldi	r24, 0x4E	; 78
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	2e e4       	ldi	r18, 0x4E	; 78
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	f9 01       	movw	r30, r18
    1c20:	20 81       	ld	r18, Z
    1c22:	24 60       	ori	r18, 0x04	; 4
    1c24:	fc 01       	movw	r30, r24
    1c26:	20 83       	st	Z, r18
				break;
    1c28:	13 c0       	rjmp	.+38     	; 0x1c50 <TIMER_init+0x318>
		case 1024:
				TCCR1B|=(1<<CS10)|(1<<CS12);
    1c2a:	8e e4       	ldi	r24, 0x4E	; 78
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	2e e4       	ldi	r18, 0x4E	; 78
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	f9 01       	movw	r30, r18
    1c34:	20 81       	ld	r18, Z
    1c36:	25 60       	ori	r18, 0x05	; 5
    1c38:	fc 01       	movw	r30, r24
    1c3a:	20 83       	st	Z, r18
				break;
    1c3c:	09 c0       	rjmp	.+18     	; 0x1c50 <TIMER_init+0x318>
		default:
				TCCR1B|=(1<<CS10);
    1c3e:	8e e4       	ldi	r24, 0x4E	; 78
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	2e e4       	ldi	r18, 0x4E	; 78
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	f9 01       	movw	r30, r18
    1c48:	20 81       	ld	r18, Z
    1c4a:	21 60       	ori	r18, 0x01	; 1
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	20 83       	st	Z, r18

			}
//FOR A
		if(!strcmp(config->mode,"compare"))
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	9a 81       	ldd	r25, Y+2	; 0x02
    1c54:	01 96       	adiw	r24, 0x01	; 1
    1c56:	6e e7       	ldi	r22, 0x7E	; 126
    1c58:	70 e0       	ldi	r23, 0x00	; 0
    1c5a:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strcmp>
    1c5e:	89 2b       	or	r24, r25
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <TIMER_init+0x32c>
    1c62:	6b c0       	rjmp	.+214    	; 0x1d3a <TIMER_init+0x402>
		{	TCCR1A|=(1<<FOC1A);
    1c64:	8f e4       	ldi	r24, 0x4F	; 79
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	2f e4       	ldi	r18, 0x4F	; 79
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	f9 01       	movw	r30, r18
    1c6e:	20 81       	ld	r18, Z
    1c70:	28 60       	ori	r18, 0x08	; 8
    1c72:	fc 01       	movw	r30, r24
    1c74:	20 83       	st	Z, r18
			TCCR1B|=(1<<WGM12);
    1c76:	8e e4       	ldi	r24, 0x4E	; 78
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	2e e4       	ldi	r18, 0x4E	; 78
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	f9 01       	movw	r30, r18
    1c80:	20 81       	ld	r18, Z
    1c82:	28 60       	ori	r18, 0x08	; 8
    1c84:	fc 01       	movw	r30, r24
    1c86:	20 83       	st	Z, r18
			if(!strcmp(config->compareMatchMode,"toggle"))
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8c:	47 96       	adiw	r24, 0x17	; 23
    1c8e:	66 e8       	ldi	r22, 0x86	; 134
    1c90:	70 e0       	ldi	r23, 0x00	; 0
    1c92:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strcmp>
    1c96:	89 2b       	or	r24, r25
    1c98:	99 f4       	brne	.+38     	; 0x1cc0 <TIMER_init+0x388>
			{
			TCCR1A|=(1<<COM1A0);
    1c9a:	8f e4       	ldi	r24, 0x4F	; 79
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	2f e4       	ldi	r18, 0x4F	; 79
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	f9 01       	movw	r30, r18
    1ca4:	20 81       	ld	r18, Z
    1ca6:	20 64       	ori	r18, 0x40	; 64
    1ca8:	fc 01       	movw	r30, r24
    1caa:	20 83       	st	Z, r18
			SET_BIT(DDRD,5);
    1cac:	81 e3       	ldi	r24, 0x31	; 49
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	21 e3       	ldi	r18, 0x31	; 49
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	f9 01       	movw	r30, r18
    1cb6:	20 81       	ld	r18, Z
    1cb8:	20 62       	ori	r18, 0x20	; 32
    1cba:	fc 01       	movw	r30, r24
    1cbc:	20 83       	st	Z, r18
    1cbe:	37 c0       	rjmp	.+110    	; 0x1d2e <TIMER_init+0x3f6>
			}
			else if(!strcmp(config->compareMatchMode,"clear"))
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc4:	47 96       	adiw	r24, 0x17	; 23
    1cc6:	6d e8       	ldi	r22, 0x8D	; 141
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strcmp>
    1cce:	89 2b       	or	r24, r25
    1cd0:	99 f4       	brne	.+38     	; 0x1cf8 <TIMER_init+0x3c0>
				{
				TCCR1A|=(1<<COM1A1);
    1cd2:	8f e4       	ldi	r24, 0x4F	; 79
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	2f e4       	ldi	r18, 0x4F	; 79
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	f9 01       	movw	r30, r18
    1cdc:	20 81       	ld	r18, Z
    1cde:	20 68       	ori	r18, 0x80	; 128
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    1ce4:	81 e3       	ldi	r24, 0x31	; 49
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	21 e3       	ldi	r18, 0x31	; 49
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	f9 01       	movw	r30, r18
    1cee:	20 81       	ld	r18, Z
    1cf0:	20 62       	ori	r18, 0x20	; 32
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	20 83       	st	Z, r18
    1cf6:	1b c0       	rjmp	.+54     	; 0x1d2e <TIMER_init+0x3f6>

				}
			else if(!strcmp(config->compareMatchMode,"set"))
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfc:	47 96       	adiw	r24, 0x17	; 23
    1cfe:	63 e9       	ldi	r22, 0x93	; 147
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strcmp>
    1d06:	89 2b       	or	r24, r25
    1d08:	91 f4       	brne	.+36     	; 0x1d2e <TIMER_init+0x3f6>
				{
				TCCR1A|=(1<<COM1A1)|(1<<COM1A0);
    1d0a:	8f e4       	ldi	r24, 0x4F	; 79
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	2f e4       	ldi	r18, 0x4F	; 79
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	f9 01       	movw	r30, r18
    1d14:	20 81       	ld	r18, Z
    1d16:	20 6c       	ori	r18, 0xC0	; 192
    1d18:	fc 01       	movw	r30, r24
    1d1a:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    1d1c:	81 e3       	ldi	r24, 0x31	; 49
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	21 e3       	ldi	r18, 0x31	; 49
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	f9 01       	movw	r30, r18
    1d26:	20 81       	ld	r18, Z
    1d28:	20 62       	ori	r18, 0x20	; 32
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	20 83       	st	Z, r18

				}
			//enable interrupt
			TIMSK=(1<<OCIE1A);
    1d2e:	89 e5       	ldi	r24, 0x59	; 89
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	20 e1       	ldi	r18, 0x10	; 16
    1d34:	fc 01       	movw	r30, r24
    1d36:	20 83       	st	Z, r18
    1d38:	6b c0       	rjmp	.+214    	; 0x1e10 <TIMER_init+0x4d8>

		}
		else if(!strcmp(config->mode,"normal"))
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	67 e9       	ldi	r22, 0x97	; 151
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strcmp>
    1d48:	89 2b       	or	r24, r25
    1d4a:	79 f4       	brne	.+30     	; 0x1d6a <TIMER_init+0x432>
		{
			TCCR0|=(1<<FOC0);
    1d4c:	83 e5       	ldi	r24, 0x53	; 83
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	23 e5       	ldi	r18, 0x53	; 83
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	f9 01       	movw	r30, r18
    1d56:	20 81       	ld	r18, Z
    1d58:	20 68       	ori	r18, 0x80	; 128
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	20 83       	st	Z, r18
			TIMSK=(1<<TOIE0);
    1d5e:	89 e5       	ldi	r24, 0x59	; 89
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	21 e0       	ldi	r18, 0x01	; 1
    1d64:	fc 01       	movw	r30, r24
    1d66:	20 83       	st	Z, r18
    1d68:	53 c0       	rjmp	.+166    	; 0x1e10 <TIMER_init+0x4d8>
		}
		else if(!strcmp(config->mode,"pwm"))
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6e:	01 96       	adiw	r24, 0x01	; 1
    1d70:	6e e9       	ldi	r22, 0x9E	; 158
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strcmp>
    1d78:	89 2b       	or	r24, r25
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <TIMER_init+0x446>
    1d7c:	49 c0       	rjmp	.+146    	; 0x1e10 <TIMER_init+0x4d8>
		{
			TCCR0 |=(1<<WGM00)|(1<<WGM01);
    1d7e:	83 e5       	ldi	r24, 0x53	; 83
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	23 e5       	ldi	r18, 0x53	; 83
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	f9 01       	movw	r30, r18
    1d88:	20 81       	ld	r18, Z
    1d8a:	28 64       	ori	r18, 0x48	; 72
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	20 83       	st	Z, r18
			if(!strcmp(config->pwmMode,"inverting"))
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	9a 81       	ldd	r25, Y+2	; 0x02
    1d94:	8b 96       	adiw	r24, 0x2b	; 43
    1d96:	62 ea       	ldi	r22, 0xA2	; 162
    1d98:	70 e0       	ldi	r23, 0x00	; 0
    1d9a:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strcmp>
    1d9e:	89 2b       	or	r24, r25
    1da0:	e1 f4       	brne	.+56     	; 0x1dda <TIMER_init+0x4a2>
					{
					TCCR0|=(1<<COM00);
    1da2:	83 e5       	ldi	r24, 0x53	; 83
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	23 e5       	ldi	r18, 0x53	; 83
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	f9 01       	movw	r30, r18
    1dac:	20 81       	ld	r18, Z
    1dae:	20 61       	ori	r18, 0x10	; 16
    1db0:	fc 01       	movw	r30, r24
    1db2:	20 83       	st	Z, r18
					TCCR0|=(1<<COM01);
    1db4:	83 e5       	ldi	r24, 0x53	; 83
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	23 e5       	ldi	r18, 0x53	; 83
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	f9 01       	movw	r30, r18
    1dbe:	20 81       	ld	r18, Z
    1dc0:	20 62       	ori	r18, 0x20	; 32
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    1dc6:	87 e3       	ldi	r24, 0x37	; 55
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	27 e3       	ldi	r18, 0x37	; 55
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	f9 01       	movw	r30, r18
    1dd0:	20 81       	ld	r18, Z
    1dd2:	28 60       	ori	r18, 0x08	; 8
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	20 83       	st	Z, r18
    1dd8:	1b c0       	rjmp	.+54     	; 0x1e10 <TIMER_init+0x4d8>
					}
					else if(!strcmp(config->pwmMode,"non-inverting"))
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dde:	8b 96       	adiw	r24, 0x2b	; 43
    1de0:	6c ea       	ldi	r22, 0xAC	; 172
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strcmp>
    1de8:	89 2b       	or	r24, r25
    1dea:	91 f4       	brne	.+36     	; 0x1e10 <TIMER_init+0x4d8>
						{
						TCCR0|=(1<<COM01);
    1dec:	83 e5       	ldi	r24, 0x53	; 83
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	23 e5       	ldi	r18, 0x53	; 83
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	f9 01       	movw	r30, r18
    1df6:	20 81       	ld	r18, Z
    1df8:	20 62       	ori	r18, 0x20	; 32
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	20 83       	st	Z, r18
						SET_BIT(DDRB,3);
    1dfe:	87 e3       	ldi	r24, 0x37	; 55
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	27 e3       	ldi	r18, 0x37	; 55
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	f9 01       	movw	r30, r18
    1e08:	20 81       	ld	r18, Z
    1e0a:	28 60       	ori	r18, 0x08	; 8
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	20 83       	st	Z, r18
	//TCCR0=(1<<FOC0)|(1<<COM00)|(1<<CS00)|(1<<CS02);


	//enable

	sei();
    1e10:	78 94       	sei
}
}
    1e12:	00 00       	nop
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	08 95       	ret

00001e1e <TIMER_setCompare>:

void TIMER_setCompare(uint16 compareValue)
{
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <TIMER_setCompare+0x6>
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	9a 83       	std	Y+2, r25	; 0x02
    1e2a:	89 83       	std	Y+1, r24	; 0x01
	switch (configPtr->timerNumber)
    1e2c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <configPtr>
    1e30:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <configPtr+0x1>
    1e34:	fc 01       	movw	r30, r24
    1e36:	80 81       	ld	r24, Z
    1e38:	88 2f       	mov	r24, r24
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	19 f0       	breq	.+6      	; 0x1e46 <TIMER_setCompare+0x28>
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	59 f0       	breq	.+22     	; 0x1e5a <TIMER_setCompare+0x3c>
	case 1:
		TCNT1=0;
		OCR1A=compareValue;
		break;
	}
}
    1e44:	17 c0       	rjmp	.+46     	; 0x1e74 <TIMER_setCompare+0x56>
void TIMER_setCompare(uint16 compareValue)
{
	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=0;
    1e46:	82 e5       	ldi	r24, 0x52	; 82
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	10 82       	st	Z, r1
		OCR0=compareValue;
    1e4e:	8c e5       	ldi	r24, 0x5C	; 92
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	29 81       	ldd	r18, Y+1	; 0x01
    1e54:	fc 01       	movw	r30, r24
    1e56:	20 83       	st	Z, r18
		break;
    1e58:	0d c0       	rjmp	.+26     	; 0x1e74 <TIMER_setCompare+0x56>
	case 1:
		TCNT1=0;
    1e5a:	8c e4       	ldi	r24, 0x4C	; 76
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	fc 01       	movw	r30, r24
    1e60:	11 82       	std	Z+1, r1	; 0x01
    1e62:	10 82       	st	Z, r1
		OCR1A=compareValue;
    1e64:	8a e4       	ldi	r24, 0x4A	; 74
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	29 81       	ldd	r18, Y+1	; 0x01
    1e6a:	3a 81       	ldd	r19, Y+2	; 0x02
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	31 83       	std	Z+1, r19	; 0x01
    1e70:	20 83       	st	Z, r18
		break;
    1e72:	00 00       	nop
	}
}
    1e74:	00 00       	nop
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	df 91       	pop	r29
    1e7c:	cf 91       	pop	r28
    1e7e:	08 95       	ret

00001e80 <TIMER_setNormal>:
void TIMER_setNormal(uint8 initValue)

{
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	1f 92       	push	r1
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	89 83       	std	Y+1, r24	; 0x01

	switch (configPtr->timerNumber)
    1e8c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <configPtr>
    1e90:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <configPtr+0x1>
    1e94:	fc 01       	movw	r30, r24
    1e96:	80 81       	ld	r24, Z
    1e98:	88 2f       	mov	r24, r24
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	19 f0       	breq	.+6      	; 0x1ea6 <TIMER_setNormal+0x26>
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	39 f0       	breq	.+14     	; 0x1eb2 <TIMER_setNormal+0x32>
		TCNT1=initValue;
		break;


}
}
    1ea4:	0f c0       	rjmp	.+30     	; 0x1ec4 <TIMER_setNormal+0x44>
{

	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=initValue;
    1ea6:	82 e5       	ldi	r24, 0x52	; 82
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	29 81       	ldd	r18, Y+1	; 0x01
    1eac:	fc 01       	movw	r30, r24
    1eae:	20 83       	st	Z, r18
		break;
    1eb0:	09 c0       	rjmp	.+18     	; 0x1ec4 <TIMER_setNormal+0x44>
	case 1:
		TCNT1=initValue;
    1eb2:	8c e4       	ldi	r24, 0x4C	; 76
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	29 81       	ldd	r18, Y+1	; 0x01
    1eb8:	22 2f       	mov	r18, r18
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	31 83       	std	Z+1, r19	; 0x01
    1ec0:	20 83       	st	Z, r18
		break;
    1ec2:	00 00       	nop


}
}
    1ec4:	00 00       	nop
    1ec6:	0f 90       	pop	r0
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	08 95       	ret

00001ece <TIMER_setpwm>:
void TIMER_setpwm(uint8 dutyCycle)
{
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	1f 92       	push	r1
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
    1eda:	82 e5       	ldi	r24, 0x52	; 82
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	fc 01       	movw	r30, r24
    1ee0:	10 82       	st	Z, r1
	OCR0=dutyCycle;
    1ee2:	8c e5       	ldi	r24, 0x5C	; 92
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	29 81       	ldd	r18, Y+1	; 0x01
    1ee8:	fc 01       	movw	r30, r24
    1eea:	20 83       	st	Z, r18
}
    1eec:	00 00       	nop
    1eee:	0f 90       	pop	r0
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	08 95       	ret

00001ef6 <TIMER_setCallBackPtr>:
void TIMER_setCallBackPtr(void(*a_ptr)(void))
{
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <TIMER_setCallBackPtr+0x6>
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	89 83       	std	Y+1, r24	; 0x01
g_callBackPtr=a_ptr;
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
    1f08:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <g_callBackPtr+0x1>
    1f0c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <g_callBackPtr>
}
    1f10:	00 00       	nop
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	08 95       	ret

00001f1c <TIMER_stop>:
void TIMER_stop()
{
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
	switch (configPtr->timerNumber)
    1f24:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <configPtr>
    1f28:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <configPtr+0x1>
    1f2c:	fc 01       	movw	r30, r24
    1f2e:	80 81       	ld	r24, Z
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	89 2b       	or	r24, r25
    1f36:	51 f4       	brne	.+20     	; 0x1f4c <TIMER_stop+0x30>

{
case 0:
	TCCR0&=~(1<<CS00)&~(1<<CS01)&~(1<<CS02);
    1f38:	83 e5       	ldi	r24, 0x53	; 83
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	23 e5       	ldi	r18, 0x53	; 83
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	f9 01       	movw	r30, r18
    1f42:	20 81       	ld	r18, Z
    1f44:	28 7f       	andi	r18, 0xF8	; 248
    1f46:	fc 01       	movw	r30, r24
    1f48:	20 83       	st	Z, r18
	break;
    1f4a:	01 c0       	rjmp	.+2      	; 0x1f4e <TIMER_stop+0x32>
case 1:
	break;
    1f4c:	00 00       	nop

}
}
    1f4e:	00 00       	nop
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	08 95       	ret

00001f56 <UART_init>:
 *      Author: hesham
 */
#include"uart.h"

void UART_init(UART_configurationType * config)
{UCSRA=0;
    1f56:	0f 93       	push	r16
    1f58:	1f 93       	push	r17
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	00 d0       	rcall	.+0      	; 0x1f60 <UART_init+0xa>
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	9a 83       	std	Y+2, r25	; 0x02
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	8b e2       	ldi	r24, 0x2B	; 43
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	10 82       	st	Z, r1
UCSRB=0;
    1f70:	8a e2       	ldi	r24, 0x2A	; 42
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	fc 01       	movw	r30, r24
    1f76:	10 82       	st	Z, r1
UCSRC=0;
    1f78:	80 e4       	ldi	r24, 0x40	; 64
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	10 82       	st	Z, r1
/* enables */
	if(config->mode=="normal")
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	9a 81       	ldd	r25, Y+2	; 0x02
    1f84:	05 96       	adiw	r24, 0x05	; 5
    1f86:	8a 5b       	subi	r24, 0xBA	; 186
    1f88:	90 40       	sbci	r25, 0x00	; 0
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <UART_init+0x38>
    1f8c:	60 c0       	rjmp	.+192    	; 0x204e <UART_init+0xf8>
	{
CLEAR_BIT(UCSRA,U2X);
    1f8e:	8b e2       	ldi	r24, 0x2B	; 43
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	2b e2       	ldi	r18, 0x2B	; 43
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	f9 01       	movw	r30, r18
    1f98:	20 81       	ld	r18, Z
    1f9a:	2d 7f       	andi	r18, 0xFD	; 253
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	20 83       	st	Z, r18
UBRRL=((F_CPU /(16*config->buadRate))-1);
    1fa0:	09 e2       	ldi	r16, 0x29	; 41
    1fa2:	10 e0       	ldi	r17, 0x00	; 0
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa8:	fc 01       	movw	r30, r24
    1faa:	81 81       	ldd	r24, Z+1	; 0x01
    1fac:	92 81       	ldd	r25, Z+2	; 0x02
    1fae:	a3 81       	ldd	r26, Z+3	; 0x03
    1fb0:	b4 81       	ldd	r27, Z+4	; 0x04
    1fb2:	88 0f       	add	r24, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	aa 1f       	adc	r26, r26
    1fb8:	bb 1f       	adc	r27, r27
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	aa 1f       	adc	r26, r26
    1fc0:	bb 1f       	adc	r27, r27
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	aa 1f       	adc	r26, r26
    1fc8:	bb 1f       	adc	r27, r27
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	aa 1f       	adc	r26, r26
    1fd0:	bb 1f       	adc	r27, r27
    1fd2:	9c 01       	movw	r18, r24
    1fd4:	ad 01       	movw	r20, r26
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	92 e1       	ldi	r25, 0x12	; 18
    1fda:	aa e7       	ldi	r26, 0x7A	; 122
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 ce 11 	call	0x239c	; 0x239c <__udivmodsi4>
    1fe6:	da 01       	movw	r26, r20
    1fe8:	c9 01       	movw	r24, r18
    1fea:	81 50       	subi	r24, 0x01	; 1
    1fec:	f8 01       	movw	r30, r16
    1fee:	80 83       	st	Z, r24
UBRRH=((F_CPU /(16*config->buadRate))-1)>>8;
    1ff0:	00 e4       	ldi	r16, 0x40	; 64
    1ff2:	10 e0       	ldi	r17, 0x00	; 0
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	81 81       	ldd	r24, Z+1	; 0x01
    1ffc:	92 81       	ldd	r25, Z+2	; 0x02
    1ffe:	a3 81       	ldd	r26, Z+3	; 0x03
    2000:	b4 81       	ldd	r27, Z+4	; 0x04
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	aa 1f       	adc	r26, r26
    2008:	bb 1f       	adc	r27, r27
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	aa 1f       	adc	r26, r26
    2010:	bb 1f       	adc	r27, r27
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	aa 1f       	adc	r26, r26
    2018:	bb 1f       	adc	r27, r27
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	aa 1f       	adc	r26, r26
    2020:	bb 1f       	adc	r27, r27
    2022:	9c 01       	movw	r18, r24
    2024:	ad 01       	movw	r20, r26
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	92 e1       	ldi	r25, 0x12	; 18
    202a:	aa e7       	ldi	r26, 0x7A	; 122
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 ce 11 	call	0x239c	; 0x239c <__udivmodsi4>
    2036:	da 01       	movw	r26, r20
    2038:	c9 01       	movw	r24, r18
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	a1 09       	sbc	r26, r1
    203e:	b1 09       	sbc	r27, r1
    2040:	89 2f       	mov	r24, r25
    2042:	9a 2f       	mov	r25, r26
    2044:	ab 2f       	mov	r26, r27
    2046:	bb 27       	eor	r27, r27
    2048:	f8 01       	movw	r30, r16
    204a:	80 83       	st	Z, r24
    204c:	61 c0       	rjmp	.+194    	; 0x2110 <UART_init+0x1ba>


	}
	else if(!strcmp(config->mode,"double speed"))
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	9a 81       	ldd	r25, Y+2	; 0x02
    2052:	05 96       	adiw	r24, 0x05	; 5
    2054:	61 ec       	ldi	r22, 0xC1	; 193
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <strcmp>
    205c:	89 2b       	or	r24, r25
    205e:	09 f0       	breq	.+2      	; 0x2062 <UART_init+0x10c>
    2060:	57 c0       	rjmp	.+174    	; 0x2110 <UART_init+0x1ba>
	{
		SET_BIT(UCSRA,U2X);
    2062:	8b e2       	ldi	r24, 0x2B	; 43
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	2b e2       	ldi	r18, 0x2B	; 43
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	f9 01       	movw	r30, r18
    206c:	20 81       	ld	r18, Z
    206e:	22 60       	ori	r18, 0x02	; 2
    2070:	fc 01       	movw	r30, r24
    2072:	20 83       	st	Z, r18
		UBRRL=((F_CPU /(8*config->buadRate))-1);
    2074:	09 e2       	ldi	r16, 0x29	; 41
    2076:	10 e0       	ldi	r17, 0x00	; 0
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	9a 81       	ldd	r25, Y+2	; 0x02
    207c:	fc 01       	movw	r30, r24
    207e:	81 81       	ldd	r24, Z+1	; 0x01
    2080:	92 81       	ldd	r25, Z+2	; 0x02
    2082:	a3 81       	ldd	r26, Z+3	; 0x03
    2084:	b4 81       	ldd	r27, Z+4	; 0x04
    2086:	88 0f       	add	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	aa 1f       	adc	r26, r26
    208c:	bb 1f       	adc	r27, r27
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	aa 1f       	adc	r26, r26
    2094:	bb 1f       	adc	r27, r27
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	aa 1f       	adc	r26, r26
    209c:	bb 1f       	adc	r27, r27
    209e:	9c 01       	movw	r18, r24
    20a0:	ad 01       	movw	r20, r26
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	92 e1       	ldi	r25, 0x12	; 18
    20a6:	aa e7       	ldi	r26, 0x7A	; 122
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	0e 94 ce 11 	call	0x239c	; 0x239c <__udivmodsi4>
    20b2:	da 01       	movw	r26, r20
    20b4:	c9 01       	movw	r24, r18
    20b6:	81 50       	subi	r24, 0x01	; 1
    20b8:	f8 01       	movw	r30, r16
    20ba:	80 83       	st	Z, r24
		UBRRH=((F_CPU /(8*config->buadRate))-1)>>8;
    20bc:	00 e4       	ldi	r16, 0x40	; 64
    20be:	10 e0       	ldi	r17, 0x00	; 0
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	9a 81       	ldd	r25, Y+2	; 0x02
    20c4:	fc 01       	movw	r30, r24
    20c6:	81 81       	ldd	r24, Z+1	; 0x01
    20c8:	92 81       	ldd	r25, Z+2	; 0x02
    20ca:	a3 81       	ldd	r26, Z+3	; 0x03
    20cc:	b4 81       	ldd	r27, Z+4	; 0x04
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	aa 1f       	adc	r26, r26
    20d4:	bb 1f       	adc	r27, r27
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	aa 1f       	adc	r26, r26
    20dc:	bb 1f       	adc	r27, r27
    20de:	88 0f       	add	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	aa 1f       	adc	r26, r26
    20e4:	bb 1f       	adc	r27, r27
    20e6:	9c 01       	movw	r18, r24
    20e8:	ad 01       	movw	r20, r26
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	92 e1       	ldi	r25, 0x12	; 18
    20ee:	aa e7       	ldi	r26, 0x7A	; 122
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	0e 94 ce 11 	call	0x239c	; 0x239c <__udivmodsi4>
    20fa:	da 01       	movw	r26, r20
    20fc:	c9 01       	movw	r24, r18
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	a1 09       	sbc	r26, r1
    2102:	b1 09       	sbc	r27, r1
    2104:	89 2f       	mov	r24, r25
    2106:	9a 2f       	mov	r25, r26
    2108:	ab 2f       	mov	r26, r27
    210a:	bb 27       	eor	r27, r27
    210c:	f8 01       	movw	r30, r16
    210e:	80 83       	st	Z, r24

	}


/* TO enable writing on Register UCSRC (used for define the frame )as it has the same address with UBRR register */
SET_BIT(UCSRC,URSEL);
    2110:	80 e4       	ldi	r24, 0x40	; 64
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	20 e4       	ldi	r18, 0x40	; 64
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	f9 01       	movw	r30, r18
    211a:	20 81       	ld	r18, Z
    211c:	20 68       	ori	r18, 0x80	; 128
    211e:	fc 01       	movw	r30, r24
    2120:	20 83       	st	Z, r18
/* the UART frame parameters*/
/* character size */
//SET_BIT(UCSRC,UCSZ0);
//SET_BIT(UCSRC,UCSZ1);
switch(config->character_size)
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	9a 81       	ldd	r25, Y+2	; 0x02
    2126:	fc 01       	movw	r30, r24
    2128:	80 81       	ld	r24, Z
    212a:	88 2f       	mov	r24, r24
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	86 30       	cpi	r24, 0x06	; 6
    2130:	91 05       	cpc	r25, r1
    2132:	f9 f0       	breq	.+62     	; 0x2172 <UART_init+0x21c>
    2134:	87 30       	cpi	r24, 0x07	; 7
    2136:	91 05       	cpc	r25, r1
    2138:	1c f4       	brge	.+6      	; 0x2140 <UART_init+0x1ea>
    213a:	05 97       	sbiw	r24, 0x05	; 5
    213c:	39 f0       	breq	.+14     	; 0x214c <UART_init+0x1f6>
    213e:	5b c0       	rjmp	.+182    	; 0x21f6 <UART_init+0x2a0>
    2140:	87 30       	cpi	r24, 0x07	; 7
    2142:	91 05       	cpc	r25, r1
    2144:	49 f1       	breq	.+82     	; 0x2198 <UART_init+0x242>
    2146:	09 97       	sbiw	r24, 0x09	; 9
    2148:	d1 f1       	breq	.+116    	; 0x21be <UART_init+0x268>
    214a:	55 c0       	rjmp	.+170    	; 0x21f6 <UART_init+0x2a0>
{
case 5:
	CLEAR_BIT(UCSRC,UCSZ0);
    214c:	80 e4       	ldi	r24, 0x40	; 64
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	20 e4       	ldi	r18, 0x40	; 64
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	f9 01       	movw	r30, r18
    2156:	20 81       	ld	r18, Z
    2158:	2d 7f       	andi	r18, 0xFD	; 253
    215a:	fc 01       	movw	r30, r24
    215c:	20 83       	st	Z, r18
	CLEAR_BIT(UCSRC,UCSZ1);
    215e:	80 e4       	ldi	r24, 0x40	; 64
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	20 e4       	ldi	r18, 0x40	; 64
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	f9 01       	movw	r30, r18
    2168:	20 81       	ld	r18, Z
    216a:	2b 7f       	andi	r18, 0xFB	; 251
    216c:	fc 01       	movw	r30, r24
    216e:	20 83       	st	Z, r18
	break;
    2170:	54 c0       	rjmp	.+168    	; 0x221a <UART_init+0x2c4>

case 6:
	CLEAR_BIT(UCSRC,UCSZ0);
    2172:	80 e4       	ldi	r24, 0x40	; 64
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	20 e4       	ldi	r18, 0x40	; 64
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	f9 01       	movw	r30, r18
    217c:	20 81       	ld	r18, Z
    217e:	2d 7f       	andi	r18, 0xFD	; 253
    2180:	fc 01       	movw	r30, r24
    2182:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    2184:	80 e4       	ldi	r24, 0x40	; 64
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	20 e4       	ldi	r18, 0x40	; 64
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	f9 01       	movw	r30, r18
    218e:	20 81       	ld	r18, Z
    2190:	24 60       	ori	r18, 0x04	; 4
    2192:	fc 01       	movw	r30, r24
    2194:	20 83       	st	Z, r18
	break;
    2196:	41 c0       	rjmp	.+130    	; 0x221a <UART_init+0x2c4>
case 7:
	CLEAR_BIT(UCSRC,UCSZ1);
    2198:	80 e4       	ldi	r24, 0x40	; 64
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	20 e4       	ldi	r18, 0x40	; 64
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	f9 01       	movw	r30, r18
    21a2:	20 81       	ld	r18, Z
    21a4:	2b 7f       	andi	r18, 0xFB	; 251
    21a6:	fc 01       	movw	r30, r24
    21a8:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ0);
    21aa:	80 e4       	ldi	r24, 0x40	; 64
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	20 e4       	ldi	r18, 0x40	; 64
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	f9 01       	movw	r30, r18
    21b4:	20 81       	ld	r18, Z
    21b6:	22 60       	ori	r18, 0x02	; 2
    21b8:	fc 01       	movw	r30, r24
    21ba:	20 83       	st	Z, r18
		break;
    21bc:	2e c0       	rjmp	.+92     	; 0x221a <UART_init+0x2c4>
case 9:
	SET_BIT(UCSRC,UCSZ0);
    21be:	80 e4       	ldi	r24, 0x40	; 64
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	20 e4       	ldi	r18, 0x40	; 64
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	f9 01       	movw	r30, r18
    21c8:	20 81       	ld	r18, Z
    21ca:	22 60       	ori	r18, 0x02	; 2
    21cc:	fc 01       	movw	r30, r24
    21ce:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    21d0:	80 e4       	ldi	r24, 0x40	; 64
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	20 e4       	ldi	r18, 0x40	; 64
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	f9 01       	movw	r30, r18
    21da:	20 81       	ld	r18, Z
    21dc:	24 60       	ori	r18, 0x04	; 4
    21de:	fc 01       	movw	r30, r24
    21e0:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ2);
    21e2:	80 e4       	ldi	r24, 0x40	; 64
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	20 e4       	ldi	r18, 0x40	; 64
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	f9 01       	movw	r30, r18
    21ec:	20 81       	ld	r18, Z
    21ee:	24 60       	ori	r18, 0x04	; 4
    21f0:	fc 01       	movw	r30, r24
    21f2:	20 83       	st	Z, r18


	break;
    21f4:	12 c0       	rjmp	.+36     	; 0x221a <UART_init+0x2c4>

default :
	//SET_BIT(UCSRC,URSEL);
	SET_BIT(UCSRC,UCSZ0);
    21f6:	80 e4       	ldi	r24, 0x40	; 64
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	20 e4       	ldi	r18, 0x40	; 64
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	f9 01       	movw	r30, r18
    2200:	20 81       	ld	r18, Z
    2202:	22 60       	ori	r18, 0x02	; 2
    2204:	fc 01       	movw	r30, r24
    2206:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    2208:	80 e4       	ldi	r24, 0x40	; 64
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	20 e4       	ldi	r18, 0x40	; 64
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	f9 01       	movw	r30, r18
    2212:	20 81       	ld	r18, Z
    2214:	24 60       	ori	r18, 0x04	; 4
    2216:	fc 01       	movw	r30, r24
    2218:	20 83       	st	Z, r18
/* write on UBRR instead of ucsrc register */
//CLEAR_BIT(UCSRC,URSEL);//---------------------------------------<<<<
/* writing the baud rate prescaler */
//UBRRL=12;
//UBRRH=12>>8;
SET_BIT(UCSRB,RXEN);
    221a:	8a e2       	ldi	r24, 0x2A	; 42
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	2a e2       	ldi	r18, 0x2A	; 42
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	f9 01       	movw	r30, r18
    2224:	20 81       	ld	r18, Z
    2226:	20 61       	ori	r18, 0x10	; 16
    2228:	fc 01       	movw	r30, r24
    222a:	20 83       	st	Z, r18
SET_BIT(UCSRB,TXEN);
    222c:	8a e2       	ldi	r24, 0x2A	; 42
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	2a e2       	ldi	r18, 0x2A	; 42
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	f9 01       	movw	r30, r18
    2236:	20 81       	ld	r18, Z
    2238:	28 60       	ori	r18, 0x08	; 8
    223a:	fc 01       	movw	r30, r24
    223c:	20 83       	st	Z, r18
}
    223e:	00 00       	nop
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	08 95       	ret

0000224e <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)); /* wait until RXC  flag be 1 it means that there is data not read */
    2256:	00 00       	nop
    2258:	8b e2       	ldi	r24, 0x2B	; 43
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	fc 01       	movw	r30, r24
    225e:	80 81       	ld	r24, Z
    2260:	88 23       	and	r24, r24
    2262:	d4 f7       	brge	.-12     	; 0x2258 <UART_recieveByte+0xa>

	return UDR;/* read and return RXC flag to zero */
    2264:	8c e2       	ldi	r24, 0x2C	; 44
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	fc 01       	movw	r30, r24
    226a:	80 81       	ld	r24, Z
}
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	08 95       	ret

00002272 <UART_sendByte>:
void UART_sendByte(const uint8 data)
{
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	1f 92       	push	r1
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
    227e:	8c e2       	ldi	r24, 0x2C	; 44
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	29 81       	ldd	r18, Y+1	; 0x01
    2284:	fc 01       	movw	r30, r24
    2286:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(UCSRA,TXC));//wait until send data txc =1;
    2288:	00 00       	nop
    228a:	8b e2       	ldi	r24, 0x2B	; 43
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	fc 01       	movw	r30, r24
    2290:	80 81       	ld	r24, Z
    2292:	88 2f       	mov	r24, r24
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	80 74       	andi	r24, 0x40	; 64
    2298:	99 27       	eor	r25, r25
    229a:	89 2b       	or	r24, r25
    229c:	b1 f3       	breq	.-20     	; 0x228a <UART_sendByte+0x18>
	SET_BIT(UCSRA,TXC); //clear the flag as it doesnt clear automatically as ISR
    229e:	8b e2       	ldi	r24, 0x2B	; 43
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	2b e2       	ldi	r18, 0x2B	; 43
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	f9 01       	movw	r30, r18
    22a8:	20 81       	ld	r18, Z
    22aa:	20 64       	ori	r18, 0x40	; 64
    22ac:	fc 01       	movw	r30, r24
    22ae:	20 83       	st	Z, r18
	//while(BIT_IS_CLEAR(UCSRA,UDRE)){}
		/* Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now */
	//	UDR = data;
}
    22b0:	00 00       	nop
    22b2:	0f 90       	pop	r0
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	08 95       	ret

000022ba <UART_sendString>:
void UART_sendString(const uint8 *str)
{
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	00 d0       	rcall	.+0      	; 0x22c0 <UART_sendString+0x6>
    22c0:	1f 92       	push	r1
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	9b 83       	std	Y+3, r25	; 0x03
    22c8:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0;str[i]!='\0';i++)
    22ca:	19 82       	std	Y+1, r1	; 0x01
    22cc:	0e c0       	rjmp	.+28     	; 0x22ea <UART_sendString+0x30>
	{
	UART_sendByte(str[i]);
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	88 2f       	mov	r24, r24
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	2a 81       	ldd	r18, Y+2	; 0x02
    22d6:	3b 81       	ldd	r19, Y+3	; 0x03
    22d8:	82 0f       	add	r24, r18
    22da:	93 1f       	adc	r25, r19
    22dc:	fc 01       	movw	r30, r24
    22de:	80 81       	ld	r24, Z
    22e0:	0e 94 39 11 	call	0x2272	; 0x2272 <UART_sendByte>
		 * the UDR register is not empty now */
	//	UDR = data;
}
void UART_sendString(const uint8 *str)
{
	for(uint8 i=0;str[i]!='\0';i++)
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	8f 5f       	subi	r24, 0xFF	; 255
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	88 2f       	mov	r24, r24
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	2a 81       	ldd	r18, Y+2	; 0x02
    22f2:	3b 81       	ldd	r19, Y+3	; 0x03
    22f4:	82 0f       	add	r24, r18
    22f6:	93 1f       	adc	r25, r19
    22f8:	fc 01       	movw	r30, r24
    22fa:	80 81       	ld	r24, Z
    22fc:	88 23       	and	r24, r24
    22fe:	39 f7       	brne	.-50     	; 0x22ce <UART_sendString+0x14>
	{
	UART_sendByte(str[i]);
	}
	UART_sendByte('#');
    2300:	83 e2       	ldi	r24, 0x23	; 35
    2302:	0e 94 39 11 	call	0x2272	; 0x2272 <UART_sendByte>
}
    2306:	00 00       	nop
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	08 95       	ret

00002314 <UART_receiveString>:

void UART_receiveString(uint8 *str)
{
    2314:	0f 93       	push	r16
    2316:	1f 93       	push	r17
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	00 d0       	rcall	.+0      	; 0x231e <UART_receiveString+0xa>
    231e:	1f 92       	push	r1
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	9b 83       	std	Y+3, r25	; 0x03
    2326:	8a 83       	std	Y+2, r24	; 0x02
//	{
//		str[i]=UART_recieveByte();
//	}
//	str[i]='\0';

	uint8 i = 0;
    2328:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_recieveByte();
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	88 2f       	mov	r24, r24
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	2a 81       	ldd	r18, Y+2	; 0x02
    2332:	3b 81       	ldd	r19, Y+3	; 0x03
    2334:	89 01       	movw	r16, r18
    2336:	08 0f       	add	r16, r24
    2338:	19 1f       	adc	r17, r25
    233a:	0e 94 27 11 	call	0x224e	; 0x224e <UART_recieveByte>
    233e:	f8 01       	movw	r30, r16
    2340:	80 83       	st	Z, r24
	while(str[i]!='#')
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <UART_receiveString+0x4e>
	{
		i++;
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	8f 5f       	subi	r24, 0xFF	; 255
    2348:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_recieveByte();
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	88 2f       	mov	r24, r24
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	2a 81       	ldd	r18, Y+2	; 0x02
    2352:	3b 81       	ldd	r19, Y+3	; 0x03
    2354:	89 01       	movw	r16, r18
    2356:	08 0f       	add	r16, r24
    2358:	19 1f       	adc	r17, r25
    235a:	0e 94 27 11 	call	0x224e	; 0x224e <UART_recieveByte>
    235e:	f8 01       	movw	r30, r16
    2360:	80 83       	st	Z, r24
//	}
//	str[i]='\0';

	uint8 i = 0;
	str[i]=UART_recieveByte();
	while(str[i]!='#')
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	88 2f       	mov	r24, r24
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	2a 81       	ldd	r18, Y+2	; 0x02
    236a:	3b 81       	ldd	r19, Y+3	; 0x03
    236c:	82 0f       	add	r24, r18
    236e:	93 1f       	adc	r25, r19
    2370:	fc 01       	movw	r30, r24
    2372:	80 81       	ld	r24, Z
    2374:	83 32       	cpi	r24, 0x23	; 35
    2376:	31 f7       	brne	.-52     	; 0x2344 <UART_receiveString+0x30>
	{
		i++;
		str[i]=UART_recieveByte();
	}
	str[i]='\0';
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	88 2f       	mov	r24, r24
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	2a 81       	ldd	r18, Y+2	; 0x02
    2380:	3b 81       	ldd	r19, Y+3	; 0x03
    2382:	82 0f       	add	r24, r18
    2384:	93 1f       	adc	r25, r19
    2386:	fc 01       	movw	r30, r24
    2388:	10 82       	st	Z, r1
}
    238a:	00 00       	nop
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	1f 91       	pop	r17
    2398:	0f 91       	pop	r16
    239a:	08 95       	ret

0000239c <__udivmodsi4>:
    239c:	a1 e2       	ldi	r26, 0x21	; 33
    239e:	1a 2e       	mov	r1, r26
    23a0:	aa 1b       	sub	r26, r26
    23a2:	bb 1b       	sub	r27, r27
    23a4:	fd 01       	movw	r30, r26
    23a6:	0d c0       	rjmp	.+26     	; 0x23c2 <__udivmodsi4_ep>

000023a8 <__udivmodsi4_loop>:
    23a8:	aa 1f       	adc	r26, r26
    23aa:	bb 1f       	adc	r27, r27
    23ac:	ee 1f       	adc	r30, r30
    23ae:	ff 1f       	adc	r31, r31
    23b0:	a2 17       	cp	r26, r18
    23b2:	b3 07       	cpc	r27, r19
    23b4:	e4 07       	cpc	r30, r20
    23b6:	f5 07       	cpc	r31, r21
    23b8:	20 f0       	brcs	.+8      	; 0x23c2 <__udivmodsi4_ep>
    23ba:	a2 1b       	sub	r26, r18
    23bc:	b3 0b       	sbc	r27, r19
    23be:	e4 0b       	sbc	r30, r20
    23c0:	f5 0b       	sbc	r31, r21

000023c2 <__udivmodsi4_ep>:
    23c2:	66 1f       	adc	r22, r22
    23c4:	77 1f       	adc	r23, r23
    23c6:	88 1f       	adc	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	1a 94       	dec	r1
    23cc:	69 f7       	brne	.-38     	; 0x23a8 <__udivmodsi4_loop>
    23ce:	60 95       	com	r22
    23d0:	70 95       	com	r23
    23d2:	80 95       	com	r24
    23d4:	90 95       	com	r25
    23d6:	9b 01       	movw	r18, r22
    23d8:	ac 01       	movw	r20, r24
    23da:	bd 01       	movw	r22, r26
    23dc:	cf 01       	movw	r24, r30
    23de:	08 95       	ret

000023e0 <__tablejump2__>:
    23e0:	ee 0f       	add	r30, r30
    23e2:	ff 1f       	adc	r31, r31
    23e4:	05 90       	lpm	r0, Z+
    23e6:	f4 91       	lpm	r31, Z
    23e8:	e0 2d       	mov	r30, r0
    23ea:	09 94       	ijmp

000023ec <__subsf3>:
    23ec:	50 58       	subi	r21, 0x80	; 128

000023ee <__addsf3>:
    23ee:	bb 27       	eor	r27, r27
    23f0:	aa 27       	eor	r26, r26
    23f2:	0e 94 0e 12 	call	0x241c	; 0x241c <__addsf3x>
    23f6:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__fp_round>
    23fa:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__fp_pscA>
    23fe:	38 f0       	brcs	.+14     	; 0x240e <__addsf3+0x20>
    2400:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__fp_pscB>
    2404:	20 f0       	brcs	.+8      	; 0x240e <__addsf3+0x20>
    2406:	39 f4       	brne	.+14     	; 0x2416 <__addsf3+0x28>
    2408:	9f 3f       	cpi	r25, 0xFF	; 255
    240a:	19 f4       	brne	.+6      	; 0x2412 <__addsf3+0x24>
    240c:	26 f4       	brtc	.+8      	; 0x2416 <__addsf3+0x28>
    240e:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__fp_nan>
    2412:	0e f4       	brtc	.+2      	; 0x2416 <__addsf3+0x28>
    2414:	e0 95       	com	r30
    2416:	e7 fb       	bst	r30, 7
    2418:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__fp_inf>

0000241c <__addsf3x>:
    241c:	e9 2f       	mov	r30, r25
    241e:	0e 94 92 13 	call	0x2724	; 0x2724 <__fp_split3>
    2422:	58 f3       	brcs	.-42     	; 0x23fa <__addsf3+0xc>
    2424:	ba 17       	cp	r27, r26
    2426:	62 07       	cpc	r22, r18
    2428:	73 07       	cpc	r23, r19
    242a:	84 07       	cpc	r24, r20
    242c:	95 07       	cpc	r25, r21
    242e:	20 f0       	brcs	.+8      	; 0x2438 <__addsf3x+0x1c>
    2430:	79 f4       	brne	.+30     	; 0x2450 <__addsf3x+0x34>
    2432:	a6 f5       	brtc	.+104    	; 0x249c <__addsf3x+0x80>
    2434:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__fp_zero>
    2438:	0e f4       	brtc	.+2      	; 0x243c <__addsf3x+0x20>
    243a:	e0 95       	com	r30
    243c:	0b 2e       	mov	r0, r27
    243e:	ba 2f       	mov	r27, r26
    2440:	a0 2d       	mov	r26, r0
    2442:	0b 01       	movw	r0, r22
    2444:	b9 01       	movw	r22, r18
    2446:	90 01       	movw	r18, r0
    2448:	0c 01       	movw	r0, r24
    244a:	ca 01       	movw	r24, r20
    244c:	a0 01       	movw	r20, r0
    244e:	11 24       	eor	r1, r1
    2450:	ff 27       	eor	r31, r31
    2452:	59 1b       	sub	r21, r25
    2454:	99 f0       	breq	.+38     	; 0x247c <__addsf3x+0x60>
    2456:	59 3f       	cpi	r21, 0xF9	; 249
    2458:	50 f4       	brcc	.+20     	; 0x246e <__addsf3x+0x52>
    245a:	50 3e       	cpi	r21, 0xE0	; 224
    245c:	68 f1       	brcs	.+90     	; 0x24b8 <__addsf3x+0x9c>
    245e:	1a 16       	cp	r1, r26
    2460:	f0 40       	sbci	r31, 0x00	; 0
    2462:	a2 2f       	mov	r26, r18
    2464:	23 2f       	mov	r18, r19
    2466:	34 2f       	mov	r19, r20
    2468:	44 27       	eor	r20, r20
    246a:	58 5f       	subi	r21, 0xF8	; 248
    246c:	f3 cf       	rjmp	.-26     	; 0x2454 <__addsf3x+0x38>
    246e:	46 95       	lsr	r20
    2470:	37 95       	ror	r19
    2472:	27 95       	ror	r18
    2474:	a7 95       	ror	r26
    2476:	f0 40       	sbci	r31, 0x00	; 0
    2478:	53 95       	inc	r21
    247a:	c9 f7       	brne	.-14     	; 0x246e <__addsf3x+0x52>
    247c:	7e f4       	brtc	.+30     	; 0x249c <__addsf3x+0x80>
    247e:	1f 16       	cp	r1, r31
    2480:	ba 0b       	sbc	r27, r26
    2482:	62 0b       	sbc	r22, r18
    2484:	73 0b       	sbc	r23, r19
    2486:	84 0b       	sbc	r24, r20
    2488:	ba f0       	brmi	.+46     	; 0x24b8 <__addsf3x+0x9c>
    248a:	91 50       	subi	r25, 0x01	; 1
    248c:	a1 f0       	breq	.+40     	; 0x24b6 <__addsf3x+0x9a>
    248e:	ff 0f       	add	r31, r31
    2490:	bb 1f       	adc	r27, r27
    2492:	66 1f       	adc	r22, r22
    2494:	77 1f       	adc	r23, r23
    2496:	88 1f       	adc	r24, r24
    2498:	c2 f7       	brpl	.-16     	; 0x248a <__addsf3x+0x6e>
    249a:	0e c0       	rjmp	.+28     	; 0x24b8 <__addsf3x+0x9c>
    249c:	ba 0f       	add	r27, r26
    249e:	62 1f       	adc	r22, r18
    24a0:	73 1f       	adc	r23, r19
    24a2:	84 1f       	adc	r24, r20
    24a4:	48 f4       	brcc	.+18     	; 0x24b8 <__addsf3x+0x9c>
    24a6:	87 95       	ror	r24
    24a8:	77 95       	ror	r23
    24aa:	67 95       	ror	r22
    24ac:	b7 95       	ror	r27
    24ae:	f7 95       	ror	r31
    24b0:	9e 3f       	cpi	r25, 0xFE	; 254
    24b2:	08 f0       	brcs	.+2      	; 0x24b6 <__addsf3x+0x9a>
    24b4:	b0 cf       	rjmp	.-160    	; 0x2416 <__addsf3+0x28>
    24b6:	93 95       	inc	r25
    24b8:	88 0f       	add	r24, r24
    24ba:	08 f0       	brcs	.+2      	; 0x24be <__addsf3x+0xa2>
    24bc:	99 27       	eor	r25, r25
    24be:	ee 0f       	add	r30, r30
    24c0:	97 95       	ror	r25
    24c2:	87 95       	ror	r24
    24c4:	08 95       	ret

000024c6 <__cmpsf2>:
    24c6:	0e 94 46 13 	call	0x268c	; 0x268c <__fp_cmp>
    24ca:	08 f4       	brcc	.+2      	; 0x24ce <__cmpsf2+0x8>
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	08 95       	ret

000024d0 <__divsf3>:
    24d0:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__divsf3x>
    24d4:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__fp_round>
    24d8:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__fp_pscB>
    24dc:	58 f0       	brcs	.+22     	; 0x24f4 <__divsf3+0x24>
    24de:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__fp_pscA>
    24e2:	40 f0       	brcs	.+16     	; 0x24f4 <__divsf3+0x24>
    24e4:	29 f4       	brne	.+10     	; 0x24f0 <__divsf3+0x20>
    24e6:	5f 3f       	cpi	r21, 0xFF	; 255
    24e8:	29 f0       	breq	.+10     	; 0x24f4 <__divsf3+0x24>
    24ea:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__fp_inf>
    24ee:	51 11       	cpse	r21, r1
    24f0:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__fp_szero>
    24f4:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__fp_nan>

000024f8 <__divsf3x>:
    24f8:	0e 94 92 13 	call	0x2724	; 0x2724 <__fp_split3>
    24fc:	68 f3       	brcs	.-38     	; 0x24d8 <__divsf3+0x8>

000024fe <__divsf3_pse>:
    24fe:	99 23       	and	r25, r25
    2500:	b1 f3       	breq	.-20     	; 0x24ee <__divsf3+0x1e>
    2502:	55 23       	and	r21, r21
    2504:	91 f3       	breq	.-28     	; 0x24ea <__divsf3+0x1a>
    2506:	95 1b       	sub	r25, r21
    2508:	55 0b       	sbc	r21, r21
    250a:	bb 27       	eor	r27, r27
    250c:	aa 27       	eor	r26, r26
    250e:	62 17       	cp	r22, r18
    2510:	73 07       	cpc	r23, r19
    2512:	84 07       	cpc	r24, r20
    2514:	38 f0       	brcs	.+14     	; 0x2524 <__divsf3_pse+0x26>
    2516:	9f 5f       	subi	r25, 0xFF	; 255
    2518:	5f 4f       	sbci	r21, 0xFF	; 255
    251a:	22 0f       	add	r18, r18
    251c:	33 1f       	adc	r19, r19
    251e:	44 1f       	adc	r20, r20
    2520:	aa 1f       	adc	r26, r26
    2522:	a9 f3       	breq	.-22     	; 0x250e <__divsf3_pse+0x10>
    2524:	35 d0       	rcall	.+106    	; 0x2590 <__divsf3_pse+0x92>
    2526:	0e 2e       	mov	r0, r30
    2528:	3a f0       	brmi	.+14     	; 0x2538 <__divsf3_pse+0x3a>
    252a:	e0 e8       	ldi	r30, 0x80	; 128
    252c:	32 d0       	rcall	.+100    	; 0x2592 <__divsf3_pse+0x94>
    252e:	91 50       	subi	r25, 0x01	; 1
    2530:	50 40       	sbci	r21, 0x00	; 0
    2532:	e6 95       	lsr	r30
    2534:	00 1c       	adc	r0, r0
    2536:	ca f7       	brpl	.-14     	; 0x252a <__divsf3_pse+0x2c>
    2538:	2b d0       	rcall	.+86     	; 0x2590 <__divsf3_pse+0x92>
    253a:	fe 2f       	mov	r31, r30
    253c:	29 d0       	rcall	.+82     	; 0x2590 <__divsf3_pse+0x92>
    253e:	66 0f       	add	r22, r22
    2540:	77 1f       	adc	r23, r23
    2542:	88 1f       	adc	r24, r24
    2544:	bb 1f       	adc	r27, r27
    2546:	26 17       	cp	r18, r22
    2548:	37 07       	cpc	r19, r23
    254a:	48 07       	cpc	r20, r24
    254c:	ab 07       	cpc	r26, r27
    254e:	b0 e8       	ldi	r27, 0x80	; 128
    2550:	09 f0       	breq	.+2      	; 0x2554 <__divsf3_pse+0x56>
    2552:	bb 0b       	sbc	r27, r27
    2554:	80 2d       	mov	r24, r0
    2556:	bf 01       	movw	r22, r30
    2558:	ff 27       	eor	r31, r31
    255a:	93 58       	subi	r25, 0x83	; 131
    255c:	5f 4f       	sbci	r21, 0xFF	; 255
    255e:	3a f0       	brmi	.+14     	; 0x256e <__divsf3_pse+0x70>
    2560:	9e 3f       	cpi	r25, 0xFE	; 254
    2562:	51 05       	cpc	r21, r1
    2564:	78 f0       	brcs	.+30     	; 0x2584 <__divsf3_pse+0x86>
    2566:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__fp_inf>
    256a:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__fp_szero>
    256e:	5f 3f       	cpi	r21, 0xFF	; 255
    2570:	e4 f3       	brlt	.-8      	; 0x256a <__divsf3_pse+0x6c>
    2572:	98 3e       	cpi	r25, 0xE8	; 232
    2574:	d4 f3       	brlt	.-12     	; 0x256a <__divsf3_pse+0x6c>
    2576:	86 95       	lsr	r24
    2578:	77 95       	ror	r23
    257a:	67 95       	ror	r22
    257c:	b7 95       	ror	r27
    257e:	f7 95       	ror	r31
    2580:	9f 5f       	subi	r25, 0xFF	; 255
    2582:	c9 f7       	brne	.-14     	; 0x2576 <__divsf3_pse+0x78>
    2584:	88 0f       	add	r24, r24
    2586:	91 1d       	adc	r25, r1
    2588:	96 95       	lsr	r25
    258a:	87 95       	ror	r24
    258c:	97 f9       	bld	r25, 7
    258e:	08 95       	ret
    2590:	e1 e0       	ldi	r30, 0x01	; 1
    2592:	66 0f       	add	r22, r22
    2594:	77 1f       	adc	r23, r23
    2596:	88 1f       	adc	r24, r24
    2598:	bb 1f       	adc	r27, r27
    259a:	62 17       	cp	r22, r18
    259c:	73 07       	cpc	r23, r19
    259e:	84 07       	cpc	r24, r20
    25a0:	ba 07       	cpc	r27, r26
    25a2:	20 f0       	brcs	.+8      	; 0x25ac <__divsf3_pse+0xae>
    25a4:	62 1b       	sub	r22, r18
    25a6:	73 0b       	sbc	r23, r19
    25a8:	84 0b       	sbc	r24, r20
    25aa:	ba 0b       	sbc	r27, r26
    25ac:	ee 1f       	adc	r30, r30
    25ae:	88 f7       	brcc	.-30     	; 0x2592 <__divsf3_pse+0x94>
    25b0:	e0 95       	com	r30
    25b2:	08 95       	ret

000025b4 <__fixunssfsi>:
    25b4:	0e 94 9a 13 	call	0x2734	; 0x2734 <__fp_splitA>
    25b8:	88 f0       	brcs	.+34     	; 0x25dc <__fixunssfsi+0x28>
    25ba:	9f 57       	subi	r25, 0x7F	; 127
    25bc:	98 f0       	brcs	.+38     	; 0x25e4 <__fixunssfsi+0x30>
    25be:	b9 2f       	mov	r27, r25
    25c0:	99 27       	eor	r25, r25
    25c2:	b7 51       	subi	r27, 0x17	; 23
    25c4:	b0 f0       	brcs	.+44     	; 0x25f2 <__fixunssfsi+0x3e>
    25c6:	e1 f0       	breq	.+56     	; 0x2600 <__fixunssfsi+0x4c>
    25c8:	66 0f       	add	r22, r22
    25ca:	77 1f       	adc	r23, r23
    25cc:	88 1f       	adc	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	1a f0       	brmi	.+6      	; 0x25d8 <__fixunssfsi+0x24>
    25d2:	ba 95       	dec	r27
    25d4:	c9 f7       	brne	.-14     	; 0x25c8 <__fixunssfsi+0x14>
    25d6:	14 c0       	rjmp	.+40     	; 0x2600 <__fixunssfsi+0x4c>
    25d8:	b1 30       	cpi	r27, 0x01	; 1
    25da:	91 f0       	breq	.+36     	; 0x2600 <__fixunssfsi+0x4c>
    25dc:	0e 94 b4 13 	call	0x2768	; 0x2768 <__fp_zero>
    25e0:	b1 e0       	ldi	r27, 0x01	; 1
    25e2:	08 95       	ret
    25e4:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__fp_zero>
    25e8:	67 2f       	mov	r22, r23
    25ea:	78 2f       	mov	r23, r24
    25ec:	88 27       	eor	r24, r24
    25ee:	b8 5f       	subi	r27, 0xF8	; 248
    25f0:	39 f0       	breq	.+14     	; 0x2600 <__fixunssfsi+0x4c>
    25f2:	b9 3f       	cpi	r27, 0xF9	; 249
    25f4:	cc f3       	brlt	.-14     	; 0x25e8 <__fixunssfsi+0x34>
    25f6:	86 95       	lsr	r24
    25f8:	77 95       	ror	r23
    25fa:	67 95       	ror	r22
    25fc:	b3 95       	inc	r27
    25fe:	d9 f7       	brne	.-10     	; 0x25f6 <__fixunssfsi+0x42>
    2600:	3e f4       	brtc	.+14     	; 0x2610 <__fixunssfsi+0x5c>
    2602:	90 95       	com	r25
    2604:	80 95       	com	r24
    2606:	70 95       	com	r23
    2608:	61 95       	neg	r22
    260a:	7f 4f       	sbci	r23, 0xFF	; 255
    260c:	8f 4f       	sbci	r24, 0xFF	; 255
    260e:	9f 4f       	sbci	r25, 0xFF	; 255
    2610:	08 95       	ret

00002612 <__floatunsisf>:
    2612:	e8 94       	clt
    2614:	09 c0       	rjmp	.+18     	; 0x2628 <__floatsisf+0x12>

00002616 <__floatsisf>:
    2616:	97 fb       	bst	r25, 7
    2618:	3e f4       	brtc	.+14     	; 0x2628 <__floatsisf+0x12>
    261a:	90 95       	com	r25
    261c:	80 95       	com	r24
    261e:	70 95       	com	r23
    2620:	61 95       	neg	r22
    2622:	7f 4f       	sbci	r23, 0xFF	; 255
    2624:	8f 4f       	sbci	r24, 0xFF	; 255
    2626:	9f 4f       	sbci	r25, 0xFF	; 255
    2628:	99 23       	and	r25, r25
    262a:	a9 f0       	breq	.+42     	; 0x2656 <__floatsisf+0x40>
    262c:	f9 2f       	mov	r31, r25
    262e:	96 e9       	ldi	r25, 0x96	; 150
    2630:	bb 27       	eor	r27, r27
    2632:	93 95       	inc	r25
    2634:	f6 95       	lsr	r31
    2636:	87 95       	ror	r24
    2638:	77 95       	ror	r23
    263a:	67 95       	ror	r22
    263c:	b7 95       	ror	r27
    263e:	f1 11       	cpse	r31, r1
    2640:	f8 cf       	rjmp	.-16     	; 0x2632 <__floatsisf+0x1c>
    2642:	fa f4       	brpl	.+62     	; 0x2682 <__floatsisf+0x6c>
    2644:	bb 0f       	add	r27, r27
    2646:	11 f4       	brne	.+4      	; 0x264c <__floatsisf+0x36>
    2648:	60 ff       	sbrs	r22, 0
    264a:	1b c0       	rjmp	.+54     	; 0x2682 <__floatsisf+0x6c>
    264c:	6f 5f       	subi	r22, 0xFF	; 255
    264e:	7f 4f       	sbci	r23, 0xFF	; 255
    2650:	8f 4f       	sbci	r24, 0xFF	; 255
    2652:	9f 4f       	sbci	r25, 0xFF	; 255
    2654:	16 c0       	rjmp	.+44     	; 0x2682 <__floatsisf+0x6c>
    2656:	88 23       	and	r24, r24
    2658:	11 f0       	breq	.+4      	; 0x265e <__floatsisf+0x48>
    265a:	96 e9       	ldi	r25, 0x96	; 150
    265c:	11 c0       	rjmp	.+34     	; 0x2680 <__floatsisf+0x6a>
    265e:	77 23       	and	r23, r23
    2660:	21 f0       	breq	.+8      	; 0x266a <__floatsisf+0x54>
    2662:	9e e8       	ldi	r25, 0x8E	; 142
    2664:	87 2f       	mov	r24, r23
    2666:	76 2f       	mov	r23, r22
    2668:	05 c0       	rjmp	.+10     	; 0x2674 <__floatsisf+0x5e>
    266a:	66 23       	and	r22, r22
    266c:	71 f0       	breq	.+28     	; 0x268a <__floatsisf+0x74>
    266e:	96 e8       	ldi	r25, 0x86	; 134
    2670:	86 2f       	mov	r24, r22
    2672:	70 e0       	ldi	r23, 0x00	; 0
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	2a f0       	brmi	.+10     	; 0x2682 <__floatsisf+0x6c>
    2678:	9a 95       	dec	r25
    267a:	66 0f       	add	r22, r22
    267c:	77 1f       	adc	r23, r23
    267e:	88 1f       	adc	r24, r24
    2680:	da f7       	brpl	.-10     	; 0x2678 <__floatsisf+0x62>
    2682:	88 0f       	add	r24, r24
    2684:	96 95       	lsr	r25
    2686:	87 95       	ror	r24
    2688:	97 f9       	bld	r25, 7
    268a:	08 95       	ret

0000268c <__fp_cmp>:
    268c:	99 0f       	add	r25, r25
    268e:	00 08       	sbc	r0, r0
    2690:	55 0f       	add	r21, r21
    2692:	aa 0b       	sbc	r26, r26
    2694:	e0 e8       	ldi	r30, 0x80	; 128
    2696:	fe ef       	ldi	r31, 0xFE	; 254
    2698:	16 16       	cp	r1, r22
    269a:	17 06       	cpc	r1, r23
    269c:	e8 07       	cpc	r30, r24
    269e:	f9 07       	cpc	r31, r25
    26a0:	c0 f0       	brcs	.+48     	; 0x26d2 <__fp_cmp+0x46>
    26a2:	12 16       	cp	r1, r18
    26a4:	13 06       	cpc	r1, r19
    26a6:	e4 07       	cpc	r30, r20
    26a8:	f5 07       	cpc	r31, r21
    26aa:	98 f0       	brcs	.+38     	; 0x26d2 <__fp_cmp+0x46>
    26ac:	62 1b       	sub	r22, r18
    26ae:	73 0b       	sbc	r23, r19
    26b0:	84 0b       	sbc	r24, r20
    26b2:	95 0b       	sbc	r25, r21
    26b4:	39 f4       	brne	.+14     	; 0x26c4 <__fp_cmp+0x38>
    26b6:	0a 26       	eor	r0, r26
    26b8:	61 f0       	breq	.+24     	; 0x26d2 <__fp_cmp+0x46>
    26ba:	23 2b       	or	r18, r19
    26bc:	24 2b       	or	r18, r20
    26be:	25 2b       	or	r18, r21
    26c0:	21 f4       	brne	.+8      	; 0x26ca <__fp_cmp+0x3e>
    26c2:	08 95       	ret
    26c4:	0a 26       	eor	r0, r26
    26c6:	09 f4       	brne	.+2      	; 0x26ca <__fp_cmp+0x3e>
    26c8:	a1 40       	sbci	r26, 0x01	; 1
    26ca:	a6 95       	lsr	r26
    26cc:	8f ef       	ldi	r24, 0xFF	; 255
    26ce:	81 1d       	adc	r24, r1
    26d0:	81 1d       	adc	r24, r1
    26d2:	08 95       	ret

000026d4 <__fp_inf>:
    26d4:	97 f9       	bld	r25, 7
    26d6:	9f 67       	ori	r25, 0x7F	; 127
    26d8:	80 e8       	ldi	r24, 0x80	; 128
    26da:	70 e0       	ldi	r23, 0x00	; 0
    26dc:	60 e0       	ldi	r22, 0x00	; 0
    26de:	08 95       	ret

000026e0 <__fp_nan>:
    26e0:	9f ef       	ldi	r25, 0xFF	; 255
    26e2:	80 ec       	ldi	r24, 0xC0	; 192
    26e4:	08 95       	ret

000026e6 <__fp_pscA>:
    26e6:	00 24       	eor	r0, r0
    26e8:	0a 94       	dec	r0
    26ea:	16 16       	cp	r1, r22
    26ec:	17 06       	cpc	r1, r23
    26ee:	18 06       	cpc	r1, r24
    26f0:	09 06       	cpc	r0, r25
    26f2:	08 95       	ret

000026f4 <__fp_pscB>:
    26f4:	00 24       	eor	r0, r0
    26f6:	0a 94       	dec	r0
    26f8:	12 16       	cp	r1, r18
    26fa:	13 06       	cpc	r1, r19
    26fc:	14 06       	cpc	r1, r20
    26fe:	05 06       	cpc	r0, r21
    2700:	08 95       	ret

00002702 <__fp_round>:
    2702:	09 2e       	mov	r0, r25
    2704:	03 94       	inc	r0
    2706:	00 0c       	add	r0, r0
    2708:	11 f4       	brne	.+4      	; 0x270e <__fp_round+0xc>
    270a:	88 23       	and	r24, r24
    270c:	52 f0       	brmi	.+20     	; 0x2722 <__fp_round+0x20>
    270e:	bb 0f       	add	r27, r27
    2710:	40 f4       	brcc	.+16     	; 0x2722 <__fp_round+0x20>
    2712:	bf 2b       	or	r27, r31
    2714:	11 f4       	brne	.+4      	; 0x271a <__fp_round+0x18>
    2716:	60 ff       	sbrs	r22, 0
    2718:	04 c0       	rjmp	.+8      	; 0x2722 <__fp_round+0x20>
    271a:	6f 5f       	subi	r22, 0xFF	; 255
    271c:	7f 4f       	sbci	r23, 0xFF	; 255
    271e:	8f 4f       	sbci	r24, 0xFF	; 255
    2720:	9f 4f       	sbci	r25, 0xFF	; 255
    2722:	08 95       	ret

00002724 <__fp_split3>:
    2724:	57 fd       	sbrc	r21, 7
    2726:	90 58       	subi	r25, 0x80	; 128
    2728:	44 0f       	add	r20, r20
    272a:	55 1f       	adc	r21, r21
    272c:	59 f0       	breq	.+22     	; 0x2744 <__fp_splitA+0x10>
    272e:	5f 3f       	cpi	r21, 0xFF	; 255
    2730:	71 f0       	breq	.+28     	; 0x274e <__fp_splitA+0x1a>
    2732:	47 95       	ror	r20

00002734 <__fp_splitA>:
    2734:	88 0f       	add	r24, r24
    2736:	97 fb       	bst	r25, 7
    2738:	99 1f       	adc	r25, r25
    273a:	61 f0       	breq	.+24     	; 0x2754 <__fp_splitA+0x20>
    273c:	9f 3f       	cpi	r25, 0xFF	; 255
    273e:	79 f0       	breq	.+30     	; 0x275e <__fp_splitA+0x2a>
    2740:	87 95       	ror	r24
    2742:	08 95       	ret
    2744:	12 16       	cp	r1, r18
    2746:	13 06       	cpc	r1, r19
    2748:	14 06       	cpc	r1, r20
    274a:	55 1f       	adc	r21, r21
    274c:	f2 cf       	rjmp	.-28     	; 0x2732 <__fp_split3+0xe>
    274e:	46 95       	lsr	r20
    2750:	f1 df       	rcall	.-30     	; 0x2734 <__fp_splitA>
    2752:	08 c0       	rjmp	.+16     	; 0x2764 <__fp_splitA+0x30>
    2754:	16 16       	cp	r1, r22
    2756:	17 06       	cpc	r1, r23
    2758:	18 06       	cpc	r1, r24
    275a:	99 1f       	adc	r25, r25
    275c:	f1 cf       	rjmp	.-30     	; 0x2740 <__fp_splitA+0xc>
    275e:	86 95       	lsr	r24
    2760:	71 05       	cpc	r23, r1
    2762:	61 05       	cpc	r22, r1
    2764:	08 94       	sec
    2766:	08 95       	ret

00002768 <__fp_zero>:
    2768:	e8 94       	clt

0000276a <__fp_szero>:
    276a:	bb 27       	eor	r27, r27
    276c:	66 27       	eor	r22, r22
    276e:	77 27       	eor	r23, r23
    2770:	cb 01       	movw	r24, r22
    2772:	97 f9       	bld	r25, 7
    2774:	08 95       	ret

00002776 <__gesf2>:
    2776:	0e 94 46 13 	call	0x268c	; 0x268c <__fp_cmp>
    277a:	08 f4       	brcc	.+2      	; 0x277e <__gesf2+0x8>
    277c:	8f ef       	ldi	r24, 0xFF	; 255
    277e:	08 95       	ret

00002780 <__mulsf3>:
    2780:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsf3x>
    2784:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__fp_round>
    2788:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__fp_pscA>
    278c:	38 f0       	brcs	.+14     	; 0x279c <__mulsf3+0x1c>
    278e:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__fp_pscB>
    2792:	20 f0       	brcs	.+8      	; 0x279c <__mulsf3+0x1c>
    2794:	95 23       	and	r25, r21
    2796:	11 f0       	breq	.+4      	; 0x279c <__mulsf3+0x1c>
    2798:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__fp_inf>
    279c:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__fp_nan>
    27a0:	11 24       	eor	r1, r1
    27a2:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__fp_szero>

000027a6 <__mulsf3x>:
    27a6:	0e 94 92 13 	call	0x2724	; 0x2724 <__fp_split3>
    27aa:	70 f3       	brcs	.-36     	; 0x2788 <__mulsf3+0x8>

000027ac <__mulsf3_pse>:
    27ac:	95 9f       	mul	r25, r21
    27ae:	c1 f3       	breq	.-16     	; 0x27a0 <__mulsf3+0x20>
    27b0:	95 0f       	add	r25, r21
    27b2:	50 e0       	ldi	r21, 0x00	; 0
    27b4:	55 1f       	adc	r21, r21
    27b6:	62 9f       	mul	r22, r18
    27b8:	f0 01       	movw	r30, r0
    27ba:	72 9f       	mul	r23, r18
    27bc:	bb 27       	eor	r27, r27
    27be:	f0 0d       	add	r31, r0
    27c0:	b1 1d       	adc	r27, r1
    27c2:	63 9f       	mul	r22, r19
    27c4:	aa 27       	eor	r26, r26
    27c6:	f0 0d       	add	r31, r0
    27c8:	b1 1d       	adc	r27, r1
    27ca:	aa 1f       	adc	r26, r26
    27cc:	64 9f       	mul	r22, r20
    27ce:	66 27       	eor	r22, r22
    27d0:	b0 0d       	add	r27, r0
    27d2:	a1 1d       	adc	r26, r1
    27d4:	66 1f       	adc	r22, r22
    27d6:	82 9f       	mul	r24, r18
    27d8:	22 27       	eor	r18, r18
    27da:	b0 0d       	add	r27, r0
    27dc:	a1 1d       	adc	r26, r1
    27de:	62 1f       	adc	r22, r18
    27e0:	73 9f       	mul	r23, r19
    27e2:	b0 0d       	add	r27, r0
    27e4:	a1 1d       	adc	r26, r1
    27e6:	62 1f       	adc	r22, r18
    27e8:	83 9f       	mul	r24, r19
    27ea:	a0 0d       	add	r26, r0
    27ec:	61 1d       	adc	r22, r1
    27ee:	22 1f       	adc	r18, r18
    27f0:	74 9f       	mul	r23, r20
    27f2:	33 27       	eor	r19, r19
    27f4:	a0 0d       	add	r26, r0
    27f6:	61 1d       	adc	r22, r1
    27f8:	23 1f       	adc	r18, r19
    27fa:	84 9f       	mul	r24, r20
    27fc:	60 0d       	add	r22, r0
    27fe:	21 1d       	adc	r18, r1
    2800:	82 2f       	mov	r24, r18
    2802:	76 2f       	mov	r23, r22
    2804:	6a 2f       	mov	r22, r26
    2806:	11 24       	eor	r1, r1
    2808:	9f 57       	subi	r25, 0x7F	; 127
    280a:	50 40       	sbci	r21, 0x00	; 0
    280c:	9a f0       	brmi	.+38     	; 0x2834 <__mulsf3_pse+0x88>
    280e:	f1 f0       	breq	.+60     	; 0x284c <__mulsf3_pse+0xa0>
    2810:	88 23       	and	r24, r24
    2812:	4a f0       	brmi	.+18     	; 0x2826 <__mulsf3_pse+0x7a>
    2814:	ee 0f       	add	r30, r30
    2816:	ff 1f       	adc	r31, r31
    2818:	bb 1f       	adc	r27, r27
    281a:	66 1f       	adc	r22, r22
    281c:	77 1f       	adc	r23, r23
    281e:	88 1f       	adc	r24, r24
    2820:	91 50       	subi	r25, 0x01	; 1
    2822:	50 40       	sbci	r21, 0x00	; 0
    2824:	a9 f7       	brne	.-22     	; 0x2810 <__mulsf3_pse+0x64>
    2826:	9e 3f       	cpi	r25, 0xFE	; 254
    2828:	51 05       	cpc	r21, r1
    282a:	80 f0       	brcs	.+32     	; 0x284c <__mulsf3_pse+0xa0>
    282c:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__fp_inf>
    2830:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__fp_szero>
    2834:	5f 3f       	cpi	r21, 0xFF	; 255
    2836:	e4 f3       	brlt	.-8      	; 0x2830 <__mulsf3_pse+0x84>
    2838:	98 3e       	cpi	r25, 0xE8	; 232
    283a:	d4 f3       	brlt	.-12     	; 0x2830 <__mulsf3_pse+0x84>
    283c:	86 95       	lsr	r24
    283e:	77 95       	ror	r23
    2840:	67 95       	ror	r22
    2842:	b7 95       	ror	r27
    2844:	f7 95       	ror	r31
    2846:	e7 95       	ror	r30
    2848:	9f 5f       	subi	r25, 0xFF	; 255
    284a:	c1 f7       	brne	.-16     	; 0x283c <__mulsf3_pse+0x90>
    284c:	fe 2b       	or	r31, r30
    284e:	88 0f       	add	r24, r24
    2850:	91 1d       	adc	r25, r1
    2852:	96 95       	lsr	r25
    2854:	87 95       	ror	r24
    2856:	97 f9       	bld	r25, 7
    2858:	08 95       	ret

0000285a <pow>:
    285a:	fa 01       	movw	r30, r20
    285c:	ee 0f       	add	r30, r30
    285e:	ff 1f       	adc	r31, r31
    2860:	30 96       	adiw	r30, 0x00	; 0
    2862:	21 05       	cpc	r18, r1
    2864:	31 05       	cpc	r19, r1
    2866:	a1 f1       	breq	.+104    	; 0x28d0 <pow+0x76>
    2868:	61 15       	cp	r22, r1
    286a:	71 05       	cpc	r23, r1
    286c:	61 f4       	brne	.+24     	; 0x2886 <pow+0x2c>
    286e:	80 38       	cpi	r24, 0x80	; 128
    2870:	bf e3       	ldi	r27, 0x3F	; 63
    2872:	9b 07       	cpc	r25, r27
    2874:	49 f1       	breq	.+82     	; 0x28c8 <pow+0x6e>
    2876:	68 94       	set
    2878:	90 38       	cpi	r25, 0x80	; 128
    287a:	81 05       	cpc	r24, r1
    287c:	61 f0       	breq	.+24     	; 0x2896 <pow+0x3c>
    287e:	80 38       	cpi	r24, 0x80	; 128
    2880:	bf ef       	ldi	r27, 0xFF	; 255
    2882:	9b 07       	cpc	r25, r27
    2884:	41 f0       	breq	.+16     	; 0x2896 <pow+0x3c>
    2886:	99 23       	and	r25, r25
    2888:	4a f5       	brpl	.+82     	; 0x28dc <pow+0x82>
    288a:	ff 3f       	cpi	r31, 0xFF	; 255
    288c:	e1 05       	cpc	r30, r1
    288e:	31 05       	cpc	r19, r1
    2890:	21 05       	cpc	r18, r1
    2892:	19 f1       	breq	.+70     	; 0x28da <pow+0x80>
    2894:	e8 94       	clt
    2896:	08 94       	sec
    2898:	e7 95       	ror	r30
    289a:	d9 01       	movw	r26, r18
    289c:	aa 23       	and	r26, r26
    289e:	29 f4       	brne	.+10     	; 0x28aa <pow+0x50>
    28a0:	ab 2f       	mov	r26, r27
    28a2:	be 2f       	mov	r27, r30
    28a4:	f8 5f       	subi	r31, 0xF8	; 248
    28a6:	d0 f3       	brcs	.-12     	; 0x289c <pow+0x42>
    28a8:	10 c0       	rjmp	.+32     	; 0x28ca <pow+0x70>
    28aa:	ff 5f       	subi	r31, 0xFF	; 255
    28ac:	70 f4       	brcc	.+28     	; 0x28ca <pow+0x70>
    28ae:	a6 95       	lsr	r26
    28b0:	e0 f7       	brcc	.-8      	; 0x28aa <pow+0x50>
    28b2:	f7 39       	cpi	r31, 0x97	; 151
    28b4:	50 f0       	brcs	.+20     	; 0x28ca <pow+0x70>
    28b6:	19 f0       	breq	.+6      	; 0x28be <pow+0x64>
    28b8:	ff 3a       	cpi	r31, 0xAF	; 175
    28ba:	38 f4       	brcc	.+14     	; 0x28ca <pow+0x70>
    28bc:	9f 77       	andi	r25, 0x7F	; 127
    28be:	9f 93       	push	r25
    28c0:	0d d0       	rcall	.+26     	; 0x28dc <pow+0x82>
    28c2:	0f 90       	pop	r0
    28c4:	07 fc       	sbrc	r0, 7
    28c6:	90 58       	subi	r25, 0x80	; 128
    28c8:	08 95       	ret
    28ca:	46 f0       	brts	.+16     	; 0x28dc <pow+0x82>
    28cc:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__fp_nan>
    28d0:	60 e0       	ldi	r22, 0x00	; 0
    28d2:	70 e0       	ldi	r23, 0x00	; 0
    28d4:	80 e8       	ldi	r24, 0x80	; 128
    28d6:	9f e3       	ldi	r25, 0x3F	; 63
    28d8:	08 95       	ret
    28da:	4f e7       	ldi	r20, 0x7F	; 127
    28dc:	9f 77       	andi	r25, 0x7F	; 127
    28de:	5f 93       	push	r21
    28e0:	4f 93       	push	r20
    28e2:	3f 93       	push	r19
    28e4:	2f 93       	push	r18
    28e6:	0e 94 28 15 	call	0x2a50	; 0x2a50 <log>
    28ea:	2f 91       	pop	r18
    28ec:	3f 91       	pop	r19
    28ee:	4f 91       	pop	r20
    28f0:	5f 91       	pop	r21
    28f2:	0e 94 c0 13 	call	0x2780	; 0x2780 <__mulsf3>
    28f6:	0c 94 85 14 	jmp	0x290a	; 0x290a <exp>
    28fa:	29 f4       	brne	.+10     	; 0x2906 <pow+0xac>
    28fc:	16 f0       	brts	.+4      	; 0x2902 <pow+0xa8>
    28fe:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__fp_inf>
    2902:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__fp_zero>
    2906:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__fp_nan>

0000290a <exp>:
    290a:	0e 94 9a 13 	call	0x2734	; 0x2734 <__fp_splitA>
    290e:	a8 f3       	brcs	.-22     	; 0x28fa <pow+0xa0>
    2910:	96 38       	cpi	r25, 0x86	; 134
    2912:	a0 f7       	brcc	.-24     	; 0x28fc <pow+0xa2>
    2914:	07 f8       	bld	r0, 7
    2916:	0f 92       	push	r0
    2918:	e8 94       	clt
    291a:	2b e3       	ldi	r18, 0x3B	; 59
    291c:	3a ea       	ldi	r19, 0xAA	; 170
    291e:	48 eb       	ldi	r20, 0xB8	; 184
    2920:	5f e7       	ldi	r21, 0x7F	; 127
    2922:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__mulsf3_pse>
    2926:	0f 92       	push	r0
    2928:	0f 92       	push	r0
    292a:	0f 92       	push	r0
    292c:	4d b7       	in	r20, 0x3d	; 61
    292e:	5e b7       	in	r21, 0x3e	; 62
    2930:	0f 92       	push	r0
    2932:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <modf>
    2936:	e4 e7       	ldi	r30, 0x74	; 116
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	0e 94 b7 14 	call	0x296e	; 0x296e <__fp_powser>
    293e:	4f 91       	pop	r20
    2940:	5f 91       	pop	r21
    2942:	ef 91       	pop	r30
    2944:	ff 91       	pop	r31
    2946:	e5 95       	asr	r30
    2948:	ee 1f       	adc	r30, r30
    294a:	ff 1f       	adc	r31, r31
    294c:	49 f0       	breq	.+18     	; 0x2960 <exp+0x56>
    294e:	fe 57       	subi	r31, 0x7E	; 126
    2950:	e0 68       	ori	r30, 0x80	; 128
    2952:	44 27       	eor	r20, r20
    2954:	ee 0f       	add	r30, r30
    2956:	44 1f       	adc	r20, r20
    2958:	fa 95       	dec	r31
    295a:	e1 f7       	brne	.-8      	; 0x2954 <exp+0x4a>
    295c:	41 95       	neg	r20
    295e:	55 0b       	sbc	r21, r21
    2960:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <ldexp>
    2964:	0f 90       	pop	r0
    2966:	07 fe       	sbrs	r0, 7
    2968:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <inverse>
    296c:	08 95       	ret

0000296e <__fp_powser>:
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	1f 93       	push	r17
    2974:	0f 93       	push	r16
    2976:	ff 92       	push	r15
    2978:	ef 92       	push	r14
    297a:	df 92       	push	r13
    297c:	7b 01       	movw	r14, r22
    297e:	8c 01       	movw	r16, r24
    2980:	68 94       	set
    2982:	06 c0       	rjmp	.+12     	; 0x2990 <__fp_powser+0x22>
    2984:	da 2e       	mov	r13, r26
    2986:	ef 01       	movw	r28, r30
    2988:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsf3x>
    298c:	fe 01       	movw	r30, r28
    298e:	e8 94       	clt
    2990:	a5 91       	lpm	r26, Z+
    2992:	25 91       	lpm	r18, Z+
    2994:	35 91       	lpm	r19, Z+
    2996:	45 91       	lpm	r20, Z+
    2998:	55 91       	lpm	r21, Z+
    299a:	a6 f3       	brts	.-24     	; 0x2984 <__fp_powser+0x16>
    299c:	ef 01       	movw	r28, r30
    299e:	0e 94 0e 12 	call	0x241c	; 0x241c <__addsf3x>
    29a2:	fe 01       	movw	r30, r28
    29a4:	97 01       	movw	r18, r14
    29a6:	a8 01       	movw	r20, r16
    29a8:	da 94       	dec	r13
    29aa:	69 f7       	brne	.-38     	; 0x2986 <__fp_powser+0x18>
    29ac:	df 90       	pop	r13
    29ae:	ef 90       	pop	r14
    29b0:	ff 90       	pop	r15
    29b2:	0f 91       	pop	r16
    29b4:	1f 91       	pop	r17
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	08 95       	ret

000029bc <inverse>:
    29bc:	9b 01       	movw	r18, r22
    29be:	ac 01       	movw	r20, r24
    29c0:	60 e0       	ldi	r22, 0x00	; 0
    29c2:	70 e0       	ldi	r23, 0x00	; 0
    29c4:	80 e8       	ldi	r24, 0x80	; 128
    29c6:	9f e3       	ldi	r25, 0x3F	; 63
    29c8:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <__divsf3>
    29cc:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__fp_inf>
    29d0:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__fp_mpack>

000029d4 <ldexp>:
    29d4:	0e 94 9a 13 	call	0x2734	; 0x2734 <__fp_splitA>
    29d8:	d8 f3       	brcs	.-10     	; 0x29d0 <inverse+0x14>
    29da:	99 23       	and	r25, r25
    29dc:	c9 f3       	breq	.-14     	; 0x29d0 <inverse+0x14>
    29de:	94 0f       	add	r25, r20
    29e0:	51 1d       	adc	r21, r1
    29e2:	a3 f3       	brvs	.-24     	; 0x29cc <inverse+0x10>
    29e4:	91 50       	subi	r25, 0x01	; 1
    29e6:	50 40       	sbci	r21, 0x00	; 0
    29e8:	94 f0       	brlt	.+36     	; 0x2a0e <ldexp+0x3a>
    29ea:	59 f0       	breq	.+22     	; 0x2a02 <ldexp+0x2e>
    29ec:	88 23       	and	r24, r24
    29ee:	32 f0       	brmi	.+12     	; 0x29fc <ldexp+0x28>
    29f0:	66 0f       	add	r22, r22
    29f2:	77 1f       	adc	r23, r23
    29f4:	88 1f       	adc	r24, r24
    29f6:	91 50       	subi	r25, 0x01	; 1
    29f8:	50 40       	sbci	r21, 0x00	; 0
    29fa:	c1 f7       	brne	.-16     	; 0x29ec <ldexp+0x18>
    29fc:	9e 3f       	cpi	r25, 0xFE	; 254
    29fe:	51 05       	cpc	r21, r1
    2a00:	2c f7       	brge	.-54     	; 0x29cc <inverse+0x10>
    2a02:	88 0f       	add	r24, r24
    2a04:	91 1d       	adc	r25, r1
    2a06:	96 95       	lsr	r25
    2a08:	87 95       	ror	r24
    2a0a:	97 f9       	bld	r25, 7
    2a0c:	08 95       	ret
    2a0e:	5f 3f       	cpi	r21, 0xFF	; 255
    2a10:	ac f0       	brlt	.+42     	; 0x2a3c <ldexp+0x68>
    2a12:	98 3e       	cpi	r25, 0xE8	; 232
    2a14:	9c f0       	brlt	.+38     	; 0x2a3c <ldexp+0x68>
    2a16:	bb 27       	eor	r27, r27
    2a18:	86 95       	lsr	r24
    2a1a:	77 95       	ror	r23
    2a1c:	67 95       	ror	r22
    2a1e:	b7 95       	ror	r27
    2a20:	08 f4       	brcc	.+2      	; 0x2a24 <ldexp+0x50>
    2a22:	b1 60       	ori	r27, 0x01	; 1
    2a24:	93 95       	inc	r25
    2a26:	c1 f7       	brne	.-16     	; 0x2a18 <ldexp+0x44>
    2a28:	bb 0f       	add	r27, r27
    2a2a:	58 f7       	brcc	.-42     	; 0x2a02 <ldexp+0x2e>
    2a2c:	11 f4       	brne	.+4      	; 0x2a32 <ldexp+0x5e>
    2a2e:	60 ff       	sbrs	r22, 0
    2a30:	e8 cf       	rjmp	.-48     	; 0x2a02 <ldexp+0x2e>
    2a32:	6f 5f       	subi	r22, 0xFF	; 255
    2a34:	7f 4f       	sbci	r23, 0xFF	; 255
    2a36:	8f 4f       	sbci	r24, 0xFF	; 255
    2a38:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3a:	e3 cf       	rjmp	.-58     	; 0x2a02 <ldexp+0x2e>
    2a3c:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__fp_szero>
    2a40:	16 f0       	brts	.+4      	; 0x2a46 <ldexp+0x72>
    2a42:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__fp_mpack>
    2a46:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__fp_nan>
    2a4a:	68 94       	set
    2a4c:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__fp_inf>

00002a50 <log>:
    2a50:	0e 94 9a 13 	call	0x2734	; 0x2734 <__fp_splitA>
    2a54:	a8 f3       	brcs	.-22     	; 0x2a40 <ldexp+0x6c>
    2a56:	99 23       	and	r25, r25
    2a58:	c1 f3       	breq	.-16     	; 0x2a4a <ldexp+0x76>
    2a5a:	ae f3       	brts	.-22     	; 0x2a46 <ldexp+0x72>
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	1f 93       	push	r17
    2a62:	0f 93       	push	r16
    2a64:	ff 92       	push	r15
    2a66:	c9 2f       	mov	r28, r25
    2a68:	dd 27       	eor	r29, r29
    2a6a:	88 23       	and	r24, r24
    2a6c:	2a f0       	brmi	.+10     	; 0x2a78 <log+0x28>
    2a6e:	21 97       	sbiw	r28, 0x01	; 1
    2a70:	66 0f       	add	r22, r22
    2a72:	77 1f       	adc	r23, r23
    2a74:	88 1f       	adc	r24, r24
    2a76:	da f7       	brpl	.-10     	; 0x2a6e <log+0x1e>
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	40 e8       	ldi	r20, 0x80	; 128
    2a7e:	5f eb       	ldi	r21, 0xBF	; 191
    2a80:	9f e3       	ldi	r25, 0x3F	; 63
    2a82:	88 39       	cpi	r24, 0x98	; 152
    2a84:	20 f0       	brcs	.+8      	; 0x2a8e <log+0x3e>
    2a86:	80 3e       	cpi	r24, 0xE0	; 224
    2a88:	38 f0       	brcs	.+14     	; 0x2a98 <log+0x48>
    2a8a:	21 96       	adiw	r28, 0x01	; 1
    2a8c:	8f 77       	andi	r24, 0x7F	; 127
    2a8e:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__addsf3>
    2a92:	ec e9       	ldi	r30, 0x9C	; 156
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	04 c0       	rjmp	.+8      	; 0x2aa0 <log+0x50>
    2a98:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__addsf3>
    2a9c:	e9 ec       	ldi	r30, 0xC9	; 201
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	0e 94 b7 14 	call	0x296e	; 0x296e <__fp_powser>
    2aa4:	8b 01       	movw	r16, r22
    2aa6:	be 01       	movw	r22, r28
    2aa8:	ec 01       	movw	r28, r24
    2aaa:	fb 2e       	mov	r15, r27
    2aac:	6f 57       	subi	r22, 0x7F	; 127
    2aae:	71 09       	sbc	r23, r1
    2ab0:	75 95       	asr	r23
    2ab2:	77 1f       	adc	r23, r23
    2ab4:	88 0b       	sbc	r24, r24
    2ab6:	99 0b       	sbc	r25, r25
    2ab8:	0e 94 0b 13 	call	0x2616	; 0x2616 <__floatsisf>
    2abc:	28 e1       	ldi	r18, 0x18	; 24
    2abe:	32 e7       	ldi	r19, 0x72	; 114
    2ac0:	41 e3       	ldi	r20, 0x31	; 49
    2ac2:	5f e3       	ldi	r21, 0x3F	; 63
    2ac4:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <__mulsf3x>
    2ac8:	af 2d       	mov	r26, r15
    2aca:	98 01       	movw	r18, r16
    2acc:	ae 01       	movw	r20, r28
    2ace:	ff 90       	pop	r15
    2ad0:	0f 91       	pop	r16
    2ad2:	1f 91       	pop	r17
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	0e 94 0e 12 	call	0x241c	; 0x241c <__addsf3x>
    2adc:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__fp_round>

00002ae0 <modf>:
    2ae0:	fa 01       	movw	r30, r20
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	aa 0f       	add	r26, r26
    2ae6:	bb 1f       	adc	r27, r27
    2ae8:	9b 01       	movw	r18, r22
    2aea:	ac 01       	movw	r20, r24
    2aec:	bf 57       	subi	r27, 0x7F	; 127
    2aee:	28 f4       	brcc	.+10     	; 0x2afa <modf+0x1a>
    2af0:	22 27       	eor	r18, r18
    2af2:	33 27       	eor	r19, r19
    2af4:	44 27       	eor	r20, r20
    2af6:	50 78       	andi	r21, 0x80	; 128
    2af8:	20 c0       	rjmp	.+64     	; 0x2b3a <modf+0x5a>
    2afa:	b7 51       	subi	r27, 0x17	; 23
    2afc:	90 f4       	brcc	.+36     	; 0x2b22 <modf+0x42>
    2afe:	ab 2f       	mov	r26, r27
    2b00:	00 24       	eor	r0, r0
    2b02:	46 95       	lsr	r20
    2b04:	37 95       	ror	r19
    2b06:	27 95       	ror	r18
    2b08:	01 1c       	adc	r0, r1
    2b0a:	a3 95       	inc	r26
    2b0c:	d2 f3       	brmi	.-12     	; 0x2b02 <modf+0x22>
    2b0e:	00 20       	and	r0, r0
    2b10:	71 f0       	breq	.+28     	; 0x2b2e <modf+0x4e>
    2b12:	22 0f       	add	r18, r18
    2b14:	33 1f       	adc	r19, r19
    2b16:	44 1f       	adc	r20, r20
    2b18:	b3 95       	inc	r27
    2b1a:	da f3       	brmi	.-10     	; 0x2b12 <modf+0x32>
    2b1c:	0e d0       	rcall	.+28     	; 0x2b3a <modf+0x5a>
    2b1e:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__subsf3>
    2b22:	61 30       	cpi	r22, 0x01	; 1
    2b24:	71 05       	cpc	r23, r1
    2b26:	a0 e8       	ldi	r26, 0x80	; 128
    2b28:	8a 07       	cpc	r24, r26
    2b2a:	b9 46       	sbci	r27, 0x69	; 105
    2b2c:	30 f4       	brcc	.+12     	; 0x2b3a <modf+0x5a>
    2b2e:	9b 01       	movw	r18, r22
    2b30:	ac 01       	movw	r20, r24
    2b32:	66 27       	eor	r22, r22
    2b34:	77 27       	eor	r23, r23
    2b36:	88 27       	eor	r24, r24
    2b38:	90 78       	andi	r25, 0x80	; 128
    2b3a:	30 96       	adiw	r30, 0x00	; 0
    2b3c:	21 f0       	breq	.+8      	; 0x2b46 <modf+0x66>
    2b3e:	20 83       	st	Z, r18
    2b40:	31 83       	std	Z+1, r19	; 0x01
    2b42:	42 83       	std	Z+2, r20	; 0x02
    2b44:	53 83       	std	Z+3, r21	; 0x03
    2b46:	08 95       	ret

00002b48 <__fp_mpack>:
    2b48:	9f 3f       	cpi	r25, 0xFF	; 255
    2b4a:	31 f0       	breq	.+12     	; 0x2b58 <__fp_mpack_finite+0xc>

00002b4c <__fp_mpack_finite>:
    2b4c:	91 50       	subi	r25, 0x01	; 1
    2b4e:	20 f4       	brcc	.+8      	; 0x2b58 <__fp_mpack_finite+0xc>
    2b50:	87 95       	ror	r24
    2b52:	77 95       	ror	r23
    2b54:	67 95       	ror	r22
    2b56:	b7 95       	ror	r27
    2b58:	88 0f       	add	r24, r24
    2b5a:	91 1d       	adc	r25, r1
    2b5c:	96 95       	lsr	r25
    2b5e:	87 95       	ror	r24
    2b60:	97 f9       	bld	r25, 7
    2b62:	08 95       	ret

00002b64 <strcat>:
    2b64:	fb 01       	movw	r30, r22
    2b66:	dc 01       	movw	r26, r24
    2b68:	0d 90       	ld	r0, X+
    2b6a:	00 20       	and	r0, r0
    2b6c:	e9 f7       	brne	.-6      	; 0x2b68 <strcat+0x4>
    2b6e:	11 97       	sbiw	r26, 0x01	; 1
    2b70:	01 90       	ld	r0, Z+
    2b72:	0d 92       	st	X+, r0
    2b74:	00 20       	and	r0, r0
    2b76:	e1 f7       	brne	.-8      	; 0x2b70 <strcat+0xc>
    2b78:	08 95       	ret

00002b7a <strcmp>:
    2b7a:	fb 01       	movw	r30, r22
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	8d 91       	ld	r24, X+
    2b80:	01 90       	ld	r0, Z+
    2b82:	80 19       	sub	r24, r0
    2b84:	01 10       	cpse	r0, r1
    2b86:	d9 f3       	breq	.-10     	; 0x2b7e <strcmp+0x4>
    2b88:	99 0b       	sbc	r25, r25
    2b8a:	08 95       	ret

00002b8c <itoa>:
    2b8c:	45 32       	cpi	r20, 0x25	; 37
    2b8e:	51 05       	cpc	r21, r1
    2b90:	20 f4       	brcc	.+8      	; 0x2b9a <itoa+0xe>
    2b92:	42 30       	cpi	r20, 0x02	; 2
    2b94:	10 f0       	brcs	.+4      	; 0x2b9a <itoa+0xe>
    2b96:	0c 94 d1 15 	jmp	0x2ba2	; 0x2ba2 <__itoa_ncheck>
    2b9a:	fb 01       	movw	r30, r22
    2b9c:	10 82       	st	Z, r1
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	08 95       	ret

00002ba2 <__itoa_ncheck>:
    2ba2:	bb 27       	eor	r27, r27
    2ba4:	4a 30       	cpi	r20, 0x0A	; 10
    2ba6:	31 f4       	brne	.+12     	; 0x2bb4 <__itoa_ncheck+0x12>
    2ba8:	99 23       	and	r25, r25
    2baa:	22 f4       	brpl	.+8      	; 0x2bb4 <__itoa_ncheck+0x12>
    2bac:	bd e2       	ldi	r27, 0x2D	; 45
    2bae:	90 95       	com	r25
    2bb0:	81 95       	neg	r24
    2bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb4:	0c 94 dd 15 	jmp	0x2bba	; 0x2bba <__utoa_common>

00002bb8 <__utoa_ncheck>:
    2bb8:	bb 27       	eor	r27, r27

00002bba <__utoa_common>:
    2bba:	fb 01       	movw	r30, r22
    2bbc:	55 27       	eor	r21, r21
    2bbe:	aa 27       	eor	r26, r26
    2bc0:	88 0f       	add	r24, r24
    2bc2:	99 1f       	adc	r25, r25
    2bc4:	aa 1f       	adc	r26, r26
    2bc6:	a4 17       	cp	r26, r20
    2bc8:	10 f0       	brcs	.+4      	; 0x2bce <__utoa_common+0x14>
    2bca:	a4 1b       	sub	r26, r20
    2bcc:	83 95       	inc	r24
    2bce:	50 51       	subi	r21, 0x10	; 16
    2bd0:	b9 f7       	brne	.-18     	; 0x2bc0 <__utoa_common+0x6>
    2bd2:	a0 5d       	subi	r26, 0xD0	; 208
    2bd4:	aa 33       	cpi	r26, 0x3A	; 58
    2bd6:	08 f0       	brcs	.+2      	; 0x2bda <__utoa_common+0x20>
    2bd8:	a9 5d       	subi	r26, 0xD9	; 217
    2bda:	a1 93       	st	Z+, r26
    2bdc:	00 97       	sbiw	r24, 0x00	; 0
    2bde:	79 f7       	brne	.-34     	; 0x2bbe <__utoa_common+0x4>
    2be0:	b1 11       	cpse	r27, r1
    2be2:	b1 93       	st	Z+, r27
    2be4:	11 92       	st	Z+, r1
    2be6:	cb 01       	movw	r24, r22
    2be8:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <strrev>

00002bec <strrev>:
    2bec:	dc 01       	movw	r26, r24
    2bee:	fc 01       	movw	r30, r24
    2bf0:	67 2f       	mov	r22, r23
    2bf2:	71 91       	ld	r23, Z+
    2bf4:	77 23       	and	r23, r23
    2bf6:	e1 f7       	brne	.-8      	; 0x2bf0 <strrev+0x4>
    2bf8:	32 97       	sbiw	r30, 0x02	; 2
    2bfa:	04 c0       	rjmp	.+8      	; 0x2c04 <strrev+0x18>
    2bfc:	7c 91       	ld	r23, X
    2bfe:	6d 93       	st	X+, r22
    2c00:	70 83       	st	Z, r23
    2c02:	62 91       	ld	r22, -Z
    2c04:	ae 17       	cp	r26, r30
    2c06:	bf 07       	cpc	r27, r31
    2c08:	c8 f3       	brcs	.-14     	; 0x2bfc <strrev+0x10>
    2c0a:	08 95       	ret

00002c0c <_exit>:
    2c0c:	f8 94       	cli

00002c0e <__stop_program>:
    2c0e:	ff cf       	rjmp	.-2      	; 0x2c0e <__stop_program>
