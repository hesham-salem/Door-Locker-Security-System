
mc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000fb4  00001048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000064  00800072  00800072  0000105a  2**0
                  ALLOC
  3 .stab         00001854  00000000  00000000  0000105c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f8a  00000000  00000000  000028b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000383a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000384c  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00003888  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  00003db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  0000429d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  000042b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3d       	cpi	r26, 0xD6	; 214
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "lcd.h"
#include<string.h>
#define M2_READY 0x10
uint8 str[100]="";
int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2e 97       	sbiw	r28, 0x0e	; 14
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61

	UART_init(); // initialize UART driver
  a6:	0e 94 b6 05 	call	0xb6c	; 0xb6c <UART_init>
	LCD_init(); // initialize LCD driver
  aa:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_init>
//	LCD_displayString(Str); // display the string on LCD
	//UART_sendByte('k');
    while(1)
    {

    	UART_sendByte('a');
  ae:	81 e6       	ldi	r24, 0x61	; 97
  b0:	0e 94 d6 05 	call	0xbac	; 0xbac <UART_sendByte>
    //	if(BIT_IS_SET(UCSRA,UDRE))

    	UART_receiveString(&str);
  b4:	82 e7       	ldi	r24, 0x72	; 114
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 30 06 	call	0xc60	; 0xc60 <UART_receiveString>


if(!strcmp(str,"I am Micro1#"))
  bc:	60 e6       	ldi	r22, 0x60	; 96
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	82 e7       	ldi	r24, 0x72	; 114
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <strcmp>
  c8:	89 2b       	or	r24, r25
  ca:	39 f4       	brne	.+14     	; 0xda <main+0x48>
	{UART_sendByte('g');
  cc:	87 e6       	ldi	r24, 0x67	; 103
  ce:	0e 94 d6 05 	call	0xbac	; 0xbac <UART_sendByte>
	UART_sendString("good");
  d2:	8d e6       	ldi	r24, 0x6D	; 109
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 03 06 	call	0xc06	; 0xc06 <UART_sendString>
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	a8 ec       	ldi	r26, 0xC8	; 200
  e0:	b2 e4       	ldi	r27, 0x42	; 66
  e2:	89 83       	std	Y+1, r24	; 0x01
  e4:	9a 83       	std	Y+2, r25	; 0x02
  e6:	ab 83       	std	Y+3, r26	; 0x03
  e8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	4a e7       	ldi	r20, 0x7A	; 122
  f0:	53 e4       	ldi	r21, 0x43	; 67
  f2:	69 81       	ldd	r22, Y+1	; 0x01
  f4:	7a 81       	ldd	r23, Y+2	; 0x02
  f6:	8b 81       	ldd	r24, Y+3	; 0x03
  f8:	9c 81       	ldd	r25, Y+4	; 0x04
  fa:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
  fe:	dc 01       	movw	r26, r24
 100:	cb 01       	movw	r24, r22
 102:	8d 83       	std	Y+5, r24	; 0x05
 104:	9e 83       	std	Y+6, r25	; 0x06
 106:	af 83       	std	Y+7, r26	; 0x07
 108:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	40 e8       	ldi	r20, 0x80	; 128
 110:	5f e3       	ldi	r21, 0x3F	; 63
 112:	6d 81       	ldd	r22, Y+5	; 0x05
 114:	7e 81       	ldd	r23, Y+6	; 0x06
 116:	8f 81       	ldd	r24, Y+7	; 0x07
 118:	98 85       	ldd	r25, Y+8	; 0x08
 11a:	0e 94 74 06 	call	0xce8	; 0xce8 <__cmpsf2>
 11e:	88 23       	and	r24, r24
 120:	2c f4       	brge	.+10     	; 0x12c <main+0x9a>
		__ticks = 1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	9a 87       	std	Y+10, r25	; 0x0a
 128:	89 87       	std	Y+9, r24	; 0x09
 12a:	3f c0       	rjmp	.+126    	; 0x1aa <main+0x118>
	else if (__tmp > 65535)
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	3f ef       	ldi	r19, 0xFF	; 255
 130:	4f e7       	ldi	r20, 0x7F	; 127
 132:	57 e4       	ldi	r21, 0x47	; 71
 134:	6d 81       	ldd	r22, Y+5	; 0x05
 136:	7e 81       	ldd	r23, Y+6	; 0x06
 138:	8f 81       	ldd	r24, Y+7	; 0x07
 13a:	98 85       	ldd	r25, Y+8	; 0x08
 13c:	0e 94 f5 06 	call	0xdea	; 0xdea <__gesf2>
 140:	18 16       	cp	r1, r24
 142:	4c f5       	brge	.+82     	; 0x196 <main+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	40 e2       	ldi	r20, 0x20	; 32
 14a:	51 e4       	ldi	r21, 0x41	; 65
 14c:	69 81       	ldd	r22, Y+1	; 0x01
 14e:	7a 81       	ldd	r23, Y+2	; 0x02
 150:	8b 81       	ldd	r24, Y+3	; 0x03
 152:	9c 81       	ldd	r25, Y+4	; 0x04
 154:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
 158:	dc 01       	movw	r26, r24
 15a:	cb 01       	movw	r24, r22
 15c:	bc 01       	movw	r22, r24
 15e:	cd 01       	movw	r24, r26
 160:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 164:	dc 01       	movw	r26, r24
 166:	cb 01       	movw	r24, r22
 168:	9a 87       	std	Y+10, r25	; 0x0a
 16a:	89 87       	std	Y+9, r24	; 0x09
 16c:	0f c0       	rjmp	.+30     	; 0x18c <main+0xfa>
 16e:	89 e1       	ldi	r24, 0x19	; 25
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	9c 87       	std	Y+12, r25	; 0x0c
 174:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 176:	8b 85       	ldd	r24, Y+11	; 0x0b
 178:	9c 85       	ldd	r25, Y+12	; 0x0c
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0xe8>
 17e:	9c 87       	std	Y+12, r25	; 0x0c
 180:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 182:	89 85       	ldd	r24, Y+9	; 0x09
 184:	9a 85       	ldd	r25, Y+10	; 0x0a
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	9a 87       	std	Y+10, r25	; 0x0a
 18a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18c:	89 85       	ldd	r24, Y+9	; 0x09
 18e:	9a 85       	ldd	r25, Y+10	; 0x0a
 190:	89 2b       	or	r24, r25
 192:	69 f7       	brne	.-38     	; 0x16e <main+0xdc>
 194:	14 c0       	rjmp	.+40     	; 0x1be <main+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 196:	6d 81       	ldd	r22, Y+5	; 0x05
 198:	7e 81       	ldd	r23, Y+6	; 0x06
 19a:	8f 81       	ldd	r24, Y+7	; 0x07
 19c:	98 85       	ldd	r25, Y+8	; 0x08
 19e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 1a2:	dc 01       	movw	r26, r24
 1a4:	cb 01       	movw	r24, r22
 1a6:	9a 87       	std	Y+10, r25	; 0x0a
 1a8:	89 87       	std	Y+9, r24	; 0x09
 1aa:	89 85       	ldd	r24, Y+9	; 0x09
 1ac:	9a 85       	ldd	r25, Y+10	; 0x0a
 1ae:	9e 87       	std	Y+14, r25	; 0x0e
 1b0:	8d 87       	std	Y+13, r24	; 0x0d
 1b2:	8d 85       	ldd	r24, Y+13	; 0x0d
 1b4:	9e 85       	ldd	r25, Y+14	; 0x0e
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <main+0x124>
 1ba:	9e 87       	std	Y+14, r25	; 0x0e
 1bc:	8d 87       	std	Y+13, r24	; 0x0d
	}		    		 // receive the string
    		    		 // display the string on LCD
    		        	_delay_ms(100);
    		        	LCD_displayString(str);
 1be:	82 e7       	ldi	r24, 0x72	; 114
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCD_displayString>

    }
 1c6:	73 cf       	rjmp	.-282    	; 0xae <main+0x1c>

000001c8 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
 1d0:	84 e3       	ldi	r24, 0x34	; 52
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
 1da:	81 e3       	ldi	r24, 0x31	; 49
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	21 e3       	ldi	r18, 0x31	; 49
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	f9 01       	movw	r30, r18
 1e4:	20 81       	ld	r18, Z
 1e6:	20 67       	ori	r18, 0x70	; 112
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 83       	st	Z, r18
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
 1ec:	88 e3       	ldi	r24, 0x38	; 56
 1ee:	0e 94 03 01 	call	0x206	; 0x206 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
 1f2:	8c e0       	ldi	r24, 0x0C	; 12
 1f4:	0e 94 03 01 	call	0x206	; 0x206 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 03 01 	call	0x206	; 0x206 <LCD_sendCommand>
}
 1fe:	00 00       	nop
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
 20e:	e9 97       	sbiw	r28, 0x39	; 57
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	f8 94       	cli
 214:	de bf       	out	0x3e, r29	; 62
 216:	0f be       	out	0x3f, r0	; 63
 218:	cd bf       	out	0x3d, r28	; 61
 21a:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
 21c:	82 e3       	ldi	r24, 0x32	; 50
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	22 e3       	ldi	r18, 0x32	; 50
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	f9 01       	movw	r30, r18
 226:	20 81       	ld	r18, Z
 228:	2f 7e       	andi	r18, 0xEF	; 239
 22a:	fc 01       	movw	r30, r24
 22c:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
 22e:	82 e3       	ldi	r24, 0x32	; 50
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	22 e3       	ldi	r18, 0x32	; 50
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	f9 01       	movw	r30, r18
 238:	20 81       	ld	r18, Z
 23a:	2f 7d       	andi	r18, 0xDF	; 223
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	a0 e8       	ldi	r26, 0x80	; 128
 246:	bf e3       	ldi	r27, 0x3F	; 63
 248:	89 83       	std	Y+1, r24	; 0x01
 24a:	9a 83       	std	Y+2, r25	; 0x02
 24c:	ab 83       	std	Y+3, r26	; 0x03
 24e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	4a e7       	ldi	r20, 0x7A	; 122
 256:	53 e4       	ldi	r21, 0x43	; 67
 258:	69 81       	ldd	r22, Y+1	; 0x01
 25a:	7a 81       	ldd	r23, Y+2	; 0x02
 25c:	8b 81       	ldd	r24, Y+3	; 0x03
 25e:	9c 81       	ldd	r25, Y+4	; 0x04
 260:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
 264:	dc 01       	movw	r26, r24
 266:	cb 01       	movw	r24, r22
 268:	8f a7       	std	Y+47, r24	; 0x2f
 26a:	98 ab       	std	Y+48, r25	; 0x30
 26c:	a9 ab       	std	Y+49, r26	; 0x31
 26e:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	40 e8       	ldi	r20, 0x80	; 128
 276:	5f e3       	ldi	r21, 0x3F	; 63
 278:	6f a5       	ldd	r22, Y+47	; 0x2f
 27a:	78 a9       	ldd	r23, Y+48	; 0x30
 27c:	89 a9       	ldd	r24, Y+49	; 0x31
 27e:	9a a9       	ldd	r25, Y+50	; 0x32
 280:	0e 94 74 06 	call	0xce8	; 0xce8 <__cmpsf2>
 284:	88 23       	and	r24, r24
 286:	2c f4       	brge	.+10     	; 0x292 <LCD_sendCommand+0x8c>
		__ticks = 1;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	9c ab       	std	Y+52, r25	; 0x34
 28e:	8b ab       	std	Y+51, r24	; 0x33
 290:	3f c0       	rjmp	.+126    	; 0x310 <LCD_sendCommand+0x10a>
	else if (__tmp > 65535)
 292:	20 e0       	ldi	r18, 0x00	; 0
 294:	3f ef       	ldi	r19, 0xFF	; 255
 296:	4f e7       	ldi	r20, 0x7F	; 127
 298:	57 e4       	ldi	r21, 0x47	; 71
 29a:	6f a5       	ldd	r22, Y+47	; 0x2f
 29c:	78 a9       	ldd	r23, Y+48	; 0x30
 29e:	89 a9       	ldd	r24, Y+49	; 0x31
 2a0:	9a a9       	ldd	r25, Y+50	; 0x32
 2a2:	0e 94 f5 06 	call	0xdea	; 0xdea <__gesf2>
 2a6:	18 16       	cp	r1, r24
 2a8:	4c f5       	brge	.+82     	; 0x2fc <LCD_sendCommand+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	40 e2       	ldi	r20, 0x20	; 32
 2b0:	51 e4       	ldi	r21, 0x41	; 65
 2b2:	69 81       	ldd	r22, Y+1	; 0x01
 2b4:	7a 81       	ldd	r23, Y+2	; 0x02
 2b6:	8b 81       	ldd	r24, Y+3	; 0x03
 2b8:	9c 81       	ldd	r25, Y+4	; 0x04
 2ba:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
 2be:	dc 01       	movw	r26, r24
 2c0:	cb 01       	movw	r24, r22
 2c2:	bc 01       	movw	r22, r24
 2c4:	cd 01       	movw	r24, r26
 2c6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 2ca:	dc 01       	movw	r26, r24
 2cc:	cb 01       	movw	r24, r22
 2ce:	9c ab       	std	Y+52, r25	; 0x34
 2d0:	8b ab       	std	Y+51, r24	; 0x33
 2d2:	0f c0       	rjmp	.+30     	; 0x2f2 <LCD_sendCommand+0xec>
 2d4:	89 e1       	ldi	r24, 0x19	; 25
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	9e ab       	std	Y+54, r25	; 0x36
 2da:	8d ab       	std	Y+53, r24	; 0x35
 2dc:	8d a9       	ldd	r24, Y+53	; 0x35
 2de:	9e a9       	ldd	r25, Y+54	; 0x36
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <LCD_sendCommand+0xda>
 2e4:	9e ab       	std	Y+54, r25	; 0x36
 2e6:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e8:	8b a9       	ldd	r24, Y+51	; 0x33
 2ea:	9c a9       	ldd	r25, Y+52	; 0x34
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	9c ab       	std	Y+52, r25	; 0x34
 2f0:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f2:	8b a9       	ldd	r24, Y+51	; 0x33
 2f4:	9c a9       	ldd	r25, Y+52	; 0x34
 2f6:	89 2b       	or	r24, r25
 2f8:	69 f7       	brne	.-38     	; 0x2d4 <LCD_sendCommand+0xce>
 2fa:	14 c0       	rjmp	.+40     	; 0x324 <LCD_sendCommand+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2fc:	6f a5       	ldd	r22, Y+47	; 0x2f
 2fe:	78 a9       	ldd	r23, Y+48	; 0x30
 300:	89 a9       	ldd	r24, Y+49	; 0x31
 302:	9a a9       	ldd	r25, Y+50	; 0x32
 304:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 308:	dc 01       	movw	r26, r24
 30a:	cb 01       	movw	r24, r22
 30c:	9c ab       	std	Y+52, r25	; 0x34
 30e:	8b ab       	std	Y+51, r24	; 0x33
 310:	8b a9       	ldd	r24, Y+51	; 0x33
 312:	9c a9       	ldd	r25, Y+52	; 0x34
 314:	98 af       	std	Y+56, r25	; 0x38
 316:	8f ab       	std	Y+55, r24	; 0x37
 318:	8f a9       	ldd	r24, Y+55	; 0x37
 31a:	98 ad       	ldd	r25, Y+56	; 0x38
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <LCD_sendCommand+0x116>
 320:	98 af       	std	Y+56, r25	; 0x38
 322:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 324:	82 e3       	ldi	r24, 0x32	; 50
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	22 e3       	ldi	r18, 0x32	; 50
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	f9 01       	movw	r30, r18
 32e:	20 81       	ld	r18, Z
 330:	20 64       	ori	r18, 0x40	; 64
 332:	fc 01       	movw	r30, r24
 334:	20 83       	st	Z, r18
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	a0 e8       	ldi	r26, 0x80	; 128
 33c:	bf e3       	ldi	r27, 0x3F	; 63
 33e:	8d 83       	std	Y+5, r24	; 0x05
 340:	9e 83       	std	Y+6, r25	; 0x06
 342:	af 83       	std	Y+7, r26	; 0x07
 344:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	4a e7       	ldi	r20, 0x7A	; 122
 34c:	53 e4       	ldi	r21, 0x43	; 67
 34e:	6d 81       	ldd	r22, Y+5	; 0x05
 350:	7e 81       	ldd	r23, Y+6	; 0x06
 352:	8f 81       	ldd	r24, Y+7	; 0x07
 354:	98 85       	ldd	r25, Y+8	; 0x08
 356:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
 35a:	dc 01       	movw	r26, r24
 35c:	cb 01       	movw	r24, r22
 35e:	8d a3       	std	Y+37, r24	; 0x25
 360:	9e a3       	std	Y+38, r25	; 0x26
 362:	af a3       	std	Y+39, r26	; 0x27
 364:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	40 e8       	ldi	r20, 0x80	; 128
 36c:	5f e3       	ldi	r21, 0x3F	; 63
 36e:	6d a1       	ldd	r22, Y+37	; 0x25
 370:	7e a1       	ldd	r23, Y+38	; 0x26
 372:	8f a1       	ldd	r24, Y+39	; 0x27
 374:	98 a5       	ldd	r25, Y+40	; 0x28
 376:	0e 94 74 06 	call	0xce8	; 0xce8 <__cmpsf2>
 37a:	88 23       	and	r24, r24
 37c:	2c f4       	brge	.+10     	; 0x388 <LCD_sendCommand+0x182>
		__ticks = 1;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	9a a7       	std	Y+42, r25	; 0x2a
 384:	89 a7       	std	Y+41, r24	; 0x29
 386:	3f c0       	rjmp	.+126    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	else if (__tmp > 65535)
 388:	20 e0       	ldi	r18, 0x00	; 0
 38a:	3f ef       	ldi	r19, 0xFF	; 255
 38c:	4f e7       	ldi	r20, 0x7F	; 127
 38e:	57 e4       	ldi	r21, 0x47	; 71
 390:	6d a1       	ldd	r22, Y+37	; 0x25
 392:	7e a1       	ldd	r23, Y+38	; 0x26
 394:	8f a1       	ldd	r24, Y+39	; 0x27
 396:	98 a5       	ldd	r25, Y+40	; 0x28
 398:	0e 94 f5 06 	call	0xdea	; 0xdea <__gesf2>
 39c:	18 16       	cp	r1, r24
 39e:	4c f5       	brge	.+82     	; 0x3f2 <LCD_sendCommand+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	40 e2       	ldi	r20, 0x20	; 32
 3a6:	51 e4       	ldi	r21, 0x41	; 65
 3a8:	6d 81       	ldd	r22, Y+5	; 0x05
 3aa:	7e 81       	ldd	r23, Y+6	; 0x06
 3ac:	8f 81       	ldd	r24, Y+7	; 0x07
 3ae:	98 85       	ldd	r25, Y+8	; 0x08
 3b0:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
 3b4:	dc 01       	movw	r26, r24
 3b6:	cb 01       	movw	r24, r22
 3b8:	bc 01       	movw	r22, r24
 3ba:	cd 01       	movw	r24, r26
 3bc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 3c0:	dc 01       	movw	r26, r24
 3c2:	cb 01       	movw	r24, r22
 3c4:	9a a7       	std	Y+42, r25	; 0x2a
 3c6:	89 a7       	std	Y+41, r24	; 0x29
 3c8:	0f c0       	rjmp	.+30     	; 0x3e8 <LCD_sendCommand+0x1e2>
 3ca:	89 e1       	ldi	r24, 0x19	; 25
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	9c a7       	std	Y+44, r25	; 0x2c
 3d0:	8b a7       	std	Y+43, r24	; 0x2b
 3d2:	8b a5       	ldd	r24, Y+43	; 0x2b
 3d4:	9c a5       	ldd	r25, Y+44	; 0x2c
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <LCD_sendCommand+0x1d0>
 3da:	9c a7       	std	Y+44, r25	; 0x2c
 3dc:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3de:	89 a5       	ldd	r24, Y+41	; 0x29
 3e0:	9a a5       	ldd	r25, Y+42	; 0x2a
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	9a a7       	std	Y+42, r25	; 0x2a
 3e6:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3e8:	89 a5       	ldd	r24, Y+41	; 0x29
 3ea:	9a a5       	ldd	r25, Y+42	; 0x2a
 3ec:	89 2b       	or	r24, r25
 3ee:	69 f7       	brne	.-38     	; 0x3ca <LCD_sendCommand+0x1c4>
 3f0:	14 c0       	rjmp	.+40     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3f2:	6d a1       	ldd	r22, Y+37	; 0x25
 3f4:	7e a1       	ldd	r23, Y+38	; 0x26
 3f6:	8f a1       	ldd	r24, Y+39	; 0x27
 3f8:	98 a5       	ldd	r25, Y+40	; 0x28
 3fa:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 3fe:	dc 01       	movw	r26, r24
 400:	cb 01       	movw	r24, r22
 402:	9a a7       	std	Y+42, r25	; 0x2a
 404:	89 a7       	std	Y+41, r24	; 0x29
 406:	89 a5       	ldd	r24, Y+41	; 0x29
 408:	9a a5       	ldd	r25, Y+42	; 0x2a
 40a:	9e a7       	std	Y+46, r25	; 0x2e
 40c:	8d a7       	std	Y+45, r24	; 0x2d
 40e:	8d a5       	ldd	r24, Y+45	; 0x2d
 410:	9e a5       	ldd	r25, Y+46	; 0x2e
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 416:	9e a7       	std	Y+46, r25	; 0x2e
 418:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
 41a:	85 e3       	ldi	r24, 0x35	; 53
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	29 ad       	ldd	r18, Y+57	; 0x39
 420:	fc 01       	movw	r30, r24
 422:	20 83       	st	Z, r18
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	a0 e8       	ldi	r26, 0x80	; 128
 42a:	bf e3       	ldi	r27, 0x3F	; 63
 42c:	89 87       	std	Y+9, r24	; 0x09
 42e:	9a 87       	std	Y+10, r25	; 0x0a
 430:	ab 87       	std	Y+11, r26	; 0x0b
 432:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	4a e7       	ldi	r20, 0x7A	; 122
 43a:	53 e4       	ldi	r21, 0x43	; 67
 43c:	69 85       	ldd	r22, Y+9	; 0x09
 43e:	7a 85       	ldd	r23, Y+10	; 0x0a
 440:	8b 85       	ldd	r24, Y+11	; 0x0b
 442:	9c 85       	ldd	r25, Y+12	; 0x0c
 444:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
 448:	dc 01       	movw	r26, r24
 44a:	cb 01       	movw	r24, r22
 44c:	8b 8f       	std	Y+27, r24	; 0x1b
 44e:	9c 8f       	std	Y+28, r25	; 0x1c
 450:	ad 8f       	std	Y+29, r26	; 0x1d
 452:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
 454:	20 e0       	ldi	r18, 0x00	; 0
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	40 e8       	ldi	r20, 0x80	; 128
 45a:	5f e3       	ldi	r21, 0x3F	; 63
 45c:	6b 8d       	ldd	r22, Y+27	; 0x1b
 45e:	7c 8d       	ldd	r23, Y+28	; 0x1c
 460:	8d 8d       	ldd	r24, Y+29	; 0x1d
 462:	9e 8d       	ldd	r25, Y+30	; 0x1e
 464:	0e 94 74 06 	call	0xce8	; 0xce8 <__cmpsf2>
 468:	88 23       	and	r24, r24
 46a:	2c f4       	brge	.+10     	; 0x476 <__stack+0x17>
		__ticks = 1;
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	98 a3       	std	Y+32, r25	; 0x20
 472:	8f 8f       	std	Y+31, r24	; 0x1f
 474:	3f c0       	rjmp	.+126    	; 0x4f4 <__stack+0x95>
	else if (__tmp > 65535)
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	3f ef       	ldi	r19, 0xFF	; 255
 47a:	4f e7       	ldi	r20, 0x7F	; 127
 47c:	57 e4       	ldi	r21, 0x47	; 71
 47e:	6b 8d       	ldd	r22, Y+27	; 0x1b
 480:	7c 8d       	ldd	r23, Y+28	; 0x1c
 482:	8d 8d       	ldd	r24, Y+29	; 0x1d
 484:	9e 8d       	ldd	r25, Y+30	; 0x1e
 486:	0e 94 f5 06 	call	0xdea	; 0xdea <__gesf2>
 48a:	18 16       	cp	r1, r24
 48c:	4c f5       	brge	.+82     	; 0x4e0 <__stack+0x81>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 48e:	20 e0       	ldi	r18, 0x00	; 0
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	40 e2       	ldi	r20, 0x20	; 32
 494:	51 e4       	ldi	r21, 0x41	; 65
 496:	69 85       	ldd	r22, Y+9	; 0x09
 498:	7a 85       	ldd	r23, Y+10	; 0x0a
 49a:	8b 85       	ldd	r24, Y+11	; 0x0b
 49c:	9c 85       	ldd	r25, Y+12	; 0x0c
 49e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
 4a2:	dc 01       	movw	r26, r24
 4a4:	cb 01       	movw	r24, r22
 4a6:	bc 01       	movw	r22, r24
 4a8:	cd 01       	movw	r24, r26
 4aa:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 4ae:	dc 01       	movw	r26, r24
 4b0:	cb 01       	movw	r24, r22
 4b2:	98 a3       	std	Y+32, r25	; 0x20
 4b4:	8f 8f       	std	Y+31, r24	; 0x1f
 4b6:	0f c0       	rjmp	.+30     	; 0x4d6 <__stack+0x77>
 4b8:	89 e1       	ldi	r24, 0x19	; 25
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	9a a3       	std	Y+34, r25	; 0x22
 4be:	89 a3       	std	Y+33, r24	; 0x21
 4c0:	89 a1       	ldd	r24, Y+33	; 0x21
 4c2:	9a a1       	ldd	r25, Y+34	; 0x22
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <__stack+0x65>
 4c8:	9a a3       	std	Y+34, r25	; 0x22
 4ca:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
 4ce:	98 a1       	ldd	r25, Y+32	; 0x20
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	98 a3       	std	Y+32, r25	; 0x20
 4d4:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
 4d8:	98 a1       	ldd	r25, Y+32	; 0x20
 4da:	89 2b       	or	r24, r25
 4dc:	69 f7       	brne	.-38     	; 0x4b8 <__stack+0x59>
 4de:	14 c0       	rjmp	.+40     	; 0x508 <__stack+0xa9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4e0:	6b 8d       	ldd	r22, Y+27	; 0x1b
 4e2:	7c 8d       	ldd	r23, Y+28	; 0x1c
 4e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
 4e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
 4e8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 4ec:	dc 01       	movw	r26, r24
 4ee:	cb 01       	movw	r24, r22
 4f0:	98 a3       	std	Y+32, r25	; 0x20
 4f2:	8f 8f       	std	Y+31, r24	; 0x1f
 4f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
 4f6:	98 a1       	ldd	r25, Y+32	; 0x20
 4f8:	9c a3       	std	Y+36, r25	; 0x24
 4fa:	8b a3       	std	Y+35, r24	; 0x23
 4fc:	8b a1       	ldd	r24, Y+35	; 0x23
 4fe:	9c a1       	ldd	r25, Y+36	; 0x24
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	f1 f7       	brne	.-4      	; 0x500 <__stack+0xa1>
 504:	9c a3       	std	Y+36, r25	; 0x24
 506:	8b a3       	std	Y+35, r24	; 0x23
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 508:	82 e3       	ldi	r24, 0x32	; 50
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	22 e3       	ldi	r18, 0x32	; 50
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	f9 01       	movw	r30, r18
 512:	20 81       	ld	r18, Z
 514:	2f 7b       	andi	r18, 0xBF	; 191
 516:	fc 01       	movw	r30, r24
 518:	20 83       	st	Z, r18
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	a0 e8       	ldi	r26, 0x80	; 128
 520:	bf e3       	ldi	r27, 0x3F	; 63
 522:	8d 87       	std	Y+13, r24	; 0x0d
 524:	9e 87       	std	Y+14, r25	; 0x0e
 526:	af 87       	std	Y+15, r26	; 0x0f
 528:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 52a:	20 e0       	ldi	r18, 0x00	; 0
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	4a e7       	ldi	r20, 0x7A	; 122
 530:	53 e4       	ldi	r21, 0x43	; 67
 532:	6d 85       	ldd	r22, Y+13	; 0x0d
 534:	7e 85       	ldd	r23, Y+14	; 0x0e
 536:	8f 85       	ldd	r24, Y+15	; 0x0f
 538:	98 89       	ldd	r25, Y+16	; 0x10
 53a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
 53e:	dc 01       	movw	r26, r24
 540:	cb 01       	movw	r24, r22
 542:	89 8b       	std	Y+17, r24	; 0x11
 544:	9a 8b       	std	Y+18, r25	; 0x12
 546:	ab 8b       	std	Y+19, r26	; 0x13
 548:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
 54a:	20 e0       	ldi	r18, 0x00	; 0
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	40 e8       	ldi	r20, 0x80	; 128
 550:	5f e3       	ldi	r21, 0x3F	; 63
 552:	69 89       	ldd	r22, Y+17	; 0x11
 554:	7a 89       	ldd	r23, Y+18	; 0x12
 556:	8b 89       	ldd	r24, Y+19	; 0x13
 558:	9c 89       	ldd	r25, Y+20	; 0x14
 55a:	0e 94 74 06 	call	0xce8	; 0xce8 <__cmpsf2>
 55e:	88 23       	and	r24, r24
 560:	2c f4       	brge	.+10     	; 0x56c <__stack+0x10d>
		__ticks = 1;
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	9e 8b       	std	Y+22, r25	; 0x16
 568:	8d 8b       	std	Y+21, r24	; 0x15
 56a:	3f c0       	rjmp	.+126    	; 0x5ea <__stack+0x18b>
	else if (__tmp > 65535)
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	3f ef       	ldi	r19, 0xFF	; 255
 570:	4f e7       	ldi	r20, 0x7F	; 127
 572:	57 e4       	ldi	r21, 0x47	; 71
 574:	69 89       	ldd	r22, Y+17	; 0x11
 576:	7a 89       	ldd	r23, Y+18	; 0x12
 578:	8b 89       	ldd	r24, Y+19	; 0x13
 57a:	9c 89       	ldd	r25, Y+20	; 0x14
 57c:	0e 94 f5 06 	call	0xdea	; 0xdea <__gesf2>
 580:	18 16       	cp	r1, r24
 582:	4c f5       	brge	.+82     	; 0x5d6 <__stack+0x177>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 584:	20 e0       	ldi	r18, 0x00	; 0
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	40 e2       	ldi	r20, 0x20	; 32
 58a:	51 e4       	ldi	r21, 0x41	; 65
 58c:	6d 85       	ldd	r22, Y+13	; 0x0d
 58e:	7e 85       	ldd	r23, Y+14	; 0x0e
 590:	8f 85       	ldd	r24, Y+15	; 0x0f
 592:	98 89       	ldd	r25, Y+16	; 0x10
 594:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
 598:	dc 01       	movw	r26, r24
 59a:	cb 01       	movw	r24, r22
 59c:	bc 01       	movw	r22, r24
 59e:	cd 01       	movw	r24, r26
 5a0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 5a4:	dc 01       	movw	r26, r24
 5a6:	cb 01       	movw	r24, r22
 5a8:	9e 8b       	std	Y+22, r25	; 0x16
 5aa:	8d 8b       	std	Y+21, r24	; 0x15
 5ac:	0f c0       	rjmp	.+30     	; 0x5cc <__stack+0x16d>
 5ae:	89 e1       	ldi	r24, 0x19	; 25
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	98 8f       	std	Y+24, r25	; 0x18
 5b4:	8f 8b       	std	Y+23, r24	; 0x17
 5b6:	8f 89       	ldd	r24, Y+23	; 0x17
 5b8:	98 8d       	ldd	r25, Y+24	; 0x18
 5ba:	01 97       	sbiw	r24, 0x01	; 1
 5bc:	f1 f7       	brne	.-4      	; 0x5ba <__stack+0x15b>
 5be:	98 8f       	std	Y+24, r25	; 0x18
 5c0:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5c2:	8d 89       	ldd	r24, Y+21	; 0x15
 5c4:	9e 89       	ldd	r25, Y+22	; 0x16
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	9e 8b       	std	Y+22, r25	; 0x16
 5ca:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5cc:	8d 89       	ldd	r24, Y+21	; 0x15
 5ce:	9e 89       	ldd	r25, Y+22	; 0x16
 5d0:	89 2b       	or	r24, r25
 5d2:	69 f7       	brne	.-38     	; 0x5ae <__stack+0x14f>
	_delay_ms(1); /* delay for processing Th = 13ns */
}
 5d4:	14 c0       	rjmp	.+40     	; 0x5fe <__stack+0x19f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5d6:	69 89       	ldd	r22, Y+17	; 0x11
 5d8:	7a 89       	ldd	r23, Y+18	; 0x12
 5da:	8b 89       	ldd	r24, Y+19	; 0x13
 5dc:	9c 89       	ldd	r25, Y+20	; 0x14
 5de:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 5e2:	dc 01       	movw	r26, r24
 5e4:	cb 01       	movw	r24, r22
 5e6:	9e 8b       	std	Y+22, r25	; 0x16
 5e8:	8d 8b       	std	Y+21, r24	; 0x15
 5ea:	8d 89       	ldd	r24, Y+21	; 0x15
 5ec:	9e 89       	ldd	r25, Y+22	; 0x16
 5ee:	9a 8f       	std	Y+26, r25	; 0x1a
 5f0:	89 8f       	std	Y+25, r24	; 0x19
 5f2:	89 8d       	ldd	r24, Y+25	; 0x19
 5f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
 5f6:	01 97       	sbiw	r24, 0x01	; 1
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <__stack+0x197>
 5fa:	9a 8f       	std	Y+26, r25	; 0x1a
 5fc:	89 8f       	std	Y+25, r24	; 0x19
 5fe:	00 00       	nop
 600:	e9 96       	adiw	r28, 0x39	; 57
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	f8 94       	cli
 606:	de bf       	out	0x3e, r29	; 62
 608:	0f be       	out	0x3f, r0	; 63
 60a:	cd bf       	out	0x3d, r28	; 61
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	08 95       	ret

00000612 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	cd b7       	in	r28, 0x3d	; 61
 618:	de b7       	in	r29, 0x3e	; 62
 61a:	e9 97       	sbiw	r28, 0x39	; 57
 61c:	0f b6       	in	r0, 0x3f	; 63
 61e:	f8 94       	cli
 620:	de bf       	out	0x3e, r29	; 62
 622:	0f be       	out	0x3f, r0	; 63
 624:	cd bf       	out	0x3d, r28	; 61
 626:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
 628:	82 e3       	ldi	r24, 0x32	; 50
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	22 e3       	ldi	r18, 0x32	; 50
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	f9 01       	movw	r30, r18
 632:	20 81       	ld	r18, Z
 634:	20 61       	ori	r18, 0x10	; 16
 636:	fc 01       	movw	r30, r24
 638:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
 63a:	82 e3       	ldi	r24, 0x32	; 50
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	22 e3       	ldi	r18, 0x32	; 50
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	f9 01       	movw	r30, r18
 644:	20 81       	ld	r18, Z
 646:	2f 7d       	andi	r18, 0xDF	; 223
 648:	fc 01       	movw	r30, r24
 64a:	20 83       	st	Z, r18
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	a0 e8       	ldi	r26, 0x80	; 128
 652:	bf e3       	ldi	r27, 0x3F	; 63
 654:	89 83       	std	Y+1, r24	; 0x01
 656:	9a 83       	std	Y+2, r25	; 0x02
 658:	ab 83       	std	Y+3, r26	; 0x03
 65a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 65c:	20 e0       	ldi	r18, 0x00	; 0
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	4a e7       	ldi	r20, 0x7A	; 122
 662:	53 e4       	ldi	r21, 0x43	; 67
 664:	69 81       	ldd	r22, Y+1	; 0x01
 666:	7a 81       	ldd	r23, Y+2	; 0x02
 668:	8b 81       	ldd	r24, Y+3	; 0x03
 66a:	9c 81       	ldd	r25, Y+4	; 0x04
 66c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
 670:	dc 01       	movw	r26, r24
 672:	cb 01       	movw	r24, r22
 674:	8f a7       	std	Y+47, r24	; 0x2f
 676:	98 ab       	std	Y+48, r25	; 0x30
 678:	a9 ab       	std	Y+49, r26	; 0x31
 67a:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
 67c:	20 e0       	ldi	r18, 0x00	; 0
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	40 e8       	ldi	r20, 0x80	; 128
 682:	5f e3       	ldi	r21, 0x3F	; 63
 684:	6f a5       	ldd	r22, Y+47	; 0x2f
 686:	78 a9       	ldd	r23, Y+48	; 0x30
 688:	89 a9       	ldd	r24, Y+49	; 0x31
 68a:	9a a9       	ldd	r25, Y+50	; 0x32
 68c:	0e 94 74 06 	call	0xce8	; 0xce8 <__cmpsf2>
 690:	88 23       	and	r24, r24
 692:	2c f4       	brge	.+10     	; 0x69e <LCD_displayCharacter+0x8c>
		__ticks = 1;
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	9c ab       	std	Y+52, r25	; 0x34
 69a:	8b ab       	std	Y+51, r24	; 0x33
 69c:	3f c0       	rjmp	.+126    	; 0x71c <LCD_displayCharacter+0x10a>
	else if (__tmp > 65535)
 69e:	20 e0       	ldi	r18, 0x00	; 0
 6a0:	3f ef       	ldi	r19, 0xFF	; 255
 6a2:	4f e7       	ldi	r20, 0x7F	; 127
 6a4:	57 e4       	ldi	r21, 0x47	; 71
 6a6:	6f a5       	ldd	r22, Y+47	; 0x2f
 6a8:	78 a9       	ldd	r23, Y+48	; 0x30
 6aa:	89 a9       	ldd	r24, Y+49	; 0x31
 6ac:	9a a9       	ldd	r25, Y+50	; 0x32
 6ae:	0e 94 f5 06 	call	0xdea	; 0xdea <__gesf2>
 6b2:	18 16       	cp	r1, r24
 6b4:	4c f5       	brge	.+82     	; 0x708 <LCD_displayCharacter+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6b6:	20 e0       	ldi	r18, 0x00	; 0
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	40 e2       	ldi	r20, 0x20	; 32
 6bc:	51 e4       	ldi	r21, 0x41	; 65
 6be:	69 81       	ldd	r22, Y+1	; 0x01
 6c0:	7a 81       	ldd	r23, Y+2	; 0x02
 6c2:	8b 81       	ldd	r24, Y+3	; 0x03
 6c4:	9c 81       	ldd	r25, Y+4	; 0x04
 6c6:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
 6ca:	dc 01       	movw	r26, r24
 6cc:	cb 01       	movw	r24, r22
 6ce:	bc 01       	movw	r22, r24
 6d0:	cd 01       	movw	r24, r26
 6d2:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 6d6:	dc 01       	movw	r26, r24
 6d8:	cb 01       	movw	r24, r22
 6da:	9c ab       	std	Y+52, r25	; 0x34
 6dc:	8b ab       	std	Y+51, r24	; 0x33
 6de:	0f c0       	rjmp	.+30     	; 0x6fe <LCD_displayCharacter+0xec>
 6e0:	89 e1       	ldi	r24, 0x19	; 25
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	9e ab       	std	Y+54, r25	; 0x36
 6e6:	8d ab       	std	Y+53, r24	; 0x35
 6e8:	8d a9       	ldd	r24, Y+53	; 0x35
 6ea:	9e a9       	ldd	r25, Y+54	; 0x36
 6ec:	01 97       	sbiw	r24, 0x01	; 1
 6ee:	f1 f7       	brne	.-4      	; 0x6ec <LCD_displayCharacter+0xda>
 6f0:	9e ab       	std	Y+54, r25	; 0x36
 6f2:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6f4:	8b a9       	ldd	r24, Y+51	; 0x33
 6f6:	9c a9       	ldd	r25, Y+52	; 0x34
 6f8:	01 97       	sbiw	r24, 0x01	; 1
 6fa:	9c ab       	std	Y+52, r25	; 0x34
 6fc:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6fe:	8b a9       	ldd	r24, Y+51	; 0x33
 700:	9c a9       	ldd	r25, Y+52	; 0x34
 702:	89 2b       	or	r24, r25
 704:	69 f7       	brne	.-38     	; 0x6e0 <LCD_displayCharacter+0xce>
 706:	14 c0       	rjmp	.+40     	; 0x730 <LCD_displayCharacter+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 708:	6f a5       	ldd	r22, Y+47	; 0x2f
 70a:	78 a9       	ldd	r23, Y+48	; 0x30
 70c:	89 a9       	ldd	r24, Y+49	; 0x31
 70e:	9a a9       	ldd	r25, Y+50	; 0x32
 710:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 714:	dc 01       	movw	r26, r24
 716:	cb 01       	movw	r24, r22
 718:	9c ab       	std	Y+52, r25	; 0x34
 71a:	8b ab       	std	Y+51, r24	; 0x33
 71c:	8b a9       	ldd	r24, Y+51	; 0x33
 71e:	9c a9       	ldd	r25, Y+52	; 0x34
 720:	98 af       	std	Y+56, r25	; 0x38
 722:	8f ab       	std	Y+55, r24	; 0x37
 724:	8f a9       	ldd	r24, Y+55	; 0x37
 726:	98 ad       	ldd	r25, Y+56	; 0x38
 728:	01 97       	sbiw	r24, 0x01	; 1
 72a:	f1 f7       	brne	.-4      	; 0x728 <LCD_displayCharacter+0x116>
 72c:	98 af       	std	Y+56, r25	; 0x38
 72e:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
 730:	82 e3       	ldi	r24, 0x32	; 50
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	22 e3       	ldi	r18, 0x32	; 50
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	f9 01       	movw	r30, r18
 73a:	20 81       	ld	r18, Z
 73c:	20 64       	ori	r18, 0x40	; 64
 73e:	fc 01       	movw	r30, r24
 740:	20 83       	st	Z, r18
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	a0 e8       	ldi	r26, 0x80	; 128
 748:	bf e3       	ldi	r27, 0x3F	; 63
 74a:	8d 83       	std	Y+5, r24	; 0x05
 74c:	9e 83       	std	Y+6, r25	; 0x06
 74e:	af 83       	std	Y+7, r26	; 0x07
 750:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 752:	20 e0       	ldi	r18, 0x00	; 0
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	4a e7       	ldi	r20, 0x7A	; 122
 758:	53 e4       	ldi	r21, 0x43	; 67
 75a:	6d 81       	ldd	r22, Y+5	; 0x05
 75c:	7e 81       	ldd	r23, Y+6	; 0x06
 75e:	8f 81       	ldd	r24, Y+7	; 0x07
 760:	98 85       	ldd	r25, Y+8	; 0x08
 762:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
 766:	dc 01       	movw	r26, r24
 768:	cb 01       	movw	r24, r22
 76a:	8d a3       	std	Y+37, r24	; 0x25
 76c:	9e a3       	std	Y+38, r25	; 0x26
 76e:	af a3       	std	Y+39, r26	; 0x27
 770:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
 772:	20 e0       	ldi	r18, 0x00	; 0
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	40 e8       	ldi	r20, 0x80	; 128
 778:	5f e3       	ldi	r21, 0x3F	; 63
 77a:	6d a1       	ldd	r22, Y+37	; 0x25
 77c:	7e a1       	ldd	r23, Y+38	; 0x26
 77e:	8f a1       	ldd	r24, Y+39	; 0x27
 780:	98 a5       	ldd	r25, Y+40	; 0x28
 782:	0e 94 74 06 	call	0xce8	; 0xce8 <__cmpsf2>
 786:	88 23       	and	r24, r24
 788:	2c f4       	brge	.+10     	; 0x794 <LCD_displayCharacter+0x182>
		__ticks = 1;
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	9a a7       	std	Y+42, r25	; 0x2a
 790:	89 a7       	std	Y+41, r24	; 0x29
 792:	3f c0       	rjmp	.+126    	; 0x812 <LCD_displayCharacter+0x200>
	else if (__tmp > 65535)
 794:	20 e0       	ldi	r18, 0x00	; 0
 796:	3f ef       	ldi	r19, 0xFF	; 255
 798:	4f e7       	ldi	r20, 0x7F	; 127
 79a:	57 e4       	ldi	r21, 0x47	; 71
 79c:	6d a1       	ldd	r22, Y+37	; 0x25
 79e:	7e a1       	ldd	r23, Y+38	; 0x26
 7a0:	8f a1       	ldd	r24, Y+39	; 0x27
 7a2:	98 a5       	ldd	r25, Y+40	; 0x28
 7a4:	0e 94 f5 06 	call	0xdea	; 0xdea <__gesf2>
 7a8:	18 16       	cp	r1, r24
 7aa:	4c f5       	brge	.+82     	; 0x7fe <LCD_displayCharacter+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 7ac:	20 e0       	ldi	r18, 0x00	; 0
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	40 e2       	ldi	r20, 0x20	; 32
 7b2:	51 e4       	ldi	r21, 0x41	; 65
 7b4:	6d 81       	ldd	r22, Y+5	; 0x05
 7b6:	7e 81       	ldd	r23, Y+6	; 0x06
 7b8:	8f 81       	ldd	r24, Y+7	; 0x07
 7ba:	98 85       	ldd	r25, Y+8	; 0x08
 7bc:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
 7c0:	dc 01       	movw	r26, r24
 7c2:	cb 01       	movw	r24, r22
 7c4:	bc 01       	movw	r22, r24
 7c6:	cd 01       	movw	r24, r26
 7c8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 7cc:	dc 01       	movw	r26, r24
 7ce:	cb 01       	movw	r24, r22
 7d0:	9a a7       	std	Y+42, r25	; 0x2a
 7d2:	89 a7       	std	Y+41, r24	; 0x29
 7d4:	0f c0       	rjmp	.+30     	; 0x7f4 <LCD_displayCharacter+0x1e2>
 7d6:	89 e1       	ldi	r24, 0x19	; 25
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	9c a7       	std	Y+44, r25	; 0x2c
 7dc:	8b a7       	std	Y+43, r24	; 0x2b
 7de:	8b a5       	ldd	r24, Y+43	; 0x2b
 7e0:	9c a5       	ldd	r25, Y+44	; 0x2c
 7e2:	01 97       	sbiw	r24, 0x01	; 1
 7e4:	f1 f7       	brne	.-4      	; 0x7e2 <LCD_displayCharacter+0x1d0>
 7e6:	9c a7       	std	Y+44, r25	; 0x2c
 7e8:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 7ea:	89 a5       	ldd	r24, Y+41	; 0x29
 7ec:	9a a5       	ldd	r25, Y+42	; 0x2a
 7ee:	01 97       	sbiw	r24, 0x01	; 1
 7f0:	9a a7       	std	Y+42, r25	; 0x2a
 7f2:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 7f4:	89 a5       	ldd	r24, Y+41	; 0x29
 7f6:	9a a5       	ldd	r25, Y+42	; 0x2a
 7f8:	89 2b       	or	r24, r25
 7fa:	69 f7       	brne	.-38     	; 0x7d6 <LCD_displayCharacter+0x1c4>
 7fc:	14 c0       	rjmp	.+40     	; 0x826 <LCD_displayCharacter+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 7fe:	6d a1       	ldd	r22, Y+37	; 0x25
 800:	7e a1       	ldd	r23, Y+38	; 0x26
 802:	8f a1       	ldd	r24, Y+39	; 0x27
 804:	98 a5       	ldd	r25, Y+40	; 0x28
 806:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 80a:	dc 01       	movw	r26, r24
 80c:	cb 01       	movw	r24, r22
 80e:	9a a7       	std	Y+42, r25	; 0x2a
 810:	89 a7       	std	Y+41, r24	; 0x29
 812:	89 a5       	ldd	r24, Y+41	; 0x29
 814:	9a a5       	ldd	r25, Y+42	; 0x2a
 816:	9e a7       	std	Y+46, r25	; 0x2e
 818:	8d a7       	std	Y+45, r24	; 0x2d
 81a:	8d a5       	ldd	r24, Y+45	; 0x2d
 81c:	9e a5       	ldd	r25, Y+46	; 0x2e
 81e:	01 97       	sbiw	r24, 0x01	; 1
 820:	f1 f7       	brne	.-4      	; 0x81e <LCD_displayCharacter+0x20c>
 822:	9e a7       	std	Y+46, r25	; 0x2e
 824:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
 826:	85 e3       	ldi	r24, 0x35	; 53
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	29 ad       	ldd	r18, Y+57	; 0x39
 82c:	fc 01       	movw	r30, r24
 82e:	20 83       	st	Z, r18
 830:	80 e0       	ldi	r24, 0x00	; 0
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	a0 e8       	ldi	r26, 0x80	; 128
 836:	bf e3       	ldi	r27, 0x3F	; 63
 838:	89 87       	std	Y+9, r24	; 0x09
 83a:	9a 87       	std	Y+10, r25	; 0x0a
 83c:	ab 87       	std	Y+11, r26	; 0x0b
 83e:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 840:	20 e0       	ldi	r18, 0x00	; 0
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	4a e7       	ldi	r20, 0x7A	; 122
 846:	53 e4       	ldi	r21, 0x43	; 67
 848:	69 85       	ldd	r22, Y+9	; 0x09
 84a:	7a 85       	ldd	r23, Y+10	; 0x0a
 84c:	8b 85       	ldd	r24, Y+11	; 0x0b
 84e:	9c 85       	ldd	r25, Y+12	; 0x0c
 850:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
 854:	dc 01       	movw	r26, r24
 856:	cb 01       	movw	r24, r22
 858:	8b 8f       	std	Y+27, r24	; 0x1b
 85a:	9c 8f       	std	Y+28, r25	; 0x1c
 85c:	ad 8f       	std	Y+29, r26	; 0x1d
 85e:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
 860:	20 e0       	ldi	r18, 0x00	; 0
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	40 e8       	ldi	r20, 0x80	; 128
 866:	5f e3       	ldi	r21, 0x3F	; 63
 868:	6b 8d       	ldd	r22, Y+27	; 0x1b
 86a:	7c 8d       	ldd	r23, Y+28	; 0x1c
 86c:	8d 8d       	ldd	r24, Y+29	; 0x1d
 86e:	9e 8d       	ldd	r25, Y+30	; 0x1e
 870:	0e 94 74 06 	call	0xce8	; 0xce8 <__cmpsf2>
 874:	88 23       	and	r24, r24
 876:	2c f4       	brge	.+10     	; 0x882 <LCD_displayCharacter+0x270>
		__ticks = 1;
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	98 a3       	std	Y+32, r25	; 0x20
 87e:	8f 8f       	std	Y+31, r24	; 0x1f
 880:	3f c0       	rjmp	.+126    	; 0x900 <LCD_displayCharacter+0x2ee>
	else if (__tmp > 65535)
 882:	20 e0       	ldi	r18, 0x00	; 0
 884:	3f ef       	ldi	r19, 0xFF	; 255
 886:	4f e7       	ldi	r20, 0x7F	; 127
 888:	57 e4       	ldi	r21, 0x47	; 71
 88a:	6b 8d       	ldd	r22, Y+27	; 0x1b
 88c:	7c 8d       	ldd	r23, Y+28	; 0x1c
 88e:	8d 8d       	ldd	r24, Y+29	; 0x1d
 890:	9e 8d       	ldd	r25, Y+30	; 0x1e
 892:	0e 94 f5 06 	call	0xdea	; 0xdea <__gesf2>
 896:	18 16       	cp	r1, r24
 898:	4c f5       	brge	.+82     	; 0x8ec <LCD_displayCharacter+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 89a:	20 e0       	ldi	r18, 0x00	; 0
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	40 e2       	ldi	r20, 0x20	; 32
 8a0:	51 e4       	ldi	r21, 0x41	; 65
 8a2:	69 85       	ldd	r22, Y+9	; 0x09
 8a4:	7a 85       	ldd	r23, Y+10	; 0x0a
 8a6:	8b 85       	ldd	r24, Y+11	; 0x0b
 8a8:	9c 85       	ldd	r25, Y+12	; 0x0c
 8aa:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
 8ae:	dc 01       	movw	r26, r24
 8b0:	cb 01       	movw	r24, r22
 8b2:	bc 01       	movw	r22, r24
 8b4:	cd 01       	movw	r24, r26
 8b6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 8ba:	dc 01       	movw	r26, r24
 8bc:	cb 01       	movw	r24, r22
 8be:	98 a3       	std	Y+32, r25	; 0x20
 8c0:	8f 8f       	std	Y+31, r24	; 0x1f
 8c2:	0f c0       	rjmp	.+30     	; 0x8e2 <LCD_displayCharacter+0x2d0>
 8c4:	89 e1       	ldi	r24, 0x19	; 25
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	9a a3       	std	Y+34, r25	; 0x22
 8ca:	89 a3       	std	Y+33, r24	; 0x21
 8cc:	89 a1       	ldd	r24, Y+33	; 0x21
 8ce:	9a a1       	ldd	r25, Y+34	; 0x22
 8d0:	01 97       	sbiw	r24, 0x01	; 1
 8d2:	f1 f7       	brne	.-4      	; 0x8d0 <LCD_displayCharacter+0x2be>
 8d4:	9a a3       	std	Y+34, r25	; 0x22
 8d6:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
 8da:	98 a1       	ldd	r25, Y+32	; 0x20
 8dc:	01 97       	sbiw	r24, 0x01	; 1
 8de:	98 a3       	std	Y+32, r25	; 0x20
 8e0:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 8e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
 8e4:	98 a1       	ldd	r25, Y+32	; 0x20
 8e6:	89 2b       	or	r24, r25
 8e8:	69 f7       	brne	.-38     	; 0x8c4 <LCD_displayCharacter+0x2b2>
 8ea:	14 c0       	rjmp	.+40     	; 0x914 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 8ec:	6b 8d       	ldd	r22, Y+27	; 0x1b
 8ee:	7c 8d       	ldd	r23, Y+28	; 0x1c
 8f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
 8f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
 8f4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 8f8:	dc 01       	movw	r26, r24
 8fa:	cb 01       	movw	r24, r22
 8fc:	98 a3       	std	Y+32, r25	; 0x20
 8fe:	8f 8f       	std	Y+31, r24	; 0x1f
 900:	8f 8d       	ldd	r24, Y+31	; 0x1f
 902:	98 a1       	ldd	r25, Y+32	; 0x20
 904:	9c a3       	std	Y+36, r25	; 0x24
 906:	8b a3       	std	Y+35, r24	; 0x23
 908:	8b a1       	ldd	r24, Y+35	; 0x23
 90a:	9c a1       	ldd	r25, Y+36	; 0x24
 90c:	01 97       	sbiw	r24, 0x01	; 1
 90e:	f1 f7       	brne	.-4      	; 0x90c <LCD_displayCharacter+0x2fa>
 910:	9c a3       	std	Y+36, r25	; 0x24
 912:	8b a3       	std	Y+35, r24	; 0x23
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
 914:	82 e3       	ldi	r24, 0x32	; 50
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	22 e3       	ldi	r18, 0x32	; 50
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	f9 01       	movw	r30, r18
 91e:	20 81       	ld	r18, Z
 920:	2f 7b       	andi	r18, 0xBF	; 191
 922:	fc 01       	movw	r30, r24
 924:	20 83       	st	Z, r18
 926:	80 e0       	ldi	r24, 0x00	; 0
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	a0 e8       	ldi	r26, 0x80	; 128
 92c:	bf e3       	ldi	r27, 0x3F	; 63
 92e:	8d 87       	std	Y+13, r24	; 0x0d
 930:	9e 87       	std	Y+14, r25	; 0x0e
 932:	af 87       	std	Y+15, r26	; 0x0f
 934:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 936:	20 e0       	ldi	r18, 0x00	; 0
 938:	30 e0       	ldi	r19, 0x00	; 0
 93a:	4a e7       	ldi	r20, 0x7A	; 122
 93c:	53 e4       	ldi	r21, 0x43	; 67
 93e:	6d 85       	ldd	r22, Y+13	; 0x0d
 940:	7e 85       	ldd	r23, Y+14	; 0x0e
 942:	8f 85       	ldd	r24, Y+15	; 0x0f
 944:	98 89       	ldd	r25, Y+16	; 0x10
 946:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
 94a:	dc 01       	movw	r26, r24
 94c:	cb 01       	movw	r24, r22
 94e:	89 8b       	std	Y+17, r24	; 0x11
 950:	9a 8b       	std	Y+18, r25	; 0x12
 952:	ab 8b       	std	Y+19, r26	; 0x13
 954:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
 956:	20 e0       	ldi	r18, 0x00	; 0
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	40 e8       	ldi	r20, 0x80	; 128
 95c:	5f e3       	ldi	r21, 0x3F	; 63
 95e:	69 89       	ldd	r22, Y+17	; 0x11
 960:	7a 89       	ldd	r23, Y+18	; 0x12
 962:	8b 89       	ldd	r24, Y+19	; 0x13
 964:	9c 89       	ldd	r25, Y+20	; 0x14
 966:	0e 94 74 06 	call	0xce8	; 0xce8 <__cmpsf2>
 96a:	88 23       	and	r24, r24
 96c:	2c f4       	brge	.+10     	; 0x978 <LCD_displayCharacter+0x366>
		__ticks = 1;
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	9e 8b       	std	Y+22, r25	; 0x16
 974:	8d 8b       	std	Y+21, r24	; 0x15
 976:	3f c0       	rjmp	.+126    	; 0x9f6 <LCD_displayCharacter+0x3e4>
	else if (__tmp > 65535)
 978:	20 e0       	ldi	r18, 0x00	; 0
 97a:	3f ef       	ldi	r19, 0xFF	; 255
 97c:	4f e7       	ldi	r20, 0x7F	; 127
 97e:	57 e4       	ldi	r21, 0x47	; 71
 980:	69 89       	ldd	r22, Y+17	; 0x11
 982:	7a 89       	ldd	r23, Y+18	; 0x12
 984:	8b 89       	ldd	r24, Y+19	; 0x13
 986:	9c 89       	ldd	r25, Y+20	; 0x14
 988:	0e 94 f5 06 	call	0xdea	; 0xdea <__gesf2>
 98c:	18 16       	cp	r1, r24
 98e:	4c f5       	brge	.+82     	; 0x9e2 <LCD_displayCharacter+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 990:	20 e0       	ldi	r18, 0x00	; 0
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	40 e2       	ldi	r20, 0x20	; 32
 996:	51 e4       	ldi	r21, 0x41	; 65
 998:	6d 85       	ldd	r22, Y+13	; 0x0d
 99a:	7e 85       	ldd	r23, Y+14	; 0x0e
 99c:	8f 85       	ldd	r24, Y+15	; 0x0f
 99e:	98 89       	ldd	r25, Y+16	; 0x10
 9a0:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
 9a4:	dc 01       	movw	r26, r24
 9a6:	cb 01       	movw	r24, r22
 9a8:	bc 01       	movw	r22, r24
 9aa:	cd 01       	movw	r24, r26
 9ac:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 9b0:	dc 01       	movw	r26, r24
 9b2:	cb 01       	movw	r24, r22
 9b4:	9e 8b       	std	Y+22, r25	; 0x16
 9b6:	8d 8b       	std	Y+21, r24	; 0x15
 9b8:	0f c0       	rjmp	.+30     	; 0x9d8 <LCD_displayCharacter+0x3c6>
 9ba:	89 e1       	ldi	r24, 0x19	; 25
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	98 8f       	std	Y+24, r25	; 0x18
 9c0:	8f 8b       	std	Y+23, r24	; 0x17
 9c2:	8f 89       	ldd	r24, Y+23	; 0x17
 9c4:	98 8d       	ldd	r25, Y+24	; 0x18
 9c6:	01 97       	sbiw	r24, 0x01	; 1
 9c8:	f1 f7       	brne	.-4      	; 0x9c6 <LCD_displayCharacter+0x3b4>
 9ca:	98 8f       	std	Y+24, r25	; 0x18
 9cc:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 9ce:	8d 89       	ldd	r24, Y+21	; 0x15
 9d0:	9e 89       	ldd	r25, Y+22	; 0x16
 9d2:	01 97       	sbiw	r24, 0x01	; 1
 9d4:	9e 8b       	std	Y+22, r25	; 0x16
 9d6:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 9d8:	8d 89       	ldd	r24, Y+21	; 0x15
 9da:	9e 89       	ldd	r25, Y+22	; 0x16
 9dc:	89 2b       	or	r24, r25
 9de:	69 f7       	brne	.-38     	; 0x9ba <LCD_displayCharacter+0x3a8>
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
 9e0:	14 c0       	rjmp	.+40     	; 0xa0a <LCD_displayCharacter+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 9e2:	69 89       	ldd	r22, Y+17	; 0x11
 9e4:	7a 89       	ldd	r23, Y+18	; 0x12
 9e6:	8b 89       	ldd	r24, Y+19	; 0x13
 9e8:	9c 89       	ldd	r25, Y+20	; 0x14
 9ea:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fixunssfsi>
 9ee:	dc 01       	movw	r26, r24
 9f0:	cb 01       	movw	r24, r22
 9f2:	9e 8b       	std	Y+22, r25	; 0x16
 9f4:	8d 8b       	std	Y+21, r24	; 0x15
 9f6:	8d 89       	ldd	r24, Y+21	; 0x15
 9f8:	9e 89       	ldd	r25, Y+22	; 0x16
 9fa:	9a 8f       	std	Y+26, r25	; 0x1a
 9fc:	89 8f       	std	Y+25, r24	; 0x19
 9fe:	89 8d       	ldd	r24, Y+25	; 0x19
 a00:	9a 8d       	ldd	r25, Y+26	; 0x1a
 a02:	01 97       	sbiw	r24, 0x01	; 1
 a04:	f1 f7       	brne	.-4      	; 0xa02 <LCD_displayCharacter+0x3f0>
 a06:	9a 8f       	std	Y+26, r25	; 0x1a
 a08:	89 8f       	std	Y+25, r24	; 0x19
 a0a:	00 00       	nop
 a0c:	e9 96       	adiw	r28, 0x39	; 57
 a0e:	0f b6       	in	r0, 0x3f	; 63
 a10:	f8 94       	cli
 a12:	de bf       	out	0x3e, r29	; 62
 a14:	0f be       	out	0x3f, r0	; 63
 a16:	cd bf       	out	0x3d, r28	; 61
 a18:	df 91       	pop	r29
 a1a:	cf 91       	pop	r28
 a1c:	08 95       	ret

00000a1e <LCD_displayString>:

void LCD_displayString(const char *Str)
{
 a1e:	cf 93       	push	r28
 a20:	df 93       	push	r29
 a22:	00 d0       	rcall	.+0      	; 0xa24 <LCD_displayString+0x6>
 a24:	1f 92       	push	r1
 a26:	cd b7       	in	r28, 0x3d	; 61
 a28:	de b7       	in	r29, 0x3e	; 62
 a2a:	9b 83       	std	Y+3, r25	; 0x03
 a2c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
 a2e:	19 82       	std	Y+1, r1	; 0x01
	while(Str[i] != '\0')
 a30:	0e c0       	rjmp	.+28     	; 0xa4e <LCD_displayString+0x30>
	{
		LCD_displayCharacter(Str[i]);
 a32:	89 81       	ldd	r24, Y+1	; 0x01
 a34:	88 2f       	mov	r24, r24
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	2a 81       	ldd	r18, Y+2	; 0x02
 a3a:	3b 81       	ldd	r19, Y+3	; 0x03
 a3c:	82 0f       	add	r24, r18
 a3e:	93 1f       	adc	r25, r19
 a40:	fc 01       	movw	r30, r24
 a42:	80 81       	ld	r24, Z
 a44:	0e 94 09 03 	call	0x612	; 0x612 <LCD_displayCharacter>
		i++;
 a48:	89 81       	ldd	r24, Y+1	; 0x01
 a4a:	8f 5f       	subi	r24, 0xFF	; 255
 a4c:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
 a4e:	89 81       	ldd	r24, Y+1	; 0x01
 a50:	88 2f       	mov	r24, r24
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	2a 81       	ldd	r18, Y+2	; 0x02
 a56:	3b 81       	ldd	r19, Y+3	; 0x03
 a58:	82 0f       	add	r24, r18
 a5a:	93 1f       	adc	r25, r19
 a5c:	fc 01       	movw	r30, r24
 a5e:	80 81       	ld	r24, Z
 a60:	88 23       	and	r24, r24
 a62:	39 f7       	brne	.-50     	; 0xa32 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
 a64:	00 00       	nop
 a66:	0f 90       	pop	r0
 a68:	0f 90       	pop	r0
 a6a:	0f 90       	pop	r0
 a6c:	df 91       	pop	r29
 a6e:	cf 91       	pop	r28
 a70:	08 95       	ret

00000a72 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
 a72:	cf 93       	push	r28
 a74:	df 93       	push	r29
 a76:	00 d0       	rcall	.+0      	; 0xa78 <LCD_goToRowColumn+0x6>
 a78:	1f 92       	push	r1
 a7a:	cd b7       	in	r28, 0x3d	; 61
 a7c:	de b7       	in	r29, 0x3e	; 62
 a7e:	8a 83       	std	Y+2, r24	; 0x02
 a80:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
 a82:	8a 81       	ldd	r24, Y+2	; 0x02
 a84:	88 2f       	mov	r24, r24
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	81 30       	cpi	r24, 0x01	; 1
 a8a:	91 05       	cpc	r25, r1
 a8c:	79 f0       	breq	.+30     	; 0xaac <LCD_goToRowColumn+0x3a>
 a8e:	82 30       	cpi	r24, 0x02	; 2
 a90:	91 05       	cpc	r25, r1
 a92:	1c f4       	brge	.+6      	; 0xa9a <LCD_goToRowColumn+0x28>
 a94:	89 2b       	or	r24, r25
 a96:	39 f0       	breq	.+14     	; 0xaa6 <LCD_goToRowColumn+0x34>
 a98:	15 c0       	rjmp	.+42     	; 0xac4 <LCD_goToRowColumn+0x52>
 a9a:	82 30       	cpi	r24, 0x02	; 2
 a9c:	91 05       	cpc	r25, r1
 a9e:	51 f0       	breq	.+20     	; 0xab4 <LCD_goToRowColumn+0x42>
 aa0:	03 97       	sbiw	r24, 0x03	; 3
 aa2:	61 f0       	breq	.+24     	; 0xabc <LCD_goToRowColumn+0x4a>
 aa4:	0f c0       	rjmp	.+30     	; 0xac4 <LCD_goToRowColumn+0x52>
	{
		case 0:
				Address=col;
 aa6:	8b 81       	ldd	r24, Y+3	; 0x03
 aa8:	89 83       	std	Y+1, r24	; 0x01
				break;
 aaa:	0c c0       	rjmp	.+24     	; 0xac4 <LCD_goToRowColumn+0x52>
		case 1:
				Address=col+0x40;
 aac:	8b 81       	ldd	r24, Y+3	; 0x03
 aae:	80 5c       	subi	r24, 0xC0	; 192
 ab0:	89 83       	std	Y+1, r24	; 0x01
				break;
 ab2:	08 c0       	rjmp	.+16     	; 0xac4 <LCD_goToRowColumn+0x52>
		case 2:
				Address=col+0x10;
 ab4:	8b 81       	ldd	r24, Y+3	; 0x03
 ab6:	80 5f       	subi	r24, 0xF0	; 240
 ab8:	89 83       	std	Y+1, r24	; 0x01
				break;
 aba:	04 c0       	rjmp	.+8      	; 0xac4 <LCD_goToRowColumn+0x52>
		case 3:
				Address=col+0x50;
 abc:	8b 81       	ldd	r24, Y+3	; 0x03
 abe:	80 5b       	subi	r24, 0xB0	; 176
 ac0:	89 83       	std	Y+1, r24	; 0x01
				break;
 ac2:	00 00       	nop
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
 ac4:	89 81       	ldd	r24, Y+1	; 0x01
 ac6:	80 68       	ori	r24, 0x80	; 128
 ac8:	0e 94 03 01 	call	0x206	; 0x206 <LCD_sendCommand>
}
 acc:	00 00       	nop
 ace:	0f 90       	pop	r0
 ad0:	0f 90       	pop	r0
 ad2:	0f 90       	pop	r0
 ad4:	df 91       	pop	r29
 ad6:	cf 91       	pop	r28
 ad8:	08 95       	ret

00000ada <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
 ada:	cf 93       	push	r28
 adc:	df 93       	push	r29
 ade:	00 d0       	rcall	.+0      	; 0xae0 <LCD_displayStringRowColumn+0x6>
 ae0:	00 d0       	rcall	.+0      	; 0xae2 <LCD_displayStringRowColumn+0x8>
 ae2:	cd b7       	in	r28, 0x3d	; 61
 ae4:	de b7       	in	r29, 0x3e	; 62
 ae6:	89 83       	std	Y+1, r24	; 0x01
 ae8:	6a 83       	std	Y+2, r22	; 0x02
 aea:	5c 83       	std	Y+4, r21	; 0x04
 aec:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
 aee:	6a 81       	ldd	r22, Y+2	; 0x02
 af0:	89 81       	ldd	r24, Y+1	; 0x01
 af2:	0e 94 39 05 	call	0xa72	; 0xa72 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
 af6:	8b 81       	ldd	r24, Y+3	; 0x03
 af8:	9c 81       	ldd	r25, Y+4	; 0x04
 afa:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCD_displayString>
}
 afe:	00 00       	nop
 b00:	0f 90       	pop	r0
 b02:	0f 90       	pop	r0
 b04:	0f 90       	pop	r0
 b06:	0f 90       	pop	r0
 b08:	df 91       	pop	r29
 b0a:	cf 91       	pop	r28
 b0c:	08 95       	ret

00000b0e <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
 b0e:	cf 93       	push	r28
 b10:	df 93       	push	r29
 b12:	cd b7       	in	r28, 0x3d	; 61
 b14:	de b7       	in	r29, 0x3e	; 62
 b16:	62 97       	sbiw	r28, 0x12	; 18
 b18:	0f b6       	in	r0, 0x3f	; 63
 b1a:	f8 94       	cli
 b1c:	de bf       	out	0x3e, r29	; 62
 b1e:	0f be       	out	0x3f, r0	; 63
 b20:	cd bf       	out	0x3d, r28	; 61
 b22:	9a 8b       	std	Y+18, r25	; 0x12
 b24:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
 b26:	89 89       	ldd	r24, Y+17	; 0x11
 b28:	9a 89       	ldd	r25, Y+18	; 0x12
 b2a:	4a e0       	ldi	r20, 0x0A	; 10
 b2c:	50 e0       	ldi	r21, 0x00	; 0
 b2e:	9e 01       	movw	r18, r28
 b30:	2f 5f       	subi	r18, 0xFF	; 255
 b32:	3f 4f       	sbci	r19, 0xFF	; 255
 b34:	b9 01       	movw	r22, r18
 b36:	0e 94 98 07 	call	0xf30	; 0xf30 <itoa>
   LCD_displayString(buff);
 b3a:	ce 01       	movw	r24, r28
 b3c:	01 96       	adiw	r24, 0x01	; 1
 b3e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCD_displayString>
}
 b42:	00 00       	nop
 b44:	62 96       	adiw	r28, 0x12	; 18
 b46:	0f b6       	in	r0, 0x3f	; 63
 b48:	f8 94       	cli
 b4a:	de bf       	out	0x3e, r29	; 62
 b4c:	0f be       	out	0x3f, r0	; 63
 b4e:	cd bf       	out	0x3d, r28	; 61
 b50:	df 91       	pop	r29
 b52:	cf 91       	pop	r28
 b54:	08 95       	ret

00000b56 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
 b56:	cf 93       	push	r28
 b58:	df 93       	push	r29
 b5a:	cd b7       	in	r28, 0x3d	; 61
 b5c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
 b5e:	81 e0       	ldi	r24, 0x01	; 1
 b60:	0e 94 03 01 	call	0x206	; 0x206 <LCD_sendCommand>
}
 b64:	00 00       	nop
 b66:	df 91       	pop	r29
 b68:	cf 91       	pop	r28
 b6a:	08 95       	ret

00000b6c <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
 b6c:	cf 93       	push	r28
 b6e:	df 93       	push	r29
 b70:	cd b7       	in	r28, 0x3d	; 61
 b72:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
 b74:	8b e2       	ldi	r24, 0x2B	; 43
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	22 e0       	ldi	r18, 0x02	; 2
 b7a:	fc 01       	movw	r30, r24
 b7c:	20 83       	st	Z, r18
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
 b7e:	8a e2       	ldi	r24, 0x2A	; 42
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	28 e1       	ldi	r18, 0x18	; 24
 b84:	fc 01       	movw	r30, r24
 b86:	20 83       	st	Z, r18
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
 b88:	80 e4       	ldi	r24, 0x40	; 64
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	26 e8       	ldi	r18, 0x86	; 134
 b8e:	fc 01       	movw	r30, r24
 b90:	20 83       	st	Z, r18
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
 b92:	80 e4       	ldi	r24, 0x40	; 64
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	fc 01       	movw	r30, r24
 b98:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
 b9a:	89 e2       	ldi	r24, 0x29	; 41
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	2c e0       	ldi	r18, 0x0C	; 12
 ba0:	fc 01       	movw	r30, r24
 ba2:	20 83       	st	Z, r18
}
 ba4:	00 00       	nop
 ba6:	df 91       	pop	r29
 ba8:	cf 91       	pop	r28
 baa:	08 95       	ret

00000bac <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
 bac:	cf 93       	push	r28
 bae:	df 93       	push	r29
 bb0:	1f 92       	push	r1
 bb2:	cd b7       	in	r28, 0x3d	; 61
 bb4:	de b7       	in	r29, 0x3e	; 62
 bb6:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
 bb8:	00 00       	nop
 bba:	8b e2       	ldi	r24, 0x2B	; 43
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	fc 01       	movw	r30, r24
 bc0:	80 81       	ld	r24, Z
 bc2:	88 2f       	mov	r24, r24
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	80 72       	andi	r24, 0x20	; 32
 bc8:	99 27       	eor	r25, r25
 bca:	89 2b       	or	r24, r25
 bcc:	b1 f3       	breq	.-20     	; 0xbba <UART_sendByte+0xe>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
 bce:	8c e2       	ldi	r24, 0x2C	; 44
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	29 81       	ldd	r18, Y+1	; 0x01
 bd4:	fc 01       	movw	r30, r24
 bd6:	20 83       	st	Z, r18
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
 bd8:	00 00       	nop
 bda:	0f 90       	pop	r0
 bdc:	df 91       	pop	r29
 bde:	cf 91       	pop	r28
 be0:	08 95       	ret

00000be2 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
 be2:	cf 93       	push	r28
 be4:	df 93       	push	r29
 be6:	cd b7       	in	r28, 0x3d	; 61
 be8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
 bea:	00 00       	nop
 bec:	8b e2       	ldi	r24, 0x2B	; 43
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	fc 01       	movw	r30, r24
 bf2:	80 81       	ld	r24, Z
 bf4:	88 23       	and	r24, r24
 bf6:	d4 f7       	brge	.-12     	; 0xbec <UART_recieveByte+0xa>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
	//SET_BIT(UCSRA,RXC);

    return UDR;		
 bf8:	8c e2       	ldi	r24, 0x2C	; 44
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	fc 01       	movw	r30, r24
 bfe:	80 81       	ld	r24, Z
}
 c00:	df 91       	pop	r29
 c02:	cf 91       	pop	r28
 c04:	08 95       	ret

00000c06 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
 c06:	cf 93       	push	r28
 c08:	df 93       	push	r29
 c0a:	00 d0       	rcall	.+0      	; 0xc0c <UART_sendString+0x6>
 c0c:	1f 92       	push	r1
 c0e:	cd b7       	in	r28, 0x3d	; 61
 c10:	de b7       	in	r29, 0x3e	; 62
 c12:	9b 83       	std	Y+3, r25	; 0x03
 c14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
 c16:	19 82       	std	Y+1, r1	; 0x01
	while(Str[i] != '\0')
 c18:	0e c0       	rjmp	.+28     	; 0xc36 <UART_sendString+0x30>
	{
		UART_sendByte(Str[i]);
 c1a:	89 81       	ldd	r24, Y+1	; 0x01
 c1c:	88 2f       	mov	r24, r24
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	2a 81       	ldd	r18, Y+2	; 0x02
 c22:	3b 81       	ldd	r19, Y+3	; 0x03
 c24:	82 0f       	add	r24, r18
 c26:	93 1f       	adc	r25, r19
 c28:	fc 01       	movw	r30, r24
 c2a:	80 81       	ld	r24, Z
 c2c:	0e 94 d6 05 	call	0xbac	; 0xbac <UART_sendByte>
		i++;
 c30:	89 81       	ldd	r24, Y+1	; 0x01
 c32:	8f 5f       	subi	r24, 0xFF	; 255
 c34:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
 c36:	89 81       	ldd	r24, Y+1	; 0x01
 c38:	88 2f       	mov	r24, r24
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	2a 81       	ldd	r18, Y+2	; 0x02
 c3e:	3b 81       	ldd	r19, Y+3	; 0x03
 c40:	82 0f       	add	r24, r18
 c42:	93 1f       	adc	r25, r19
 c44:	fc 01       	movw	r30, r24
 c46:	80 81       	ld	r24, Z
 c48:	88 23       	and	r24, r24
 c4a:	39 f7       	brne	.-50     	; 0xc1a <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
	UART_sendByte('#');
 c4c:	83 e2       	ldi	r24, 0x23	; 35
 c4e:	0e 94 d6 05 	call	0xbac	; 0xbac <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
 c52:	00 00       	nop
 c54:	0f 90       	pop	r0
 c56:	0f 90       	pop	r0
 c58:	0f 90       	pop	r0
 c5a:	df 91       	pop	r29
 c5c:	cf 91       	pop	r28
 c5e:	08 95       	ret

00000c60 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
 c60:	0f 93       	push	r16
 c62:	1f 93       	push	r17
 c64:	cf 93       	push	r28
 c66:	df 93       	push	r29
 c68:	00 d0       	rcall	.+0      	; 0xc6a <UART_receiveString+0xa>
 c6a:	1f 92       	push	r1
 c6c:	cd b7       	in	r28, 0x3d	; 61
 c6e:	de b7       	in	r29, 0x3e	; 62
 c70:	9b 83       	std	Y+3, r25	; 0x03
 c72:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
 c74:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
 c76:	89 81       	ldd	r24, Y+1	; 0x01
 c78:	88 2f       	mov	r24, r24
 c7a:	90 e0       	ldi	r25, 0x00	; 0
 c7c:	2a 81       	ldd	r18, Y+2	; 0x02
 c7e:	3b 81       	ldd	r19, Y+3	; 0x03
 c80:	89 01       	movw	r16, r18
 c82:	08 0f       	add	r16, r24
 c84:	19 1f       	adc	r17, r25
 c86:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <UART_recieveByte>
 c8a:	f8 01       	movw	r30, r16
 c8c:	80 83       	st	Z, r24
	while(Str[i] != '#')
 c8e:	0f c0       	rjmp	.+30     	; 0xcae <UART_receiveString+0x4e>
	{
		i++;
 c90:	89 81       	ldd	r24, Y+1	; 0x01
 c92:	8f 5f       	subi	r24, 0xFF	; 255
 c94:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
 c96:	89 81       	ldd	r24, Y+1	; 0x01
 c98:	88 2f       	mov	r24, r24
 c9a:	90 e0       	ldi	r25, 0x00	; 0
 c9c:	2a 81       	ldd	r18, Y+2	; 0x02
 c9e:	3b 81       	ldd	r19, Y+3	; 0x03
 ca0:	89 01       	movw	r16, r18
 ca2:	08 0f       	add	r16, r24
 ca4:	19 1f       	adc	r17, r25
 ca6:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <UART_recieveByte>
 caa:	f8 01       	movw	r30, r16
 cac:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
 cae:	89 81       	ldd	r24, Y+1	; 0x01
 cb0:	88 2f       	mov	r24, r24
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	2a 81       	ldd	r18, Y+2	; 0x02
 cb6:	3b 81       	ldd	r19, Y+3	; 0x03
 cb8:	82 0f       	add	r24, r18
 cba:	93 1f       	adc	r25, r19
 cbc:	fc 01       	movw	r30, r24
 cbe:	80 81       	ld	r24, Z
 cc0:	83 32       	cpi	r24, 0x23	; 35
 cc2:	31 f7       	brne	.-52     	; 0xc90 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
 cc4:	89 81       	ldd	r24, Y+1	; 0x01
 cc6:	88 2f       	mov	r24, r24
 cc8:	90 e0       	ldi	r25, 0x00	; 0
 cca:	2a 81       	ldd	r18, Y+2	; 0x02
 ccc:	3b 81       	ldd	r19, Y+3	; 0x03
 cce:	82 0f       	add	r24, r18
 cd0:	93 1f       	adc	r25, r19
 cd2:	fc 01       	movw	r30, r24
 cd4:	10 82       	st	Z, r1
}
 cd6:	00 00       	nop
 cd8:	0f 90       	pop	r0
 cda:	0f 90       	pop	r0
 cdc:	0f 90       	pop	r0
 cde:	df 91       	pop	r29
 ce0:	cf 91       	pop	r28
 ce2:	1f 91       	pop	r17
 ce4:	0f 91       	pop	r16
 ce6:	08 95       	ret

00000ce8 <__cmpsf2>:
 ce8:	0e 94 a8 06 	call	0xd50	; 0xd50 <__fp_cmp>
 cec:	08 f4       	brcc	.+2      	; 0xcf0 <__cmpsf2+0x8>
 cee:	81 e0       	ldi	r24, 0x01	; 1
 cf0:	08 95       	ret

00000cf2 <__fixunssfsi>:
 cf2:	0e 94 d4 06 	call	0xda8	; 0xda8 <__fp_splitA>
 cf6:	88 f0       	brcs	.+34     	; 0xd1a <__fixunssfsi+0x28>
 cf8:	9f 57       	subi	r25, 0x7F	; 127
 cfa:	98 f0       	brcs	.+38     	; 0xd22 <__fixunssfsi+0x30>
 cfc:	b9 2f       	mov	r27, r25
 cfe:	99 27       	eor	r25, r25
 d00:	b7 51       	subi	r27, 0x17	; 23
 d02:	b0 f0       	brcs	.+44     	; 0xd30 <__fixunssfsi+0x3e>
 d04:	e1 f0       	breq	.+56     	; 0xd3e <__fixunssfsi+0x4c>
 d06:	66 0f       	add	r22, r22
 d08:	77 1f       	adc	r23, r23
 d0a:	88 1f       	adc	r24, r24
 d0c:	99 1f       	adc	r25, r25
 d0e:	1a f0       	brmi	.+6      	; 0xd16 <__fixunssfsi+0x24>
 d10:	ba 95       	dec	r27
 d12:	c9 f7       	brne	.-14     	; 0xd06 <__fixunssfsi+0x14>
 d14:	14 c0       	rjmp	.+40     	; 0xd3e <__fixunssfsi+0x4c>
 d16:	b1 30       	cpi	r27, 0x01	; 1
 d18:	91 f0       	breq	.+36     	; 0xd3e <__fixunssfsi+0x4c>
 d1a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fp_zero>
 d1e:	b1 e0       	ldi	r27, 0x01	; 1
 d20:	08 95       	ret
 d22:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__fp_zero>
 d26:	67 2f       	mov	r22, r23
 d28:	78 2f       	mov	r23, r24
 d2a:	88 27       	eor	r24, r24
 d2c:	b8 5f       	subi	r27, 0xF8	; 248
 d2e:	39 f0       	breq	.+14     	; 0xd3e <__fixunssfsi+0x4c>
 d30:	b9 3f       	cpi	r27, 0xF9	; 249
 d32:	cc f3       	brlt	.-14     	; 0xd26 <__fixunssfsi+0x34>
 d34:	86 95       	lsr	r24
 d36:	77 95       	ror	r23
 d38:	67 95       	ror	r22
 d3a:	b3 95       	inc	r27
 d3c:	d9 f7       	brne	.-10     	; 0xd34 <__fixunssfsi+0x42>
 d3e:	3e f4       	brtc	.+14     	; 0xd4e <__fixunssfsi+0x5c>
 d40:	90 95       	com	r25
 d42:	80 95       	com	r24
 d44:	70 95       	com	r23
 d46:	61 95       	neg	r22
 d48:	7f 4f       	sbci	r23, 0xFF	; 255
 d4a:	8f 4f       	sbci	r24, 0xFF	; 255
 d4c:	9f 4f       	sbci	r25, 0xFF	; 255
 d4e:	08 95       	ret

00000d50 <__fp_cmp>:
 d50:	99 0f       	add	r25, r25
 d52:	00 08       	sbc	r0, r0
 d54:	55 0f       	add	r21, r21
 d56:	aa 0b       	sbc	r26, r26
 d58:	e0 e8       	ldi	r30, 0x80	; 128
 d5a:	fe ef       	ldi	r31, 0xFE	; 254
 d5c:	16 16       	cp	r1, r22
 d5e:	17 06       	cpc	r1, r23
 d60:	e8 07       	cpc	r30, r24
 d62:	f9 07       	cpc	r31, r25
 d64:	c0 f0       	brcs	.+48     	; 0xd96 <__fp_cmp+0x46>
 d66:	12 16       	cp	r1, r18
 d68:	13 06       	cpc	r1, r19
 d6a:	e4 07       	cpc	r30, r20
 d6c:	f5 07       	cpc	r31, r21
 d6e:	98 f0       	brcs	.+38     	; 0xd96 <__fp_cmp+0x46>
 d70:	62 1b       	sub	r22, r18
 d72:	73 0b       	sbc	r23, r19
 d74:	84 0b       	sbc	r24, r20
 d76:	95 0b       	sbc	r25, r21
 d78:	39 f4       	brne	.+14     	; 0xd88 <__fp_cmp+0x38>
 d7a:	0a 26       	eor	r0, r26
 d7c:	61 f0       	breq	.+24     	; 0xd96 <__fp_cmp+0x46>
 d7e:	23 2b       	or	r18, r19
 d80:	24 2b       	or	r18, r20
 d82:	25 2b       	or	r18, r21
 d84:	21 f4       	brne	.+8      	; 0xd8e <__fp_cmp+0x3e>
 d86:	08 95       	ret
 d88:	0a 26       	eor	r0, r26
 d8a:	09 f4       	brne	.+2      	; 0xd8e <__fp_cmp+0x3e>
 d8c:	a1 40       	sbci	r26, 0x01	; 1
 d8e:	a6 95       	lsr	r26
 d90:	8f ef       	ldi	r24, 0xFF	; 255
 d92:	81 1d       	adc	r24, r1
 d94:	81 1d       	adc	r24, r1
 d96:	08 95       	ret

00000d98 <__fp_split3>:
 d98:	57 fd       	sbrc	r21, 7
 d9a:	90 58       	subi	r25, 0x80	; 128
 d9c:	44 0f       	add	r20, r20
 d9e:	55 1f       	adc	r21, r21
 da0:	59 f0       	breq	.+22     	; 0xdb8 <__fp_splitA+0x10>
 da2:	5f 3f       	cpi	r21, 0xFF	; 255
 da4:	71 f0       	breq	.+28     	; 0xdc2 <__fp_splitA+0x1a>
 da6:	47 95       	ror	r20

00000da8 <__fp_splitA>:
 da8:	88 0f       	add	r24, r24
 daa:	97 fb       	bst	r25, 7
 dac:	99 1f       	adc	r25, r25
 dae:	61 f0       	breq	.+24     	; 0xdc8 <__fp_splitA+0x20>
 db0:	9f 3f       	cpi	r25, 0xFF	; 255
 db2:	79 f0       	breq	.+30     	; 0xdd2 <__fp_splitA+0x2a>
 db4:	87 95       	ror	r24
 db6:	08 95       	ret
 db8:	12 16       	cp	r1, r18
 dba:	13 06       	cpc	r1, r19
 dbc:	14 06       	cpc	r1, r20
 dbe:	55 1f       	adc	r21, r21
 dc0:	f2 cf       	rjmp	.-28     	; 0xda6 <__fp_split3+0xe>
 dc2:	46 95       	lsr	r20
 dc4:	f1 df       	rcall	.-30     	; 0xda8 <__fp_splitA>
 dc6:	08 c0       	rjmp	.+16     	; 0xdd8 <__fp_splitA+0x30>
 dc8:	16 16       	cp	r1, r22
 dca:	17 06       	cpc	r1, r23
 dcc:	18 06       	cpc	r1, r24
 dce:	99 1f       	adc	r25, r25
 dd0:	f1 cf       	rjmp	.-30     	; 0xdb4 <__fp_splitA+0xc>
 dd2:	86 95       	lsr	r24
 dd4:	71 05       	cpc	r23, r1
 dd6:	61 05       	cpc	r22, r1
 dd8:	08 94       	sec
 dda:	08 95       	ret

00000ddc <__fp_zero>:
 ddc:	e8 94       	clt

00000dde <__fp_szero>:
 dde:	bb 27       	eor	r27, r27
 de0:	66 27       	eor	r22, r22
 de2:	77 27       	eor	r23, r23
 de4:	cb 01       	movw	r24, r22
 de6:	97 f9       	bld	r25, 7
 de8:	08 95       	ret

00000dea <__gesf2>:
 dea:	0e 94 a8 06 	call	0xd50	; 0xd50 <__fp_cmp>
 dee:	08 f4       	brcc	.+2      	; 0xdf2 <__gesf2+0x8>
 df0:	8f ef       	ldi	r24, 0xFF	; 255
 df2:	08 95       	ret

00000df4 <__mulsf3>:
 df4:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__mulsf3x>
 df8:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__fp_round>
 dfc:	0e 94 70 07 	call	0xee0	; 0xee0 <__fp_pscA>
 e00:	38 f0       	brcs	.+14     	; 0xe10 <__mulsf3+0x1c>
 e02:	0e 94 77 07 	call	0xeee	; 0xeee <__fp_pscB>
 e06:	20 f0       	brcs	.+8      	; 0xe10 <__mulsf3+0x1c>
 e08:	95 23       	and	r25, r21
 e0a:	11 f0       	breq	.+4      	; 0xe10 <__mulsf3+0x1c>
 e0c:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_inf>
 e10:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_nan>
 e14:	11 24       	eor	r1, r1
 e16:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__fp_szero>

00000e1a <__mulsf3x>:
 e1a:	0e 94 cc 06 	call	0xd98	; 0xd98 <__fp_split3>
 e1e:	70 f3       	brcs	.-36     	; 0xdfc <__mulsf3+0x8>

00000e20 <__mulsf3_pse>:
 e20:	95 9f       	mul	r25, r21
 e22:	c1 f3       	breq	.-16     	; 0xe14 <__mulsf3+0x20>
 e24:	95 0f       	add	r25, r21
 e26:	50 e0       	ldi	r21, 0x00	; 0
 e28:	55 1f       	adc	r21, r21
 e2a:	62 9f       	mul	r22, r18
 e2c:	f0 01       	movw	r30, r0
 e2e:	72 9f       	mul	r23, r18
 e30:	bb 27       	eor	r27, r27
 e32:	f0 0d       	add	r31, r0
 e34:	b1 1d       	adc	r27, r1
 e36:	63 9f       	mul	r22, r19
 e38:	aa 27       	eor	r26, r26
 e3a:	f0 0d       	add	r31, r0
 e3c:	b1 1d       	adc	r27, r1
 e3e:	aa 1f       	adc	r26, r26
 e40:	64 9f       	mul	r22, r20
 e42:	66 27       	eor	r22, r22
 e44:	b0 0d       	add	r27, r0
 e46:	a1 1d       	adc	r26, r1
 e48:	66 1f       	adc	r22, r22
 e4a:	82 9f       	mul	r24, r18
 e4c:	22 27       	eor	r18, r18
 e4e:	b0 0d       	add	r27, r0
 e50:	a1 1d       	adc	r26, r1
 e52:	62 1f       	adc	r22, r18
 e54:	73 9f       	mul	r23, r19
 e56:	b0 0d       	add	r27, r0
 e58:	a1 1d       	adc	r26, r1
 e5a:	62 1f       	adc	r22, r18
 e5c:	83 9f       	mul	r24, r19
 e5e:	a0 0d       	add	r26, r0
 e60:	61 1d       	adc	r22, r1
 e62:	22 1f       	adc	r18, r18
 e64:	74 9f       	mul	r23, r20
 e66:	33 27       	eor	r19, r19
 e68:	a0 0d       	add	r26, r0
 e6a:	61 1d       	adc	r22, r1
 e6c:	23 1f       	adc	r18, r19
 e6e:	84 9f       	mul	r24, r20
 e70:	60 0d       	add	r22, r0
 e72:	21 1d       	adc	r18, r1
 e74:	82 2f       	mov	r24, r18
 e76:	76 2f       	mov	r23, r22
 e78:	6a 2f       	mov	r22, r26
 e7a:	11 24       	eor	r1, r1
 e7c:	9f 57       	subi	r25, 0x7F	; 127
 e7e:	50 40       	sbci	r21, 0x00	; 0
 e80:	9a f0       	brmi	.+38     	; 0xea8 <__mulsf3_pse+0x88>
 e82:	f1 f0       	breq	.+60     	; 0xec0 <__mulsf3_pse+0xa0>
 e84:	88 23       	and	r24, r24
 e86:	4a f0       	brmi	.+18     	; 0xe9a <__mulsf3_pse+0x7a>
 e88:	ee 0f       	add	r30, r30
 e8a:	ff 1f       	adc	r31, r31
 e8c:	bb 1f       	adc	r27, r27
 e8e:	66 1f       	adc	r22, r22
 e90:	77 1f       	adc	r23, r23
 e92:	88 1f       	adc	r24, r24
 e94:	91 50       	subi	r25, 0x01	; 1
 e96:	50 40       	sbci	r21, 0x00	; 0
 e98:	a9 f7       	brne	.-22     	; 0xe84 <__mulsf3_pse+0x64>
 e9a:	9e 3f       	cpi	r25, 0xFE	; 254
 e9c:	51 05       	cpc	r21, r1
 e9e:	80 f0       	brcs	.+32     	; 0xec0 <__mulsf3_pse+0xa0>
 ea0:	0c 94 67 07 	jmp	0xece	; 0xece <__fp_inf>
 ea4:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__fp_szero>
 ea8:	5f 3f       	cpi	r21, 0xFF	; 255
 eaa:	e4 f3       	brlt	.-8      	; 0xea4 <__mulsf3_pse+0x84>
 eac:	98 3e       	cpi	r25, 0xE8	; 232
 eae:	d4 f3       	brlt	.-12     	; 0xea4 <__mulsf3_pse+0x84>
 eb0:	86 95       	lsr	r24
 eb2:	77 95       	ror	r23
 eb4:	67 95       	ror	r22
 eb6:	b7 95       	ror	r27
 eb8:	f7 95       	ror	r31
 eba:	e7 95       	ror	r30
 ebc:	9f 5f       	subi	r25, 0xFF	; 255
 ebe:	c1 f7       	brne	.-16     	; 0xeb0 <__mulsf3_pse+0x90>
 ec0:	fe 2b       	or	r31, r30
 ec2:	88 0f       	add	r24, r24
 ec4:	91 1d       	adc	r25, r1
 ec6:	96 95       	lsr	r25
 ec8:	87 95       	ror	r24
 eca:	97 f9       	bld	r25, 7
 ecc:	08 95       	ret

00000ece <__fp_inf>:
 ece:	97 f9       	bld	r25, 7
 ed0:	9f 67       	ori	r25, 0x7F	; 127
 ed2:	80 e8       	ldi	r24, 0x80	; 128
 ed4:	70 e0       	ldi	r23, 0x00	; 0
 ed6:	60 e0       	ldi	r22, 0x00	; 0
 ed8:	08 95       	ret

00000eda <__fp_nan>:
 eda:	9f ef       	ldi	r25, 0xFF	; 255
 edc:	80 ec       	ldi	r24, 0xC0	; 192
 ede:	08 95       	ret

00000ee0 <__fp_pscA>:
 ee0:	00 24       	eor	r0, r0
 ee2:	0a 94       	dec	r0
 ee4:	16 16       	cp	r1, r22
 ee6:	17 06       	cpc	r1, r23
 ee8:	18 06       	cpc	r1, r24
 eea:	09 06       	cpc	r0, r25
 eec:	08 95       	ret

00000eee <__fp_pscB>:
 eee:	00 24       	eor	r0, r0
 ef0:	0a 94       	dec	r0
 ef2:	12 16       	cp	r1, r18
 ef4:	13 06       	cpc	r1, r19
 ef6:	14 06       	cpc	r1, r20
 ef8:	05 06       	cpc	r0, r21
 efa:	08 95       	ret

00000efc <__fp_round>:
 efc:	09 2e       	mov	r0, r25
 efe:	03 94       	inc	r0
 f00:	00 0c       	add	r0, r0
 f02:	11 f4       	brne	.+4      	; 0xf08 <__fp_round+0xc>
 f04:	88 23       	and	r24, r24
 f06:	52 f0       	brmi	.+20     	; 0xf1c <__fp_round+0x20>
 f08:	bb 0f       	add	r27, r27
 f0a:	40 f4       	brcc	.+16     	; 0xf1c <__fp_round+0x20>
 f0c:	bf 2b       	or	r27, r31
 f0e:	11 f4       	brne	.+4      	; 0xf14 <__fp_round+0x18>
 f10:	60 ff       	sbrs	r22, 0
 f12:	04 c0       	rjmp	.+8      	; 0xf1c <__fp_round+0x20>
 f14:	6f 5f       	subi	r22, 0xFF	; 255
 f16:	7f 4f       	sbci	r23, 0xFF	; 255
 f18:	8f 4f       	sbci	r24, 0xFF	; 255
 f1a:	9f 4f       	sbci	r25, 0xFF	; 255
 f1c:	08 95       	ret

00000f1e <strcmp>:
 f1e:	fb 01       	movw	r30, r22
 f20:	dc 01       	movw	r26, r24
 f22:	8d 91       	ld	r24, X+
 f24:	01 90       	ld	r0, Z+
 f26:	80 19       	sub	r24, r0
 f28:	01 10       	cpse	r0, r1
 f2a:	d9 f3       	breq	.-10     	; 0xf22 <strcmp+0x4>
 f2c:	99 0b       	sbc	r25, r25
 f2e:	08 95       	ret

00000f30 <itoa>:
 f30:	45 32       	cpi	r20, 0x25	; 37
 f32:	51 05       	cpc	r21, r1
 f34:	20 f4       	brcc	.+8      	; 0xf3e <itoa+0xe>
 f36:	42 30       	cpi	r20, 0x02	; 2
 f38:	10 f0       	brcs	.+4      	; 0xf3e <itoa+0xe>
 f3a:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__itoa_ncheck>
 f3e:	fb 01       	movw	r30, r22
 f40:	10 82       	st	Z, r1
 f42:	cb 01       	movw	r24, r22
 f44:	08 95       	ret

00000f46 <__itoa_ncheck>:
 f46:	bb 27       	eor	r27, r27
 f48:	4a 30       	cpi	r20, 0x0A	; 10
 f4a:	31 f4       	brne	.+12     	; 0xf58 <__itoa_ncheck+0x12>
 f4c:	99 23       	and	r25, r25
 f4e:	22 f4       	brpl	.+8      	; 0xf58 <__itoa_ncheck+0x12>
 f50:	bd e2       	ldi	r27, 0x2D	; 45
 f52:	90 95       	com	r25
 f54:	81 95       	neg	r24
 f56:	9f 4f       	sbci	r25, 0xFF	; 255
 f58:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <__utoa_common>

00000f5c <__utoa_ncheck>:
 f5c:	bb 27       	eor	r27, r27

00000f5e <__utoa_common>:
 f5e:	fb 01       	movw	r30, r22
 f60:	55 27       	eor	r21, r21
 f62:	aa 27       	eor	r26, r26
 f64:	88 0f       	add	r24, r24
 f66:	99 1f       	adc	r25, r25
 f68:	aa 1f       	adc	r26, r26
 f6a:	a4 17       	cp	r26, r20
 f6c:	10 f0       	brcs	.+4      	; 0xf72 <__utoa_common+0x14>
 f6e:	a4 1b       	sub	r26, r20
 f70:	83 95       	inc	r24
 f72:	50 51       	subi	r21, 0x10	; 16
 f74:	b9 f7       	brne	.-18     	; 0xf64 <__utoa_common+0x6>
 f76:	a0 5d       	subi	r26, 0xD0	; 208
 f78:	aa 33       	cpi	r26, 0x3A	; 58
 f7a:	08 f0       	brcs	.+2      	; 0xf7e <__utoa_common+0x20>
 f7c:	a9 5d       	subi	r26, 0xD9	; 217
 f7e:	a1 93       	st	Z+, r26
 f80:	00 97       	sbiw	r24, 0x00	; 0
 f82:	79 f7       	brne	.-34     	; 0xf62 <__utoa_common+0x4>
 f84:	b1 11       	cpse	r27, r1
 f86:	b1 93       	st	Z+, r27
 f88:	11 92       	st	Z+, r1
 f8a:	cb 01       	movw	r24, r22
 f8c:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <strrev>

00000f90 <strrev>:
 f90:	dc 01       	movw	r26, r24
 f92:	fc 01       	movw	r30, r24
 f94:	67 2f       	mov	r22, r23
 f96:	71 91       	ld	r23, Z+
 f98:	77 23       	and	r23, r23
 f9a:	e1 f7       	brne	.-8      	; 0xf94 <strrev+0x4>
 f9c:	32 97       	sbiw	r30, 0x02	; 2
 f9e:	04 c0       	rjmp	.+8      	; 0xfa8 <strrev+0x18>
 fa0:	7c 91       	ld	r23, X
 fa2:	6d 93       	st	X+, r22
 fa4:	70 83       	st	Z, r23
 fa6:	62 91       	ld	r22, -Z
 fa8:	ae 17       	cp	r26, r30
 faa:	bf 07       	cpc	r27, r31
 fac:	c8 f3       	brcs	.-14     	; 0xfa0 <strrev+0x10>
 fae:	08 95       	ret

00000fb0 <_exit>:
 fb0:	f8 94       	cli

00000fb2 <__stop_program>:
 fb2:	ff cf       	rjmp	.-2      	; 0xfb2 <__stop_program>
