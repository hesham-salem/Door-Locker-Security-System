
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000234c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ea  00800060  0000234c  000023e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003e  0080014a  0080014a  000024ca  2**0
                  ALLOC
  3 .stab         00002c10  00000000  00000000  000024cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001407  00000000  00000000  000050dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000064e3  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000064f4  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00006530  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  00006a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00006f45  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  00006f5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__vector_6>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__vector_9>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__vector_19>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	e2 01       	movw	r28, r4
      56:	e4 01       	movw	r28, r8
      58:	e6 01       	movw	r28, r12
      5a:	e8 01       	movw	r28, r16
      5c:	ea 01       	movw	r28, r20
      5e:	ec 01       	movw	r28, r24
      60:	ee 01       	movw	r28, r28
      62:	f0 01       	movw	r30, r0
      64:	f2 01       	movw	r30, r4
      66:	f4 01       	movw	r30, r8
      68:	f6 01       	movw	r30, r12
      6a:	f8 01       	movw	r30, r16
      6c:	fa 01       	movw	r30, r20
      6e:	fc 01       	movw	r30, r24
      70:	fe 01       	movw	r30, r28
      72:	00 02       	muls	r16, r16

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf e5       	ldi	r28, 0x5F	; 95
      7a:	d4 e0       	ldi	r29, 0x04	; 4
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	11 e0       	ldi	r17, 0x01	; 1
      82:	a0 e6       	ldi	r26, 0x60	; 96
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	ec e4       	ldi	r30, 0x4C	; 76
      88:	f3 e2       	ldi	r31, 0x23	; 35
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	aa 34       	cpi	r26, 0x4A	; 74
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	21 e0       	ldi	r18, 0x01	; 1
      98:	aa e4       	ldi	r26, 0x4A	; 74
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	a8 38       	cpi	r26, 0x88	; 136
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
      aa:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:
void intgerToString(int data);
void readPassword();

UART_configurationType UART_config ;
int main()
{
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
	UART_config.buadRate=9600;
      ba:	80 e8       	ldi	r24, 0x80	; 128
      bc:	95 e2       	ldi	r25, 0x25	; 37
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b0 e0       	ldi	r27, 0x00	; 0
      c2:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <UART_config+0x1>
      c6:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <UART_config+0x2>
      ca:	a0 93 72 01 	sts	0x0172, r26	; 0x800172 <UART_config+0x3>
      ce:	b0 93 73 01 	sts	0x0173, r27	; 0x800173 <UART_config+0x4>
	UART_config.character_size=8;
      d2:	88 e0       	ldi	r24, 0x08	; 8
      d4:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <UART_config>
	strcpy(UART_config.mode,"double speed");
      d8:	8d e0       	ldi	r24, 0x0D	; 13
      da:	e6 ec       	ldi	r30, 0xC6	; 198
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	a4 e7       	ldi	r26, 0x74	; 116
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 90       	ld	r0, Z+
      e4:	0d 92       	st	X+, r0
      e6:	8a 95       	dec	r24
      e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x30>


LCD_init();
      ea:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_init>
UART_init(&UART_config);
      ee:	8f e6       	ldi	r24, 0x6F	; 111
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <UART_init>
//UART_sendByte('q');
//UART_sendString("hesham");

while(1)
{
data=UART_receiveByte();
      f6:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <UART_receiveByte>
      fa:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <data>

LCD_displayCharacter('loop');
      fe:	80 e7       	ldi	r24, 0x70	; 112
     100:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_displayCharacter>

	if(data=='s')
     104:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <data>
     108:	83 37       	cpi	r24, 0x73	; 115
     10a:	99 f4       	brne	.+38     	; 0x132 <main+0x80>
	{
		LCD_clearScreen();
     10c:	0e 94 25 09 	call	0x124a	; 0x124a <LCD_clearScreen>
		LCD_displayString("set password");
     110:	83 ed       	ldi	r24, 0xD3	; 211
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 ad 08 	call	0x115a	; 0x115a <LCD_displayString>
		readPassword();
     118:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <readPassword>
		 	 UART_sendString(strrr);
     11c:	8b e4       	ldi	r24, 0x4B	; 75
     11e:	91 e0       	ldi	r25, 0x01	; 1
     120:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <UART_sendString>

	 	LCD_clearScreen();
     124:	0e 94 25 09 	call	0x124a	; 0x124a <LCD_clearScreen>
		LCD_displayString(strrr);
     128:	8b e4       	ldi	r24, 0x4B	; 75
     12a:	91 e0       	ldi	r25, 0x01	; 1
     12c:	0e 94 ad 08 	call	0x115a	; 0x115a <LCD_displayString>
     130:	e2 cf       	rjmp	.-60     	; 0xf6 <main+0x44>


	}

	else if(data=='d')
     132:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <data>
     136:	84 36       	cpi	r24, 0x64	; 100
     138:	99 f4       	brne	.+38     	; 0x160 <main+0xae>
	{
		LCD_clearScreen();
     13a:	0e 94 25 09 	call	0x124a	; 0x124a <LCD_clearScreen>
		LCD_displayString("enter password  ");
     13e:	80 ee       	ldi	r24, 0xE0	; 224
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 ad 08 	call	0x115a	; 0x115a <LCD_displayString>
		readPassword();
     146:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <readPassword>
		 UART_sendString(strrr);
     14a:	8b e4       	ldi	r24, 0x4B	; 75
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <UART_sendString>
		LCD_clearScreen();
     152:	0e 94 25 09 	call	0x124a	; 0x124a <LCD_clearScreen>
		LCD_displayString(strrr);
     156:	8b e4       	ldi	r24, 0x4B	; 75
     158:	91 e0       	ldi	r25, 0x01	; 1
     15a:	0e 94 ad 08 	call	0x115a	; 0x115a <LCD_displayString>
     15e:	cb cf       	rjmp	.-106    	; 0xf6 <main+0x44>
	}
	else if(data=='B')
     160:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <data>
     164:	82 34       	cpi	r24, 0x42	; 66
     166:	39 f6       	brne	.-114    	; 0xf6 <main+0x44>
	{
		LCD_clearScreen();
     168:	0e 94 25 09 	call	0x124a	; 0x124a <LCD_clearScreen>
		LCD_displayString("bazzer  ");
     16c:	81 ef       	ldi	r24, 0xF1	; 241
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 ad 08 	call	0x115a	; 0x115a <LCD_displayString>
	}

}
     174:	c0 cf       	rjmp	.-128    	; 0xf6 <main+0x44>

00000176 <intgerToString>:

}

void intgerToString(int data)
{
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	00 d0       	rcall	.+0      	; 0x17c <intgerToString+0x6>
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
     180:	9a 83       	std	Y+2, r25	; 0x02
     182:	89 83       	std	Y+1, r24	; 0x01
	/* buffer to hold acii result */
	itoa(data,buff,10); /* 10 for decimal base */
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	9a 81       	ldd	r25, Y+2	; 0x02
     188:	4a e0       	ldi	r20, 0x0A	; 10
     18a:	50 e0       	ldi	r21, 0x00	; 0
     18c:	6f e5       	ldi	r22, 0x5F	; 95
     18e:	71 e0       	ldi	r23, 0x01	; 1
     190:	0e 94 64 11 	call	0x22c8	; 0x22c8 <itoa>
}
     194:	00 00       	nop
     196:	0f 90       	pop	r0
     198:	0f 90       	pop	r0
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	08 95       	ret

000001a0 <readPassword>:

 void readPassword()
 {
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
     1a8:	2e 97       	sbiw	r28, 0x0e	; 14
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	f8 94       	cli
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	0f be       	out	0x3f, r0	; 63
     1b2:	cd bf       	out	0x3d, r28	; 61
	// key =KeyPad_getPressedKey();

	 	while(enter==1)
     1b4:	86 c0       	rjmp	.+268    	; 0x2c2 <readPassword+0x122>
	 	{
	 	key =KeyPad_getPressedKey();
     1b6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <KeyPad_getPressedKey>
     1ba:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	a8 ec       	ldi	r26, 0xC8	; 200
     1c4:	b3 e4       	ldi	r27, 0x43	; 67
     1c6:	89 83       	std	Y+1, r24	; 0x01
     1c8:	9a 83       	std	Y+2, r25	; 0x02
     1ca:	ab 83       	std	Y+3, r26	; 0x03
     1cc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1ce:	20 e0       	ldi	r18, 0x00	; 0
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	4a ef       	ldi	r20, 0xFA	; 250
     1d4:	54 e4       	ldi	r21, 0x44	; 68
     1d6:	69 81       	ldd	r22, Y+1	; 0x01
     1d8:	7a 81       	ldd	r23, Y+2	; 0x02
     1da:	8b 81       	ldd	r24, Y+3	; 0x03
     1dc:	9c 81       	ldd	r25, Y+4	; 0x04
     1de:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     1e2:	dc 01       	movw	r26, r24
     1e4:	cb 01       	movw	r24, r22
     1e6:	8d 83       	std	Y+5, r24	; 0x05
     1e8:	9e 83       	std	Y+6, r25	; 0x06
     1ea:	af 83       	std	Y+7, r26	; 0x07
     1ec:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e8       	ldi	r20, 0x80	; 128
     1f4:	5f e3       	ldi	r21, 0x3F	; 63
     1f6:	6d 81       	ldd	r22, Y+5	; 0x05
     1f8:	7e 81       	ldd	r23, Y+6	; 0x06
     1fa:	8f 81       	ldd	r24, Y+7	; 0x07
     1fc:	98 85       	ldd	r25, Y+8	; 0x08
     1fe:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__cmpsf2>
     202:	88 23       	and	r24, r24
     204:	2c f4       	brge	.+10     	; 0x210 <readPassword+0x70>
		__ticks = 1;
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	9a 87       	std	Y+10, r25	; 0x0a
     20c:	89 87       	std	Y+9, r24	; 0x09
     20e:	3f c0       	rjmp	.+126    	; 0x28e <readPassword+0xee>
	else if (__tmp > 65535)
     210:	20 e0       	ldi	r18, 0x00	; 0
     212:	3f ef       	ldi	r19, 0xFF	; 255
     214:	4f e7       	ldi	r20, 0x7F	; 127
     216:	57 e4       	ldi	r21, 0x47	; 71
     218:	6d 81       	ldd	r22, Y+5	; 0x05
     21a:	7e 81       	ldd	r23, Y+6	; 0x06
     21c:	8f 81       	ldd	r24, Y+7	; 0x07
     21e:	98 85       	ldd	r25, Y+8	; 0x08
     220:	0e 94 de 10 	call	0x21bc	; 0x21bc <__gesf2>
     224:	18 16       	cp	r1, r24
     226:	4c f5       	brge	.+82     	; 0x27a <readPassword+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	40 e2       	ldi	r20, 0x20	; 32
     22e:	51 e4       	ldi	r21, 0x41	; 65
     230:	69 81       	ldd	r22, Y+1	; 0x01
     232:	7a 81       	ldd	r23, Y+2	; 0x02
     234:	8b 81       	ldd	r24, Y+3	; 0x03
     236:	9c 81       	ldd	r25, Y+4	; 0x04
     238:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     23c:	dc 01       	movw	r26, r24
     23e:	cb 01       	movw	r24, r22
     240:	bc 01       	movw	r22, r24
     242:	cd 01       	movw	r24, r26
     244:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     248:	dc 01       	movw	r26, r24
     24a:	cb 01       	movw	r24, r22
     24c:	9a 87       	std	Y+10, r25	; 0x0a
     24e:	89 87       	std	Y+9, r24	; 0x09
     250:	0f c0       	rjmp	.+30     	; 0x270 <readPassword+0xd0>
     252:	88 ec       	ldi	r24, 0xC8	; 200
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	9c 87       	std	Y+12, r25	; 0x0c
     258:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     25a:	8b 85       	ldd	r24, Y+11	; 0x0b
     25c:	9c 85       	ldd	r25, Y+12	; 0x0c
     25e:	01 97       	sbiw	r24, 0x01	; 1
     260:	f1 f7       	brne	.-4      	; 0x25e <readPassword+0xbe>
     262:	9c 87       	std	Y+12, r25	; 0x0c
     264:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     266:	89 85       	ldd	r24, Y+9	; 0x09
     268:	9a 85       	ldd	r25, Y+10	; 0x0a
     26a:	01 97       	sbiw	r24, 0x01	; 1
     26c:	9a 87       	std	Y+10, r25	; 0x0a
     26e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     270:	89 85       	ldd	r24, Y+9	; 0x09
     272:	9a 85       	ldd	r25, Y+10	; 0x0a
     274:	89 2b       	or	r24, r25
     276:	69 f7       	brne	.-38     	; 0x252 <readPassword+0xb2>
     278:	14 c0       	rjmp	.+40     	; 0x2a2 <readPassword+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     27a:	6d 81       	ldd	r22, Y+5	; 0x05
     27c:	7e 81       	ldd	r23, Y+6	; 0x06
     27e:	8f 81       	ldd	r24, Y+7	; 0x07
     280:	98 85       	ldd	r25, Y+8	; 0x08
     282:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     286:	dc 01       	movw	r26, r24
     288:	cb 01       	movw	r24, r22
     28a:	9a 87       	std	Y+10, r25	; 0x0a
     28c:	89 87       	std	Y+9, r24	; 0x09
     28e:	89 85       	ldd	r24, Y+9	; 0x09
     290:	9a 85       	ldd	r25, Y+10	; 0x0a
     292:	9e 87       	std	Y+14, r25	; 0x0e
     294:	8d 87       	std	Y+13, r24	; 0x0d
     296:	8d 85       	ldd	r24, Y+13	; 0x0d
     298:	9e 85       	ldd	r25, Y+14	; 0x0e
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	f1 f7       	brne	.-4      	; 0x29a <readPassword+0xfa>
     29e:	9e 87       	std	Y+14, r25	; 0x0e
     2a0:	8d 87       	std	Y+13, r24	; 0x0d
	 	_delay_ms(400);
	 	if(key==13)
     2a2:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
     2a6:	8d 30       	cpi	r24, 0x0D	; 13
     2a8:	91 f0       	breq	.+36     	; 0x2ce <readPassword+0x12e>
	 		break;
	 	intgerToString(key);
     2aa:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
     2ae:	88 2f       	mov	r24, r24
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 bb 00 	call	0x176	; 0x176 <intgerToString>
	 	strcat(strrr,buff);
     2b6:	6f e5       	ldi	r22, 0x5F	; 95
     2b8:	71 e0       	ldi	r23, 0x01	; 1
     2ba:	8b e4       	ldi	r24, 0x4B	; 75
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	0e 94 50 11 	call	0x22a0	; 0x22a0 <strcat>

 void readPassword()
 {
	// key =KeyPad_getPressedKey();

	 	while(enter==1)
     2c2:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <enter>
     2c6:	81 30       	cpi	r24, 0x01	; 1
     2c8:	09 f4       	brne	.+2      	; 0x2cc <readPassword+0x12c>
     2ca:	75 cf       	rjmp	.-278    	; 0x1b6 <readPassword+0x16>
	 	if(key==13)
	 		break;
	 	intgerToString(key);
	 	strcat(strrr,buff);
	 	}
 }
     2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <readPassword+0x130>
	 	while(enter==1)
	 	{
	 	key =KeyPad_getPressedKey();
	 	_delay_ms(400);
	 	if(key==13)
	 		break;
     2ce:	00 00       	nop
	 	intgerToString(key);
	 	strcat(strrr,buff);
	 	}
 }
     2d0:	00 00       	nop
     2d2:	2e 96       	adiw	r28, 0x0e	; 14
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	f8 94       	cli
     2d8:	de bf       	out	0x3e, r29	; 62
     2da:	0f be       	out	0x3f, r0	; 63
     2dc:	cd bf       	out	0x3d, r28	; 61
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	08 95       	ret

000002e4 <KeyPad_getPressedKey>:
/***************************************************************
 * 					function definition 						*
 * *************************************************************
 */

uint8 KeyPad_getPressedKey(void) {
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	00 d0       	rcall	.+0      	; 0x2ea <KeyPad_getPressedKey+0x6>
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1)
	{
	for (col = 0; col < N_COL; col++) {
     2ee:	1a 82       	std	Y+2, r1	; 0x02
     2f0:	44 c0       	rjmp	.+136    	; 0x37a <KeyPad_getPressedKey+0x96>
		/* set the specified column in this trace output pin and the first 4 pins as input */
		KEYPAD_PORT_DIR = (0b00010000 << col);
     2f2:	8a e3       	ldi	r24, 0x3A	; 58
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	2a 81       	ldd	r18, Y+2	; 0x02
     2f8:	42 2f       	mov	r20, r18
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	20 e1       	ldi	r18, 0x10	; 16
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	02 c0       	rjmp	.+4      	; 0x306 <KeyPad_getPressedKey+0x22>
     302:	22 0f       	add	r18, r18
     304:	33 1f       	adc	r19, r19
     306:	4a 95       	dec	r20
     308:	e2 f7       	brpl	.-8      	; 0x302 <KeyPad_getPressedKey+0x1e>
     30a:	fc 01       	movw	r30, r24
     30c:	20 83       	st	Z, r18
		/* put on the specified column in this trace output pin 0 and  make the first 4 pins as pull up */
		KEYPAD_PORT_OUT = (~(0b00010000 << col));
     30e:	8b e3       	ldi	r24, 0x3B	; 59
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	2a 81       	ldd	r18, Y+2	; 0x02
     314:	42 2f       	mov	r20, r18
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	20 e1       	ldi	r18, 0x10	; 16
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	02 c0       	rjmp	.+4      	; 0x322 <KeyPad_getPressedKey+0x3e>
     31e:	22 0f       	add	r18, r18
     320:	33 1f       	adc	r19, r19
     322:	4a 95       	dec	r20
     324:	e2 f7       	brpl	.-8      	; 0x31e <KeyPad_getPressedKey+0x3a>
     326:	20 95       	com	r18
     328:	fc 01       	movw	r30, r24
     32a:	20 83       	st	Z, r18
		for (row = 0; row < N_ROW; row++) /* loop for rows */
     32c:	19 82       	std	Y+1, r1	; 0x01
     32e:	1f c0       	rjmp	.+62     	; 0x36e <KeyPad_getPressedKey+0x8a>
		{
			if (BIT_IS_CLEAR(KEYPAD_PORT_IN, row))/* if the switch is pressed in this row */
     330:	89 e3       	ldi	r24, 0x39	; 57
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	fc 01       	movw	r30, r24
     336:	80 81       	ld	r24, Z
     338:	88 2f       	mov	r24, r24
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	29 81       	ldd	r18, Y+1	; 0x01
     33e:	22 2f       	mov	r18, r18
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	02 c0       	rjmp	.+4      	; 0x348 <KeyPad_getPressedKey+0x64>
     344:	95 95       	asr	r25
     346:	87 95       	ror	r24
     348:	2a 95       	dec	r18
     34a:	e2 f7       	brpl	.-8      	; 0x344 <KeyPad_getPressedKey+0x60>
     34c:	81 70       	andi	r24, 0x01	; 1
     34e:	99 27       	eor	r25, r25
     350:	89 2b       	or	r24, r25
     352:	51 f4       	brne	.+20     	; 0x368 <KeyPad_getPressedKey+0x84>
			{
				#if(N_COL==3)
				return KeyPad_4x3_adjustSwitchNumber((row * N_COL) + col + 1);
				#elif(N_COL==4)
				return KeyPad_4x4_adjustSwitchNumber((row * N_COL) + col + 1);
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	98 2f       	mov	r25, r24
     358:	99 0f       	add	r25, r25
     35a:	99 0f       	add	r25, r25
     35c:	8a 81       	ldd	r24, Y+2	; 0x02
     35e:	89 0f       	add	r24, r25
     360:	8f 5f       	subi	r24, 0xFF	; 255
     362:	0e 94 c7 01 	call	0x38e	; 0x38e <KeyPad_4x4_adjustSwitchNumber>
     366:	0e c0       	rjmp	.+28     	; 0x384 <KeyPad_getPressedKey+0xa0>
	for (col = 0; col < N_COL; col++) {
		/* set the specified column in this trace output pin and the first 4 pins as input */
		KEYPAD_PORT_DIR = (0b00010000 << col);
		/* put on the specified column in this trace output pin 0 and  make the first 4 pins as pull up */
		KEYPAD_PORT_OUT = (~(0b00010000 << col));
		for (row = 0; row < N_ROW; row++) /* loop for rows */
     368:	89 81       	ldd	r24, Y+1	; 0x01
     36a:	8f 5f       	subi	r24, 0xFF	; 255
     36c:	89 83       	std	Y+1, r24	; 0x01
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	84 30       	cpi	r24, 0x04	; 4
     372:	f0 f2       	brcs	.-68     	; 0x330 <KeyPad_getPressedKey+0x4c>

uint8 KeyPad_getPressedKey(void) {
	uint8 row, col;
	while(1)
	{
	for (col = 0; col < N_COL; col++) {
     374:	8a 81       	ldd	r24, Y+2	; 0x02
     376:	8f 5f       	subi	r24, 0xFF	; 255
     378:	8a 83       	std	Y+2, r24	; 0x02
     37a:	8a 81       	ldd	r24, Y+2	; 0x02
     37c:	84 30       	cpi	r24, 0x04	; 4
     37e:	08 f4       	brcc	.+2      	; 0x382 <KeyPad_getPressedKey+0x9e>
     380:	b8 cf       	rjmp	.-144    	; 0x2f2 <KeyPad_getPressedKey+0xe>
				#endif
			}
		}
	}

}
     382:	b5 cf       	rjmp	.-150    	; 0x2ee <KeyPad_getPressedKey+0xa>
}
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <KeyPad_4x4_adjustSwitchNumber>:
 }


#elif(N_COL==4)

static uint8 KeyPad_4x4_adjustSwitchNumber(uint8 a_number) {
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	1f 92       	push	r1
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	89 83       	std	Y+1, r24	; 0x01
	switch (a_number) {
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	88 2f       	mov	r24, r24
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	09 2e       	mov	r0, r25
     3a2:	00 0c       	add	r0, r0
     3a4:	aa 0b       	sbc	r26, r26
     3a6:	bb 0b       	sbc	r27, r27
     3a8:	41 e0       	ldi	r20, 0x01	; 1
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	2f e0       	ldi	r18, 0x0F	; 15
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	84 1b       	sub	r24, r20
     3b2:	95 0b       	sbc	r25, r21
     3b4:	28 17       	cp	r18, r24
     3b6:	39 07       	cpc	r19, r25
     3b8:	28 f1       	brcs	.+74     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3ba:	86 5d       	subi	r24, 0xD6	; 214
     3bc:	9f 4f       	sbci	r25, 0xFF	; 255
     3be:	fc 01       	movw	r30, r24
     3c0:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__tablejump2__>
	case 1:
		return 7;
     3c4:	87 e0       	ldi	r24, 0x07	; 7
     3c6:	1e c0       	rjmp	.+60     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	case 2:
		return 8;
     3c8:	88 e0       	ldi	r24, 0x08	; 8
     3ca:	1c c0       	rjmp	.+56     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	case 3:
		return 9;
     3cc:	89 e0       	ldi	r24, 0x09	; 9
     3ce:	1a c0       	rjmp	.+52     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	case 4:
		return '/';
     3d0:	8f e2       	ldi	r24, 0x2F	; 47
     3d2:	18 c0       	rjmp	.+48     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	case 5:
		return 4;
     3d4:	84 e0       	ldi	r24, 0x04	; 4
     3d6:	16 c0       	rjmp	.+44     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	case 6:
		return 5;
     3d8:	85 e0       	ldi	r24, 0x05	; 5
     3da:	14 c0       	rjmp	.+40     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	case 7:
		return 6;
     3dc:	86 e0       	ldi	r24, 0x06	; 6
     3de:	12 c0       	rjmp	.+36     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	case 8:
		return '*';
     3e0:	8a e2       	ldi	r24, 0x2A	; 42
     3e2:	10 c0       	rjmp	.+32     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	case 9:
		return 1;
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	0e c0       	rjmp	.+28     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	case 10:
		return 2;
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	0c c0       	rjmp	.+24     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	case 11:
		return 3;
     3ec:	83 e0       	ldi	r24, 0x03	; 3
     3ee:	0a c0       	rjmp	.+20     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	case 12:
		return '-';
     3f0:	8d e2       	ldi	r24, 0x2D	; 45
     3f2:	08 c0       	rjmp	.+16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	case 13:
		return 13;
     3f4:	8d e0       	ldi	r24, 0x0D	; 13
     3f6:	06 c0       	rjmp	.+12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	case 14:
		return 0;
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	04 c0       	rjmp	.+8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	case 15:
		return '=';
     3fc:	8d e3       	ldi	r24, 0x3D	; 61
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	case 16:
		return '+';
     400:	8b e2       	ldi	r24, 0x2B	; 43
     402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

	}
}
     404:	0f 90       	pop	r0
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	08 95       	ret

0000040c <LCD_init>:
 * 								Functions Definitions				   *
 ***********************************************************************
 */

void LCD_init(void)
{
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
LCD_CTRL_PORT_DIR |=(1<<4)|(1<<5)|(1<<6);/* configure control port pins(RS ,R/W ,ENABLE) AS OUTPUT*/
     414:	81 e3       	ldi	r24, 0x31	; 49
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	21 e3       	ldi	r18, 0x31	; 49
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	f9 01       	movw	r30, r18
     41e:	20 81       	ld	r18, Z
     420:	20 67       	ori	r18, 0x70	; 112
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18
LCD_DATA_PORT_DIR=0XFF; /* configure the data port as output port */
     426:	84 e3       	ldi	r24, 0x34	; 52
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	2f ef       	ldi	r18, 0xFF	; 255
     42c:	fc 01       	movw	r30, r24
     42e:	20 83       	st	Z, r18
LCD_sendCommand(FUNCTION_SET_8_BIT_2LINE); /* using 2 lines + LCD 8 bit mode + 5*7 dot  display mode*/
     430:	88 e3       	ldi	r24, 0x38	; 56
     432:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_sendCommand>
LCD_sendCommand(DISPLAY_CURSOR_OFF);
     436:	8c e0       	ldi	r24, 0x0C	; 12
     438:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_sendCommand>
LCD_sendCommand(CLEAR_COMMAND);
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_sendCommand>

}
     442:	00 00       	nop
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	e9 97       	sbiw	r28, 0x39	; 57
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS);/* instruction mode RS =0*/
     460:	82 e3       	ldi	r24, 0x32	; 50
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	22 e3       	ldi	r18, 0x32	; 50
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	f9 01       	movw	r30, r18
     46a:	20 81       	ld	r18, Z
     46c:	2f 7e       	andi	r18, 0xEF	; 239
     46e:	fc 01       	movw	r30, r24
     470:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_PORT,READWRITE); /* write data to LCD so readwrite=0*/
     472:	82 e3       	ldi	r24, 0x32	; 50
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	22 e3       	ldi	r18, 0x32	; 50
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	f9 01       	movw	r30, r18
     47c:	20 81       	ld	r18, Z
     47e:	2f 7d       	andi	r18, 0xDF	; 223
     480:	fc 01       	movw	r30, r24
     482:	20 83       	st	Z, r18
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	a0 e8       	ldi	r26, 0x80	; 128
     48a:	bf e3       	ldi	r27, 0x3F	; 63
     48c:	89 83       	std	Y+1, r24	; 0x01
     48e:	9a 83       	std	Y+2, r25	; 0x02
     490:	ab 83       	std	Y+3, r26	; 0x03
     492:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	4a ef       	ldi	r20, 0xFA	; 250
     49a:	54 e4       	ldi	r21, 0x44	; 68
     49c:	69 81       	ldd	r22, Y+1	; 0x01
     49e:	7a 81       	ldd	r23, Y+2	; 0x02
     4a0:	8b 81       	ldd	r24, Y+3	; 0x03
     4a2:	9c 81       	ldd	r25, Y+4	; 0x04
     4a4:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     4a8:	dc 01       	movw	r26, r24
     4aa:	cb 01       	movw	r24, r22
     4ac:	8f a7       	std	Y+47, r24	; 0x2f
     4ae:	98 ab       	std	Y+48, r25	; 0x30
     4b0:	a9 ab       	std	Y+49, r26	; 0x31
     4b2:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	40 e8       	ldi	r20, 0x80	; 128
     4ba:	5f e3       	ldi	r21, 0x3F	; 63
     4bc:	6f a5       	ldd	r22, Y+47	; 0x2f
     4be:	78 a9       	ldd	r23, Y+48	; 0x30
     4c0:	89 a9       	ldd	r24, Y+49	; 0x31
     4c2:	9a a9       	ldd	r25, Y+50	; 0x32
     4c4:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__cmpsf2>
     4c8:	88 23       	and	r24, r24
     4ca:	2c f4       	brge	.+10     	; 0x4d6 <__stack+0x77>
		__ticks = 1;
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	9c ab       	std	Y+52, r25	; 0x34
     4d2:	8b ab       	std	Y+51, r24	; 0x33
     4d4:	3f c0       	rjmp	.+126    	; 0x554 <__stack+0xf5>
	else if (__tmp > 65535)
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	3f ef       	ldi	r19, 0xFF	; 255
     4da:	4f e7       	ldi	r20, 0x7F	; 127
     4dc:	57 e4       	ldi	r21, 0x47	; 71
     4de:	6f a5       	ldd	r22, Y+47	; 0x2f
     4e0:	78 a9       	ldd	r23, Y+48	; 0x30
     4e2:	89 a9       	ldd	r24, Y+49	; 0x31
     4e4:	9a a9       	ldd	r25, Y+50	; 0x32
     4e6:	0e 94 de 10 	call	0x21bc	; 0x21bc <__gesf2>
     4ea:	18 16       	cp	r1, r24
     4ec:	4c f5       	brge	.+82     	; 0x540 <__stack+0xe1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4ee:	20 e0       	ldi	r18, 0x00	; 0
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	40 e2       	ldi	r20, 0x20	; 32
     4f4:	51 e4       	ldi	r21, 0x41	; 65
     4f6:	69 81       	ldd	r22, Y+1	; 0x01
     4f8:	7a 81       	ldd	r23, Y+2	; 0x02
     4fa:	8b 81       	ldd	r24, Y+3	; 0x03
     4fc:	9c 81       	ldd	r25, Y+4	; 0x04
     4fe:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     502:	dc 01       	movw	r26, r24
     504:	cb 01       	movw	r24, r22
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	9c ab       	std	Y+52, r25	; 0x34
     514:	8b ab       	std	Y+51, r24	; 0x33
     516:	0f c0       	rjmp	.+30     	; 0x536 <__stack+0xd7>
     518:	88 ec       	ldi	r24, 0xC8	; 200
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	9e ab       	std	Y+54, r25	; 0x36
     51e:	8d ab       	std	Y+53, r24	; 0x35
     520:	8d a9       	ldd	r24, Y+53	; 0x35
     522:	9e a9       	ldd	r25, Y+54	; 0x36
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	f1 f7       	brne	.-4      	; 0x524 <__stack+0xc5>
     528:	9e ab       	std	Y+54, r25	; 0x36
     52a:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     52c:	8b a9       	ldd	r24, Y+51	; 0x33
     52e:	9c a9       	ldd	r25, Y+52	; 0x34
     530:	01 97       	sbiw	r24, 0x01	; 1
     532:	9c ab       	std	Y+52, r25	; 0x34
     534:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     536:	8b a9       	ldd	r24, Y+51	; 0x33
     538:	9c a9       	ldd	r25, Y+52	; 0x34
     53a:	89 2b       	or	r24, r25
     53c:	69 f7       	brne	.-38     	; 0x518 <__stack+0xb9>
     53e:	14 c0       	rjmp	.+40     	; 0x568 <__stack+0x109>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     540:	6f a5       	ldd	r22, Y+47	; 0x2f
     542:	78 a9       	ldd	r23, Y+48	; 0x30
     544:	89 a9       	ldd	r24, Y+49	; 0x31
     546:	9a a9       	ldd	r25, Y+50	; 0x32
     548:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     54c:	dc 01       	movw	r26, r24
     54e:	cb 01       	movw	r24, r22
     550:	9c ab       	std	Y+52, r25	; 0x34
     552:	8b ab       	std	Y+51, r24	; 0x33
     554:	8b a9       	ldd	r24, Y+51	; 0x33
     556:	9c a9       	ldd	r25, Y+52	; 0x34
     558:	98 af       	std	Y+56, r25	; 0x38
     55a:	8f ab       	std	Y+55, r24	; 0x37
     55c:	8f a9       	ldd	r24, Y+55	; 0x37
     55e:	98 ad       	ldd	r25, Y+56	; 0x38
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	f1 f7       	brne	.-4      	; 0x560 <__stack+0x101>
     564:	98 af       	std	Y+56, r25	; 0x38
     566:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1);/* delay for prossing tas=50ns*/
	SET_BIT(LCD_CTRL_PORT,LCD_ENABLE); /*enable LCD so enable pin =1*/
     568:	82 e3       	ldi	r24, 0x32	; 50
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	22 e3       	ldi	r18, 0x32	; 50
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	f9 01       	movw	r30, r18
     572:	20 81       	ld	r18, Z
     574:	20 64       	ori	r18, 0x40	; 64
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	a0 e8       	ldi	r26, 0x80	; 128
     580:	bf e3       	ldi	r27, 0x3F	; 63
     582:	8d 83       	std	Y+5, r24	; 0x05
     584:	9e 83       	std	Y+6, r25	; 0x06
     586:	af 83       	std	Y+7, r26	; 0x07
     588:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	4a ef       	ldi	r20, 0xFA	; 250
     590:	54 e4       	ldi	r21, 0x44	; 68
     592:	6d 81       	ldd	r22, Y+5	; 0x05
     594:	7e 81       	ldd	r23, Y+6	; 0x06
     596:	8f 81       	ldd	r24, Y+7	; 0x07
     598:	98 85       	ldd	r25, Y+8	; 0x08
     59a:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     59e:	dc 01       	movw	r26, r24
     5a0:	cb 01       	movw	r24, r22
     5a2:	8d a3       	std	Y+37, r24	; 0x25
     5a4:	9e a3       	std	Y+38, r25	; 0x26
     5a6:	af a3       	std	Y+39, r26	; 0x27
     5a8:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	40 e8       	ldi	r20, 0x80	; 128
     5b0:	5f e3       	ldi	r21, 0x3F	; 63
     5b2:	6d a1       	ldd	r22, Y+37	; 0x25
     5b4:	7e a1       	ldd	r23, Y+38	; 0x26
     5b6:	8f a1       	ldd	r24, Y+39	; 0x27
     5b8:	98 a5       	ldd	r25, Y+40	; 0x28
     5ba:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__cmpsf2>
     5be:	88 23       	and	r24, r24
     5c0:	2c f4       	brge	.+10     	; 0x5cc <__stack+0x16d>
		__ticks = 1;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	9a a7       	std	Y+42, r25	; 0x2a
     5c8:	89 a7       	std	Y+41, r24	; 0x29
     5ca:	3f c0       	rjmp	.+126    	; 0x64a <__stack+0x1eb>
	else if (__tmp > 65535)
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	3f ef       	ldi	r19, 0xFF	; 255
     5d0:	4f e7       	ldi	r20, 0x7F	; 127
     5d2:	57 e4       	ldi	r21, 0x47	; 71
     5d4:	6d a1       	ldd	r22, Y+37	; 0x25
     5d6:	7e a1       	ldd	r23, Y+38	; 0x26
     5d8:	8f a1       	ldd	r24, Y+39	; 0x27
     5da:	98 a5       	ldd	r25, Y+40	; 0x28
     5dc:	0e 94 de 10 	call	0x21bc	; 0x21bc <__gesf2>
     5e0:	18 16       	cp	r1, r24
     5e2:	4c f5       	brge	.+82     	; 0x636 <__stack+0x1d7>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	40 e2       	ldi	r20, 0x20	; 32
     5ea:	51 e4       	ldi	r21, 0x41	; 65
     5ec:	6d 81       	ldd	r22, Y+5	; 0x05
     5ee:	7e 81       	ldd	r23, Y+6	; 0x06
     5f0:	8f 81       	ldd	r24, Y+7	; 0x07
     5f2:	98 85       	ldd	r25, Y+8	; 0x08
     5f4:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     5f8:	dc 01       	movw	r26, r24
     5fa:	cb 01       	movw	r24, r22
     5fc:	bc 01       	movw	r22, r24
     5fe:	cd 01       	movw	r24, r26
     600:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     604:	dc 01       	movw	r26, r24
     606:	cb 01       	movw	r24, r22
     608:	9a a7       	std	Y+42, r25	; 0x2a
     60a:	89 a7       	std	Y+41, r24	; 0x29
     60c:	0f c0       	rjmp	.+30     	; 0x62c <__stack+0x1cd>
     60e:	88 ec       	ldi	r24, 0xC8	; 200
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	9c a7       	std	Y+44, r25	; 0x2c
     614:	8b a7       	std	Y+43, r24	; 0x2b
     616:	8b a5       	ldd	r24, Y+43	; 0x2b
     618:	9c a5       	ldd	r25, Y+44	; 0x2c
     61a:	01 97       	sbiw	r24, 0x01	; 1
     61c:	f1 f7       	brne	.-4      	; 0x61a <__stack+0x1bb>
     61e:	9c a7       	std	Y+44, r25	; 0x2c
     620:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     622:	89 a5       	ldd	r24, Y+41	; 0x29
     624:	9a a5       	ldd	r25, Y+42	; 0x2a
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	9a a7       	std	Y+42, r25	; 0x2a
     62a:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     62c:	89 a5       	ldd	r24, Y+41	; 0x29
     62e:	9a a5       	ldd	r25, Y+42	; 0x2a
     630:	89 2b       	or	r24, r25
     632:	69 f7       	brne	.-38     	; 0x60e <__stack+0x1af>
     634:	14 c0       	rjmp	.+40     	; 0x65e <__stack+0x1ff>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     636:	6d a1       	ldd	r22, Y+37	; 0x25
     638:	7e a1       	ldd	r23, Y+38	; 0x26
     63a:	8f a1       	ldd	r24, Y+39	; 0x27
     63c:	98 a5       	ldd	r25, Y+40	; 0x28
     63e:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     642:	dc 01       	movw	r26, r24
     644:	cb 01       	movw	r24, r22
     646:	9a a7       	std	Y+42, r25	; 0x2a
     648:	89 a7       	std	Y+41, r24	; 0x29
     64a:	89 a5       	ldd	r24, Y+41	; 0x29
     64c:	9a a5       	ldd	r25, Y+42	; 0x2a
     64e:	9e a7       	std	Y+46, r25	; 0x2e
     650:	8d a7       	std	Y+45, r24	; 0x2d
     652:	8d a5       	ldd	r24, Y+45	; 0x2d
     654:	9e a5       	ldd	r25, Y+46	; 0x2e
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	f1 f7       	brne	.-4      	; 0x656 <__stack+0x1f7>
     65a:	9e a7       	std	Y+46, r25	; 0x2e
     65c:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(1); /*delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT=command;/* out the required command to the data bus D0--->D7*/
     65e:	85 e3       	ldi	r24, 0x35	; 53
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	29 ad       	ldd	r18, Y+57	; 0x39
     664:	fc 01       	movw	r30, r24
     666:	20 83       	st	Z, r18
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	a0 e8       	ldi	r26, 0x80	; 128
     66e:	bf e3       	ldi	r27, 0x3F	; 63
     670:	89 87       	std	Y+9, r24	; 0x09
     672:	9a 87       	std	Y+10, r25	; 0x0a
     674:	ab 87       	std	Y+11, r26	; 0x0b
     676:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	4a ef       	ldi	r20, 0xFA	; 250
     67e:	54 e4       	ldi	r21, 0x44	; 68
     680:	69 85       	ldd	r22, Y+9	; 0x09
     682:	7a 85       	ldd	r23, Y+10	; 0x0a
     684:	8b 85       	ldd	r24, Y+11	; 0x0b
     686:	9c 85       	ldd	r25, Y+12	; 0x0c
     688:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     68c:	dc 01       	movw	r26, r24
     68e:	cb 01       	movw	r24, r22
     690:	8b 8f       	std	Y+27, r24	; 0x1b
     692:	9c 8f       	std	Y+28, r25	; 0x1c
     694:	ad 8f       	std	Y+29, r26	; 0x1d
     696:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	40 e8       	ldi	r20, 0x80	; 128
     69e:	5f e3       	ldi	r21, 0x3F	; 63
     6a0:	6b 8d       	ldd	r22, Y+27	; 0x1b
     6a2:	7c 8d       	ldd	r23, Y+28	; 0x1c
     6a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     6a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     6a8:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__cmpsf2>
     6ac:	88 23       	and	r24, r24
     6ae:	2c f4       	brge	.+10     	; 0x6ba <__stack+0x25b>
		__ticks = 1;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	98 a3       	std	Y+32, r25	; 0x20
     6b6:	8f 8f       	std	Y+31, r24	; 0x1f
     6b8:	3f c0       	rjmp	.+126    	; 0x738 <__stack+0x2d9>
	else if (__tmp > 65535)
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	3f ef       	ldi	r19, 0xFF	; 255
     6be:	4f e7       	ldi	r20, 0x7F	; 127
     6c0:	57 e4       	ldi	r21, 0x47	; 71
     6c2:	6b 8d       	ldd	r22, Y+27	; 0x1b
     6c4:	7c 8d       	ldd	r23, Y+28	; 0x1c
     6c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     6c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     6ca:	0e 94 de 10 	call	0x21bc	; 0x21bc <__gesf2>
     6ce:	18 16       	cp	r1, r24
     6d0:	4c f5       	brge	.+82     	; 0x724 <__stack+0x2c5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e2       	ldi	r20, 0x20	; 32
     6d8:	51 e4       	ldi	r21, 0x41	; 65
     6da:	69 85       	ldd	r22, Y+9	; 0x09
     6dc:	7a 85       	ldd	r23, Y+10	; 0x0a
     6de:	8b 85       	ldd	r24, Y+11	; 0x0b
     6e0:	9c 85       	ldd	r25, Y+12	; 0x0c
     6e2:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     6e6:	dc 01       	movw	r26, r24
     6e8:	cb 01       	movw	r24, r22
     6ea:	bc 01       	movw	r22, r24
     6ec:	cd 01       	movw	r24, r26
     6ee:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     6f2:	dc 01       	movw	r26, r24
     6f4:	cb 01       	movw	r24, r22
     6f6:	98 a3       	std	Y+32, r25	; 0x20
     6f8:	8f 8f       	std	Y+31, r24	; 0x1f
     6fa:	0f c0       	rjmp	.+30     	; 0x71a <__stack+0x2bb>
     6fc:	88 ec       	ldi	r24, 0xC8	; 200
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	9a a3       	std	Y+34, r25	; 0x22
     702:	89 a3       	std	Y+33, r24	; 0x21
     704:	89 a1       	ldd	r24, Y+33	; 0x21
     706:	9a a1       	ldd	r25, Y+34	; 0x22
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <__stack+0x2a9>
     70c:	9a a3       	std	Y+34, r25	; 0x22
     70e:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     710:	8f 8d       	ldd	r24, Y+31	; 0x1f
     712:	98 a1       	ldd	r25, Y+32	; 0x20
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	98 a3       	std	Y+32, r25	; 0x20
     718:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     71a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     71c:	98 a1       	ldd	r25, Y+32	; 0x20
     71e:	89 2b       	or	r24, r25
     720:	69 f7       	brne	.-38     	; 0x6fc <__stack+0x29d>
     722:	14 c0       	rjmp	.+40     	; 0x74c <__stack+0x2ed>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     724:	6b 8d       	ldd	r22, Y+27	; 0x1b
     726:	7c 8d       	ldd	r23, Y+28	; 0x1c
     728:	8d 8d       	ldd	r24, Y+29	; 0x1d
     72a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     72c:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     730:	dc 01       	movw	r26, r24
     732:	cb 01       	movw	r24, r22
     734:	98 a3       	std	Y+32, r25	; 0x20
     736:	8f 8f       	std	Y+31, r24	; 0x1f
     738:	8f 8d       	ldd	r24, Y+31	; 0x1f
     73a:	98 a1       	ldd	r25, Y+32	; 0x20
     73c:	9c a3       	std	Y+36, r25	; 0x24
     73e:	8b a3       	std	Y+35, r24	; 0x23
     740:	8b a1       	ldd	r24, Y+35	; 0x23
     742:	9c a1       	ldd	r25, Y+36	; 0x24
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	f1 f7       	brne	.-4      	; 0x744 <__stack+0x2e5>
     748:	9c a3       	std	Y+36, r25	; 0x24
     74a:	8b a3       	std	Y+35, r24	; 0x23
	_delay_ms(1);/* delay for processing command setup time tdsw =60ns */
	CLEAR_BIT(LCD_CTRL_PORT,LCD_ENABLE); /* disable LCD so enable pin =0 */
     74c:	82 e3       	ldi	r24, 0x32	; 50
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	22 e3       	ldi	r18, 0x32	; 50
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	f9 01       	movw	r30, r18
     756:	20 81       	ld	r18, Z
     758:	2f 7b       	andi	r18, 0xBF	; 191
     75a:	fc 01       	movw	r30, r24
     75c:	20 83       	st	Z, r18
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	a0 e8       	ldi	r26, 0x80	; 128
     764:	bf e3       	ldi	r27, 0x3F	; 63
     766:	8d 87       	std	Y+13, r24	; 0x0d
     768:	9e 87       	std	Y+14, r25	; 0x0e
     76a:	af 87       	std	Y+15, r26	; 0x0f
     76c:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	4a ef       	ldi	r20, 0xFA	; 250
     774:	54 e4       	ldi	r21, 0x44	; 68
     776:	6d 85       	ldd	r22, Y+13	; 0x0d
     778:	7e 85       	ldd	r23, Y+14	; 0x0e
     77a:	8f 85       	ldd	r24, Y+15	; 0x0f
     77c:	98 89       	ldd	r25, Y+16	; 0x10
     77e:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     782:	dc 01       	movw	r26, r24
     784:	cb 01       	movw	r24, r22
     786:	89 8b       	std	Y+17, r24	; 0x11
     788:	9a 8b       	std	Y+18, r25	; 0x12
     78a:	ab 8b       	std	Y+19, r26	; 0x13
     78c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	40 e8       	ldi	r20, 0x80	; 128
     794:	5f e3       	ldi	r21, 0x3F	; 63
     796:	69 89       	ldd	r22, Y+17	; 0x11
     798:	7a 89       	ldd	r23, Y+18	; 0x12
     79a:	8b 89       	ldd	r24, Y+19	; 0x13
     79c:	9c 89       	ldd	r25, Y+20	; 0x14
     79e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__cmpsf2>
     7a2:	88 23       	and	r24, r24
     7a4:	2c f4       	brge	.+10     	; 0x7b0 <__stack+0x351>
		__ticks = 1;
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	9e 8b       	std	Y+22, r25	; 0x16
     7ac:	8d 8b       	std	Y+21, r24	; 0x15
     7ae:	3f c0       	rjmp	.+126    	; 0x82e <__stack+0x3cf>
	else if (__tmp > 65535)
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	3f ef       	ldi	r19, 0xFF	; 255
     7b4:	4f e7       	ldi	r20, 0x7F	; 127
     7b6:	57 e4       	ldi	r21, 0x47	; 71
     7b8:	69 89       	ldd	r22, Y+17	; 0x11
     7ba:	7a 89       	ldd	r23, Y+18	; 0x12
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	0e 94 de 10 	call	0x21bc	; 0x21bc <__gesf2>
     7c4:	18 16       	cp	r1, r24
     7c6:	4c f5       	brge	.+82     	; 0x81a <__stack+0x3bb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	40 e2       	ldi	r20, 0x20	; 32
     7ce:	51 e4       	ldi	r21, 0x41	; 65
     7d0:	6d 85       	ldd	r22, Y+13	; 0x0d
     7d2:	7e 85       	ldd	r23, Y+14	; 0x0e
     7d4:	8f 85       	ldd	r24, Y+15	; 0x0f
     7d6:	98 89       	ldd	r25, Y+16	; 0x10
     7d8:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     7dc:	dc 01       	movw	r26, r24
     7de:	cb 01       	movw	r24, r22
     7e0:	bc 01       	movw	r22, r24
     7e2:	cd 01       	movw	r24, r26
     7e4:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     7e8:	dc 01       	movw	r26, r24
     7ea:	cb 01       	movw	r24, r22
     7ec:	9e 8b       	std	Y+22, r25	; 0x16
     7ee:	8d 8b       	std	Y+21, r24	; 0x15
     7f0:	0f c0       	rjmp	.+30     	; 0x810 <__stack+0x3b1>
     7f2:	88 ec       	ldi	r24, 0xC8	; 200
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	98 8f       	std	Y+24, r25	; 0x18
     7f8:	8f 8b       	std	Y+23, r24	; 0x17
     7fa:	8f 89       	ldd	r24, Y+23	; 0x17
     7fc:	98 8d       	ldd	r25, Y+24	; 0x18
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <__stack+0x39f>
     802:	98 8f       	std	Y+24, r25	; 0x18
     804:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     806:	8d 89       	ldd	r24, Y+21	; 0x15
     808:	9e 89       	ldd	r25, Y+22	; 0x16
     80a:	01 97       	sbiw	r24, 0x01	; 1
     80c:	9e 8b       	std	Y+22, r25	; 0x16
     80e:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     810:	8d 89       	ldd	r24, Y+21	; 0x15
     812:	9e 89       	ldd	r25, Y+22	; 0x16
     814:	89 2b       	or	r24, r25
     816:	69 f7       	brne	.-38     	; 0x7f2 <__stack+0x393>
	_delay_ms(1); /* delay for processing hold time th=10ns */

}
     818:	14 c0       	rjmp	.+40     	; 0x842 <__stack+0x3e3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     81a:	69 89       	ldd	r22, Y+17	; 0x11
     81c:	7a 89       	ldd	r23, Y+18	; 0x12
     81e:	8b 89       	ldd	r24, Y+19	; 0x13
     820:	9c 89       	ldd	r25, Y+20	; 0x14
     822:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     826:	dc 01       	movw	r26, r24
     828:	cb 01       	movw	r24, r22
     82a:	9e 8b       	std	Y+22, r25	; 0x16
     82c:	8d 8b       	std	Y+21, r24	; 0x15
     82e:	8d 89       	ldd	r24, Y+21	; 0x15
     830:	9e 89       	ldd	r25, Y+22	; 0x16
     832:	9a 8f       	std	Y+26, r25	; 0x1a
     834:	89 8f       	std	Y+25, r24	; 0x19
     836:	89 8d       	ldd	r24, Y+25	; 0x19
     838:	9a 8d       	ldd	r25, Y+26	; 0x1a
     83a:	01 97       	sbiw	r24, 0x01	; 1
     83c:	f1 f7       	brne	.-4      	; 0x83a <__stack+0x3db>
     83e:	9a 8f       	std	Y+26, r25	; 0x1a
     840:	89 8f       	std	Y+25, r24	; 0x19
     842:	00 00       	nop
     844:	e9 96       	adiw	r28, 0x39	; 57
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data)
{
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
     862:	cb 56       	subi	r28, 0x6B	; 107
     864:	d1 09       	sbc	r29, r1
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	9e 01       	movw	r18, r28
     872:	25 59       	subi	r18, 0x95	; 149
     874:	3f 4f       	sbci	r19, 0xFF	; 255
     876:	f9 01       	movw	r30, r18
     878:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* data mode so RS =1*/
     87a:	82 e3       	ldi	r24, 0x32	; 50
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	22 e3       	ldi	r18, 0x32	; 50
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	f9 01       	movw	r30, r18
     884:	20 81       	ld	r18, Z
     886:	20 61       	ori	r18, 0x10	; 16
     888:	fc 01       	movw	r30, r24
     88a:	20 83       	st	Z, r18
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	a0 e8       	ldi	r26, 0x80	; 128
     892:	bf e3       	ldi	r27, 0x3F	; 63
     894:	89 83       	std	Y+1, r24	; 0x01
     896:	9a 83       	std	Y+2, r25	; 0x02
     898:	ab 83       	std	Y+3, r26	; 0x03
     89a:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     89c:	8e 01       	movw	r16, r28
     89e:	01 5b       	subi	r16, 0xB1	; 177
     8a0:	1f 4f       	sbci	r17, 0xFF	; 255
     8a2:	2b ea       	ldi	r18, 0xAB	; 171
     8a4:	3a ea       	ldi	r19, 0xAA	; 170
     8a6:	4a e2       	ldi	r20, 0x2A	; 42
     8a8:	50 e4       	ldi	r21, 0x40	; 64
     8aa:	69 81       	ldd	r22, Y+1	; 0x01
     8ac:	7a 81       	ldd	r23, Y+2	; 0x02
     8ae:	8b 81       	ldd	r24, Y+3	; 0x03
     8b0:	9c 81       	ldd	r25, Y+4	; 0x04
     8b2:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     8b6:	dc 01       	movw	r26, r24
     8b8:	cb 01       	movw	r24, r22
     8ba:	f8 01       	movw	r30, r16
     8bc:	80 83       	st	Z, r24
     8be:	91 83       	std	Z+1, r25	; 0x01
     8c0:	a2 83       	std	Z+2, r26	; 0x02
     8c2:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     8c4:	8e 01       	movw	r16, r28
     8c6:	0d 5a       	subi	r16, 0xAD	; 173
     8c8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ca:	89 81       	ldd	r24, Y+1	; 0x01
     8cc:	9a 81       	ldd	r25, Y+2	; 0x02
     8ce:	ab 81       	ldd	r26, Y+3	; 0x03
     8d0:	bc 81       	ldd	r27, Y+4	; 0x04
     8d2:	9c 01       	movw	r18, r24
     8d4:	ad 01       	movw	r20, r26
     8d6:	bc 01       	movw	r22, r24
     8d8:	cd 01       	movw	r24, r26
     8da:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__addsf3>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	f8 01       	movw	r30, r16
     8e4:	80 83       	st	Z, r24
     8e6:	91 83       	std	Z+1, r25	; 0x01
     8e8:	a2 83       	std	Z+2, r26	; 0x02
     8ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     8ec:	ce 01       	movw	r24, r28
     8ee:	81 5b       	subi	r24, 0xB1	; 177
     8f0:	9f 4f       	sbci	r25, 0xFF	; 255
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	40 e8       	ldi	r20, 0x80	; 128
     8f8:	5f e3       	ldi	r21, 0x3F	; 63
     8fa:	fc 01       	movw	r30, r24
     8fc:	60 81       	ld	r22, Z
     8fe:	71 81       	ldd	r23, Z+1	; 0x01
     900:	82 81       	ldd	r24, Z+2	; 0x02
     902:	93 81       	ldd	r25, Z+3	; 0x03
     904:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__cmpsf2>
     908:	88 23       	and	r24, r24
     90a:	3c f4       	brge	.+14     	; 0x91a <LCD_displayCharacter+0xc4>
		__ticks = 1;
     90c:	ce 01       	movw	r24, r28
     90e:	89 5a       	subi	r24, 0xA9	; 169
     910:	9f 4f       	sbci	r25, 0xFF	; 255
     912:	21 e0       	ldi	r18, 0x01	; 1
     914:	fc 01       	movw	r30, r24
     916:	20 83       	st	Z, r18
     918:	2c c1       	rjmp	.+600    	; 0xb72 <LCD_displayCharacter+0x31c>
	else if (__tmp2 > 65535)
     91a:	ce 01       	movw	r24, r28
     91c:	8d 5a       	subi	r24, 0xAD	; 173
     91e:	9f 4f       	sbci	r25, 0xFF	; 255
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	3f ef       	ldi	r19, 0xFF	; 255
     924:	4f e7       	ldi	r20, 0x7F	; 127
     926:	57 e4       	ldi	r21, 0x47	; 71
     928:	fc 01       	movw	r30, r24
     92a:	60 81       	ld	r22, Z
     92c:	71 81       	ldd	r23, Z+1	; 0x01
     92e:	82 81       	ldd	r24, Z+2	; 0x02
     930:	93 81       	ldd	r25, Z+3	; 0x03
     932:	0e 94 de 10 	call	0x21bc	; 0x21bc <__gesf2>
     936:	18 16       	cp	r1, r24
     938:	0c f0       	brlt	.+2      	; 0x93c <LCD_displayCharacter+0xe6>
     93a:	cd c0       	rjmp	.+410    	; 0xad6 <LCD_displayCharacter+0x280>
	{
		_delay_ms(__us / 1000.0);
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	4a e7       	ldi	r20, 0x7A	; 122
     942:	54 e4       	ldi	r21, 0x44	; 68
     944:	69 81       	ldd	r22, Y+1	; 0x01
     946:	7a 81       	ldd	r23, Y+2	; 0x02
     948:	8b 81       	ldd	r24, Y+3	; 0x03
     94a:	9c 81       	ldd	r25, Y+4	; 0x04
     94c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__divsf3>
     950:	dc 01       	movw	r26, r24
     952:	cb 01       	movw	r24, r22
     954:	9e 01       	movw	r18, r28
     956:	28 5a       	subi	r18, 0xA8	; 168
     958:	3f 4f       	sbci	r19, 0xFF	; 255
     95a:	f9 01       	movw	r30, r18
     95c:	80 83       	st	Z, r24
     95e:	91 83       	std	Z+1, r25	; 0x01
     960:	a2 83       	std	Z+2, r26	; 0x02
     962:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     964:	8e 01       	movw	r16, r28
     966:	04 5a       	subi	r16, 0xA4	; 164
     968:	1f 4f       	sbci	r17, 0xFF	; 255
     96a:	ce 01       	movw	r24, r28
     96c:	88 5a       	subi	r24, 0xA8	; 168
     96e:	9f 4f       	sbci	r25, 0xFF	; 255
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	4a ef       	ldi	r20, 0xFA	; 250
     976:	54 e4       	ldi	r21, 0x44	; 68
     978:	fc 01       	movw	r30, r24
     97a:	60 81       	ld	r22, Z
     97c:	71 81       	ldd	r23, Z+1	; 0x01
     97e:	82 81       	ldd	r24, Z+2	; 0x02
     980:	93 81       	ldd	r25, Z+3	; 0x03
     982:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	f8 01       	movw	r30, r16
     98c:	80 83       	st	Z, r24
     98e:	91 83       	std	Z+1, r25	; 0x01
     990:	a2 83       	std	Z+2, r26	; 0x02
     992:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     994:	ce 01       	movw	r24, r28
     996:	84 5a       	subi	r24, 0xA4	; 164
     998:	9f 4f       	sbci	r25, 0xFF	; 255
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e8       	ldi	r20, 0x80	; 128
     9a0:	5f e3       	ldi	r21, 0x3F	; 63
     9a2:	fc 01       	movw	r30, r24
     9a4:	60 81       	ld	r22, Z
     9a6:	71 81       	ldd	r23, Z+1	; 0x01
     9a8:	82 81       	ldd	r24, Z+2	; 0x02
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__cmpsf2>
     9b0:	88 23       	and	r24, r24
     9b2:	4c f4       	brge	.+18     	; 0x9c6 <LCD_displayCharacter+0x170>
		__ticks = 1;
     9b4:	ce 01       	movw	r24, r28
     9b6:	80 5a       	subi	r24, 0xA0	; 160
     9b8:	9f 4f       	sbci	r25, 0xFF	; 255
     9ba:	21 e0       	ldi	r18, 0x01	; 1
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	fc 01       	movw	r30, r24
     9c0:	31 83       	std	Z+1, r19	; 0x01
     9c2:	20 83       	st	Z, r18
     9c4:	6d c0       	rjmp	.+218    	; 0xaa0 <LCD_displayCharacter+0x24a>
	else if (__tmp > 65535)
     9c6:	ce 01       	movw	r24, r28
     9c8:	84 5a       	subi	r24, 0xA4	; 164
     9ca:	9f 4f       	sbci	r25, 0xFF	; 255
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	3f ef       	ldi	r19, 0xFF	; 255
     9d0:	4f e7       	ldi	r20, 0x7F	; 127
     9d2:	57 e4       	ldi	r21, 0x47	; 71
     9d4:	fc 01       	movw	r30, r24
     9d6:	60 81       	ld	r22, Z
     9d8:	71 81       	ldd	r23, Z+1	; 0x01
     9da:	82 81       	ldd	r24, Z+2	; 0x02
     9dc:	93 81       	ldd	r25, Z+3	; 0x03
     9de:	0e 94 de 10 	call	0x21bc	; 0x21bc <__gesf2>
     9e2:	18 16       	cp	r1, r24
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <LCD_displayCharacter+0x192>
     9e6:	4a c0       	rjmp	.+148    	; 0xa7c <LCD_displayCharacter+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9e8:	ce 01       	movw	r24, r28
     9ea:	88 5a       	subi	r24, 0xA8	; 168
     9ec:	9f 4f       	sbci	r25, 0xFF	; 255
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	40 e2       	ldi	r20, 0x20	; 32
     9f4:	51 e4       	ldi	r21, 0x41	; 65
     9f6:	fc 01       	movw	r30, r24
     9f8:	60 81       	ld	r22, Z
     9fa:	71 81       	ldd	r23, Z+1	; 0x01
     9fc:	82 81       	ldd	r24, Z+2	; 0x02
     9fe:	93 81       	ldd	r25, Z+3	; 0x03
     a00:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     a04:	dc 01       	movw	r26, r24
     a06:	cb 01       	movw	r24, r22
     a08:	8e 01       	movw	r16, r28
     a0a:	00 5a       	subi	r16, 0xA0	; 160
     a0c:	1f 4f       	sbci	r17, 0xFF	; 255
     a0e:	bc 01       	movw	r22, r24
     a10:	cd 01       	movw	r24, r26
     a12:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     a16:	dc 01       	movw	r26, r24
     a18:	cb 01       	movw	r24, r22
     a1a:	f8 01       	movw	r30, r16
     a1c:	91 83       	std	Z+1, r25	; 0x01
     a1e:	80 83       	st	Z, r24
     a20:	24 c0       	rjmp	.+72     	; 0xa6a <LCD_displayCharacter+0x214>
     a22:	ce 01       	movw	r24, r28
     a24:	8e 59       	subi	r24, 0x9E	; 158
     a26:	9f 4f       	sbci	r25, 0xFF	; 255
     a28:	28 ec       	ldi	r18, 0xC8	; 200
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	fc 01       	movw	r30, r24
     a2e:	31 83       	std	Z+1, r19	; 0x01
     a30:	20 83       	st	Z, r18
     a32:	ce 01       	movw	r24, r28
     a34:	8e 59       	subi	r24, 0x9E	; 158
     a36:	9f 4f       	sbci	r25, 0xFF	; 255
     a38:	fc 01       	movw	r30, r24
     a3a:	80 81       	ld	r24, Z
     a3c:	91 81       	ldd	r25, Z+1	; 0x01
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	f1 f7       	brne	.-4      	; 0xa3e <LCD_displayCharacter+0x1e8>
     a42:	9e 01       	movw	r18, r28
     a44:	2e 59       	subi	r18, 0x9E	; 158
     a46:	3f 4f       	sbci	r19, 0xFF	; 255
     a48:	f9 01       	movw	r30, r18
     a4a:	91 83       	std	Z+1, r25	; 0x01
     a4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a4e:	ce 01       	movw	r24, r28
     a50:	80 5a       	subi	r24, 0xA0	; 160
     a52:	9f 4f       	sbci	r25, 0xFF	; 255
     a54:	9e 01       	movw	r18, r28
     a56:	20 5a       	subi	r18, 0xA0	; 160
     a58:	3f 4f       	sbci	r19, 0xFF	; 255
     a5a:	f9 01       	movw	r30, r18
     a5c:	20 81       	ld	r18, Z
     a5e:	31 81       	ldd	r19, Z+1	; 0x01
     a60:	21 50       	subi	r18, 0x01	; 1
     a62:	31 09       	sbc	r19, r1
     a64:	fc 01       	movw	r30, r24
     a66:	31 83       	std	Z+1, r19	; 0x01
     a68:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a6a:	ce 01       	movw	r24, r28
     a6c:	80 5a       	subi	r24, 0xA0	; 160
     a6e:	9f 4f       	sbci	r25, 0xFF	; 255
     a70:	fc 01       	movw	r30, r24
     a72:	80 81       	ld	r24, Z
     a74:	91 81       	ldd	r25, Z+1	; 0x01
     a76:	89 2b       	or	r24, r25
     a78:	a1 f6       	brne	.-88     	; 0xa22 <LCD_displayCharacter+0x1cc>
     a7a:	7b c0       	rjmp	.+246    	; 0xb72 <LCD_displayCharacter+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a7c:	8e 01       	movw	r16, r28
     a7e:	00 5a       	subi	r16, 0xA0	; 160
     a80:	1f 4f       	sbci	r17, 0xFF	; 255
     a82:	ce 01       	movw	r24, r28
     a84:	84 5a       	subi	r24, 0xA4	; 164
     a86:	9f 4f       	sbci	r25, 0xFF	; 255
     a88:	fc 01       	movw	r30, r24
     a8a:	60 81       	ld	r22, Z
     a8c:	71 81       	ldd	r23, Z+1	; 0x01
     a8e:	82 81       	ldd	r24, Z+2	; 0x02
     a90:	93 81       	ldd	r25, Z+3	; 0x03
     a92:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     a96:	dc 01       	movw	r26, r24
     a98:	cb 01       	movw	r24, r22
     a9a:	f8 01       	movw	r30, r16
     a9c:	91 83       	std	Z+1, r25	; 0x01
     a9e:	80 83       	st	Z, r24
     aa0:	ce 01       	movw	r24, r28
     aa2:	8c 59       	subi	r24, 0x9C	; 156
     aa4:	9f 4f       	sbci	r25, 0xFF	; 255
     aa6:	9e 01       	movw	r18, r28
     aa8:	20 5a       	subi	r18, 0xA0	; 160
     aaa:	3f 4f       	sbci	r19, 0xFF	; 255
     aac:	f9 01       	movw	r30, r18
     aae:	20 81       	ld	r18, Z
     ab0:	31 81       	ldd	r19, Z+1	; 0x01
     ab2:	fc 01       	movw	r30, r24
     ab4:	31 83       	std	Z+1, r19	; 0x01
     ab6:	20 83       	st	Z, r18
     ab8:	ce 01       	movw	r24, r28
     aba:	8c 59       	subi	r24, 0x9C	; 156
     abc:	9f 4f       	sbci	r25, 0xFF	; 255
     abe:	fc 01       	movw	r30, r24
     ac0:	80 81       	ld	r24, Z
     ac2:	91 81       	ldd	r25, Z+1	; 0x01
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	f1 f7       	brne	.-4      	; 0xac4 <LCD_displayCharacter+0x26e>
     ac8:	9e 01       	movw	r18, r28
     aca:	2c 59       	subi	r18, 0x9C	; 156
     acc:	3f 4f       	sbci	r19, 0xFF	; 255
     ace:	f9 01       	movw	r30, r18
     ad0:	91 83       	std	Z+1, r25	; 0x01
     ad2:	80 83       	st	Z, r24
     ad4:	4e c0       	rjmp	.+156    	; 0xb72 <LCD_displayCharacter+0x31c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     ad6:	ce 01       	movw	r24, r28
     ad8:	81 5b       	subi	r24, 0xB1	; 177
     ada:	9f 4f       	sbci	r25, 0xFF	; 255
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	4f e7       	ldi	r20, 0x7F	; 127
     ae2:	53 e4       	ldi	r21, 0x43	; 67
     ae4:	fc 01       	movw	r30, r24
     ae6:	60 81       	ld	r22, Z
     ae8:	71 81       	ldd	r23, Z+1	; 0x01
     aea:	82 81       	ldd	r24, Z+2	; 0x02
     aec:	93 81       	ldd	r25, Z+3	; 0x03
     aee:	0e 94 de 10 	call	0x21bc	; 0x21bc <__gesf2>
     af2:	18 16       	cp	r1, r24
     af4:	6c f5       	brge	.+90     	; 0xb50 <LCD_displayCharacter+0x2fa>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     af6:	8e 01       	movw	r16, r28
     af8:	0a 59       	subi	r16, 0x9A	; 154
     afa:	1f 4f       	sbci	r17, 0xFF	; 255
     afc:	ce 01       	movw	r24, r28
     afe:	8d 5a       	subi	r24, 0xAD	; 173
     b00:	9f 4f       	sbci	r25, 0xFF	; 255
     b02:	fc 01       	movw	r30, r24
     b04:	60 81       	ld	r22, Z
     b06:	71 81       	ldd	r23, Z+1	; 0x01
     b08:	82 81       	ldd	r24, Z+2	; 0x02
     b0a:	93 81       	ldd	r25, Z+3	; 0x03
     b0c:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     b10:	dc 01       	movw	r26, r24
     b12:	cb 01       	movw	r24, r22
     b14:	f8 01       	movw	r30, r16
     b16:	91 83       	std	Z+1, r25	; 0x01
     b18:	80 83       	st	Z, r24
     b1a:	ce 01       	movw	r24, r28
     b1c:	88 59       	subi	r24, 0x98	; 152
     b1e:	9f 4f       	sbci	r25, 0xFF	; 255
     b20:	9e 01       	movw	r18, r28
     b22:	2a 59       	subi	r18, 0x9A	; 154
     b24:	3f 4f       	sbci	r19, 0xFF	; 255
     b26:	f9 01       	movw	r30, r18
     b28:	20 81       	ld	r18, Z
     b2a:	31 81       	ldd	r19, Z+1	; 0x01
     b2c:	fc 01       	movw	r30, r24
     b2e:	31 83       	std	Z+1, r19	; 0x01
     b30:	20 83       	st	Z, r18
     b32:	ce 01       	movw	r24, r28
     b34:	88 59       	subi	r24, 0x98	; 152
     b36:	9f 4f       	sbci	r25, 0xFF	; 255
     b38:	fc 01       	movw	r30, r24
     b3a:	80 81       	ld	r24, Z
     b3c:	91 81       	ldd	r25, Z+1	; 0x01
     b3e:	01 97       	sbiw	r24, 0x01	; 1
     b40:	f1 f7       	brne	.-4      	; 0xb3e <LCD_displayCharacter+0x2e8>
     b42:	9e 01       	movw	r18, r28
     b44:	28 59       	subi	r18, 0x98	; 152
     b46:	3f 4f       	sbci	r19, 0xFF	; 255
     b48:	f9 01       	movw	r30, r18
     b4a:	91 83       	std	Z+1, r25	; 0x01
     b4c:	80 83       	st	Z, r24
     b4e:	28 c0       	rjmp	.+80     	; 0xba0 <LCD_displayCharacter+0x34a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     b50:	8e 01       	movw	r16, r28
     b52:	09 5a       	subi	r16, 0xA9	; 169
     b54:	1f 4f       	sbci	r17, 0xFF	; 255
     b56:	ce 01       	movw	r24, r28
     b58:	81 5b       	subi	r24, 0xB1	; 177
     b5a:	9f 4f       	sbci	r25, 0xFF	; 255
     b5c:	fc 01       	movw	r30, r24
     b5e:	60 81       	ld	r22, Z
     b60:	71 81       	ldd	r23, Z+1	; 0x01
     b62:	82 81       	ldd	r24, Z+2	; 0x02
     b64:	93 81       	ldd	r25, Z+3	; 0x03
     b66:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     b6a:	dc 01       	movw	r26, r24
     b6c:	cb 01       	movw	r24, r22
     b6e:	f8 01       	movw	r30, r16
     b70:	80 83       	st	Z, r24
     b72:	ce 01       	movw	r24, r28
     b74:	86 59       	subi	r24, 0x96	; 150
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	9e 01       	movw	r18, r28
     b7a:	29 5a       	subi	r18, 0xA9	; 169
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	f9 01       	movw	r30, r18
     b80:	20 81       	ld	r18, Z
     b82:	fc 01       	movw	r30, r24
     b84:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b86:	ce 01       	movw	r24, r28
     b88:	86 59       	subi	r24, 0x96	; 150
     b8a:	9f 4f       	sbci	r25, 0xFF	; 255
     b8c:	fc 01       	movw	r30, r24
     b8e:	80 81       	ld	r24, Z
     b90:	28 2f       	mov	r18, r24
     b92:	2a 95       	dec	r18
     b94:	f1 f7       	brne	.-4      	; 0xb92 <LCD_displayCharacter+0x33c>
     b96:	ce 01       	movw	r24, r28
     b98:	86 59       	subi	r24, 0x96	; 150
     b9a:	9f 4f       	sbci	r25, 0xFF	; 255
     b9c:	fc 01       	movw	r30, r24
     b9e:	20 83       	st	Z, r18
	_delay_us(1);/*delay processing RS set time tas=40ns */
	CLEAR_BIT(LCD_CTRL_PORT,READWRITE); /*write data to LCD so READWRITE =0 */
     ba0:	82 e3       	ldi	r24, 0x32	; 50
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	22 e3       	ldi	r18, 0x32	; 50
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	f9 01       	movw	r30, r18
     baa:	20 81       	ld	r18, Z
     bac:	2f 7d       	andi	r18, 0xDF	; 223
     bae:	fc 01       	movw	r30, r24
     bb0:	20 83       	st	Z, r18
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e8       	ldi	r26, 0x80	; 128
     bb8:	bf e3       	ldi	r27, 0x3F	; 63
     bba:	8d 83       	std	Y+5, r24	; 0x05
     bbc:	9e 83       	std	Y+6, r25	; 0x06
     bbe:	af 83       	std	Y+7, r26	; 0x07
     bc0:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     bc2:	2b ea       	ldi	r18, 0xAB	; 171
     bc4:	3a ea       	ldi	r19, 0xAA	; 170
     bc6:	4a e2       	ldi	r20, 0x2A	; 42
     bc8:	50 e4       	ldi	r21, 0x40	; 64
     bca:	6d 81       	ldd	r22, Y+5	; 0x05
     bcc:	7e 81       	ldd	r23, Y+6	; 0x06
     bce:	8f 81       	ldd	r24, Y+7	; 0x07
     bd0:	98 85       	ldd	r25, Y+8	; 0x08
     bd2:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     bd6:	dc 01       	movw	r26, r24
     bd8:	cb 01       	movw	r24, r22
     bda:	8b ab       	std	Y+51, r24	; 0x33
     bdc:	9c ab       	std	Y+52, r25	; 0x34
     bde:	ad ab       	std	Y+53, r26	; 0x35
     be0:	be ab       	std	Y+54, r27	; 0x36
	__tmp2 = ((F_CPU) / 4e6) * __us;
     be2:	8d 81       	ldd	r24, Y+5	; 0x05
     be4:	9e 81       	ldd	r25, Y+6	; 0x06
     be6:	af 81       	ldd	r26, Y+7	; 0x07
     be8:	b8 85       	ldd	r27, Y+8	; 0x08
     bea:	9c 01       	movw	r18, r24
     bec:	ad 01       	movw	r20, r26
     bee:	bc 01       	movw	r22, r24
     bf0:	cd 01       	movw	r24, r26
     bf2:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__addsf3>
     bf6:	dc 01       	movw	r26, r24
     bf8:	cb 01       	movw	r24, r22
     bfa:	8f ab       	std	Y+55, r24	; 0x37
     bfc:	98 af       	std	Y+56, r25	; 0x38
     bfe:	a9 af       	std	Y+57, r26	; 0x39
     c00:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e8       	ldi	r20, 0x80	; 128
     c08:	5f e3       	ldi	r21, 0x3F	; 63
     c0a:	6b a9       	ldd	r22, Y+51	; 0x33
     c0c:	7c a9       	ldd	r23, Y+52	; 0x34
     c0e:	8d a9       	ldd	r24, Y+53	; 0x35
     c10:	9e a9       	ldd	r25, Y+54	; 0x36
     c12:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__cmpsf2>
     c16:	88 23       	and	r24, r24
     c18:	1c f4       	brge	.+6      	; 0xc20 <LCD_displayCharacter+0x3ca>
		__ticks = 1;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	8b af       	std	Y+59, r24	; 0x3b
     c1e:	0c c1       	rjmp	.+536    	; 0xe38 <LCD_displayCharacter+0x5e2>
	else if (__tmp2 > 65535)
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	3f ef       	ldi	r19, 0xFF	; 255
     c24:	4f e7       	ldi	r20, 0x7F	; 127
     c26:	57 e4       	ldi	r21, 0x47	; 71
     c28:	6f a9       	ldd	r22, Y+55	; 0x37
     c2a:	78 ad       	ldd	r23, Y+56	; 0x38
     c2c:	89 ad       	ldd	r24, Y+57	; 0x39
     c2e:	9a ad       	ldd	r25, Y+58	; 0x3a
     c30:	0e 94 de 10 	call	0x21bc	; 0x21bc <__gesf2>
     c34:	18 16       	cp	r1, r24
     c36:	0c f0       	brlt	.+2      	; 0xc3a <LCD_displayCharacter+0x3e4>
     c38:	c1 c0       	rjmp	.+386    	; 0xdbc <LCD_displayCharacter+0x566>
	{
		_delay_ms(__us / 1000.0);
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	4a e7       	ldi	r20, 0x7A	; 122
     c40:	54 e4       	ldi	r21, 0x44	; 68
     c42:	6d 81       	ldd	r22, Y+5	; 0x05
     c44:	7e 81       	ldd	r23, Y+6	; 0x06
     c46:	8f 81       	ldd	r24, Y+7	; 0x07
     c48:	98 85       	ldd	r25, Y+8	; 0x08
     c4a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <__divsf3>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	8c af       	std	Y+60, r24	; 0x3c
     c54:	9d af       	std	Y+61, r25	; 0x3d
     c56:	ae af       	std	Y+62, r26	; 0x3e
     c58:	bf af       	std	Y+63, r27	; 0x3f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c5a:	8e 01       	movw	r16, r28
     c5c:	00 5c       	subi	r16, 0xC0	; 192
     c5e:	1f 4f       	sbci	r17, 0xFF	; 255
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	4a ef       	ldi	r20, 0xFA	; 250
     c66:	54 e4       	ldi	r21, 0x44	; 68
     c68:	6c ad       	ldd	r22, Y+60	; 0x3c
     c6a:	7d ad       	ldd	r23, Y+61	; 0x3d
     c6c:	8e ad       	ldd	r24, Y+62	; 0x3e
     c6e:	9f ad       	ldd	r25, Y+63	; 0x3f
     c70:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	f8 01       	movw	r30, r16
     c7a:	80 83       	st	Z, r24
     c7c:	91 83       	std	Z+1, r25	; 0x01
     c7e:	a2 83       	std	Z+2, r26	; 0x02
     c80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c82:	ce 01       	movw	r24, r28
     c84:	80 5c       	subi	r24, 0xC0	; 192
     c86:	9f 4f       	sbci	r25, 0xFF	; 255
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	40 e8       	ldi	r20, 0x80	; 128
     c8e:	5f e3       	ldi	r21, 0x3F	; 63
     c90:	fc 01       	movw	r30, r24
     c92:	60 81       	ld	r22, Z
     c94:	71 81       	ldd	r23, Z+1	; 0x01
     c96:	82 81       	ldd	r24, Z+2	; 0x02
     c98:	93 81       	ldd	r25, Z+3	; 0x03
     c9a:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__cmpsf2>
     c9e:	88 23       	and	r24, r24
     ca0:	4c f4       	brge	.+18     	; 0xcb4 <LCD_displayCharacter+0x45e>
		__ticks = 1;
     ca2:	ce 01       	movw	r24, r28
     ca4:	8c 5b       	subi	r24, 0xBC	; 188
     ca6:	9f 4f       	sbci	r25, 0xFF	; 255
     ca8:	21 e0       	ldi	r18, 0x01	; 1
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	fc 01       	movw	r30, r24
     cae:	31 83       	std	Z+1, r19	; 0x01
     cb0:	20 83       	st	Z, r18
     cb2:	69 c0       	rjmp	.+210    	; 0xd86 <LCD_displayCharacter+0x530>
	else if (__tmp > 65535)
     cb4:	ce 01       	movw	r24, r28
     cb6:	80 5c       	subi	r24, 0xC0	; 192
     cb8:	9f 4f       	sbci	r25, 0xFF	; 255
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	3f ef       	ldi	r19, 0xFF	; 255
     cbe:	4f e7       	ldi	r20, 0x7F	; 127
     cc0:	57 e4       	ldi	r21, 0x47	; 71
     cc2:	fc 01       	movw	r30, r24
     cc4:	60 81       	ld	r22, Z
     cc6:	71 81       	ldd	r23, Z+1	; 0x01
     cc8:	82 81       	ldd	r24, Z+2	; 0x02
     cca:	93 81       	ldd	r25, Z+3	; 0x03
     ccc:	0e 94 de 10 	call	0x21bc	; 0x21bc <__gesf2>
     cd0:	18 16       	cp	r1, r24
     cd2:	0c f0       	brlt	.+2      	; 0xcd6 <LCD_displayCharacter+0x480>
     cd4:	46 c0       	rjmp	.+140    	; 0xd62 <LCD_displayCharacter+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 e2       	ldi	r20, 0x20	; 32
     cdc:	51 e4       	ldi	r21, 0x41	; 65
     cde:	6c ad       	ldd	r22, Y+60	; 0x3c
     ce0:	7d ad       	ldd	r23, Y+61	; 0x3d
     ce2:	8e ad       	ldd	r24, Y+62	; 0x3e
     ce4:	9f ad       	ldd	r25, Y+63	; 0x3f
     ce6:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	8e 01       	movw	r16, r28
     cf0:	0c 5b       	subi	r16, 0xBC	; 188
     cf2:	1f 4f       	sbci	r17, 0xFF	; 255
     cf4:	bc 01       	movw	r22, r24
     cf6:	cd 01       	movw	r24, r26
     cf8:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	f8 01       	movw	r30, r16
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	80 83       	st	Z, r24
     d06:	24 c0       	rjmp	.+72     	; 0xd50 <LCD_displayCharacter+0x4fa>
     d08:	ce 01       	movw	r24, r28
     d0a:	8a 5b       	subi	r24, 0xBA	; 186
     d0c:	9f 4f       	sbci	r25, 0xFF	; 255
     d0e:	28 ec       	ldi	r18, 0xC8	; 200
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	fc 01       	movw	r30, r24
     d14:	31 83       	std	Z+1, r19	; 0x01
     d16:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d18:	ce 01       	movw	r24, r28
     d1a:	8a 5b       	subi	r24, 0xBA	; 186
     d1c:	9f 4f       	sbci	r25, 0xFF	; 255
     d1e:	fc 01       	movw	r30, r24
     d20:	80 81       	ld	r24, Z
     d22:	91 81       	ldd	r25, Z+1	; 0x01
     d24:	01 97       	sbiw	r24, 0x01	; 1
     d26:	f1 f7       	brne	.-4      	; 0xd24 <LCD_displayCharacter+0x4ce>
     d28:	9e 01       	movw	r18, r28
     d2a:	2a 5b       	subi	r18, 0xBA	; 186
     d2c:	3f 4f       	sbci	r19, 0xFF	; 255
     d2e:	f9 01       	movw	r30, r18
     d30:	91 83       	std	Z+1, r25	; 0x01
     d32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d34:	ce 01       	movw	r24, r28
     d36:	8c 5b       	subi	r24, 0xBC	; 188
     d38:	9f 4f       	sbci	r25, 0xFF	; 255
     d3a:	9e 01       	movw	r18, r28
     d3c:	2c 5b       	subi	r18, 0xBC	; 188
     d3e:	3f 4f       	sbci	r19, 0xFF	; 255
     d40:	f9 01       	movw	r30, r18
     d42:	20 81       	ld	r18, Z
     d44:	31 81       	ldd	r19, Z+1	; 0x01
     d46:	21 50       	subi	r18, 0x01	; 1
     d48:	31 09       	sbc	r19, r1
     d4a:	fc 01       	movw	r30, r24
     d4c:	31 83       	std	Z+1, r19	; 0x01
     d4e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d50:	ce 01       	movw	r24, r28
     d52:	8c 5b       	subi	r24, 0xBC	; 188
     d54:	9f 4f       	sbci	r25, 0xFF	; 255
     d56:	fc 01       	movw	r30, r24
     d58:	80 81       	ld	r24, Z
     d5a:	91 81       	ldd	r25, Z+1	; 0x01
     d5c:	89 2b       	or	r24, r25
     d5e:	a1 f6       	brne	.-88     	; 0xd08 <LCD_displayCharacter+0x4b2>
     d60:	6b c0       	rjmp	.+214    	; 0xe38 <LCD_displayCharacter+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d62:	8e 01       	movw	r16, r28
     d64:	0c 5b       	subi	r16, 0xBC	; 188
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
     d68:	ce 01       	movw	r24, r28
     d6a:	80 5c       	subi	r24, 0xC0	; 192
     d6c:	9f 4f       	sbci	r25, 0xFF	; 255
     d6e:	fc 01       	movw	r30, r24
     d70:	60 81       	ld	r22, Z
     d72:	71 81       	ldd	r23, Z+1	; 0x01
     d74:	82 81       	ldd	r24, Z+2	; 0x02
     d76:	93 81       	ldd	r25, Z+3	; 0x03
     d78:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	f8 01       	movw	r30, r16
     d82:	91 83       	std	Z+1, r25	; 0x01
     d84:	80 83       	st	Z, r24
     d86:	ce 01       	movw	r24, r28
     d88:	88 5b       	subi	r24, 0xB8	; 184
     d8a:	9f 4f       	sbci	r25, 0xFF	; 255
     d8c:	9e 01       	movw	r18, r28
     d8e:	2c 5b       	subi	r18, 0xBC	; 188
     d90:	3f 4f       	sbci	r19, 0xFF	; 255
     d92:	f9 01       	movw	r30, r18
     d94:	20 81       	ld	r18, Z
     d96:	31 81       	ldd	r19, Z+1	; 0x01
     d98:	fc 01       	movw	r30, r24
     d9a:	31 83       	std	Z+1, r19	; 0x01
     d9c:	20 83       	st	Z, r18
     d9e:	ce 01       	movw	r24, r28
     da0:	88 5b       	subi	r24, 0xB8	; 184
     da2:	9f 4f       	sbci	r25, 0xFF	; 255
     da4:	fc 01       	movw	r30, r24
     da6:	80 81       	ld	r24, Z
     da8:	91 81       	ldd	r25, Z+1	; 0x01
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <LCD_displayCharacter+0x554>
     dae:	9e 01       	movw	r18, r28
     db0:	28 5b       	subi	r18, 0xB8	; 184
     db2:	3f 4f       	sbci	r19, 0xFF	; 255
     db4:	f9 01       	movw	r30, r18
     db6:	91 83       	std	Z+1, r25	; 0x01
     db8:	80 83       	st	Z, r24
     dba:	3e c0       	rjmp	.+124    	; 0xe38 <LCD_displayCharacter+0x5e2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	4f e7       	ldi	r20, 0x7F	; 127
     dc2:	53 e4       	ldi	r21, 0x43	; 67
     dc4:	6b a9       	ldd	r22, Y+51	; 0x33
     dc6:	7c a9       	ldd	r23, Y+52	; 0x34
     dc8:	8d a9       	ldd	r24, Y+53	; 0x35
     dca:	9e a9       	ldd	r25, Y+54	; 0x36
     dcc:	0e 94 de 10 	call	0x21bc	; 0x21bc <__gesf2>
     dd0:	18 16       	cp	r1, r24
     dd2:	4c f5       	brge	.+82     	; 0xe26 <LCD_displayCharacter+0x5d0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     dd4:	8e 01       	movw	r16, r28
     dd6:	06 5b       	subi	r16, 0xB6	; 182
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	6f a9       	ldd	r22, Y+55	; 0x37
     ddc:	78 ad       	ldd	r23, Y+56	; 0x38
     dde:	89 ad       	ldd	r24, Y+57	; 0x39
     de0:	9a ad       	ldd	r25, Y+58	; 0x3a
     de2:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	f8 01       	movw	r30, r16
     dec:	91 83       	std	Z+1, r25	; 0x01
     dee:	80 83       	st	Z, r24
     df0:	ce 01       	movw	r24, r28
     df2:	84 5b       	subi	r24, 0xB4	; 180
     df4:	9f 4f       	sbci	r25, 0xFF	; 255
     df6:	9e 01       	movw	r18, r28
     df8:	26 5b       	subi	r18, 0xB6	; 182
     dfa:	3f 4f       	sbci	r19, 0xFF	; 255
     dfc:	f9 01       	movw	r30, r18
     dfe:	20 81       	ld	r18, Z
     e00:	31 81       	ldd	r19, Z+1	; 0x01
     e02:	fc 01       	movw	r30, r24
     e04:	31 83       	std	Z+1, r19	; 0x01
     e06:	20 83       	st	Z, r18
     e08:	ce 01       	movw	r24, r28
     e0a:	84 5b       	subi	r24, 0xB4	; 180
     e0c:	9f 4f       	sbci	r25, 0xFF	; 255
     e0e:	fc 01       	movw	r30, r24
     e10:	80 81       	ld	r24, Z
     e12:	91 81       	ldd	r25, Z+1	; 0x01
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	f1 f7       	brne	.-4      	; 0xe14 <LCD_displayCharacter+0x5be>
     e18:	9e 01       	movw	r18, r28
     e1a:	24 5b       	subi	r18, 0xB4	; 180
     e1c:	3f 4f       	sbci	r19, 0xFF	; 255
     e1e:	f9 01       	movw	r30, r18
     e20:	91 83       	std	Z+1, r25	; 0x01
     e22:	80 83       	st	Z, r24
     e24:	1c c0       	rjmp	.+56     	; 0xe5e <LCD_displayCharacter+0x608>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e26:	6b a9       	ldd	r22, Y+51	; 0x33
     e28:	7c a9       	ldd	r23, Y+52	; 0x34
     e2a:	8d a9       	ldd	r24, Y+53	; 0x35
     e2c:	9e a9       	ldd	r25, Y+54	; 0x36
     e2e:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	8b af       	std	Y+59, r24	; 0x3b
     e38:	ce 01       	movw	r24, r28
     e3a:	82 5b       	subi	r24, 0xB2	; 178
     e3c:	9f 4f       	sbci	r25, 0xFF	; 255
     e3e:	2b ad       	ldd	r18, Y+59	; 0x3b
     e40:	fc 01       	movw	r30, r24
     e42:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e44:	ce 01       	movw	r24, r28
     e46:	82 5b       	subi	r24, 0xB2	; 178
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	fc 01       	movw	r30, r24
     e4c:	80 81       	ld	r24, Z
     e4e:	28 2f       	mov	r18, r24
     e50:	2a 95       	dec	r18
     e52:	f1 f7       	brne	.-4      	; 0xe50 <LCD_displayCharacter+0x5fa>
     e54:	ce 01       	movw	r24, r28
     e56:	82 5b       	subi	r24, 0xB2	; 178
     e58:	9f 4f       	sbci	r25, 0xFF	; 255
     e5a:	fc 01       	movw	r30, r24
     e5c:	20 83       	st	Z, r18
	_delay_us(1);/* delay processing R/W set time tas =40ns */
	SET_BIT(LCD_CTRL_PORT,LCD_ENABLE); /* enable LCD so enable =1 */
     e5e:	82 e3       	ldi	r24, 0x32	; 50
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	22 e3       	ldi	r18, 0x32	; 50
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	f9 01       	movw	r30, r18
     e68:	20 81       	ld	r18, Z
     e6a:	20 64       	ori	r18, 0x40	; 64
     e6c:	fc 01       	movw	r30, r24
     e6e:	20 83       	st	Z, r18
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	a0 e8       	ldi	r26, 0x80	; 128
     e76:	bf e3       	ldi	r27, 0x3F	; 63
     e78:	89 87       	std	Y+9, r24	; 0x09
     e7a:	9a 87       	std	Y+10, r25	; 0x0a
     e7c:	ab 87       	std	Y+11, r26	; 0x0b
     e7e:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	4a ef       	ldi	r20, 0xFA	; 250
     e86:	54 e4       	ldi	r21, 0x44	; 68
     e88:	69 85       	ldd	r22, Y+9	; 0x09
     e8a:	7a 85       	ldd	r23, Y+10	; 0x0a
     e8c:	8b 85       	ldd	r24, Y+11	; 0x0b
     e8e:	9c 85       	ldd	r25, Y+12	; 0x0c
     e90:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	89 a7       	std	Y+41, r24	; 0x29
     e9a:	9a a7       	std	Y+42, r25	; 0x2a
     e9c:	ab a7       	std	Y+43, r26	; 0x2b
     e9e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e8       	ldi	r20, 0x80	; 128
     ea6:	5f e3       	ldi	r21, 0x3F	; 63
     ea8:	69 a5       	ldd	r22, Y+41	; 0x29
     eaa:	7a a5       	ldd	r23, Y+42	; 0x2a
     eac:	8b a5       	ldd	r24, Y+43	; 0x2b
     eae:	9c a5       	ldd	r25, Y+44	; 0x2c
     eb0:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__cmpsf2>
     eb4:	88 23       	and	r24, r24
     eb6:	2c f4       	brge	.+10     	; 0xec2 <LCD_displayCharacter+0x66c>
		__ticks = 1;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	9e a7       	std	Y+46, r25	; 0x2e
     ebe:	8d a7       	std	Y+45, r24	; 0x2d
     ec0:	3f c0       	rjmp	.+126    	; 0xf40 <LCD_displayCharacter+0x6ea>
	else if (__tmp > 65535)
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	3f ef       	ldi	r19, 0xFF	; 255
     ec6:	4f e7       	ldi	r20, 0x7F	; 127
     ec8:	57 e4       	ldi	r21, 0x47	; 71
     eca:	69 a5       	ldd	r22, Y+41	; 0x29
     ecc:	7a a5       	ldd	r23, Y+42	; 0x2a
     ece:	8b a5       	ldd	r24, Y+43	; 0x2b
     ed0:	9c a5       	ldd	r25, Y+44	; 0x2c
     ed2:	0e 94 de 10 	call	0x21bc	; 0x21bc <__gesf2>
     ed6:	18 16       	cp	r1, r24
     ed8:	4c f5       	brge	.+82     	; 0xf2c <LCD_displayCharacter+0x6d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 e2       	ldi	r20, 0x20	; 32
     ee0:	51 e4       	ldi	r21, 0x41	; 65
     ee2:	69 85       	ldd	r22, Y+9	; 0x09
     ee4:	7a 85       	ldd	r23, Y+10	; 0x0a
     ee6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ee8:	9c 85       	ldd	r25, Y+12	; 0x0c
     eea:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	bc 01       	movw	r22, r24
     ef4:	cd 01       	movw	r24, r26
     ef6:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	9e a7       	std	Y+46, r25	; 0x2e
     f00:	8d a7       	std	Y+45, r24	; 0x2d
     f02:	0f c0       	rjmp	.+30     	; 0xf22 <LCD_displayCharacter+0x6cc>
     f04:	88 ec       	ldi	r24, 0xC8	; 200
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	98 ab       	std	Y+48, r25	; 0x30
     f0a:	8f a7       	std	Y+47, r24	; 0x2f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f0c:	8f a5       	ldd	r24, Y+47	; 0x2f
     f0e:	98 a9       	ldd	r25, Y+48	; 0x30
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	f1 f7       	brne	.-4      	; 0xf10 <LCD_displayCharacter+0x6ba>
     f14:	98 ab       	std	Y+48, r25	; 0x30
     f16:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f18:	8d a5       	ldd	r24, Y+45	; 0x2d
     f1a:	9e a5       	ldd	r25, Y+46	; 0x2e
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	9e a7       	std	Y+46, r25	; 0x2e
     f20:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f22:	8d a5       	ldd	r24, Y+45	; 0x2d
     f24:	9e a5       	ldd	r25, Y+46	; 0x2e
     f26:	89 2b       	or	r24, r25
     f28:	69 f7       	brne	.-38     	; 0xf04 <LCD_displayCharacter+0x6ae>
     f2a:	14 c0       	rjmp	.+40     	; 0xf54 <LCD_displayCharacter+0x6fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f2c:	69 a5       	ldd	r22, Y+41	; 0x29
     f2e:	7a a5       	ldd	r23, Y+42	; 0x2a
     f30:	8b a5       	ldd	r24, Y+43	; 0x2b
     f32:	9c a5       	ldd	r25, Y+44	; 0x2c
     f34:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	9e a7       	std	Y+46, r25	; 0x2e
     f3e:	8d a7       	std	Y+45, r24	; 0x2d
     f40:	8d a5       	ldd	r24, Y+45	; 0x2d
     f42:	9e a5       	ldd	r25, Y+46	; 0x2e
     f44:	9a ab       	std	Y+50, r25	; 0x32
     f46:	89 ab       	std	Y+49, r24	; 0x31
     f48:	89 a9       	ldd	r24, Y+49	; 0x31
     f4a:	9a a9       	ldd	r25, Y+50	; 0x32
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <LCD_displayCharacter+0x6f6>
     f50:	9a ab       	std	Y+50, r25	; 0x32
     f52:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1); /*delay for processing Tpw - Tdws = 190ns*/
	PORTC=data; /* out the required data to output data bus D0-->D7 */
     f54:	85 e3       	ldi	r24, 0x35	; 53
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	9e 01       	movw	r18, r28
     f5a:	25 59       	subi	r18, 0x95	; 149
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	f9 01       	movw	r30, r18
     f60:	20 81       	ld	r18, Z
     f62:	fc 01       	movw	r30, r24
     f64:	20 83       	st	Z, r18
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	a0 e8       	ldi	r26, 0x80	; 128
     f6c:	bf e3       	ldi	r27, 0x3F	; 63
     f6e:	8d 87       	std	Y+13, r24	; 0x0d
     f70:	9e 87       	std	Y+14, r25	; 0x0e
     f72:	af 87       	std	Y+15, r26	; 0x0f
     f74:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	4a ef       	ldi	r20, 0xFA	; 250
     f7c:	54 e4       	ldi	r21, 0x44	; 68
     f7e:	6d 85       	ldd	r22, Y+13	; 0x0d
     f80:	7e 85       	ldd	r23, Y+14	; 0x0e
     f82:	8f 85       	ldd	r24, Y+15	; 0x0f
     f84:	98 89       	ldd	r25, Y+16	; 0x10
     f86:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	8f 8f       	std	Y+31, r24	; 0x1f
     f90:	98 a3       	std	Y+32, r25	; 0x20
     f92:	a9 a3       	std	Y+33, r26	; 0x21
     f94:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e8       	ldi	r20, 0x80	; 128
     f9c:	5f e3       	ldi	r21, 0x3F	; 63
     f9e:	6f 8d       	ldd	r22, Y+31	; 0x1f
     fa0:	78 a1       	ldd	r23, Y+32	; 0x20
     fa2:	89 a1       	ldd	r24, Y+33	; 0x21
     fa4:	9a a1       	ldd	r25, Y+34	; 0x22
     fa6:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__cmpsf2>
     faa:	88 23       	and	r24, r24
     fac:	2c f4       	brge	.+10     	; 0xfb8 <LCD_displayCharacter+0x762>
		__ticks = 1;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	9c a3       	std	Y+36, r25	; 0x24
     fb4:	8b a3       	std	Y+35, r24	; 0x23
     fb6:	3f c0       	rjmp	.+126    	; 0x1036 <LCD_displayCharacter+0x7e0>
	else if (__tmp > 65535)
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	3f ef       	ldi	r19, 0xFF	; 255
     fbc:	4f e7       	ldi	r20, 0x7F	; 127
     fbe:	57 e4       	ldi	r21, 0x47	; 71
     fc0:	6f 8d       	ldd	r22, Y+31	; 0x1f
     fc2:	78 a1       	ldd	r23, Y+32	; 0x20
     fc4:	89 a1       	ldd	r24, Y+33	; 0x21
     fc6:	9a a1       	ldd	r25, Y+34	; 0x22
     fc8:	0e 94 de 10 	call	0x21bc	; 0x21bc <__gesf2>
     fcc:	18 16       	cp	r1, r24
     fce:	4c f5       	brge	.+82     	; 0x1022 <LCD_displayCharacter+0x7cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	40 e2       	ldi	r20, 0x20	; 32
     fd6:	51 e4       	ldi	r21, 0x41	; 65
     fd8:	6d 85       	ldd	r22, Y+13	; 0x0d
     fda:	7e 85       	ldd	r23, Y+14	; 0x0e
     fdc:	8f 85       	ldd	r24, Y+15	; 0x0f
     fde:	98 89       	ldd	r25, Y+16	; 0x10
     fe0:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	bc 01       	movw	r22, r24
     fea:	cd 01       	movw	r24, r26
     fec:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	9c a3       	std	Y+36, r25	; 0x24
     ff6:	8b a3       	std	Y+35, r24	; 0x23
     ff8:	0f c0       	rjmp	.+30     	; 0x1018 <LCD_displayCharacter+0x7c2>
     ffa:	88 ec       	ldi	r24, 0xC8	; 200
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	9e a3       	std	Y+38, r25	; 0x26
    1000:	8d a3       	std	Y+37, r24	; 0x25
    1002:	8d a1       	ldd	r24, Y+37	; 0x25
    1004:	9e a1       	ldd	r25, Y+38	; 0x26
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <LCD_displayCharacter+0x7b0>
    100a:	9e a3       	std	Y+38, r25	; 0x26
    100c:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100e:	8b a1       	ldd	r24, Y+35	; 0x23
    1010:	9c a1       	ldd	r25, Y+36	; 0x24
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	9c a3       	std	Y+36, r25	; 0x24
    1016:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1018:	8b a1       	ldd	r24, Y+35	; 0x23
    101a:	9c a1       	ldd	r25, Y+36	; 0x24
    101c:	89 2b       	or	r24, r25
    101e:	69 f7       	brne	.-38     	; 0xffa <LCD_displayCharacter+0x7a4>
    1020:	14 c0       	rjmp	.+40     	; 0x104a <LCD_displayCharacter+0x7f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1022:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1024:	78 a1       	ldd	r23, Y+32	; 0x20
    1026:	89 a1       	ldd	r24, Y+33	; 0x21
    1028:	9a a1       	ldd	r25, Y+34	; 0x22
    102a:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	9c a3       	std	Y+36, r25	; 0x24
    1034:	8b a3       	std	Y+35, r24	; 0x23
    1036:	8b a1       	ldd	r24, Y+35	; 0x23
    1038:	9c a1       	ldd	r25, Y+36	; 0x24
    103a:	98 a7       	std	Y+40, r25	; 0x28
    103c:	8f a3       	std	Y+39, r24	; 0x27
    103e:	8f a1       	ldd	r24, Y+39	; 0x27
    1040:	98 a5       	ldd	r25, Y+40	; 0x28
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <LCD_displayCharacter+0x7ec>
    1046:	98 a7       	std	Y+40, r25	; 0x28
    1048:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(1);/* delay processing command setup time tdsw=60ns */
	CLEAR_BIT(LCD_CTRL_PORT,6); /* disable LCD so enable pin =0*/
    104a:	82 e3       	ldi	r24, 0x32	; 50
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	22 e3       	ldi	r18, 0x32	; 50
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	f9 01       	movw	r30, r18
    1054:	20 81       	ld	r18, Z
    1056:	2f 7b       	andi	r18, 0xBF	; 191
    1058:	fc 01       	movw	r30, r24
    105a:	20 83       	st	Z, r18
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a0 e8       	ldi	r26, 0x80	; 128
    1062:	bf e3       	ldi	r27, 0x3F	; 63
    1064:	89 8b       	std	Y+17, r24	; 0x11
    1066:	9a 8b       	std	Y+18, r25	; 0x12
    1068:	ab 8b       	std	Y+19, r26	; 0x13
    106a:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	4a ef       	ldi	r20, 0xFA	; 250
    1072:	54 e4       	ldi	r21, 0x44	; 68
    1074:	69 89       	ldd	r22, Y+17	; 0x11
    1076:	7a 89       	ldd	r23, Y+18	; 0x12
    1078:	8b 89       	ldd	r24, Y+19	; 0x13
    107a:	9c 89       	ldd	r25, Y+20	; 0x14
    107c:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	8d 8b       	std	Y+21, r24	; 0x15
    1086:	9e 8b       	std	Y+22, r25	; 0x16
    1088:	af 8b       	std	Y+23, r26	; 0x17
    108a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	40 e8       	ldi	r20, 0x80	; 128
    1092:	5f e3       	ldi	r21, 0x3F	; 63
    1094:	6d 89       	ldd	r22, Y+21	; 0x15
    1096:	7e 89       	ldd	r23, Y+22	; 0x16
    1098:	8f 89       	ldd	r24, Y+23	; 0x17
    109a:	98 8d       	ldd	r25, Y+24	; 0x18
    109c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__cmpsf2>
    10a0:	88 23       	and	r24, r24
    10a2:	2c f4       	brge	.+10     	; 0x10ae <LCD_displayCharacter+0x858>
		__ticks = 1;
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	9a 8f       	std	Y+26, r25	; 0x1a
    10aa:	89 8f       	std	Y+25, r24	; 0x19
    10ac:	3f c0       	rjmp	.+126    	; 0x112c <LCD_displayCharacter+0x8d6>
	else if (__tmp > 65535)
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	3f ef       	ldi	r19, 0xFF	; 255
    10b2:	4f e7       	ldi	r20, 0x7F	; 127
    10b4:	57 e4       	ldi	r21, 0x47	; 71
    10b6:	6d 89       	ldd	r22, Y+21	; 0x15
    10b8:	7e 89       	ldd	r23, Y+22	; 0x16
    10ba:	8f 89       	ldd	r24, Y+23	; 0x17
    10bc:	98 8d       	ldd	r25, Y+24	; 0x18
    10be:	0e 94 de 10 	call	0x21bc	; 0x21bc <__gesf2>
    10c2:	18 16       	cp	r1, r24
    10c4:	4c f5       	brge	.+82     	; 0x1118 <LCD_displayCharacter+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	40 e2       	ldi	r20, 0x20	; 32
    10cc:	51 e4       	ldi	r21, 0x41	; 65
    10ce:	69 89       	ldd	r22, Y+17	; 0x11
    10d0:	7a 89       	ldd	r23, Y+18	; 0x12
    10d2:	8b 89       	ldd	r24, Y+19	; 0x13
    10d4:	9c 89       	ldd	r25, Y+20	; 0x14
    10d6:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	bc 01       	movw	r22, r24
    10e0:	cd 01       	movw	r24, r26
    10e2:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	9a 8f       	std	Y+26, r25	; 0x1a
    10ec:	89 8f       	std	Y+25, r24	; 0x19
    10ee:	0f c0       	rjmp	.+30     	; 0x110e <LCD_displayCharacter+0x8b8>
    10f0:	88 ec       	ldi	r24, 0xC8	; 200
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9c 8f       	std	Y+28, r25	; 0x1c
    10f6:	8b 8f       	std	Y+27, r24	; 0x1b
    10f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <LCD_displayCharacter+0x8a6>
    1100:	9c 8f       	std	Y+28, r25	; 0x1c
    1102:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1104:	89 8d       	ldd	r24, Y+25	; 0x19
    1106:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	9a 8f       	std	Y+26, r25	; 0x1a
    110c:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110e:	89 8d       	ldd	r24, Y+25	; 0x19
    1110:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1112:	89 2b       	or	r24, r25
    1114:	69 f7       	brne	.-38     	; 0x10f0 <LCD_displayCharacter+0x89a>
	_delay_ms(1); /* delay for processing hold time th =10ns*/
}
    1116:	14 c0       	rjmp	.+40     	; 0x1140 <LCD_displayCharacter+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1118:	6d 89       	ldd	r22, Y+21	; 0x15
    111a:	7e 89       	ldd	r23, Y+22	; 0x16
    111c:	8f 89       	ldd	r24, Y+23	; 0x17
    111e:	98 8d       	ldd	r25, Y+24	; 0x18
    1120:	0e 94 3a 10 	call	0x2074	; 0x2074 <__fixunssfsi>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	9a 8f       	std	Y+26, r25	; 0x1a
    112a:	89 8f       	std	Y+25, r24	; 0x19
    112c:	89 8d       	ldd	r24, Y+25	; 0x19
    112e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1130:	9e 8f       	std	Y+30, r25	; 0x1e
    1132:	8d 8f       	std	Y+29, r24	; 0x1d
    1134:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1136:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <LCD_displayCharacter+0x8e2>
    113c:	9e 8f       	std	Y+30, r25	; 0x1e
    113e:	8d 8f       	std	Y+29, r24	; 0x1d
    1140:	00 00       	nop
    1142:	c5 59       	subi	r28, 0x95	; 149
    1144:	df 4f       	sbci	r29, 0xFF	; 255
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	08 95       	ret

0000115a <LCD_displayString>:
void LCD_displayString(uint8 *str)
{
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	00 d0       	rcall	.+0      	; 0x1160 <LCD_displayString+0x6>
    1160:	1f 92       	push	r1
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	9b 83       	std	Y+3, r25	; 0x03
    1168:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0 ;str[i]!='\0';i++)
    116a:	19 82       	std	Y+1, r1	; 0x01
    116c:	0e c0       	rjmp	.+28     	; 0x118a <LCD_displayString+0x30>
	LCD_displayCharacter( str[i]);
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	2a 81       	ldd	r18, Y+2	; 0x02
    1176:	3b 81       	ldd	r19, Y+3	; 0x03
    1178:	82 0f       	add	r24, r18
    117a:	93 1f       	adc	r25, r19
    117c:	fc 01       	movw	r30, r24
    117e:	80 81       	ld	r24, Z
    1180:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_displayCharacter>
	CLEAR_BIT(LCD_CTRL_PORT,6); /* disable LCD so enable pin =0*/
	_delay_ms(1); /* delay for processing hold time th =10ns*/
}
void LCD_displayString(uint8 *str)
{
	for(uint8 i=0 ;str[i]!='\0';i++)
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	8f 5f       	subi	r24, 0xFF	; 255
    1188:	89 83       	std	Y+1, r24	; 0x01
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	88 2f       	mov	r24, r24
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	2a 81       	ldd	r18, Y+2	; 0x02
    1192:	3b 81       	ldd	r19, Y+3	; 0x03
    1194:	82 0f       	add	r24, r18
    1196:	93 1f       	adc	r25, r19
    1198:	fc 01       	movw	r30, r24
    119a:	80 81       	ld	r24, Z
    119c:	88 23       	and	r24, r24
    119e:	39 f7       	brne	.-50     	; 0x116e <LCD_displayString+0x14>
	LCD_displayCharacter( str[i]);
}
    11a0:	00 00       	nop
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	08 95       	ret

000011ae <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{	/* first of all calculate the required address */
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <LCD_goToRowColumn+0x6>
    11b4:	1f 92       	push	r1
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	8a 83       	std	Y+2, r24	; 0x02
    11bc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	88 2f       	mov	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	91 05       	cpc	r25, r1
    11c8:	79 f0       	breq	.+30     	; 0x11e8 <LCD_goToRowColumn+0x3a>
    11ca:	82 30       	cpi	r24, 0x02	; 2
    11cc:	91 05       	cpc	r25, r1
    11ce:	1c f4       	brge	.+6      	; 0x11d6 <LCD_goToRowColumn+0x28>
    11d0:	89 2b       	or	r24, r25
    11d2:	39 f0       	breq	.+14     	; 0x11e2 <LCD_goToRowColumn+0x34>
    11d4:	15 c0       	rjmp	.+42     	; 0x1200 <LCD_goToRowColumn+0x52>
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	91 05       	cpc	r25, r1
    11da:	51 f0       	breq	.+20     	; 0x11f0 <LCD_goToRowColumn+0x42>
    11dc:	03 97       	sbiw	r24, 0x03	; 3
    11de:	61 f0       	breq	.+24     	; 0x11f8 <LCD_goToRowColumn+0x4a>
    11e0:	0f c0       	rjmp	.+30     	; 0x1200 <LCD_goToRowColumn+0x52>
	{
	case 0:
		address=col;
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	89 83       	std	Y+1, r24	; 0x01
		break;
    11e6:	0c c0       	rjmp	.+24     	; 0x1200 <LCD_goToRowColumn+0x52>
	case 1:
		address=0x40+col;
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	80 5c       	subi	r24, 0xC0	; 192
    11ec:	89 83       	std	Y+1, r24	; 0x01
		break;
    11ee:	08 c0       	rjmp	.+16     	; 0x1200 <LCD_goToRowColumn+0x52>
	case 2:
		address=0x10+col;
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	80 5f       	subi	r24, 0xF0	; 240
    11f4:	89 83       	std	Y+1, r24	; 0x01
		break;
    11f6:	04 c0       	rjmp	.+8      	; 0x1200 <LCD_goToRowColumn+0x52>
	case 3:
		address=0x50+col;
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	80 5b       	subi	r24, 0xB0	; 176
    11fc:	89 83       	std	Y+1, r24	; 0x01
		break;
    11fe:	00 00       	nop
		}
	/* pass the specific address to the LCD
	 * to change the address you should add 0x80 to address
	 */
	LCD_sendCommand(address|0x80);
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	80 68       	ori	r24, 0x80	; 128
    1204:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_sendCommand>
}
    1208:	00 00       	nop
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row, uint8 col ,uint8 *str)
{
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	00 d0       	rcall	.+0      	; 0x121c <LCD_displayStringRowColumn+0x6>
    121c:	00 d0       	rcall	.+0      	; 0x121e <LCD_displayStringRowColumn+0x8>
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	6a 83       	std	Y+2, r22	; 0x02
    1226:	5c 83       	std	Y+4, r21	; 0x04
    1228:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn( row, col);/* go to the required position*/
    122a:	6a 81       	ldd	r22, Y+2	; 0x02
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <LCD_goToRowColumn>
	LCD_displayString(str);/* display the string*/
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	0e 94 ad 08 	call	0x115a	; 0x115a <LCD_displayString>
}
    123a:	00 00       	nop
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	08 95       	ret

0000124a <LCD_clearScreen>:
void LCD_clearScreen()
{
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);/* clear display*/
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_sendCommand>
}
    1258:	00 00       	nop
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	08 95       	ret

00001260 <LCD_intgerToString>:
void LCD_intgerToString(int data)
{
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	62 97       	sbiw	r28, 0x12	; 18
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	9a 8b       	std	Y+18, r25	; 0x12
    1276:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];/* buffer to hold acii result */
	itoa(data,buff,10); /* 10 for decimal base */
    1278:	89 89       	ldd	r24, Y+17	; 0x11
    127a:	9a 89       	ldd	r25, Y+18	; 0x12
    127c:	4a e0       	ldi	r20, 0x0A	; 10
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	9e 01       	movw	r18, r28
    1282:	2f 5f       	subi	r18, 0xFF	; 255
    1284:	3f 4f       	sbci	r19, 0xFF	; 255
    1286:	b9 01       	movw	r22, r18
    1288:	0e 94 64 11 	call	0x22c8	; 0x22c8 <itoa>
	LCD_displayString(buff);
    128c:	ce 01       	movw	r24, r28
    128e:	01 96       	adiw	r24, 0x01	; 1
    1290:	0e 94 ad 08 	call	0x115a	; 0x115a <LCD_displayString>
}
    1294:	00 00       	nop
    1296:	62 96       	adiw	r28, 0x12	; 18
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	de bf       	out	0x3e, r29	; 62
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	08 95       	ret

000012a8 <__vector_19>:

#include"timer.h"
static volatile  void(*g_callBackPtr)(void)= NULL_PTR;
static volatile TIMER_configurationType * configPtr;
ISR(TIMER0_COMP_vect)
{
    12a8:	1f 92       	push	r1
    12aa:	0f 92       	push	r0
    12ac:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    12b0:	0f 92       	push	r0
    12b2:	11 24       	eor	r1, r1
    12b4:	2f 93       	push	r18
    12b6:	3f 93       	push	r19
    12b8:	4f 93       	push	r20
    12ba:	5f 93       	push	r21
    12bc:	6f 93       	push	r22
    12be:	7f 93       	push	r23
    12c0:	8f 93       	push	r24
    12c2:	9f 93       	push	r25
    12c4:	af 93       	push	r26
    12c6:	bf 93       	push	r27
    12c8:	ef 93       	push	r30
    12ca:	ff 93       	push	r31
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    12d4:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <g_callBackPtr>
    12d8:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <g_callBackPtr+0x1>
    12dc:	89 2b       	or	r24, r25
    12de:	31 f0       	breq	.+12     	; 0x12ec <__vector_19+0x44>
		g_callBackPtr();
    12e0:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <g_callBackPtr>
    12e4:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <g_callBackPtr+0x1>
    12e8:	fc 01       	movw	r30, r24
    12ea:	09 95       	icall

}
    12ec:	00 00       	nop
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	ff 91       	pop	r31
    12f4:	ef 91       	pop	r30
    12f6:	bf 91       	pop	r27
    12f8:	af 91       	pop	r26
    12fa:	9f 91       	pop	r25
    12fc:	8f 91       	pop	r24
    12fe:	7f 91       	pop	r23
    1300:	6f 91       	pop	r22
    1302:	5f 91       	pop	r21
    1304:	4f 91       	pop	r20
    1306:	3f 91       	pop	r19
    1308:	2f 91       	pop	r18
    130a:	0f 90       	pop	r0
    130c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1310:	0f 90       	pop	r0
    1312:	1f 90       	pop	r1
    1314:	18 95       	reti

00001316 <__vector_9>:
ISR(TIMER0_OVF_vect)
{
    1316:	1f 92       	push	r1
    1318:	0f 92       	push	r0
    131a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    131e:	0f 92       	push	r0
    1320:	11 24       	eor	r1, r1
    1322:	2f 93       	push	r18
    1324:	3f 93       	push	r19
    1326:	4f 93       	push	r20
    1328:	5f 93       	push	r21
    132a:	6f 93       	push	r22
    132c:	7f 93       	push	r23
    132e:	8f 93       	push	r24
    1330:	9f 93       	push	r25
    1332:	af 93       	push	r26
    1334:	bf 93       	push	r27
    1336:	ef 93       	push	r30
    1338:	ff 93       	push	r31
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    1342:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <g_callBackPtr>
    1346:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <g_callBackPtr+0x1>
    134a:	89 2b       	or	r24, r25
    134c:	31 f0       	breq	.+12     	; 0x135a <__vector_9+0x44>
		g_callBackPtr();
    134e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <g_callBackPtr>
    1352:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <g_callBackPtr+0x1>
    1356:	fc 01       	movw	r30, r24
    1358:	09 95       	icall

}
    135a:	00 00       	nop
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	ff 91       	pop	r31
    1362:	ef 91       	pop	r30
    1364:	bf 91       	pop	r27
    1366:	af 91       	pop	r26
    1368:	9f 91       	pop	r25
    136a:	8f 91       	pop	r24
    136c:	7f 91       	pop	r23
    136e:	6f 91       	pop	r22
    1370:	5f 91       	pop	r21
    1372:	4f 91       	pop	r20
    1374:	3f 91       	pop	r19
    1376:	2f 91       	pop	r18
    1378:	0f 90       	pop	r0
    137a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    137e:	0f 90       	pop	r0
    1380:	1f 90       	pop	r1
    1382:	18 95       	reti

00001384 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    1384:	1f 92       	push	r1
    1386:	0f 92       	push	r0
    1388:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    138c:	0f 92       	push	r0
    138e:	11 24       	eor	r1, r1
    1390:	2f 93       	push	r18
    1392:	3f 93       	push	r19
    1394:	4f 93       	push	r20
    1396:	5f 93       	push	r21
    1398:	6f 93       	push	r22
    139a:	7f 93       	push	r23
    139c:	8f 93       	push	r24
    139e:	9f 93       	push	r25
    13a0:	af 93       	push	r26
    13a2:	bf 93       	push	r27
    13a4:	ef 93       	push	r30
    13a6:	ff 93       	push	r31
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    13b0:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <g_callBackPtr>
    13b4:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <g_callBackPtr+0x1>
    13b8:	89 2b       	or	r24, r25
    13ba:	31 f0       	breq	.+12     	; 0x13c8 <__vector_6+0x44>
			g_callBackPtr();
    13bc:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <g_callBackPtr>
    13c0:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <g_callBackPtr+0x1>
    13c4:	fc 01       	movw	r30, r24
    13c6:	09 95       	icall
}
    13c8:	00 00       	nop
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	ff 91       	pop	r31
    13d0:	ef 91       	pop	r30
    13d2:	bf 91       	pop	r27
    13d4:	af 91       	pop	r26
    13d6:	9f 91       	pop	r25
    13d8:	8f 91       	pop	r24
    13da:	7f 91       	pop	r23
    13dc:	6f 91       	pop	r22
    13de:	5f 91       	pop	r21
    13e0:	4f 91       	pop	r20
    13e2:	3f 91       	pop	r19
    13e4:	2f 91       	pop	r18
    13e6:	0f 90       	pop	r0
    13e8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    13ec:	0f 90       	pop	r0
    13ee:	1f 90       	pop	r1
    13f0:	18 95       	reti

000013f2 <TIMER_init>:
void TIMER_init( TIMER_configurationType * config)
{configPtr=config;
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <TIMER_init+0x6>
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	9a 83       	std	Y+2, r25	; 0x02
    13fe:	89 83       	std	Y+1, r24	; 0x01
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	9a 81       	ldd	r25, Y+2	; 0x02
    1404:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <configPtr+0x1>
    1408:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <configPtr>
	if(config->timerNumber==0)
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
    1410:	fc 01       	movw	r30, r24
    1412:	80 81       	ld	r24, Z
    1414:	88 23       	and	r24, r24
    1416:	09 f0       	breq	.+2      	; 0x141a <TIMER_init+0x28>
    1418:	22 c1       	rjmp	.+580    	; 0x165e <TIMER_init+0x26c>
	{
		TCCR0=0;
    141a:	83 e5       	ldi	r24, 0x53	; 83
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	fc 01       	movw	r30, r24
    1420:	10 82       	st	Z, r1
	switch(config->prescaler)
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	9a 81       	ldd	r25, Y+2	; 0x02
    1426:	fc 01       	movw	r30, r24
    1428:	85 89       	ldd	r24, Z+21	; 0x15
    142a:	96 89       	ldd	r25, Z+22	; 0x16
    142c:	80 34       	cpi	r24, 0x40	; 64
    142e:	91 05       	cpc	r25, r1
    1430:	c1 f0       	breq	.+48     	; 0x1462 <TIMER_init+0x70>
    1432:	81 34       	cpi	r24, 0x41	; 65
    1434:	91 05       	cpc	r25, r1
    1436:	18 f4       	brcc	.+6      	; 0x143e <TIMER_init+0x4c>
    1438:	08 97       	sbiw	r24, 0x08	; 8
    143a:	49 f0       	breq	.+18     	; 0x144e <TIMER_init+0x5c>
    143c:	30 c0       	rjmp	.+96     	; 0x149e <TIMER_init+0xac>
    143e:	81 15       	cp	r24, r1
    1440:	f1 e0       	ldi	r31, 0x01	; 1
    1442:	9f 07       	cpc	r25, r31
    1444:	c1 f0       	breq	.+48     	; 0x1476 <TIMER_init+0x84>
    1446:	81 15       	cp	r24, r1
    1448:	94 40       	sbci	r25, 0x04	; 4
    144a:	f9 f0       	breq	.+62     	; 0x148a <TIMER_init+0x98>
    144c:	28 c0       	rjmp	.+80     	; 0x149e <TIMER_init+0xac>
	{
	case 8:
		TCCR0|=(1<<CS01);
    144e:	83 e5       	ldi	r24, 0x53	; 83
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	23 e5       	ldi	r18, 0x53	; 83
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	f9 01       	movw	r30, r18
    1458:	20 81       	ld	r18, Z
    145a:	22 60       	ori	r18, 0x02	; 2
    145c:	fc 01       	movw	r30, r24
    145e:	20 83       	st	Z, r18
		break;
    1460:	27 c0       	rjmp	.+78     	; 0x14b0 <TIMER_init+0xbe>
	case 64:
			TCCR0|=(1<<CS00)|(1<<CS01);
    1462:	83 e5       	ldi	r24, 0x53	; 83
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	23 e5       	ldi	r18, 0x53	; 83
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	f9 01       	movw	r30, r18
    146c:	20 81       	ld	r18, Z
    146e:	23 60       	ori	r18, 0x03	; 3
    1470:	fc 01       	movw	r30, r24
    1472:	20 83       	st	Z, r18
			break;
    1474:	1d c0       	rjmp	.+58     	; 0x14b0 <TIMER_init+0xbe>
	case 256:
			TCCR0|=(1<<CS02);
    1476:	83 e5       	ldi	r24, 0x53	; 83
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	23 e5       	ldi	r18, 0x53	; 83
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	f9 01       	movw	r30, r18
    1480:	20 81       	ld	r18, Z
    1482:	24 60       	ori	r18, 0x04	; 4
    1484:	fc 01       	movw	r30, r24
    1486:	20 83       	st	Z, r18
			break;
    1488:	13 c0       	rjmp	.+38     	; 0x14b0 <TIMER_init+0xbe>
	case 1024:
			TCCR0|=(1<<CS00)|(1<<CS02);
    148a:	83 e5       	ldi	r24, 0x53	; 83
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	23 e5       	ldi	r18, 0x53	; 83
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	f9 01       	movw	r30, r18
    1494:	20 81       	ld	r18, Z
    1496:	25 60       	ori	r18, 0x05	; 5
    1498:	fc 01       	movw	r30, r24
    149a:	20 83       	st	Z, r18
			break;
    149c:	09 c0       	rjmp	.+18     	; 0x14b0 <TIMER_init+0xbe>
	default:
			TCCR0|=(1<<CS00);
    149e:	83 e5       	ldi	r24, 0x53	; 83
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	23 e5       	ldi	r18, 0x53	; 83
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	f9 01       	movw	r30, r18
    14a8:	20 81       	ld	r18, Z
    14aa:	21 60       	ori	r18, 0x01	; 1
    14ac:	fc 01       	movw	r30, r24
    14ae:	20 83       	st	Z, r18

		}

	if(!strcmp(config->mode,"compare"))
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	9a 81       	ldd	r25, Y+2	; 0x02
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	6a ef       	ldi	r22, 0xFA	; 250
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    14be:	89 2b       	or	r24, r25
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <TIMER_init+0xd2>
    14c2:	62 c0       	rjmp	.+196    	; 0x1588 <TIMER_init+0x196>
	{	TCCR0|=(1<<FOC0)|(1<<WGM01);
    14c4:	83 e5       	ldi	r24, 0x53	; 83
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	23 e5       	ldi	r18, 0x53	; 83
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	f9 01       	movw	r30, r18
    14ce:	20 81       	ld	r18, Z
    14d0:	28 68       	ori	r18, 0x88	; 136
    14d2:	fc 01       	movw	r30, r24
    14d4:	20 83       	st	Z, r18

		if(!strcmp(config->compareMatchMode,"toggle"))
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	47 96       	adiw	r24, 0x17	; 23
    14dc:	62 e0       	ldi	r22, 0x02	; 2
    14de:	71 e0       	ldi	r23, 0x01	; 1
    14e0:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    14e4:	89 2b       	or	r24, r25
    14e6:	99 f4       	brne	.+38     	; 0x150e <TIMER_init+0x11c>
		{
		TCCR0|=(1<<COM00);
    14e8:	83 e5       	ldi	r24, 0x53	; 83
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	23 e5       	ldi	r18, 0x53	; 83
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	f9 01       	movw	r30, r18
    14f2:	20 81       	ld	r18, Z
    14f4:	20 61       	ori	r18, 0x10	; 16
    14f6:	fc 01       	movw	r30, r24
    14f8:	20 83       	st	Z, r18
		SET_BIT(DDRB,3);
    14fa:	87 e3       	ldi	r24, 0x37	; 55
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	27 e3       	ldi	r18, 0x37	; 55
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	f9 01       	movw	r30, r18
    1504:	20 81       	ld	r18, Z
    1506:	28 60       	ori	r18, 0x08	; 8
    1508:	fc 01       	movw	r30, r24
    150a:	20 83       	st	Z, r18
    150c:	37 c0       	rjmp	.+110    	; 0x157c <TIMER_init+0x18a>
		}
		else if(!strcmp(config->compareMatchMode,"clear"))
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	9a 81       	ldd	r25, Y+2	; 0x02
    1512:	47 96       	adiw	r24, 0x17	; 23
    1514:	69 e0       	ldi	r22, 0x09	; 9
    1516:	71 e0       	ldi	r23, 0x01	; 1
    1518:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    151c:	89 2b       	or	r24, r25
    151e:	99 f4       	brne	.+38     	; 0x1546 <TIMER_init+0x154>
			{
			TCCR0|=(1<<COM01);
    1520:	83 e5       	ldi	r24, 0x53	; 83
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	23 e5       	ldi	r18, 0x53	; 83
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	f9 01       	movw	r30, r18
    152a:	20 81       	ld	r18, Z
    152c:	20 62       	ori	r18, 0x20	; 32
    152e:	fc 01       	movw	r30, r24
    1530:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    1532:	87 e3       	ldi	r24, 0x37	; 55
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	27 e3       	ldi	r18, 0x37	; 55
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	f9 01       	movw	r30, r18
    153c:	20 81       	ld	r18, Z
    153e:	28 60       	ori	r18, 0x08	; 8
    1540:	fc 01       	movw	r30, r24
    1542:	20 83       	st	Z, r18
    1544:	1b c0       	rjmp	.+54     	; 0x157c <TIMER_init+0x18a>

			}
		else if(!strcmp(config->compareMatchMode,"set"))
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	47 96       	adiw	r24, 0x17	; 23
    154c:	6f e0       	ldi	r22, 0x0F	; 15
    154e:	71 e0       	ldi	r23, 0x01	; 1
    1550:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    1554:	89 2b       	or	r24, r25
    1556:	91 f4       	brne	.+36     	; 0x157c <TIMER_init+0x18a>
			{
			TCCR0|=(1<<COM01)|(1<<COM00);
    1558:	83 e5       	ldi	r24, 0x53	; 83
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	23 e5       	ldi	r18, 0x53	; 83
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	f9 01       	movw	r30, r18
    1562:	20 81       	ld	r18, Z
    1564:	20 63       	ori	r18, 0x30	; 48
    1566:	fc 01       	movw	r30, r24
    1568:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    156a:	87 e3       	ldi	r24, 0x37	; 55
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	27 e3       	ldi	r18, 0x37	; 55
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	f9 01       	movw	r30, r18
    1574:	20 81       	ld	r18, Z
    1576:	28 60       	ori	r18, 0x08	; 8
    1578:	fc 01       	movw	r30, r24
    157a:	20 83       	st	Z, r18

			}
		//enable interrupt
		TIMSK=(1<<OCIE0);
    157c:	89 e5       	ldi	r24, 0x59	; 89
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	22 e0       	ldi	r18, 0x02	; 2
    1582:	fc 01       	movw	r30, r24
    1584:	20 83       	st	Z, r18
    1586:	6b c0       	rjmp	.+214    	; 0x165e <TIMER_init+0x26c>

	}
	else if(!strcmp(config->mode,"normal"))
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	9a 81       	ldd	r25, Y+2	; 0x02
    158c:	01 96       	adiw	r24, 0x01	; 1
    158e:	63 e1       	ldi	r22, 0x13	; 19
    1590:	71 e0       	ldi	r23, 0x01	; 1
    1592:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    1596:	89 2b       	or	r24, r25
    1598:	79 f4       	brne	.+30     	; 0x15b8 <TIMER_init+0x1c6>
	{
		TCCR0|=(1<<FOC0);
    159a:	83 e5       	ldi	r24, 0x53	; 83
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	23 e5       	ldi	r18, 0x53	; 83
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	f9 01       	movw	r30, r18
    15a4:	20 81       	ld	r18, Z
    15a6:	20 68       	ori	r18, 0x80	; 128
    15a8:	fc 01       	movw	r30, r24
    15aa:	20 83       	st	Z, r18
		TIMSK=(1<<TOIE0);
    15ac:	89 e5       	ldi	r24, 0x59	; 89
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	21 e0       	ldi	r18, 0x01	; 1
    15b2:	fc 01       	movw	r30, r24
    15b4:	20 83       	st	Z, r18
    15b6:	53 c0       	rjmp	.+166    	; 0x165e <TIMER_init+0x26c>
	}
	else if(!strcmp(config->mode,"pwm"))
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	6a e1       	ldi	r22, 0x1A	; 26
    15c0:	71 e0       	ldi	r23, 0x01	; 1
    15c2:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    15c6:	89 2b       	or	r24, r25
    15c8:	09 f0       	breq	.+2      	; 0x15cc <TIMER_init+0x1da>
    15ca:	49 c0       	rjmp	.+146    	; 0x165e <TIMER_init+0x26c>
	{
		TCCR0 |=(1<<WGM00)|(1<<WGM01);
    15cc:	83 e5       	ldi	r24, 0x53	; 83
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	23 e5       	ldi	r18, 0x53	; 83
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	f9 01       	movw	r30, r18
    15d6:	20 81       	ld	r18, Z
    15d8:	28 64       	ori	r18, 0x48	; 72
    15da:	fc 01       	movw	r30, r24
    15dc:	20 83       	st	Z, r18
		if(!strcmp(config->pwmMode,"inverting"))
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	9a 81       	ldd	r25, Y+2	; 0x02
    15e2:	8b 96       	adiw	r24, 0x2b	; 43
    15e4:	6e e1       	ldi	r22, 0x1E	; 30
    15e6:	71 e0       	ldi	r23, 0x01	; 1
    15e8:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    15ec:	89 2b       	or	r24, r25
    15ee:	e1 f4       	brne	.+56     	; 0x1628 <TIMER_init+0x236>
				{
				TCCR0|=(1<<COM00);
    15f0:	83 e5       	ldi	r24, 0x53	; 83
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	23 e5       	ldi	r18, 0x53	; 83
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	f9 01       	movw	r30, r18
    15fa:	20 81       	ld	r18, Z
    15fc:	20 61       	ori	r18, 0x10	; 16
    15fe:	fc 01       	movw	r30, r24
    1600:	20 83       	st	Z, r18
				TCCR0|=(1<<COM01);
    1602:	83 e5       	ldi	r24, 0x53	; 83
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	23 e5       	ldi	r18, 0x53	; 83
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	f9 01       	movw	r30, r18
    160c:	20 81       	ld	r18, Z
    160e:	20 62       	ori	r18, 0x20	; 32
    1610:	fc 01       	movw	r30, r24
    1612:	20 83       	st	Z, r18
				SET_BIT(DDRB,3);
    1614:	87 e3       	ldi	r24, 0x37	; 55
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	27 e3       	ldi	r18, 0x37	; 55
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	f9 01       	movw	r30, r18
    161e:	20 81       	ld	r18, Z
    1620:	28 60       	ori	r18, 0x08	; 8
    1622:	fc 01       	movw	r30, r24
    1624:	20 83       	st	Z, r18
    1626:	1b c0       	rjmp	.+54     	; 0x165e <TIMER_init+0x26c>
				}
				else if(!strcmp(config->pwmMode,"non-inverting"))
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	9a 81       	ldd	r25, Y+2	; 0x02
    162c:	8b 96       	adiw	r24, 0x2b	; 43
    162e:	68 e2       	ldi	r22, 0x28	; 40
    1630:	71 e0       	ldi	r23, 0x01	; 1
    1632:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    1636:	89 2b       	or	r24, r25
    1638:	91 f4       	brne	.+36     	; 0x165e <TIMER_init+0x26c>
					{
					TCCR0|=(1<<COM01);
    163a:	83 e5       	ldi	r24, 0x53	; 83
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	23 e5       	ldi	r18, 0x53	; 83
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	f9 01       	movw	r30, r18
    1644:	20 81       	ld	r18, Z
    1646:	20 62       	ori	r18, 0x20	; 32
    1648:	fc 01       	movw	r30, r24
    164a:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    164c:	87 e3       	ldi	r24, 0x37	; 55
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	27 e3       	ldi	r18, 0x37	; 55
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	f9 01       	movw	r30, r18
    1656:	20 81       	ld	r18, Z
    1658:	28 60       	ori	r18, 0x08	; 8
    165a:	fc 01       	movw	r30, r24
    165c:	20 83       	st	Z, r18

	}

	}
	///
	if(config->timerNumber==1)
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	fc 01       	movw	r30, r24
    1664:	80 81       	ld	r24, Z
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	09 f0       	breq	.+2      	; 0x166c <TIMER_init+0x27a>
    166a:	30 c1       	rjmp	.+608    	; 0x18cc <TIMER_init+0x4da>
		{
			TCCR1A=0;
    166c:	8f e4       	ldi	r24, 0x4F	; 79
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	fc 01       	movw	r30, r24
    1672:	10 82       	st	Z, r1
			TCCR1B=0;
    1674:	8e e4       	ldi	r24, 0x4E	; 78
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	fc 01       	movw	r30, r24
    167a:	10 82       	st	Z, r1

		switch(config->prescaler)
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	9a 81       	ldd	r25, Y+2	; 0x02
    1680:	fc 01       	movw	r30, r24
    1682:	85 89       	ldd	r24, Z+21	; 0x15
    1684:	96 89       	ldd	r25, Z+22	; 0x16
    1686:	80 34       	cpi	r24, 0x40	; 64
    1688:	91 05       	cpc	r25, r1
    168a:	c1 f0       	breq	.+48     	; 0x16bc <TIMER_init+0x2ca>
    168c:	81 34       	cpi	r24, 0x41	; 65
    168e:	91 05       	cpc	r25, r1
    1690:	18 f4       	brcc	.+6      	; 0x1698 <TIMER_init+0x2a6>
    1692:	08 97       	sbiw	r24, 0x08	; 8
    1694:	49 f0       	breq	.+18     	; 0x16a8 <TIMER_init+0x2b6>
    1696:	30 c0       	rjmp	.+96     	; 0x16f8 <TIMER_init+0x306>
    1698:	81 15       	cp	r24, r1
    169a:	f1 e0       	ldi	r31, 0x01	; 1
    169c:	9f 07       	cpc	r25, r31
    169e:	c1 f0       	breq	.+48     	; 0x16d0 <TIMER_init+0x2de>
    16a0:	81 15       	cp	r24, r1
    16a2:	94 40       	sbci	r25, 0x04	; 4
    16a4:	f9 f0       	breq	.+62     	; 0x16e4 <TIMER_init+0x2f2>
    16a6:	28 c0       	rjmp	.+80     	; 0x16f8 <TIMER_init+0x306>
		{
		case 8:
			TCCR1B|=(1<<CS11);
    16a8:	8e e4       	ldi	r24, 0x4E	; 78
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	2e e4       	ldi	r18, 0x4E	; 78
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	f9 01       	movw	r30, r18
    16b2:	20 81       	ld	r18, Z
    16b4:	22 60       	ori	r18, 0x02	; 2
    16b6:	fc 01       	movw	r30, r24
    16b8:	20 83       	st	Z, r18
			break;
    16ba:	27 c0       	rjmp	.+78     	; 0x170a <TIMER_init+0x318>
		case 64:
				TCCR1B|=(1<<CS10)|(1<<CS11);
    16bc:	8e e4       	ldi	r24, 0x4E	; 78
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	2e e4       	ldi	r18, 0x4E	; 78
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	f9 01       	movw	r30, r18
    16c6:	20 81       	ld	r18, Z
    16c8:	23 60       	ori	r18, 0x03	; 3
    16ca:	fc 01       	movw	r30, r24
    16cc:	20 83       	st	Z, r18
				break;
    16ce:	1d c0       	rjmp	.+58     	; 0x170a <TIMER_init+0x318>
		case 256:
				TCCR1B|=(1<<CS12);
    16d0:	8e e4       	ldi	r24, 0x4E	; 78
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	2e e4       	ldi	r18, 0x4E	; 78
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	f9 01       	movw	r30, r18
    16da:	20 81       	ld	r18, Z
    16dc:	24 60       	ori	r18, 0x04	; 4
    16de:	fc 01       	movw	r30, r24
    16e0:	20 83       	st	Z, r18
				break;
    16e2:	13 c0       	rjmp	.+38     	; 0x170a <TIMER_init+0x318>
		case 1024:
				TCCR1B|=(1<<CS10)|(1<<CS12);
    16e4:	8e e4       	ldi	r24, 0x4E	; 78
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	2e e4       	ldi	r18, 0x4E	; 78
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	f9 01       	movw	r30, r18
    16ee:	20 81       	ld	r18, Z
    16f0:	25 60       	ori	r18, 0x05	; 5
    16f2:	fc 01       	movw	r30, r24
    16f4:	20 83       	st	Z, r18
				break;
    16f6:	09 c0       	rjmp	.+18     	; 0x170a <TIMER_init+0x318>
		default:
				TCCR1B|=(1<<CS10);
    16f8:	8e e4       	ldi	r24, 0x4E	; 78
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	2e e4       	ldi	r18, 0x4E	; 78
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	f9 01       	movw	r30, r18
    1702:	20 81       	ld	r18, Z
    1704:	21 60       	ori	r18, 0x01	; 1
    1706:	fc 01       	movw	r30, r24
    1708:	20 83       	st	Z, r18

			}
//FOR A
		if(!strcmp(config->mode,"compare"))
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	01 96       	adiw	r24, 0x01	; 1
    1710:	6a ef       	ldi	r22, 0xFA	; 250
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    1718:	89 2b       	or	r24, r25
    171a:	09 f0       	breq	.+2      	; 0x171e <TIMER_init+0x32c>
    171c:	6b c0       	rjmp	.+214    	; 0x17f4 <TIMER_init+0x402>
		{	TCCR1A|=(1<<FOC1A);
    171e:	8f e4       	ldi	r24, 0x4F	; 79
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	2f e4       	ldi	r18, 0x4F	; 79
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	f9 01       	movw	r30, r18
    1728:	20 81       	ld	r18, Z
    172a:	28 60       	ori	r18, 0x08	; 8
    172c:	fc 01       	movw	r30, r24
    172e:	20 83       	st	Z, r18
			TCCR1B|=(1<<WGM12);
    1730:	8e e4       	ldi	r24, 0x4E	; 78
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	2e e4       	ldi	r18, 0x4E	; 78
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	f9 01       	movw	r30, r18
    173a:	20 81       	ld	r18, Z
    173c:	28 60       	ori	r18, 0x08	; 8
    173e:	fc 01       	movw	r30, r24
    1740:	20 83       	st	Z, r18
			if(!strcmp(config->compareMatchMode,"toggle"))
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	9a 81       	ldd	r25, Y+2	; 0x02
    1746:	47 96       	adiw	r24, 0x17	; 23
    1748:	62 e0       	ldi	r22, 0x02	; 2
    174a:	71 e0       	ldi	r23, 0x01	; 1
    174c:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    1750:	89 2b       	or	r24, r25
    1752:	99 f4       	brne	.+38     	; 0x177a <TIMER_init+0x388>
			{
			TCCR1A|=(1<<COM1A0);
    1754:	8f e4       	ldi	r24, 0x4F	; 79
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	2f e4       	ldi	r18, 0x4F	; 79
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	f9 01       	movw	r30, r18
    175e:	20 81       	ld	r18, Z
    1760:	20 64       	ori	r18, 0x40	; 64
    1762:	fc 01       	movw	r30, r24
    1764:	20 83       	st	Z, r18
			SET_BIT(DDRD,5);
    1766:	81 e3       	ldi	r24, 0x31	; 49
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	21 e3       	ldi	r18, 0x31	; 49
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	f9 01       	movw	r30, r18
    1770:	20 81       	ld	r18, Z
    1772:	20 62       	ori	r18, 0x20	; 32
    1774:	fc 01       	movw	r30, r24
    1776:	20 83       	st	Z, r18
    1778:	37 c0       	rjmp	.+110    	; 0x17e8 <TIMER_init+0x3f6>
			}
			else if(!strcmp(config->compareMatchMode,"clear"))
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	9a 81       	ldd	r25, Y+2	; 0x02
    177e:	47 96       	adiw	r24, 0x17	; 23
    1780:	69 e0       	ldi	r22, 0x09	; 9
    1782:	71 e0       	ldi	r23, 0x01	; 1
    1784:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    1788:	89 2b       	or	r24, r25
    178a:	99 f4       	brne	.+38     	; 0x17b2 <TIMER_init+0x3c0>
				{
				TCCR1A|=(1<<COM1A1);
    178c:	8f e4       	ldi	r24, 0x4F	; 79
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	2f e4       	ldi	r18, 0x4F	; 79
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	f9 01       	movw	r30, r18
    1796:	20 81       	ld	r18, Z
    1798:	20 68       	ori	r18, 0x80	; 128
    179a:	fc 01       	movw	r30, r24
    179c:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    179e:	81 e3       	ldi	r24, 0x31	; 49
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	21 e3       	ldi	r18, 0x31	; 49
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	f9 01       	movw	r30, r18
    17a8:	20 81       	ld	r18, Z
    17aa:	20 62       	ori	r18, 0x20	; 32
    17ac:	fc 01       	movw	r30, r24
    17ae:	20 83       	st	Z, r18
    17b0:	1b c0       	rjmp	.+54     	; 0x17e8 <TIMER_init+0x3f6>

				}
			else if(!strcmp(config->compareMatchMode,"set"))
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	47 96       	adiw	r24, 0x17	; 23
    17b8:	6f e0       	ldi	r22, 0x0F	; 15
    17ba:	71 e0       	ldi	r23, 0x01	; 1
    17bc:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    17c0:	89 2b       	or	r24, r25
    17c2:	91 f4       	brne	.+36     	; 0x17e8 <TIMER_init+0x3f6>
				{
				TCCR1A|=(1<<COM1A1)|(1<<COM1A0);
    17c4:	8f e4       	ldi	r24, 0x4F	; 79
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	2f e4       	ldi	r18, 0x4F	; 79
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	f9 01       	movw	r30, r18
    17ce:	20 81       	ld	r18, Z
    17d0:	20 6c       	ori	r18, 0xC0	; 192
    17d2:	fc 01       	movw	r30, r24
    17d4:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    17d6:	81 e3       	ldi	r24, 0x31	; 49
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	21 e3       	ldi	r18, 0x31	; 49
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	f9 01       	movw	r30, r18
    17e0:	20 81       	ld	r18, Z
    17e2:	20 62       	ori	r18, 0x20	; 32
    17e4:	fc 01       	movw	r30, r24
    17e6:	20 83       	st	Z, r18

				}
			//enable interrupt
			TIMSK=(1<<OCIE1A);
    17e8:	89 e5       	ldi	r24, 0x59	; 89
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	20 e1       	ldi	r18, 0x10	; 16
    17ee:	fc 01       	movw	r30, r24
    17f0:	20 83       	st	Z, r18
    17f2:	6b c0       	rjmp	.+214    	; 0x18ca <TIMER_init+0x4d8>

		}
		else if(!strcmp(config->mode,"normal"))
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	01 96       	adiw	r24, 0x01	; 1
    17fa:	63 e1       	ldi	r22, 0x13	; 19
    17fc:	71 e0       	ldi	r23, 0x01	; 1
    17fe:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    1802:	89 2b       	or	r24, r25
    1804:	79 f4       	brne	.+30     	; 0x1824 <TIMER_init+0x432>
		{
			TCCR0|=(1<<FOC0);
    1806:	83 e5       	ldi	r24, 0x53	; 83
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	23 e5       	ldi	r18, 0x53	; 83
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	f9 01       	movw	r30, r18
    1810:	20 81       	ld	r18, Z
    1812:	20 68       	ori	r18, 0x80	; 128
    1814:	fc 01       	movw	r30, r24
    1816:	20 83       	st	Z, r18
			TIMSK=(1<<TOIE0);
    1818:	89 e5       	ldi	r24, 0x59	; 89
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	21 e0       	ldi	r18, 0x01	; 1
    181e:	fc 01       	movw	r30, r24
    1820:	20 83       	st	Z, r18
    1822:	53 c0       	rjmp	.+166    	; 0x18ca <TIMER_init+0x4d8>
		}
		else if(!strcmp(config->mode,"pwm"))
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	9a 81       	ldd	r25, Y+2	; 0x02
    1828:	01 96       	adiw	r24, 0x01	; 1
    182a:	6a e1       	ldi	r22, 0x1A	; 26
    182c:	71 e0       	ldi	r23, 0x01	; 1
    182e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    1832:	89 2b       	or	r24, r25
    1834:	09 f0       	breq	.+2      	; 0x1838 <TIMER_init+0x446>
    1836:	49 c0       	rjmp	.+146    	; 0x18ca <TIMER_init+0x4d8>
		{
			TCCR0 |=(1<<WGM00)|(1<<WGM01);
    1838:	83 e5       	ldi	r24, 0x53	; 83
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	23 e5       	ldi	r18, 0x53	; 83
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	f9 01       	movw	r30, r18
    1842:	20 81       	ld	r18, Z
    1844:	28 64       	ori	r18, 0x48	; 72
    1846:	fc 01       	movw	r30, r24
    1848:	20 83       	st	Z, r18
			if(!strcmp(config->pwmMode,"inverting"))
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	9a 81       	ldd	r25, Y+2	; 0x02
    184e:	8b 96       	adiw	r24, 0x2b	; 43
    1850:	6e e1       	ldi	r22, 0x1E	; 30
    1852:	71 e0       	ldi	r23, 0x01	; 1
    1854:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    1858:	89 2b       	or	r24, r25
    185a:	e1 f4       	brne	.+56     	; 0x1894 <TIMER_init+0x4a2>
					{
					TCCR0|=(1<<COM00);
    185c:	83 e5       	ldi	r24, 0x53	; 83
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	23 e5       	ldi	r18, 0x53	; 83
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	f9 01       	movw	r30, r18
    1866:	20 81       	ld	r18, Z
    1868:	20 61       	ori	r18, 0x10	; 16
    186a:	fc 01       	movw	r30, r24
    186c:	20 83       	st	Z, r18
					TCCR0|=(1<<COM01);
    186e:	83 e5       	ldi	r24, 0x53	; 83
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	23 e5       	ldi	r18, 0x53	; 83
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	f9 01       	movw	r30, r18
    1878:	20 81       	ld	r18, Z
    187a:	20 62       	ori	r18, 0x20	; 32
    187c:	fc 01       	movw	r30, r24
    187e:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    1880:	87 e3       	ldi	r24, 0x37	; 55
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	27 e3       	ldi	r18, 0x37	; 55
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	f9 01       	movw	r30, r18
    188a:	20 81       	ld	r18, Z
    188c:	28 60       	ori	r18, 0x08	; 8
    188e:	fc 01       	movw	r30, r24
    1890:	20 83       	st	Z, r18
    1892:	1b c0       	rjmp	.+54     	; 0x18ca <TIMER_init+0x4d8>
					}
					else if(!strcmp(config->pwmMode,"non-inverting"))
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	9a 81       	ldd	r25, Y+2	; 0x02
    1898:	8b 96       	adiw	r24, 0x2b	; 43
    189a:	68 e2       	ldi	r22, 0x28	; 40
    189c:	71 e0       	ldi	r23, 0x01	; 1
    189e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    18a2:	89 2b       	or	r24, r25
    18a4:	91 f4       	brne	.+36     	; 0x18ca <TIMER_init+0x4d8>
						{
						TCCR0|=(1<<COM01);
    18a6:	83 e5       	ldi	r24, 0x53	; 83
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	23 e5       	ldi	r18, 0x53	; 83
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	f9 01       	movw	r30, r18
    18b0:	20 81       	ld	r18, Z
    18b2:	20 62       	ori	r18, 0x20	; 32
    18b4:	fc 01       	movw	r30, r24
    18b6:	20 83       	st	Z, r18
						SET_BIT(DDRB,3);
    18b8:	87 e3       	ldi	r24, 0x37	; 55
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	27 e3       	ldi	r18, 0x37	; 55
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	f9 01       	movw	r30, r18
    18c2:	20 81       	ld	r18, Z
    18c4:	28 60       	ori	r18, 0x08	; 8
    18c6:	fc 01       	movw	r30, r24
    18c8:	20 83       	st	Z, r18
	//TCCR0=(1<<FOC0)|(1<<COM00)|(1<<CS00)|(1<<CS02);


	//enable

	sei();
    18ca:	78 94       	sei
}
}
    18cc:	00 00       	nop
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	08 95       	ret

000018d8 <TIMER_setCompare>:

void TIMER_setCompare(uint16 compareValue)
{
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	00 d0       	rcall	.+0      	; 0x18de <TIMER_setCompare+0x6>
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	9a 83       	std	Y+2, r25	; 0x02
    18e4:	89 83       	std	Y+1, r24	; 0x01
	switch (configPtr->timerNumber)
    18e6:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <configPtr>
    18ea:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <configPtr+0x1>
    18ee:	fc 01       	movw	r30, r24
    18f0:	80 81       	ld	r24, Z
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	19 f0       	breq	.+6      	; 0x1900 <TIMER_setCompare+0x28>
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	59 f0       	breq	.+22     	; 0x1914 <TIMER_setCompare+0x3c>
	case 1:
		TCNT1=0;
		OCR1A=compareValue;
		break;
	}
}
    18fe:	17 c0       	rjmp	.+46     	; 0x192e <TIMER_setCompare+0x56>
void TIMER_setCompare(uint16 compareValue)
{
	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=0;
    1900:	82 e5       	ldi	r24, 0x52	; 82
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	fc 01       	movw	r30, r24
    1906:	10 82       	st	Z, r1
		OCR0=compareValue;
    1908:	8c e5       	ldi	r24, 0x5C	; 92
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	29 81       	ldd	r18, Y+1	; 0x01
    190e:	fc 01       	movw	r30, r24
    1910:	20 83       	st	Z, r18
		break;
    1912:	0d c0       	rjmp	.+26     	; 0x192e <TIMER_setCompare+0x56>
	case 1:
		TCNT1=0;
    1914:	8c e4       	ldi	r24, 0x4C	; 76
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	fc 01       	movw	r30, r24
    191a:	11 82       	std	Z+1, r1	; 0x01
    191c:	10 82       	st	Z, r1
		OCR1A=compareValue;
    191e:	8a e4       	ldi	r24, 0x4A	; 74
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	29 81       	ldd	r18, Y+1	; 0x01
    1924:	3a 81       	ldd	r19, Y+2	; 0x02
    1926:	fc 01       	movw	r30, r24
    1928:	31 83       	std	Z+1, r19	; 0x01
    192a:	20 83       	st	Z, r18
		break;
    192c:	00 00       	nop
	}
}
    192e:	00 00       	nop
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	08 95       	ret

0000193a <TIMER_setNormal>:
void TIMER_setNormal(uint8 initValue)

{
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	1f 92       	push	r1
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	89 83       	std	Y+1, r24	; 0x01

	switch (configPtr->timerNumber)
    1946:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <configPtr>
    194a:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <configPtr+0x1>
    194e:	fc 01       	movw	r30, r24
    1950:	80 81       	ld	r24, Z
    1952:	88 2f       	mov	r24, r24
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	19 f0       	breq	.+6      	; 0x1960 <TIMER_setNormal+0x26>
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	39 f0       	breq	.+14     	; 0x196c <TIMER_setNormal+0x32>
		TCNT1=initValue;
		break;


}
}
    195e:	0f c0       	rjmp	.+30     	; 0x197e <TIMER_setNormal+0x44>
{

	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=initValue;
    1960:	82 e5       	ldi	r24, 0x52	; 82
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	29 81       	ldd	r18, Y+1	; 0x01
    1966:	fc 01       	movw	r30, r24
    1968:	20 83       	st	Z, r18
		break;
    196a:	09 c0       	rjmp	.+18     	; 0x197e <TIMER_setNormal+0x44>
	case 1:
		TCNT1=initValue;
    196c:	8c e4       	ldi	r24, 0x4C	; 76
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	29 81       	ldd	r18, Y+1	; 0x01
    1972:	22 2f       	mov	r18, r18
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	fc 01       	movw	r30, r24
    1978:	31 83       	std	Z+1, r19	; 0x01
    197a:	20 83       	st	Z, r18
		break;
    197c:	00 00       	nop


}
}
    197e:	00 00       	nop
    1980:	0f 90       	pop	r0
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	08 95       	ret

00001988 <TIMER_setpwm>:
void TIMER_setpwm(uint8 dutyCycle)
{
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	1f 92       	push	r1
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
    1994:	82 e5       	ldi	r24, 0x52	; 82
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	fc 01       	movw	r30, r24
    199a:	10 82       	st	Z, r1
	OCR0=dutyCycle;
    199c:	8c e5       	ldi	r24, 0x5C	; 92
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	29 81       	ldd	r18, Y+1	; 0x01
    19a2:	fc 01       	movw	r30, r24
    19a4:	20 83       	st	Z, r18
}
    19a6:	00 00       	nop
    19a8:	0f 90       	pop	r0
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	08 95       	ret

000019b0 <TIMER_setCallBackPtr>:
void TIMER_setCallBackPtr(void(*a_ptr)(void))
{
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <TIMER_setCallBackPtr+0x6>
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	89 83       	std	Y+1, r24	; 0x01
g_callBackPtr=a_ptr;
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	9a 81       	ldd	r25, Y+2	; 0x02
    19c2:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <g_callBackPtr+0x1>
    19c6:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <g_callBackPtr>
}
    19ca:	00 00       	nop
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	08 95       	ret

000019d6 <TIMER_stop>:
void TIMER_stop()
{
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
	switch (configPtr->timerNumber)
    19de:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <configPtr>
    19e2:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <configPtr+0x1>
    19e6:	fc 01       	movw	r30, r24
    19e8:	80 81       	ld	r24, Z
    19ea:	88 2f       	mov	r24, r24
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	89 2b       	or	r24, r25
    19f0:	51 f4       	brne	.+20     	; 0x1a06 <TIMER_stop+0x30>

{
case 0:
	TCCR0&=~(1<<CS00)&~(1<<CS01)&~(1<<CS02);
    19f2:	83 e5       	ldi	r24, 0x53	; 83
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	23 e5       	ldi	r18, 0x53	; 83
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	f9 01       	movw	r30, r18
    19fc:	20 81       	ld	r18, Z
    19fe:	28 7f       	andi	r18, 0xF8	; 248
    1a00:	fc 01       	movw	r30, r24
    1a02:	20 83       	st	Z, r18
	break;
    1a04:	01 c0       	rjmp	.+2      	; 0x1a08 <TIMER_stop+0x32>
case 1:
	break;
    1a06:	00 00       	nop

}
}
    1a08:	00 00       	nop
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	08 95       	ret

00001a10 <UART_init>:
 *      Author: hesham
 */
#include"uart.h"

void UART_init(UART_configurationType * config)
{UCSRA=0;
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <UART_init+0xa>
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	9a 83       	std	Y+2, r25	; 0x02
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	8b e2       	ldi	r24, 0x2B	; 43
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	fc 01       	movw	r30, r24
    1a28:	10 82       	st	Z, r1
UCSRB=0;
    1a2a:	8a e2       	ldi	r24, 0x2A	; 42
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	fc 01       	movw	r30, r24
    1a30:	10 82       	st	Z, r1
UCSRC=0;
    1a32:	80 e4       	ldi	r24, 0x40	; 64
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	fc 01       	movw	r30, r24
    1a38:	10 82       	st	Z, r1
/* enables */
	if(!strcmp(config->mode,"normal"))
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3e:	05 96       	adiw	r24, 0x05	; 5
    1a40:	66 e3       	ldi	r22, 0x36	; 54
    1a42:	71 e0       	ldi	r23, 0x01	; 1
    1a44:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    1a48:	89 2b       	or	r24, r25
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <UART_init+0x3e>
    1a4c:	60 c0       	rjmp	.+192    	; 0x1b0e <UART_init+0xfe>
	{
CLEAR_BIT(UCSRA,U2X);
    1a4e:	8b e2       	ldi	r24, 0x2B	; 43
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	2b e2       	ldi	r18, 0x2B	; 43
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	f9 01       	movw	r30, r18
    1a58:	20 81       	ld	r18, Z
    1a5a:	2d 7f       	andi	r18, 0xFD	; 253
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	20 83       	st	Z, r18
UBRRL=((F_CPU /(16*config->buadRate))-1);
    1a60:	09 e2       	ldi	r16, 0x29	; 41
    1a62:	10 e0       	ldi	r17, 0x00	; 0
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	9a 81       	ldd	r25, Y+2	; 0x02
    1a68:	fc 01       	movw	r30, r24
    1a6a:	81 81       	ldd	r24, Z+1	; 0x01
    1a6c:	92 81       	ldd	r25, Z+2	; 0x02
    1a6e:	a3 81       	ldd	r26, Z+3	; 0x03
    1a70:	b4 81       	ldd	r27, Z+4	; 0x04
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	aa 1f       	adc	r26, r26
    1a78:	bb 1f       	adc	r27, r27
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	aa 1f       	adc	r26, r26
    1a80:	bb 1f       	adc	r27, r27
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	aa 1f       	adc	r26, r26
    1a88:	bb 1f       	adc	r27, r27
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	aa 1f       	adc	r26, r26
    1a90:	bb 1f       	adc	r27, r27
    1a92:	9c 01       	movw	r18, r24
    1a94:	ad 01       	movw	r20, r26
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	92 e1       	ldi	r25, 0x12	; 18
    1a9a:	aa e7       	ldi	r26, 0x7A	; 122
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	bc 01       	movw	r22, r24
    1aa0:	cd 01       	movw	r24, r26
    1aa2:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__udivmodsi4>
    1aa6:	da 01       	movw	r26, r20
    1aa8:	c9 01       	movw	r24, r18
    1aaa:	81 50       	subi	r24, 0x01	; 1
    1aac:	f8 01       	movw	r30, r16
    1aae:	80 83       	st	Z, r24
UBRRH=((F_CPU /(16*config->buadRate))-1)>>8;
    1ab0:	00 e4       	ldi	r16, 0x40	; 64
    1ab2:	10 e0       	ldi	r17, 0x00	; 0
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab8:	fc 01       	movw	r30, r24
    1aba:	81 81       	ldd	r24, Z+1	; 0x01
    1abc:	92 81       	ldd	r25, Z+2	; 0x02
    1abe:	a3 81       	ldd	r26, Z+3	; 0x03
    1ac0:	b4 81       	ldd	r27, Z+4	; 0x04
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	aa 1f       	adc	r26, r26
    1ac8:	bb 1f       	adc	r27, r27
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	aa 1f       	adc	r26, r26
    1ad0:	bb 1f       	adc	r27, r27
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	aa 1f       	adc	r26, r26
    1ad8:	bb 1f       	adc	r27, r27
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	aa 1f       	adc	r26, r26
    1ae0:	bb 1f       	adc	r27, r27
    1ae2:	9c 01       	movw	r18, r24
    1ae4:	ad 01       	movw	r20, r26
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	92 e1       	ldi	r25, 0x12	; 18
    1aea:	aa e7       	ldi	r26, 0x7A	; 122
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__udivmodsi4>
    1af6:	da 01       	movw	r26, r20
    1af8:	c9 01       	movw	r24, r18
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	a1 09       	sbc	r26, r1
    1afe:	b1 09       	sbc	r27, r1
    1b00:	89 2f       	mov	r24, r25
    1b02:	9a 2f       	mov	r25, r26
    1b04:	ab 2f       	mov	r26, r27
    1b06:	bb 27       	eor	r27, r27
    1b08:	f8 01       	movw	r30, r16
    1b0a:	80 83       	st	Z, r24
    1b0c:	61 c0       	rjmp	.+194    	; 0x1bd0 <UART_init+0x1c0>


	}
	else if(!strcmp(config->mode,"double speed"))
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	9a 81       	ldd	r25, Y+2	; 0x02
    1b12:	05 96       	adiw	r24, 0x05	; 5
    1b14:	6d e3       	ldi	r22, 0x3D	; 61
    1b16:	71 e0       	ldi	r23, 0x01	; 1
    1b18:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <strcmp>
    1b1c:	89 2b       	or	r24, r25
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <UART_init+0x112>
    1b20:	57 c0       	rjmp	.+174    	; 0x1bd0 <UART_init+0x1c0>
	{
		SET_BIT(UCSRA,U2X);
    1b22:	8b e2       	ldi	r24, 0x2B	; 43
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	2b e2       	ldi	r18, 0x2B	; 43
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	f9 01       	movw	r30, r18
    1b2c:	20 81       	ld	r18, Z
    1b2e:	22 60       	ori	r18, 0x02	; 2
    1b30:	fc 01       	movw	r30, r24
    1b32:	20 83       	st	Z, r18
		UBRRL=((F_CPU /(8*config->buadRate))-1);
    1b34:	09 e2       	ldi	r16, 0x29	; 41
    1b36:	10 e0       	ldi	r17, 0x00	; 0
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	81 81       	ldd	r24, Z+1	; 0x01
    1b40:	92 81       	ldd	r25, Z+2	; 0x02
    1b42:	a3 81       	ldd	r26, Z+3	; 0x03
    1b44:	b4 81       	ldd	r27, Z+4	; 0x04
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	aa 1f       	adc	r26, r26
    1b4c:	bb 1f       	adc	r27, r27
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	aa 1f       	adc	r26, r26
    1b54:	bb 1f       	adc	r27, r27
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	aa 1f       	adc	r26, r26
    1b5c:	bb 1f       	adc	r27, r27
    1b5e:	9c 01       	movw	r18, r24
    1b60:	ad 01       	movw	r20, r26
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	92 e1       	ldi	r25, 0x12	; 18
    1b66:	aa e7       	ldi	r26, 0x7A	; 122
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__udivmodsi4>
    1b72:	da 01       	movw	r26, r20
    1b74:	c9 01       	movw	r24, r18
    1b76:	81 50       	subi	r24, 0x01	; 1
    1b78:	f8 01       	movw	r30, r16
    1b7a:	80 83       	st	Z, r24
		UBRRH=((F_CPU /(8*config->buadRate))-1)>>8;
    1b7c:	00 e4       	ldi	r16, 0x40	; 64
    1b7e:	10 e0       	ldi	r17, 0x00	; 0
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	9a 81       	ldd	r25, Y+2	; 0x02
    1b84:	fc 01       	movw	r30, r24
    1b86:	81 81       	ldd	r24, Z+1	; 0x01
    1b88:	92 81       	ldd	r25, Z+2	; 0x02
    1b8a:	a3 81       	ldd	r26, Z+3	; 0x03
    1b8c:	b4 81       	ldd	r27, Z+4	; 0x04
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	aa 1f       	adc	r26, r26
    1b94:	bb 1f       	adc	r27, r27
    1b96:	88 0f       	add	r24, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	aa 1f       	adc	r26, r26
    1b9c:	bb 1f       	adc	r27, r27
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	aa 1f       	adc	r26, r26
    1ba4:	bb 1f       	adc	r27, r27
    1ba6:	9c 01       	movw	r18, r24
    1ba8:	ad 01       	movw	r20, r26
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	92 e1       	ldi	r25, 0x12	; 18
    1bae:	aa e7       	ldi	r26, 0x7A	; 122
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	bc 01       	movw	r22, r24
    1bb4:	cd 01       	movw	r24, r26
    1bb6:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__udivmodsi4>
    1bba:	da 01       	movw	r26, r20
    1bbc:	c9 01       	movw	r24, r18
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	a1 09       	sbc	r26, r1
    1bc2:	b1 09       	sbc	r27, r1
    1bc4:	89 2f       	mov	r24, r25
    1bc6:	9a 2f       	mov	r25, r26
    1bc8:	ab 2f       	mov	r26, r27
    1bca:	bb 27       	eor	r27, r27
    1bcc:	f8 01       	movw	r30, r16
    1bce:	80 83       	st	Z, r24

	}


/* TO enable writing on Register UCSRC (used for define the frame )as it has the same address with UBRR register */
SET_BIT(UCSRC,URSEL);
    1bd0:	80 e4       	ldi	r24, 0x40	; 64
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	20 e4       	ldi	r18, 0x40	; 64
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	f9 01       	movw	r30, r18
    1bda:	20 81       	ld	r18, Z
    1bdc:	20 68       	ori	r18, 0x80	; 128
    1bde:	fc 01       	movw	r30, r24
    1be0:	20 83       	st	Z, r18
/* the UART frame parameters*/
/* character size */
//SET_BIT(UCSRC,UCSZ0);
//SET_BIT(UCSRC,UCSZ1);
switch(config->character_size)
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	9a 81       	ldd	r25, Y+2	; 0x02
    1be6:	fc 01       	movw	r30, r24
    1be8:	80 81       	ld	r24, Z
    1bea:	88 2f       	mov	r24, r24
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	86 30       	cpi	r24, 0x06	; 6
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	f9 f0       	breq	.+62     	; 0x1c32 <UART_init+0x222>
    1bf4:	87 30       	cpi	r24, 0x07	; 7
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	1c f4       	brge	.+6      	; 0x1c00 <UART_init+0x1f0>
    1bfa:	05 97       	sbiw	r24, 0x05	; 5
    1bfc:	39 f0       	breq	.+14     	; 0x1c0c <UART_init+0x1fc>
    1bfe:	5b c0       	rjmp	.+182    	; 0x1cb6 <UART_init+0x2a6>
    1c00:	87 30       	cpi	r24, 0x07	; 7
    1c02:	91 05       	cpc	r25, r1
    1c04:	49 f1       	breq	.+82     	; 0x1c58 <UART_init+0x248>
    1c06:	09 97       	sbiw	r24, 0x09	; 9
    1c08:	d1 f1       	breq	.+116    	; 0x1c7e <UART_init+0x26e>
    1c0a:	55 c0       	rjmp	.+170    	; 0x1cb6 <UART_init+0x2a6>
{
case 5:
	CLEAR_BIT(UCSRC,UCSZ0);
    1c0c:	80 e4       	ldi	r24, 0x40	; 64
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	20 e4       	ldi	r18, 0x40	; 64
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	f9 01       	movw	r30, r18
    1c16:	20 81       	ld	r18, Z
    1c18:	2d 7f       	andi	r18, 0xFD	; 253
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	20 83       	st	Z, r18
	CLEAR_BIT(UCSRC,UCSZ1);
    1c1e:	80 e4       	ldi	r24, 0x40	; 64
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	20 e4       	ldi	r18, 0x40	; 64
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	f9 01       	movw	r30, r18
    1c28:	20 81       	ld	r18, Z
    1c2a:	2b 7f       	andi	r18, 0xFB	; 251
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	20 83       	st	Z, r18
	break;
    1c30:	54 c0       	rjmp	.+168    	; 0x1cda <UART_init+0x2ca>

case 6:
	CLEAR_BIT(UCSRC,UCSZ0);
    1c32:	80 e4       	ldi	r24, 0x40	; 64
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	20 e4       	ldi	r18, 0x40	; 64
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	f9 01       	movw	r30, r18
    1c3c:	20 81       	ld	r18, Z
    1c3e:	2d 7f       	andi	r18, 0xFD	; 253
    1c40:	fc 01       	movw	r30, r24
    1c42:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    1c44:	80 e4       	ldi	r24, 0x40	; 64
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	20 e4       	ldi	r18, 0x40	; 64
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	f9 01       	movw	r30, r18
    1c4e:	20 81       	ld	r18, Z
    1c50:	24 60       	ori	r18, 0x04	; 4
    1c52:	fc 01       	movw	r30, r24
    1c54:	20 83       	st	Z, r18
	break;
    1c56:	41 c0       	rjmp	.+130    	; 0x1cda <UART_init+0x2ca>
case 7:
	CLEAR_BIT(UCSRC,UCSZ1);
    1c58:	80 e4       	ldi	r24, 0x40	; 64
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	20 e4       	ldi	r18, 0x40	; 64
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	f9 01       	movw	r30, r18
    1c62:	20 81       	ld	r18, Z
    1c64:	2b 7f       	andi	r18, 0xFB	; 251
    1c66:	fc 01       	movw	r30, r24
    1c68:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ0);
    1c6a:	80 e4       	ldi	r24, 0x40	; 64
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	20 e4       	ldi	r18, 0x40	; 64
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	f9 01       	movw	r30, r18
    1c74:	20 81       	ld	r18, Z
    1c76:	22 60       	ori	r18, 0x02	; 2
    1c78:	fc 01       	movw	r30, r24
    1c7a:	20 83       	st	Z, r18
		break;
    1c7c:	2e c0       	rjmp	.+92     	; 0x1cda <UART_init+0x2ca>
case 9:
	SET_BIT(UCSRC,UCSZ0);
    1c7e:	80 e4       	ldi	r24, 0x40	; 64
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	20 e4       	ldi	r18, 0x40	; 64
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	f9 01       	movw	r30, r18
    1c88:	20 81       	ld	r18, Z
    1c8a:	22 60       	ori	r18, 0x02	; 2
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    1c90:	80 e4       	ldi	r24, 0x40	; 64
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	20 e4       	ldi	r18, 0x40	; 64
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	f9 01       	movw	r30, r18
    1c9a:	20 81       	ld	r18, Z
    1c9c:	24 60       	ori	r18, 0x04	; 4
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ2);
    1ca2:	80 e4       	ldi	r24, 0x40	; 64
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	20 e4       	ldi	r18, 0x40	; 64
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	f9 01       	movw	r30, r18
    1cac:	20 81       	ld	r18, Z
    1cae:	24 60       	ori	r18, 0x04	; 4
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	20 83       	st	Z, r18


	break;
    1cb4:	12 c0       	rjmp	.+36     	; 0x1cda <UART_init+0x2ca>

default :
	//SET_BIT(UCSRC,URSEL);
	SET_BIT(UCSRC,UCSZ0);
    1cb6:	80 e4       	ldi	r24, 0x40	; 64
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	20 e4       	ldi	r18, 0x40	; 64
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	f9 01       	movw	r30, r18
    1cc0:	20 81       	ld	r18, Z
    1cc2:	22 60       	ori	r18, 0x02	; 2
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    1cc8:	80 e4       	ldi	r24, 0x40	; 64
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	20 e4       	ldi	r18, 0x40	; 64
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	f9 01       	movw	r30, r18
    1cd2:	20 81       	ld	r18, Z
    1cd4:	24 60       	ori	r18, 0x04	; 4
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	20 83       	st	Z, r18
/* write on UBRR instead of ucsrc register */
//CLEAR_BIT(UCSRC,URSEL);//---------------------------------------<<<<
/* writing the baud rate prescaler */
//UBRRL=12;
//UBRRH=12>>8;
SET_BIT(UCSRB,RXEN);
    1cda:	8a e2       	ldi	r24, 0x2A	; 42
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	2a e2       	ldi	r18, 0x2A	; 42
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	f9 01       	movw	r30, r18
    1ce4:	20 81       	ld	r18, Z
    1ce6:	20 61       	ori	r18, 0x10	; 16
    1ce8:	fc 01       	movw	r30, r24
    1cea:	20 83       	st	Z, r18
SET_BIT(UCSRB,TXEN);
    1cec:	8a e2       	ldi	r24, 0x2A	; 42
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	2a e2       	ldi	r18, 0x2A	; 42
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	f9 01       	movw	r30, r18
    1cf6:	20 81       	ld	r18, Z
    1cf8:	28 60       	ori	r18, 0x08	; 8
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	20 83       	st	Z, r18
}
    1cfe:	00 00       	nop
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	1f 91       	pop	r17
    1d0a:	0f 91       	pop	r16
    1d0c:	08 95       	ret

00001d0e <UART_receiveByte>:

uint8 UART_receiveByte(void)
{
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)); /* wait until RXC  flag be 1 it means that there is data not read */
    1d16:	00 00       	nop
    1d18:	8b e2       	ldi	r24, 0x2B	; 43
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	80 81       	ld	r24, Z
    1d20:	88 23       	and	r24, r24
    1d22:	d4 f7       	brge	.-12     	; 0x1d18 <UART_receiveByte+0xa>

	return UDR;/* read and return RXC flag to zero */
    1d24:	8c e2       	ldi	r24, 0x2C	; 44
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	fc 01       	movw	r30, r24
    1d2a:	80 81       	ld	r24, Z
}
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	08 95       	ret

00001d32 <UART_sendByte>:
void UART_sendByte(const uint8 data)
{
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	1f 92       	push	r1
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
    1d3e:	8c e2       	ldi	r24, 0x2C	; 44
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	29 81       	ldd	r18, Y+1	; 0x01
    1d44:	fc 01       	movw	r30, r24
    1d46:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(UCSRA,TXC));//wait until send data txc =1;
    1d48:	00 00       	nop
    1d4a:	8b e2       	ldi	r24, 0x2B	; 43
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	fc 01       	movw	r30, r24
    1d50:	80 81       	ld	r24, Z
    1d52:	88 2f       	mov	r24, r24
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	80 74       	andi	r24, 0x40	; 64
    1d58:	99 27       	eor	r25, r25
    1d5a:	89 2b       	or	r24, r25
    1d5c:	b1 f3       	breq	.-20     	; 0x1d4a <UART_sendByte+0x18>
	SET_BIT(UCSRA,TXC); //clear the flag as it doesnt clear automatically as ISR
    1d5e:	8b e2       	ldi	r24, 0x2B	; 43
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	2b e2       	ldi	r18, 0x2B	; 43
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	f9 01       	movw	r30, r18
    1d68:	20 81       	ld	r18, Z
    1d6a:	20 64       	ori	r18, 0x40	; 64
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	20 83       	st	Z, r18
	//while(BIT_IS_CLEAR(UCSRA,UDRE)){}
		/* Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now */
	//	UDR = data;
}
    1d70:	00 00       	nop
    1d72:	0f 90       	pop	r0
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	08 95       	ret

00001d7a <UART_sendString>:
void UART_sendString(uint8 *str)
{
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <UART_sendString+0x6>
    1d80:	1f 92       	push	r1
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	9b 83       	std	Y+3, r25	; 0x03
    1d88:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d8a:	19 82       	std	Y+1, r1	; 0x01
		while(str[i] != '\0')
    1d8c:	0e c0       	rjmp	.+28     	; 0x1daa <UART_sendString+0x30>
		{
			UART_sendByte(str[i]);
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	88 2f       	mov	r24, r24
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	2a 81       	ldd	r18, Y+2	; 0x02
    1d96:	3b 81       	ldd	r19, Y+3	; 0x03
    1d98:	82 0f       	add	r24, r18
    1d9a:	93 1f       	adc	r25, r19
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	80 81       	ld	r24, Z
    1da0:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <UART_sendByte>
			i++;
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	8f 5f       	subi	r24, 0xFF	; 255
    1da8:	89 83       	std	Y+1, r24	; 0x01
	//	UDR = data;
}
void UART_sendString(uint8 *str)
{
	uint8 i = 0;
		while(str[i] != '\0')
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	88 2f       	mov	r24, r24
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	2a 81       	ldd	r18, Y+2	; 0x02
    1db2:	3b 81       	ldd	r19, Y+3	; 0x03
    1db4:	82 0f       	add	r24, r18
    1db6:	93 1f       	adc	r25, r19
    1db8:	fc 01       	movw	r30, r24
    1dba:	80 81       	ld	r24, Z
    1dbc:	88 23       	and	r24, r24
    1dbe:	39 f7       	brne	.-50     	; 0x1d8e <UART_sendString+0x14>
		{
			UART_sendByte(str[i]);
			i++;
		}
	UART_sendByte('#');
    1dc0:	83 e2       	ldi	r24, 0x23	; 35
    1dc2:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <UART_sendByte>

}
    1dc6:	00 00       	nop
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	08 95       	ret

00001dd4 <UART_receiveString>:
void UART_receiveString(uint8 *str)
{
    1dd4:	0f 93       	push	r16
    1dd6:	1f 93       	push	r17
    1dd8:	cf 93       	push	r28
    1dda:	df 93       	push	r29
    1ddc:	00 d0       	rcall	.+0      	; 0x1dde <UART_receiveString+0xa>
    1dde:	1f 92       	push	r1
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	9b 83       	std	Y+3, r25	; 0x03
    1de6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1de8:	19 82       	std	Y+1, r1	; 0x01
		str[i] = UART_receiveByte();
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	2a 81       	ldd	r18, Y+2	; 0x02
    1df2:	3b 81       	ldd	r19, Y+3	; 0x03
    1df4:	89 01       	movw	r16, r18
    1df6:	08 0f       	add	r16, r24
    1df8:	19 1f       	adc	r17, r25
    1dfa:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <UART_receiveByte>
    1dfe:	f8 01       	movw	r30, r16
    1e00:	80 83       	st	Z, r24
		while(str[i] != '#')
    1e02:	0f c0       	rjmp	.+30     	; 0x1e22 <UART_receiveString+0x4e>
		{
			i++;
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	8f 5f       	subi	r24, 0xFF	; 255
    1e08:	89 83       	std	Y+1, r24	; 0x01
			str[i] = UART_receiveByte();
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	2a 81       	ldd	r18, Y+2	; 0x02
    1e12:	3b 81       	ldd	r19, Y+3	; 0x03
    1e14:	89 01       	movw	r16, r18
    1e16:	08 0f       	add	r16, r24
    1e18:	19 1f       	adc	r17, r25
    1e1a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <UART_receiveByte>
    1e1e:	f8 01       	movw	r30, r16
    1e20:	80 83       	st	Z, r24
}
void UART_receiveString(uint8 *str)
{
	uint8 i = 0;
		str[i] = UART_receiveByte();
		while(str[i] != '#')
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	88 2f       	mov	r24, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	2a 81       	ldd	r18, Y+2	; 0x02
    1e2a:	3b 81       	ldd	r19, Y+3	; 0x03
    1e2c:	82 0f       	add	r24, r18
    1e2e:	93 1f       	adc	r25, r19
    1e30:	fc 01       	movw	r30, r24
    1e32:	80 81       	ld	r24, Z
    1e34:	83 32       	cpi	r24, 0x23	; 35
    1e36:	31 f7       	brne	.-52     	; 0x1e04 <UART_receiveString+0x30>
		{
			i++;
			str[i] = UART_receiveByte();
		}
		str[i] = '\0';
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	88 2f       	mov	r24, r24
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e40:	3b 81       	ldd	r19, Y+3	; 0x03
    1e42:	82 0f       	add	r24, r18
    1e44:	93 1f       	adc	r25, r19
    1e46:	fc 01       	movw	r30, r24
    1e48:	10 82       	st	Z, r1
}
    1e4a:	00 00       	nop
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	08 95       	ret

00001e5c <__udivmodsi4>:
    1e5c:	a1 e2       	ldi	r26, 0x21	; 33
    1e5e:	1a 2e       	mov	r1, r26
    1e60:	aa 1b       	sub	r26, r26
    1e62:	bb 1b       	sub	r27, r27
    1e64:	fd 01       	movw	r30, r26
    1e66:	0d c0       	rjmp	.+26     	; 0x1e82 <__udivmodsi4_ep>

00001e68 <__udivmodsi4_loop>:
    1e68:	aa 1f       	adc	r26, r26
    1e6a:	bb 1f       	adc	r27, r27
    1e6c:	ee 1f       	adc	r30, r30
    1e6e:	ff 1f       	adc	r31, r31
    1e70:	a2 17       	cp	r26, r18
    1e72:	b3 07       	cpc	r27, r19
    1e74:	e4 07       	cpc	r30, r20
    1e76:	f5 07       	cpc	r31, r21
    1e78:	20 f0       	brcs	.+8      	; 0x1e82 <__udivmodsi4_ep>
    1e7a:	a2 1b       	sub	r26, r18
    1e7c:	b3 0b       	sbc	r27, r19
    1e7e:	e4 0b       	sbc	r30, r20
    1e80:	f5 0b       	sbc	r31, r21

00001e82 <__udivmodsi4_ep>:
    1e82:	66 1f       	adc	r22, r22
    1e84:	77 1f       	adc	r23, r23
    1e86:	88 1f       	adc	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	1a 94       	dec	r1
    1e8c:	69 f7       	brne	.-38     	; 0x1e68 <__udivmodsi4_loop>
    1e8e:	60 95       	com	r22
    1e90:	70 95       	com	r23
    1e92:	80 95       	com	r24
    1e94:	90 95       	com	r25
    1e96:	9b 01       	movw	r18, r22
    1e98:	ac 01       	movw	r20, r24
    1e9a:	bd 01       	movw	r22, r26
    1e9c:	cf 01       	movw	r24, r30
    1e9e:	08 95       	ret

00001ea0 <__tablejump2__>:
    1ea0:	ee 0f       	add	r30, r30
    1ea2:	ff 1f       	adc	r31, r31
    1ea4:	05 90       	lpm	r0, Z+
    1ea6:	f4 91       	lpm	r31, Z
    1ea8:	e0 2d       	mov	r30, r0
    1eaa:	09 94       	ijmp

00001eac <__subsf3>:
    1eac:	50 58       	subi	r21, 0x80	; 128

00001eae <__addsf3>:
    1eae:	bb 27       	eor	r27, r27
    1eb0:	aa 27       	eor	r26, r26
    1eb2:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <__addsf3x>
    1eb6:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <__fp_round>
    1eba:	0e 94 96 10 	call	0x212c	; 0x212c <__fp_pscA>
    1ebe:	38 f0       	brcs	.+14     	; 0x1ece <__addsf3+0x20>
    1ec0:	0e 94 9d 10 	call	0x213a	; 0x213a <__fp_pscB>
    1ec4:	20 f0       	brcs	.+8      	; 0x1ece <__addsf3+0x20>
    1ec6:	39 f4       	brne	.+14     	; 0x1ed6 <__addsf3+0x28>
    1ec8:	9f 3f       	cpi	r25, 0xFF	; 255
    1eca:	19 f4       	brne	.+6      	; 0x1ed2 <__addsf3+0x24>
    1ecc:	26 f4       	brtc	.+8      	; 0x1ed6 <__addsf3+0x28>
    1ece:	0c 94 93 10 	jmp	0x2126	; 0x2126 <__fp_nan>
    1ed2:	0e f4       	brtc	.+2      	; 0x1ed6 <__addsf3+0x28>
    1ed4:	e0 95       	com	r30
    1ed6:	e7 fb       	bst	r30, 7
    1ed8:	0c 94 8d 10 	jmp	0x211a	; 0x211a <__fp_inf>

00001edc <__addsf3x>:
    1edc:	e9 2f       	mov	r30, r25
    1ede:	0e 94 b5 10 	call	0x216a	; 0x216a <__fp_split3>
    1ee2:	58 f3       	brcs	.-42     	; 0x1eba <__addsf3+0xc>
    1ee4:	ba 17       	cp	r27, r26
    1ee6:	62 07       	cpc	r22, r18
    1ee8:	73 07       	cpc	r23, r19
    1eea:	84 07       	cpc	r24, r20
    1eec:	95 07       	cpc	r25, r21
    1eee:	20 f0       	brcs	.+8      	; 0x1ef8 <__addsf3x+0x1c>
    1ef0:	79 f4       	brne	.+30     	; 0x1f10 <__addsf3x+0x34>
    1ef2:	a6 f5       	brtc	.+104    	; 0x1f5c <__addsf3x+0x80>
    1ef4:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__fp_zero>
    1ef8:	0e f4       	brtc	.+2      	; 0x1efc <__addsf3x+0x20>
    1efa:	e0 95       	com	r30
    1efc:	0b 2e       	mov	r0, r27
    1efe:	ba 2f       	mov	r27, r26
    1f00:	a0 2d       	mov	r26, r0
    1f02:	0b 01       	movw	r0, r22
    1f04:	b9 01       	movw	r22, r18
    1f06:	90 01       	movw	r18, r0
    1f08:	0c 01       	movw	r0, r24
    1f0a:	ca 01       	movw	r24, r20
    1f0c:	a0 01       	movw	r20, r0
    1f0e:	11 24       	eor	r1, r1
    1f10:	ff 27       	eor	r31, r31
    1f12:	59 1b       	sub	r21, r25
    1f14:	99 f0       	breq	.+38     	; 0x1f3c <__addsf3x+0x60>
    1f16:	59 3f       	cpi	r21, 0xF9	; 249
    1f18:	50 f4       	brcc	.+20     	; 0x1f2e <__addsf3x+0x52>
    1f1a:	50 3e       	cpi	r21, 0xE0	; 224
    1f1c:	68 f1       	brcs	.+90     	; 0x1f78 <__addsf3x+0x9c>
    1f1e:	1a 16       	cp	r1, r26
    1f20:	f0 40       	sbci	r31, 0x00	; 0
    1f22:	a2 2f       	mov	r26, r18
    1f24:	23 2f       	mov	r18, r19
    1f26:	34 2f       	mov	r19, r20
    1f28:	44 27       	eor	r20, r20
    1f2a:	58 5f       	subi	r21, 0xF8	; 248
    1f2c:	f3 cf       	rjmp	.-26     	; 0x1f14 <__addsf3x+0x38>
    1f2e:	46 95       	lsr	r20
    1f30:	37 95       	ror	r19
    1f32:	27 95       	ror	r18
    1f34:	a7 95       	ror	r26
    1f36:	f0 40       	sbci	r31, 0x00	; 0
    1f38:	53 95       	inc	r21
    1f3a:	c9 f7       	brne	.-14     	; 0x1f2e <__addsf3x+0x52>
    1f3c:	7e f4       	brtc	.+30     	; 0x1f5c <__addsf3x+0x80>
    1f3e:	1f 16       	cp	r1, r31
    1f40:	ba 0b       	sbc	r27, r26
    1f42:	62 0b       	sbc	r22, r18
    1f44:	73 0b       	sbc	r23, r19
    1f46:	84 0b       	sbc	r24, r20
    1f48:	ba f0       	brmi	.+46     	; 0x1f78 <__addsf3x+0x9c>
    1f4a:	91 50       	subi	r25, 0x01	; 1
    1f4c:	a1 f0       	breq	.+40     	; 0x1f76 <__addsf3x+0x9a>
    1f4e:	ff 0f       	add	r31, r31
    1f50:	bb 1f       	adc	r27, r27
    1f52:	66 1f       	adc	r22, r22
    1f54:	77 1f       	adc	r23, r23
    1f56:	88 1f       	adc	r24, r24
    1f58:	c2 f7       	brpl	.-16     	; 0x1f4a <__addsf3x+0x6e>
    1f5a:	0e c0       	rjmp	.+28     	; 0x1f78 <__addsf3x+0x9c>
    1f5c:	ba 0f       	add	r27, r26
    1f5e:	62 1f       	adc	r22, r18
    1f60:	73 1f       	adc	r23, r19
    1f62:	84 1f       	adc	r24, r20
    1f64:	48 f4       	brcc	.+18     	; 0x1f78 <__addsf3x+0x9c>
    1f66:	87 95       	ror	r24
    1f68:	77 95       	ror	r23
    1f6a:	67 95       	ror	r22
    1f6c:	b7 95       	ror	r27
    1f6e:	f7 95       	ror	r31
    1f70:	9e 3f       	cpi	r25, 0xFE	; 254
    1f72:	08 f0       	brcs	.+2      	; 0x1f76 <__addsf3x+0x9a>
    1f74:	b0 cf       	rjmp	.-160    	; 0x1ed6 <__addsf3+0x28>
    1f76:	93 95       	inc	r25
    1f78:	88 0f       	add	r24, r24
    1f7a:	08 f0       	brcs	.+2      	; 0x1f7e <__addsf3x+0xa2>
    1f7c:	99 27       	eor	r25, r25
    1f7e:	ee 0f       	add	r30, r30
    1f80:	97 95       	ror	r25
    1f82:	87 95       	ror	r24
    1f84:	08 95       	ret

00001f86 <__cmpsf2>:
    1f86:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__fp_cmp>
    1f8a:	08 f4       	brcc	.+2      	; 0x1f8e <__cmpsf2+0x8>
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	08 95       	ret

00001f90 <__divsf3>:
    1f90:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <__divsf3x>
    1f94:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <__fp_round>
    1f98:	0e 94 9d 10 	call	0x213a	; 0x213a <__fp_pscB>
    1f9c:	58 f0       	brcs	.+22     	; 0x1fb4 <__divsf3+0x24>
    1f9e:	0e 94 96 10 	call	0x212c	; 0x212c <__fp_pscA>
    1fa2:	40 f0       	brcs	.+16     	; 0x1fb4 <__divsf3+0x24>
    1fa4:	29 f4       	brne	.+10     	; 0x1fb0 <__divsf3+0x20>
    1fa6:	5f 3f       	cpi	r21, 0xFF	; 255
    1fa8:	29 f0       	breq	.+10     	; 0x1fb4 <__divsf3+0x24>
    1faa:	0c 94 8d 10 	jmp	0x211a	; 0x211a <__fp_inf>
    1fae:	51 11       	cpse	r21, r1
    1fb0:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__fp_szero>
    1fb4:	0c 94 93 10 	jmp	0x2126	; 0x2126 <__fp_nan>

00001fb8 <__divsf3x>:
    1fb8:	0e 94 b5 10 	call	0x216a	; 0x216a <__fp_split3>
    1fbc:	68 f3       	brcs	.-38     	; 0x1f98 <__divsf3+0x8>

00001fbe <__divsf3_pse>:
    1fbe:	99 23       	and	r25, r25
    1fc0:	b1 f3       	breq	.-20     	; 0x1fae <__divsf3+0x1e>
    1fc2:	55 23       	and	r21, r21
    1fc4:	91 f3       	breq	.-28     	; 0x1faa <__divsf3+0x1a>
    1fc6:	95 1b       	sub	r25, r21
    1fc8:	55 0b       	sbc	r21, r21
    1fca:	bb 27       	eor	r27, r27
    1fcc:	aa 27       	eor	r26, r26
    1fce:	62 17       	cp	r22, r18
    1fd0:	73 07       	cpc	r23, r19
    1fd2:	84 07       	cpc	r24, r20
    1fd4:	38 f0       	brcs	.+14     	; 0x1fe4 <__divsf3_pse+0x26>
    1fd6:	9f 5f       	subi	r25, 0xFF	; 255
    1fd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fda:	22 0f       	add	r18, r18
    1fdc:	33 1f       	adc	r19, r19
    1fde:	44 1f       	adc	r20, r20
    1fe0:	aa 1f       	adc	r26, r26
    1fe2:	a9 f3       	breq	.-22     	; 0x1fce <__divsf3_pse+0x10>
    1fe4:	35 d0       	rcall	.+106    	; 0x2050 <__divsf3_pse+0x92>
    1fe6:	0e 2e       	mov	r0, r30
    1fe8:	3a f0       	brmi	.+14     	; 0x1ff8 <__divsf3_pse+0x3a>
    1fea:	e0 e8       	ldi	r30, 0x80	; 128
    1fec:	32 d0       	rcall	.+100    	; 0x2052 <__divsf3_pse+0x94>
    1fee:	91 50       	subi	r25, 0x01	; 1
    1ff0:	50 40       	sbci	r21, 0x00	; 0
    1ff2:	e6 95       	lsr	r30
    1ff4:	00 1c       	adc	r0, r0
    1ff6:	ca f7       	brpl	.-14     	; 0x1fea <__divsf3_pse+0x2c>
    1ff8:	2b d0       	rcall	.+86     	; 0x2050 <__divsf3_pse+0x92>
    1ffa:	fe 2f       	mov	r31, r30
    1ffc:	29 d0       	rcall	.+82     	; 0x2050 <__divsf3_pse+0x92>
    1ffe:	66 0f       	add	r22, r22
    2000:	77 1f       	adc	r23, r23
    2002:	88 1f       	adc	r24, r24
    2004:	bb 1f       	adc	r27, r27
    2006:	26 17       	cp	r18, r22
    2008:	37 07       	cpc	r19, r23
    200a:	48 07       	cpc	r20, r24
    200c:	ab 07       	cpc	r26, r27
    200e:	b0 e8       	ldi	r27, 0x80	; 128
    2010:	09 f0       	breq	.+2      	; 0x2014 <__divsf3_pse+0x56>
    2012:	bb 0b       	sbc	r27, r27
    2014:	80 2d       	mov	r24, r0
    2016:	bf 01       	movw	r22, r30
    2018:	ff 27       	eor	r31, r31
    201a:	93 58       	subi	r25, 0x83	; 131
    201c:	5f 4f       	sbci	r21, 0xFF	; 255
    201e:	3a f0       	brmi	.+14     	; 0x202e <__divsf3_pse+0x70>
    2020:	9e 3f       	cpi	r25, 0xFE	; 254
    2022:	51 05       	cpc	r21, r1
    2024:	78 f0       	brcs	.+30     	; 0x2044 <__divsf3_pse+0x86>
    2026:	0c 94 8d 10 	jmp	0x211a	; 0x211a <__fp_inf>
    202a:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__fp_szero>
    202e:	5f 3f       	cpi	r21, 0xFF	; 255
    2030:	e4 f3       	brlt	.-8      	; 0x202a <__divsf3_pse+0x6c>
    2032:	98 3e       	cpi	r25, 0xE8	; 232
    2034:	d4 f3       	brlt	.-12     	; 0x202a <__divsf3_pse+0x6c>
    2036:	86 95       	lsr	r24
    2038:	77 95       	ror	r23
    203a:	67 95       	ror	r22
    203c:	b7 95       	ror	r27
    203e:	f7 95       	ror	r31
    2040:	9f 5f       	subi	r25, 0xFF	; 255
    2042:	c9 f7       	brne	.-14     	; 0x2036 <__divsf3_pse+0x78>
    2044:	88 0f       	add	r24, r24
    2046:	91 1d       	adc	r25, r1
    2048:	96 95       	lsr	r25
    204a:	87 95       	ror	r24
    204c:	97 f9       	bld	r25, 7
    204e:	08 95       	ret
    2050:	e1 e0       	ldi	r30, 0x01	; 1
    2052:	66 0f       	add	r22, r22
    2054:	77 1f       	adc	r23, r23
    2056:	88 1f       	adc	r24, r24
    2058:	bb 1f       	adc	r27, r27
    205a:	62 17       	cp	r22, r18
    205c:	73 07       	cpc	r23, r19
    205e:	84 07       	cpc	r24, r20
    2060:	ba 07       	cpc	r27, r26
    2062:	20 f0       	brcs	.+8      	; 0x206c <__divsf3_pse+0xae>
    2064:	62 1b       	sub	r22, r18
    2066:	73 0b       	sbc	r23, r19
    2068:	84 0b       	sbc	r24, r20
    206a:	ba 0b       	sbc	r27, r26
    206c:	ee 1f       	adc	r30, r30
    206e:	88 f7       	brcc	.-30     	; 0x2052 <__divsf3_pse+0x94>
    2070:	e0 95       	com	r30
    2072:	08 95       	ret

00002074 <__fixunssfsi>:
    2074:	0e 94 bd 10 	call	0x217a	; 0x217a <__fp_splitA>
    2078:	88 f0       	brcs	.+34     	; 0x209c <__fixunssfsi+0x28>
    207a:	9f 57       	subi	r25, 0x7F	; 127
    207c:	98 f0       	brcs	.+38     	; 0x20a4 <__fixunssfsi+0x30>
    207e:	b9 2f       	mov	r27, r25
    2080:	99 27       	eor	r25, r25
    2082:	b7 51       	subi	r27, 0x17	; 23
    2084:	b0 f0       	brcs	.+44     	; 0x20b2 <__fixunssfsi+0x3e>
    2086:	e1 f0       	breq	.+56     	; 0x20c0 <__fixunssfsi+0x4c>
    2088:	66 0f       	add	r22, r22
    208a:	77 1f       	adc	r23, r23
    208c:	88 1f       	adc	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	1a f0       	brmi	.+6      	; 0x2098 <__fixunssfsi+0x24>
    2092:	ba 95       	dec	r27
    2094:	c9 f7       	brne	.-14     	; 0x2088 <__fixunssfsi+0x14>
    2096:	14 c0       	rjmp	.+40     	; 0x20c0 <__fixunssfsi+0x4c>
    2098:	b1 30       	cpi	r27, 0x01	; 1
    209a:	91 f0       	breq	.+36     	; 0x20c0 <__fixunssfsi+0x4c>
    209c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <__fp_zero>
    20a0:	b1 e0       	ldi	r27, 0x01	; 1
    20a2:	08 95       	ret
    20a4:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__fp_zero>
    20a8:	67 2f       	mov	r22, r23
    20aa:	78 2f       	mov	r23, r24
    20ac:	88 27       	eor	r24, r24
    20ae:	b8 5f       	subi	r27, 0xF8	; 248
    20b0:	39 f0       	breq	.+14     	; 0x20c0 <__fixunssfsi+0x4c>
    20b2:	b9 3f       	cpi	r27, 0xF9	; 249
    20b4:	cc f3       	brlt	.-14     	; 0x20a8 <__fixunssfsi+0x34>
    20b6:	86 95       	lsr	r24
    20b8:	77 95       	ror	r23
    20ba:	67 95       	ror	r22
    20bc:	b3 95       	inc	r27
    20be:	d9 f7       	brne	.-10     	; 0x20b6 <__fixunssfsi+0x42>
    20c0:	3e f4       	brtc	.+14     	; 0x20d0 <__fixunssfsi+0x5c>
    20c2:	90 95       	com	r25
    20c4:	80 95       	com	r24
    20c6:	70 95       	com	r23
    20c8:	61 95       	neg	r22
    20ca:	7f 4f       	sbci	r23, 0xFF	; 255
    20cc:	8f 4f       	sbci	r24, 0xFF	; 255
    20ce:	9f 4f       	sbci	r25, 0xFF	; 255
    20d0:	08 95       	ret

000020d2 <__fp_cmp>:
    20d2:	99 0f       	add	r25, r25
    20d4:	00 08       	sbc	r0, r0
    20d6:	55 0f       	add	r21, r21
    20d8:	aa 0b       	sbc	r26, r26
    20da:	e0 e8       	ldi	r30, 0x80	; 128
    20dc:	fe ef       	ldi	r31, 0xFE	; 254
    20de:	16 16       	cp	r1, r22
    20e0:	17 06       	cpc	r1, r23
    20e2:	e8 07       	cpc	r30, r24
    20e4:	f9 07       	cpc	r31, r25
    20e6:	c0 f0       	brcs	.+48     	; 0x2118 <__fp_cmp+0x46>
    20e8:	12 16       	cp	r1, r18
    20ea:	13 06       	cpc	r1, r19
    20ec:	e4 07       	cpc	r30, r20
    20ee:	f5 07       	cpc	r31, r21
    20f0:	98 f0       	brcs	.+38     	; 0x2118 <__fp_cmp+0x46>
    20f2:	62 1b       	sub	r22, r18
    20f4:	73 0b       	sbc	r23, r19
    20f6:	84 0b       	sbc	r24, r20
    20f8:	95 0b       	sbc	r25, r21
    20fa:	39 f4       	brne	.+14     	; 0x210a <__fp_cmp+0x38>
    20fc:	0a 26       	eor	r0, r26
    20fe:	61 f0       	breq	.+24     	; 0x2118 <__fp_cmp+0x46>
    2100:	23 2b       	or	r18, r19
    2102:	24 2b       	or	r18, r20
    2104:	25 2b       	or	r18, r21
    2106:	21 f4       	brne	.+8      	; 0x2110 <__fp_cmp+0x3e>
    2108:	08 95       	ret
    210a:	0a 26       	eor	r0, r26
    210c:	09 f4       	brne	.+2      	; 0x2110 <__fp_cmp+0x3e>
    210e:	a1 40       	sbci	r26, 0x01	; 1
    2110:	a6 95       	lsr	r26
    2112:	8f ef       	ldi	r24, 0xFF	; 255
    2114:	81 1d       	adc	r24, r1
    2116:	81 1d       	adc	r24, r1
    2118:	08 95       	ret

0000211a <__fp_inf>:
    211a:	97 f9       	bld	r25, 7
    211c:	9f 67       	ori	r25, 0x7F	; 127
    211e:	80 e8       	ldi	r24, 0x80	; 128
    2120:	70 e0       	ldi	r23, 0x00	; 0
    2122:	60 e0       	ldi	r22, 0x00	; 0
    2124:	08 95       	ret

00002126 <__fp_nan>:
    2126:	9f ef       	ldi	r25, 0xFF	; 255
    2128:	80 ec       	ldi	r24, 0xC0	; 192
    212a:	08 95       	ret

0000212c <__fp_pscA>:
    212c:	00 24       	eor	r0, r0
    212e:	0a 94       	dec	r0
    2130:	16 16       	cp	r1, r22
    2132:	17 06       	cpc	r1, r23
    2134:	18 06       	cpc	r1, r24
    2136:	09 06       	cpc	r0, r25
    2138:	08 95       	ret

0000213a <__fp_pscB>:
    213a:	00 24       	eor	r0, r0
    213c:	0a 94       	dec	r0
    213e:	12 16       	cp	r1, r18
    2140:	13 06       	cpc	r1, r19
    2142:	14 06       	cpc	r1, r20
    2144:	05 06       	cpc	r0, r21
    2146:	08 95       	ret

00002148 <__fp_round>:
    2148:	09 2e       	mov	r0, r25
    214a:	03 94       	inc	r0
    214c:	00 0c       	add	r0, r0
    214e:	11 f4       	brne	.+4      	; 0x2154 <__fp_round+0xc>
    2150:	88 23       	and	r24, r24
    2152:	52 f0       	brmi	.+20     	; 0x2168 <__fp_round+0x20>
    2154:	bb 0f       	add	r27, r27
    2156:	40 f4       	brcc	.+16     	; 0x2168 <__fp_round+0x20>
    2158:	bf 2b       	or	r27, r31
    215a:	11 f4       	brne	.+4      	; 0x2160 <__fp_round+0x18>
    215c:	60 ff       	sbrs	r22, 0
    215e:	04 c0       	rjmp	.+8      	; 0x2168 <__fp_round+0x20>
    2160:	6f 5f       	subi	r22, 0xFF	; 255
    2162:	7f 4f       	sbci	r23, 0xFF	; 255
    2164:	8f 4f       	sbci	r24, 0xFF	; 255
    2166:	9f 4f       	sbci	r25, 0xFF	; 255
    2168:	08 95       	ret

0000216a <__fp_split3>:
    216a:	57 fd       	sbrc	r21, 7
    216c:	90 58       	subi	r25, 0x80	; 128
    216e:	44 0f       	add	r20, r20
    2170:	55 1f       	adc	r21, r21
    2172:	59 f0       	breq	.+22     	; 0x218a <__fp_splitA+0x10>
    2174:	5f 3f       	cpi	r21, 0xFF	; 255
    2176:	71 f0       	breq	.+28     	; 0x2194 <__fp_splitA+0x1a>
    2178:	47 95       	ror	r20

0000217a <__fp_splitA>:
    217a:	88 0f       	add	r24, r24
    217c:	97 fb       	bst	r25, 7
    217e:	99 1f       	adc	r25, r25
    2180:	61 f0       	breq	.+24     	; 0x219a <__fp_splitA+0x20>
    2182:	9f 3f       	cpi	r25, 0xFF	; 255
    2184:	79 f0       	breq	.+30     	; 0x21a4 <__fp_splitA+0x2a>
    2186:	87 95       	ror	r24
    2188:	08 95       	ret
    218a:	12 16       	cp	r1, r18
    218c:	13 06       	cpc	r1, r19
    218e:	14 06       	cpc	r1, r20
    2190:	55 1f       	adc	r21, r21
    2192:	f2 cf       	rjmp	.-28     	; 0x2178 <__fp_split3+0xe>
    2194:	46 95       	lsr	r20
    2196:	f1 df       	rcall	.-30     	; 0x217a <__fp_splitA>
    2198:	08 c0       	rjmp	.+16     	; 0x21aa <__fp_splitA+0x30>
    219a:	16 16       	cp	r1, r22
    219c:	17 06       	cpc	r1, r23
    219e:	18 06       	cpc	r1, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	f1 cf       	rjmp	.-30     	; 0x2186 <__fp_splitA+0xc>
    21a4:	86 95       	lsr	r24
    21a6:	71 05       	cpc	r23, r1
    21a8:	61 05       	cpc	r22, r1
    21aa:	08 94       	sec
    21ac:	08 95       	ret

000021ae <__fp_zero>:
    21ae:	e8 94       	clt

000021b0 <__fp_szero>:
    21b0:	bb 27       	eor	r27, r27
    21b2:	66 27       	eor	r22, r22
    21b4:	77 27       	eor	r23, r23
    21b6:	cb 01       	movw	r24, r22
    21b8:	97 f9       	bld	r25, 7
    21ba:	08 95       	ret

000021bc <__gesf2>:
    21bc:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__fp_cmp>
    21c0:	08 f4       	brcc	.+2      	; 0x21c4 <__gesf2+0x8>
    21c2:	8f ef       	ldi	r24, 0xFF	; 255
    21c4:	08 95       	ret

000021c6 <__mulsf3>:
    21c6:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__mulsf3x>
    21ca:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <__fp_round>
    21ce:	0e 94 96 10 	call	0x212c	; 0x212c <__fp_pscA>
    21d2:	38 f0       	brcs	.+14     	; 0x21e2 <__mulsf3+0x1c>
    21d4:	0e 94 9d 10 	call	0x213a	; 0x213a <__fp_pscB>
    21d8:	20 f0       	brcs	.+8      	; 0x21e2 <__mulsf3+0x1c>
    21da:	95 23       	and	r25, r21
    21dc:	11 f0       	breq	.+4      	; 0x21e2 <__mulsf3+0x1c>
    21de:	0c 94 8d 10 	jmp	0x211a	; 0x211a <__fp_inf>
    21e2:	0c 94 93 10 	jmp	0x2126	; 0x2126 <__fp_nan>
    21e6:	11 24       	eor	r1, r1
    21e8:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__fp_szero>

000021ec <__mulsf3x>:
    21ec:	0e 94 b5 10 	call	0x216a	; 0x216a <__fp_split3>
    21f0:	70 f3       	brcs	.-36     	; 0x21ce <__mulsf3+0x8>

000021f2 <__mulsf3_pse>:
    21f2:	95 9f       	mul	r25, r21
    21f4:	c1 f3       	breq	.-16     	; 0x21e6 <__mulsf3+0x20>
    21f6:	95 0f       	add	r25, r21
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	55 1f       	adc	r21, r21
    21fc:	62 9f       	mul	r22, r18
    21fe:	f0 01       	movw	r30, r0
    2200:	72 9f       	mul	r23, r18
    2202:	bb 27       	eor	r27, r27
    2204:	f0 0d       	add	r31, r0
    2206:	b1 1d       	adc	r27, r1
    2208:	63 9f       	mul	r22, r19
    220a:	aa 27       	eor	r26, r26
    220c:	f0 0d       	add	r31, r0
    220e:	b1 1d       	adc	r27, r1
    2210:	aa 1f       	adc	r26, r26
    2212:	64 9f       	mul	r22, r20
    2214:	66 27       	eor	r22, r22
    2216:	b0 0d       	add	r27, r0
    2218:	a1 1d       	adc	r26, r1
    221a:	66 1f       	adc	r22, r22
    221c:	82 9f       	mul	r24, r18
    221e:	22 27       	eor	r18, r18
    2220:	b0 0d       	add	r27, r0
    2222:	a1 1d       	adc	r26, r1
    2224:	62 1f       	adc	r22, r18
    2226:	73 9f       	mul	r23, r19
    2228:	b0 0d       	add	r27, r0
    222a:	a1 1d       	adc	r26, r1
    222c:	62 1f       	adc	r22, r18
    222e:	83 9f       	mul	r24, r19
    2230:	a0 0d       	add	r26, r0
    2232:	61 1d       	adc	r22, r1
    2234:	22 1f       	adc	r18, r18
    2236:	74 9f       	mul	r23, r20
    2238:	33 27       	eor	r19, r19
    223a:	a0 0d       	add	r26, r0
    223c:	61 1d       	adc	r22, r1
    223e:	23 1f       	adc	r18, r19
    2240:	84 9f       	mul	r24, r20
    2242:	60 0d       	add	r22, r0
    2244:	21 1d       	adc	r18, r1
    2246:	82 2f       	mov	r24, r18
    2248:	76 2f       	mov	r23, r22
    224a:	6a 2f       	mov	r22, r26
    224c:	11 24       	eor	r1, r1
    224e:	9f 57       	subi	r25, 0x7F	; 127
    2250:	50 40       	sbci	r21, 0x00	; 0
    2252:	9a f0       	brmi	.+38     	; 0x227a <__mulsf3_pse+0x88>
    2254:	f1 f0       	breq	.+60     	; 0x2292 <__mulsf3_pse+0xa0>
    2256:	88 23       	and	r24, r24
    2258:	4a f0       	brmi	.+18     	; 0x226c <__mulsf3_pse+0x7a>
    225a:	ee 0f       	add	r30, r30
    225c:	ff 1f       	adc	r31, r31
    225e:	bb 1f       	adc	r27, r27
    2260:	66 1f       	adc	r22, r22
    2262:	77 1f       	adc	r23, r23
    2264:	88 1f       	adc	r24, r24
    2266:	91 50       	subi	r25, 0x01	; 1
    2268:	50 40       	sbci	r21, 0x00	; 0
    226a:	a9 f7       	brne	.-22     	; 0x2256 <__mulsf3_pse+0x64>
    226c:	9e 3f       	cpi	r25, 0xFE	; 254
    226e:	51 05       	cpc	r21, r1
    2270:	80 f0       	brcs	.+32     	; 0x2292 <__mulsf3_pse+0xa0>
    2272:	0c 94 8d 10 	jmp	0x211a	; 0x211a <__fp_inf>
    2276:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <__fp_szero>
    227a:	5f 3f       	cpi	r21, 0xFF	; 255
    227c:	e4 f3       	brlt	.-8      	; 0x2276 <__mulsf3_pse+0x84>
    227e:	98 3e       	cpi	r25, 0xE8	; 232
    2280:	d4 f3       	brlt	.-12     	; 0x2276 <__mulsf3_pse+0x84>
    2282:	86 95       	lsr	r24
    2284:	77 95       	ror	r23
    2286:	67 95       	ror	r22
    2288:	b7 95       	ror	r27
    228a:	f7 95       	ror	r31
    228c:	e7 95       	ror	r30
    228e:	9f 5f       	subi	r25, 0xFF	; 255
    2290:	c1 f7       	brne	.-16     	; 0x2282 <__mulsf3_pse+0x90>
    2292:	fe 2b       	or	r31, r30
    2294:	88 0f       	add	r24, r24
    2296:	91 1d       	adc	r25, r1
    2298:	96 95       	lsr	r25
    229a:	87 95       	ror	r24
    229c:	97 f9       	bld	r25, 7
    229e:	08 95       	ret

000022a0 <strcat>:
    22a0:	fb 01       	movw	r30, r22
    22a2:	dc 01       	movw	r26, r24
    22a4:	0d 90       	ld	r0, X+
    22a6:	00 20       	and	r0, r0
    22a8:	e9 f7       	brne	.-6      	; 0x22a4 <strcat+0x4>
    22aa:	11 97       	sbiw	r26, 0x01	; 1
    22ac:	01 90       	ld	r0, Z+
    22ae:	0d 92       	st	X+, r0
    22b0:	00 20       	and	r0, r0
    22b2:	e1 f7       	brne	.-8      	; 0x22ac <strcat+0xc>
    22b4:	08 95       	ret

000022b6 <strcmp>:
    22b6:	fb 01       	movw	r30, r22
    22b8:	dc 01       	movw	r26, r24
    22ba:	8d 91       	ld	r24, X+
    22bc:	01 90       	ld	r0, Z+
    22be:	80 19       	sub	r24, r0
    22c0:	01 10       	cpse	r0, r1
    22c2:	d9 f3       	breq	.-10     	; 0x22ba <strcmp+0x4>
    22c4:	99 0b       	sbc	r25, r25
    22c6:	08 95       	ret

000022c8 <itoa>:
    22c8:	45 32       	cpi	r20, 0x25	; 37
    22ca:	51 05       	cpc	r21, r1
    22cc:	20 f4       	brcc	.+8      	; 0x22d6 <itoa+0xe>
    22ce:	42 30       	cpi	r20, 0x02	; 2
    22d0:	10 f0       	brcs	.+4      	; 0x22d6 <itoa+0xe>
    22d2:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__itoa_ncheck>
    22d6:	fb 01       	movw	r30, r22
    22d8:	10 82       	st	Z, r1
    22da:	cb 01       	movw	r24, r22
    22dc:	08 95       	ret

000022de <__itoa_ncheck>:
    22de:	bb 27       	eor	r27, r27
    22e0:	4a 30       	cpi	r20, 0x0A	; 10
    22e2:	31 f4       	brne	.+12     	; 0x22f0 <__itoa_ncheck+0x12>
    22e4:	99 23       	and	r25, r25
    22e6:	22 f4       	brpl	.+8      	; 0x22f0 <__itoa_ncheck+0x12>
    22e8:	bd e2       	ldi	r27, 0x2D	; 45
    22ea:	90 95       	com	r25
    22ec:	81 95       	neg	r24
    22ee:	9f 4f       	sbci	r25, 0xFF	; 255
    22f0:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__utoa_common>

000022f4 <__utoa_ncheck>:
    22f4:	bb 27       	eor	r27, r27

000022f6 <__utoa_common>:
    22f6:	fb 01       	movw	r30, r22
    22f8:	55 27       	eor	r21, r21
    22fa:	aa 27       	eor	r26, r26
    22fc:	88 0f       	add	r24, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	aa 1f       	adc	r26, r26
    2302:	a4 17       	cp	r26, r20
    2304:	10 f0       	brcs	.+4      	; 0x230a <__utoa_common+0x14>
    2306:	a4 1b       	sub	r26, r20
    2308:	83 95       	inc	r24
    230a:	50 51       	subi	r21, 0x10	; 16
    230c:	b9 f7       	brne	.-18     	; 0x22fc <__utoa_common+0x6>
    230e:	a0 5d       	subi	r26, 0xD0	; 208
    2310:	aa 33       	cpi	r26, 0x3A	; 58
    2312:	08 f0       	brcs	.+2      	; 0x2316 <__utoa_common+0x20>
    2314:	a9 5d       	subi	r26, 0xD9	; 217
    2316:	a1 93       	st	Z+, r26
    2318:	00 97       	sbiw	r24, 0x00	; 0
    231a:	79 f7       	brne	.-34     	; 0x22fa <__utoa_common+0x4>
    231c:	b1 11       	cpse	r27, r1
    231e:	b1 93       	st	Z+, r27
    2320:	11 92       	st	Z+, r1
    2322:	cb 01       	movw	r24, r22
    2324:	0c 94 94 11 	jmp	0x2328	; 0x2328 <strrev>

00002328 <strrev>:
    2328:	dc 01       	movw	r26, r24
    232a:	fc 01       	movw	r30, r24
    232c:	67 2f       	mov	r22, r23
    232e:	71 91       	ld	r23, Z+
    2330:	77 23       	and	r23, r23
    2332:	e1 f7       	brne	.-8      	; 0x232c <strrev+0x4>
    2334:	32 97       	sbiw	r30, 0x02	; 2
    2336:	04 c0       	rjmp	.+8      	; 0x2340 <strrev+0x18>
    2338:	7c 91       	ld	r23, X
    233a:	6d 93       	st	X+, r22
    233c:	70 83       	st	Z, r23
    233e:	62 91       	ld	r22, -Z
    2340:	ae 17       	cp	r26, r30
    2342:	bf 07       	cpc	r27, r31
    2344:	c8 f3       	brcs	.-14     	; 0x2338 <strrev+0x10>
    2346:	08 95       	ret

00002348 <_exit>:
    2348:	f8 94       	cli

0000234a <__stop_program>:
    234a:	ff cf       	rjmp	.-2      	; 0x234a <__stop_program>
