
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000278e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  0000278e  00002822  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000061  0080017e  0080017e  00002940  2**0
                  ALLOC
  3 .stab         00003084  00000000  00000000  00002940  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001479  00000000  00000000  000059c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006e3d  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006e50  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00006e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  000073ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000078a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  000078bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <__vector_6>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <__vector_9>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__vector_19>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	03 04       	cpc	r0, r3
      56:	05 04       	cpc	r0, r5
      58:	07 04       	cpc	r0, r7
      5a:	09 04       	cpc	r0, r9
      5c:	0b 04       	cpc	r0, r11
      5e:	0d 04       	cpc	r0, r13
      60:	0f 04       	cpc	r0, r15
      62:	11 04       	cpc	r1, r1
      64:	13 04       	cpc	r1, r3
      66:	15 04       	cpc	r1, r5
      68:	17 04       	cpc	r1, r7
      6a:	19 04       	cpc	r1, r9
      6c:	1b 04       	cpc	r1, r11
      6e:	1d 04       	cpc	r1, r13
      70:	1f 04       	cpc	r1, r15
      72:	21 04       	cpc	r2, r1

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf e5       	ldi	r28, 0x5F	; 95
      7a:	d4 e0       	ldi	r29, 0x04	; 4
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	11 e0       	ldi	r17, 0x01	; 1
      82:	a0 e6       	ldi	r26, 0x60	; 96
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	ee e8       	ldi	r30, 0x8E	; 142
      88:	f7 e2       	ldi	r31, 0x27	; 39
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	ae 37       	cpi	r26, 0x7E	; 126
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	21 e0       	ldi	r18, 0x01	; 1
      98:	ae e7       	ldi	r26, 0x7E	; 126
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	af 3d       	cpi	r26, 0xDF	; 223
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
      aa:	0c 94 c5 13 	jmp	0x278a	; 0x278a <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:
void intgerToString(int data);
void readPassword(uint8 *data);

UART_configurationType UART_config ;
int main()
{
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
      ba:	e9 97       	sbiw	r28, 0x39	; 57
      bc:	0f b6       	in	r0, 0x3f	; 63
      be:	f8 94       	cli
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	0f be       	out	0x3f, r0	; 63
      c4:	cd bf       	out	0x3d, r28	; 61
	UART_config.buadRate=9600;
      c6:	80 e8       	ldi	r24, 0x80	; 128
      c8:	95 e2       	ldi	r25, 0x25	; 37
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <UART_config+0x1>
      d2:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <UART_config+0x2>
      d6:	a0 93 c7 01 	sts	0x01C7, r26	; 0x8001c7 <UART_config+0x3>
      da:	b0 93 c8 01 	sts	0x01C8, r27	; 0x8001c8 <UART_config+0x4>
	UART_config.character_size=8;
      de:	88 e0       	ldi	r24, 0x08	; 8
      e0:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <UART_config>
	strcpy(UART_config.mode,"double speed");
      e4:	8d e0       	ldi	r24, 0x0D	; 13
      e6:	e5 ec       	ldi	r30, 0xC5	; 197
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	a9 ec       	ldi	r26, 0xC9	; 201
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 90       	ld	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	8a 95       	dec	r24
      f4:	e1 f7       	brne	.-8      	; 0xee <main+0x3c>


LCD_init();
      f6:	0e 94 27 04 	call	0x84e	; 0x84e <LCD_init>
UART_init(&UART_config);
      fa:	84 ec       	ldi	r24, 0xC4	; 196
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <UART_init>
//UART_sendByte('q');
//UART_sendString("hesham");

while(1)
{
data=UART_receiveByte();
     102:	0e 94 a8 10 	call	0x2150	; 0x2150 <UART_receiveByte>
     106:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <data>

LCD_displayCharacter('loop');
     10a:	80 e7       	ldi	r24, 0x70	; 112
     10c:	0e 94 4c 06 	call	0xc98	; 0xc98 <LCD_displayCharacter>

	if(data=='s')
     110:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <data>
     114:	83 37       	cpi	r24, 0x73	; 115
     116:	09 f0       	breq	.+2      	; 0x11a <main+0x68>
     118:	96 c1       	rjmp	.+812    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	{

		while(1)
				{
				LCD_clearScreen();
     11a:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_clearScreen>
				LCD_displayString("set password");
     11e:	82 ed       	ldi	r24, 0xD2	; 210
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_displayString>
				readPassword(password1);
     126:	8f e7       	ldi	r24, 0x7F	; 127
     128:	91 e0       	ldi	r25, 0x01	; 1
     12a:	0e 94 ef 02 	call	0x5de	; 0x5de <readPassword>
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	aa ef       	ldi	r26, 0xFA	; 250
     134:	b3 e4       	ldi	r27, 0x43	; 67
     136:	8d 83       	std	Y+5, r24	; 0x05
     138:	9e 83       	std	Y+6, r25	; 0x06
     13a:	af 83       	std	Y+7, r26	; 0x07
     13c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	4a ef       	ldi	r20, 0xFA	; 250
     144:	54 e4       	ldi	r21, 0x44	; 68
     146:	6d 81       	ldd	r22, Y+5	; 0x05
     148:	7e 81       	ldd	r23, Y+6	; 0x06
     14a:	8f 81       	ldd	r24, Y+7	; 0x07
     14c:	98 85       	ldd	r25, Y+8	; 0x08
     14e:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     152:	dc 01       	movw	r26, r24
     154:	cb 01       	movw	r24, r22
     156:	8c 8f       	std	Y+28, r24	; 0x1c
     158:	9d 8f       	std	Y+29, r25	; 0x1d
     15a:	ae 8f       	std	Y+30, r26	; 0x1e
     15c:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
     15e:	20 e0       	ldi	r18, 0x00	; 0
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	40 e8       	ldi	r20, 0x80	; 128
     164:	5f e3       	ldi	r21, 0x3F	; 63
     166:	6c 8d       	ldd	r22, Y+28	; 0x1c
     168:	7d 8d       	ldd	r23, Y+29	; 0x1d
     16a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     16c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     16e:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__cmpsf2>
     172:	88 23       	and	r24, r24
     174:	2c f4       	brge	.+10     	; 0x180 <main+0xce>
		__ticks = 1;
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	99 a3       	std	Y+33, r25	; 0x21
     17c:	88 a3       	std	Y+32, r24	; 0x20
     17e:	3f c0       	rjmp	.+126    	; 0x1fe <main+0x14c>
	else if (__tmp > 65535)
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	3f ef       	ldi	r19, 0xFF	; 255
     184:	4f e7       	ldi	r20, 0x7F	; 127
     186:	57 e4       	ldi	r21, 0x47	; 71
     188:	6c 8d       	ldd	r22, Y+28	; 0x1c
     18a:	7d 8d       	ldd	r23, Y+29	; 0x1d
     18c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     18e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     190:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
     194:	18 16       	cp	r1, r24
     196:	4c f5       	brge	.+82     	; 0x1ea <main+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e2       	ldi	r20, 0x20	; 32
     19e:	51 e4       	ldi	r21, 0x41	; 65
     1a0:	6d 81       	ldd	r22, Y+5	; 0x05
     1a2:	7e 81       	ldd	r23, Y+6	; 0x06
     1a4:	8f 81       	ldd	r24, Y+7	; 0x07
     1a6:	98 85       	ldd	r25, Y+8	; 0x08
     1a8:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     1ac:	dc 01       	movw	r26, r24
     1ae:	cb 01       	movw	r24, r22
     1b0:	bc 01       	movw	r22, r24
     1b2:	cd 01       	movw	r24, r26
     1b4:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     1b8:	dc 01       	movw	r26, r24
     1ba:	cb 01       	movw	r24, r22
     1bc:	99 a3       	std	Y+33, r25	; 0x21
     1be:	88 a3       	std	Y+32, r24	; 0x20
     1c0:	0f c0       	rjmp	.+30     	; 0x1e0 <main+0x12e>
     1c2:	88 ec       	ldi	r24, 0xC8	; 200
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	9b a3       	std	Y+35, r25	; 0x23
     1c8:	8a a3       	std	Y+34, r24	; 0x22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ca:	8a a1       	ldd	r24, Y+34	; 0x22
     1cc:	9b a1       	ldd	r25, Y+35	; 0x23
     1ce:	01 97       	sbiw	r24, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x11c>
     1d2:	9b a3       	std	Y+35, r25	; 0x23
     1d4:	8a a3       	std	Y+34, r24	; 0x22
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1d6:	88 a1       	ldd	r24, Y+32	; 0x20
     1d8:	99 a1       	ldd	r25, Y+33	; 0x21
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	99 a3       	std	Y+33, r25	; 0x21
     1de:	88 a3       	std	Y+32, r24	; 0x20
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1e0:	88 a1       	ldd	r24, Y+32	; 0x20
     1e2:	99 a1       	ldd	r25, Y+33	; 0x21
     1e4:	89 2b       	or	r24, r25
     1e6:	69 f7       	brne	.-38     	; 0x1c2 <main+0x110>
     1e8:	14 c0       	rjmp	.+40     	; 0x212 <main+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1ea:	6c 8d       	ldd	r22, Y+28	; 0x1c
     1ec:	7d 8d       	ldd	r23, Y+29	; 0x1d
     1ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
     1f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     1f2:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     1f6:	dc 01       	movw	r26, r24
     1f8:	cb 01       	movw	r24, r22
     1fa:	99 a3       	std	Y+33, r25	; 0x21
     1fc:	88 a3       	std	Y+32, r24	; 0x20
     1fe:	88 a1       	ldd	r24, Y+32	; 0x20
     200:	99 a1       	ldd	r25, Y+33	; 0x21
     202:	9d a3       	std	Y+37, r25	; 0x25
     204:	8c a3       	std	Y+36, r24	; 0x24
     206:	8c a1       	ldd	r24, Y+36	; 0x24
     208:	9d a1       	ldd	r25, Y+37	; 0x25
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <main+0x158>
     20e:	9d a3       	std	Y+37, r25	; 0x25
     210:	8c a3       	std	Y+36, r24	; 0x24
				_delay_ms(500);
				LCD_clearScreen();
     212:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_clearScreen>
				LCD_displayString("confirm password");
     216:	8f ed       	ldi	r24, 0xDF	; 223
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_displayString>
				readPassword(password2);
     21e:	8f e8       	ldi	r24, 0x8F	; 143
     220:	91 e0       	ldi	r25, 0x01	; 1
     222:	0e 94 ef 02 	call	0x5de	; 0x5de <readPassword>
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	aa ef       	ldi	r26, 0xFA	; 250
     22c:	b3 e4       	ldi	r27, 0x43	; 67
     22e:	8e 87       	std	Y+14, r24	; 0x0e
     230:	9f 87       	std	Y+15, r25	; 0x0f
     232:	a8 8b       	std	Y+16, r26	; 0x10
     234:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     236:	20 e0       	ldi	r18, 0x00	; 0
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	4a ef       	ldi	r20, 0xFA	; 250
     23c:	54 e4       	ldi	r21, 0x44	; 68
     23e:	6e 85       	ldd	r22, Y+14	; 0x0e
     240:	7f 85       	ldd	r23, Y+15	; 0x0f
     242:	88 89       	ldd	r24, Y+16	; 0x10
     244:	99 89       	ldd	r25, Y+17	; 0x11
     246:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     24a:	dc 01       	movw	r26, r24
     24c:	cb 01       	movw	r24, r22
     24e:	8a 8b       	std	Y+18, r24	; 0x12
     250:	9b 8b       	std	Y+19, r25	; 0x13
     252:	ac 8b       	std	Y+20, r26	; 0x14
     254:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	40 e8       	ldi	r20, 0x80	; 128
     25c:	5f e3       	ldi	r21, 0x3F	; 63
     25e:	6a 89       	ldd	r22, Y+18	; 0x12
     260:	7b 89       	ldd	r23, Y+19	; 0x13
     262:	8c 89       	ldd	r24, Y+20	; 0x14
     264:	9d 89       	ldd	r25, Y+21	; 0x15
     266:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__cmpsf2>
     26a:	88 23       	and	r24, r24
     26c:	2c f4       	brge	.+10     	; 0x278 <main+0x1c6>
		__ticks = 1;
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	9f 8b       	std	Y+23, r25	; 0x17
     274:	8e 8b       	std	Y+22, r24	; 0x16
     276:	3f c0       	rjmp	.+126    	; 0x2f6 <main+0x244>
	else if (__tmp > 65535)
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	3f ef       	ldi	r19, 0xFF	; 255
     27c:	4f e7       	ldi	r20, 0x7F	; 127
     27e:	57 e4       	ldi	r21, 0x47	; 71
     280:	6a 89       	ldd	r22, Y+18	; 0x12
     282:	7b 89       	ldd	r23, Y+19	; 0x13
     284:	8c 89       	ldd	r24, Y+20	; 0x14
     286:	9d 89       	ldd	r25, Y+21	; 0x15
     288:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
     28c:	18 16       	cp	r1, r24
     28e:	4c f5       	brge	.+82     	; 0x2e2 <main+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	40 e2       	ldi	r20, 0x20	; 32
     296:	51 e4       	ldi	r21, 0x41	; 65
     298:	6e 85       	ldd	r22, Y+14	; 0x0e
     29a:	7f 85       	ldd	r23, Y+15	; 0x0f
     29c:	88 89       	ldd	r24, Y+16	; 0x10
     29e:	99 89       	ldd	r25, Y+17	; 0x11
     2a0:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     2a4:	dc 01       	movw	r26, r24
     2a6:	cb 01       	movw	r24, r22
     2a8:	bc 01       	movw	r22, r24
     2aa:	cd 01       	movw	r24, r26
     2ac:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     2b0:	dc 01       	movw	r26, r24
     2b2:	cb 01       	movw	r24, r22
     2b4:	9f 8b       	std	Y+23, r25	; 0x17
     2b6:	8e 8b       	std	Y+22, r24	; 0x16
     2b8:	0f c0       	rjmp	.+30     	; 0x2d8 <main+0x226>
     2ba:	88 ec       	ldi	r24, 0xC8	; 200
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	99 8f       	std	Y+25, r25	; 0x19
     2c0:	88 8f       	std	Y+24, r24	; 0x18
     2c2:	88 8d       	ldd	r24, Y+24	; 0x18
     2c4:	99 8d       	ldd	r25, Y+25	; 0x19
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <main+0x214>
     2ca:	99 8f       	std	Y+25, r25	; 0x19
     2cc:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2ce:	8e 89       	ldd	r24, Y+22	; 0x16
     2d0:	9f 89       	ldd	r25, Y+23	; 0x17
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	9f 8b       	std	Y+23, r25	; 0x17
     2d6:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2d8:	8e 89       	ldd	r24, Y+22	; 0x16
     2da:	9f 89       	ldd	r25, Y+23	; 0x17
     2dc:	89 2b       	or	r24, r25
     2de:	69 f7       	brne	.-38     	; 0x2ba <main+0x208>
     2e0:	14 c0       	rjmp	.+40     	; 0x30a <main+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2e2:	6a 89       	ldd	r22, Y+18	; 0x12
     2e4:	7b 89       	ldd	r23, Y+19	; 0x13
     2e6:	8c 89       	ldd	r24, Y+20	; 0x14
     2e8:	9d 89       	ldd	r25, Y+21	; 0x15
     2ea:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     2ee:	dc 01       	movw	r26, r24
     2f0:	cb 01       	movw	r24, r22
     2f2:	9f 8b       	std	Y+23, r25	; 0x17
     2f4:	8e 8b       	std	Y+22, r24	; 0x16
     2f6:	8e 89       	ldd	r24, Y+22	; 0x16
     2f8:	9f 89       	ldd	r25, Y+23	; 0x17
     2fa:	9b 8f       	std	Y+27, r25	; 0x1b
     2fc:	8a 8f       	std	Y+26, r24	; 0x1a
     2fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
     300:	9b 8d       	ldd	r25, Y+27	; 0x1b
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <main+0x250>
     306:	9b 8f       	std	Y+27, r25	; 0x1b
     308:	8a 8f       	std	Y+26, r24	; 0x1a
				_delay_ms(500);
				LCD_clearScreen();
     30a:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_clearScreen>

				if(!strcmp(password1,password2))
     30e:	6f e8       	ldi	r22, 0x8F	; 143
     310:	71 e0       	ldi	r23, 0x01	; 1
     312:	8f e7       	ldi	r24, 0x7F	; 127
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
     31a:	89 2b       	or	r24, r25
     31c:	09 f0       	breq	.+2      	; 0x320 <main+0x26e>
     31e:	fd ce       	rjmp	.-518    	; 0x11a <main+0x68>
				{	LCD_clearScreen();
     320:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_clearScreen>
					LCD_displayString("saved");
     324:	80 ef       	ldi	r24, 0xF0	; 240
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_displayString>
					UART_sendString(password2);
     32c:	8f e8       	ldi	r24, 0x8F	; 143
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	0e 94 de 10 	call	0x21bc	; 0x21bc <UART_sendString>
					break;
     334:	00 00       	nop
					}
				}
		LCD_clearScreen();
     336:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_clearScreen>
		LCD_displayString("press enter to open");
     33a:	86 ef       	ldi	r24, 0xF6	; 246
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_displayString>
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	aa ef       	ldi	r26, 0xFA	; 250
     348:	b3 e4       	ldi	r27, 0x43	; 67
     34a:	89 83       	std	Y+1, r24	; 0x01
     34c:	9a 83       	std	Y+2, r25	; 0x02
     34e:	ab 83       	std	Y+3, r26	; 0x03
     350:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	4a ef       	ldi	r20, 0xFA	; 250
     358:	54 e4       	ldi	r21, 0x44	; 68
     35a:	69 81       	ldd	r22, Y+1	; 0x01
     35c:	7a 81       	ldd	r23, Y+2	; 0x02
     35e:	8b 81       	ldd	r24, Y+3	; 0x03
     360:	9c 81       	ldd	r25, Y+4	; 0x04
     362:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     366:	dc 01       	movw	r26, r24
     368:	cb 01       	movw	r24, r22
     36a:	8e a3       	std	Y+38, r24	; 0x26
     36c:	9f a3       	std	Y+39, r25	; 0x27
     36e:	a8 a7       	std	Y+40, r26	; 0x28
     370:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	40 e8       	ldi	r20, 0x80	; 128
     378:	5f e3       	ldi	r21, 0x3F	; 63
     37a:	6e a1       	ldd	r22, Y+38	; 0x26
     37c:	7f a1       	ldd	r23, Y+39	; 0x27
     37e:	88 a5       	ldd	r24, Y+40	; 0x28
     380:	99 a5       	ldd	r25, Y+41	; 0x29
     382:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__cmpsf2>
     386:	88 23       	and	r24, r24
     388:	0c f0       	brlt	.+2      	; 0x38c <main+0x2da>
     38a:	05 c0       	rjmp	.+10     	; 0x396 <main+0x2e4>
		__ticks = 1;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	9b a7       	std	Y+43, r25	; 0x2b
     392:	8a a7       	std	Y+42, r24	; 0x2a
     394:	3f c0       	rjmp	.+126    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	else if (__tmp > 65535)
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	3f ef       	ldi	r19, 0xFF	; 255
     39a:	4f e7       	ldi	r20, 0x7F	; 127
     39c:	57 e4       	ldi	r21, 0x47	; 71
     39e:	6e a1       	ldd	r22, Y+38	; 0x26
     3a0:	7f a1       	ldd	r23, Y+39	; 0x27
     3a2:	88 a5       	ldd	r24, Y+40	; 0x28
     3a4:	99 a5       	ldd	r25, Y+41	; 0x29
     3a6:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
     3aa:	18 16       	cp	r1, r24
     3ac:	4c f5       	brge	.+82     	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	40 e2       	ldi	r20, 0x20	; 32
     3b4:	51 e4       	ldi	r21, 0x41	; 65
     3b6:	69 81       	ldd	r22, Y+1	; 0x01
     3b8:	7a 81       	ldd	r23, Y+2	; 0x02
     3ba:	8b 81       	ldd	r24, Y+3	; 0x03
     3bc:	9c 81       	ldd	r25, Y+4	; 0x04
     3be:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     3c2:	dc 01       	movw	r26, r24
     3c4:	cb 01       	movw	r24, r22
     3c6:	bc 01       	movw	r22, r24
     3c8:	cd 01       	movw	r24, r26
     3ca:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     3ce:	dc 01       	movw	r26, r24
     3d0:	cb 01       	movw	r24, r22
     3d2:	9b a7       	std	Y+43, r25	; 0x2b
     3d4:	8a a7       	std	Y+42, r24	; 0x2a
     3d6:	0f c0       	rjmp	.+30     	; 0x3f6 <main+0x344>
     3d8:	88 ec       	ldi	r24, 0xC8	; 200
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	9d a7       	std	Y+45, r25	; 0x2d
     3de:	8c a7       	std	Y+44, r24	; 0x2c
     3e0:	8c a5       	ldd	r24, Y+44	; 0x2c
     3e2:	9d a5       	ldd	r25, Y+45	; 0x2d
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <main+0x332>
     3e8:	9d a7       	std	Y+45, r25	; 0x2d
     3ea:	8c a7       	std	Y+44, r24	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3ec:	8a a5       	ldd	r24, Y+42	; 0x2a
     3ee:	9b a5       	ldd	r25, Y+43	; 0x2b
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	9b a7       	std	Y+43, r25	; 0x2b
     3f4:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3f6:	8a a5       	ldd	r24, Y+42	; 0x2a
     3f8:	9b a5       	ldd	r25, Y+43	; 0x2b
     3fa:	89 2b       	or	r24, r25
     3fc:	69 f7       	brne	.-38     	; 0x3d8 <main+0x326>
     3fe:	14 c0       	rjmp	.+40     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     400:	6e a1       	ldd	r22, Y+38	; 0x26
     402:	7f a1       	ldd	r23, Y+39	; 0x27
     404:	88 a5       	ldd	r24, Y+40	; 0x28
     406:	99 a5       	ldd	r25, Y+41	; 0x29
     408:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	9b a7       	std	Y+43, r25	; 0x2b
     412:	8a a7       	std	Y+42, r24	; 0x2a
     414:	8a a5       	ldd	r24, Y+42	; 0x2a
     416:	9b a5       	ldd	r25, Y+43	; 0x2b
     418:	9f a7       	std	Y+47, r25	; 0x2f
     41a:	8e a7       	std	Y+46, r24	; 0x2e
     41c:	8e a5       	ldd	r24, Y+46	; 0x2e
     41e:	9f a5       	ldd	r25, Y+47	; 0x2f
     420:	01 97       	sbiw	r24, 0x01	; 1
     422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     424:	9f a7       	std	Y+47, r25	; 0x2f
     426:	8e a7       	std	Y+46, r24	; 0x2e
		_delay_ms(500);
		confirm_key=KeyPad_getPressedKey();
     428:	0e 94 93 03 	call	0x726	; 0x726 <KeyPad_getPressedKey>
     42c:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <confirm_key>
		if(confirm_key==13)
     430:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <confirm_key>
     434:	8d 30       	cpi	r24, 0x0D	; 13
     436:	09 f0       	breq	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     438:	64 ce       	rjmp	.-824    	; 0x102 <main+0x50>
		{
		UART_sendByte('o');
     43a:	8f e6       	ldi	r24, 0x6F	; 111
     43c:	0e 94 ba 10 	call	0x2174	; 0x2174 <UART_sendByte>
		LCD_clearScreen();
     440:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_clearScreen>
     444:	5e ce       	rjmp	.-836    	; 0x102 <main+0x50>
		}
	}

	else if(data=='d')
     446:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <data>
     44a:	84 36       	cpi	r24, 0x64	; 100
     44c:	09 f0       	breq	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44e:	a8 c0       	rjmp	.+336    	; 0x5a0 <__stack+0x141>
	{
		while(1)
		{
				LCD_displayString("enter password");
     450:	8a e0       	ldi	r24, 0x0A	; 10
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_displayString>
				readPassword(password);
     458:	8f e9       	ldi	r24, 0x9F	; 159
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	0e 94 ef 02 	call	0x5de	; 0x5de <readPassword>

				 	 UART_sendString(password);
     460:	8f e9       	ldi	r24, 0x9F	; 159
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 de 10 	call	0x21bc	; 0x21bc <UART_sendString>
				 	uint8 temp_data=UART_receiveByte();
     468:	0e 94 a8 10 	call	0x2150	; 0x2150 <UART_receiveByte>
     46c:	8d 87       	std	Y+13, r24	; 0x0d
				 	LCD_clearScreen();
     46e:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_clearScreen>
				 	 if(temp_data=='w')
     472:	8d 85       	ldd	r24, Y+13	; 0x0d
     474:	87 37       	cpi	r24, 0x77	; 119
     476:	09 f0       	breq	.+2      	; 0x47a <__stack+0x1b>
     478:	8c c0       	rjmp	.+280    	; 0x592 <__stack+0x133>
				 	 {
			 	LCD_clearScreen();
     47a:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_clearScreen>
				LCD_displayString("press set 1, open 2");
     47e:	89 e1       	ldi	r24, 0x19	; 25
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_displayString>
				confirm_key2=KeyPad_getPressedKey();
     486:	0e 94 93 03 	call	0x726	; 0x726 <KeyPad_getPressedKey>
     48a:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <confirm_key2>
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	a8 ec       	ldi	r26, 0xC8	; 200
     494:	b3 e4       	ldi	r27, 0x43	; 67
     496:	89 87       	std	Y+9, r24	; 0x09
     498:	9a 87       	std	Y+10, r25	; 0x0a
     49a:	ab 87       	std	Y+11, r26	; 0x0b
     49c:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	4a ef       	ldi	r20, 0xFA	; 250
     4a4:	54 e4       	ldi	r21, 0x44	; 68
     4a6:	69 85       	ldd	r22, Y+9	; 0x09
     4a8:	7a 85       	ldd	r23, Y+10	; 0x0a
     4aa:	8b 85       	ldd	r24, Y+11	; 0x0b
     4ac:	9c 85       	ldd	r25, Y+12	; 0x0c
     4ae:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     4b2:	dc 01       	movw	r26, r24
     4b4:	cb 01       	movw	r24, r22
     4b6:	88 ab       	std	Y+48, r24	; 0x30
     4b8:	99 ab       	std	Y+49, r25	; 0x31
     4ba:	aa ab       	std	Y+50, r26	; 0x32
     4bc:	bb ab       	std	Y+51, r27	; 0x33
	if (__tmp < 1.0)
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	40 e8       	ldi	r20, 0x80	; 128
     4c4:	5f e3       	ldi	r21, 0x3F	; 63
     4c6:	68 a9       	ldd	r22, Y+48	; 0x30
     4c8:	79 a9       	ldd	r23, Y+49	; 0x31
     4ca:	8a a9       	ldd	r24, Y+50	; 0x32
     4cc:	9b a9       	ldd	r25, Y+51	; 0x33
     4ce:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__cmpsf2>
     4d2:	88 23       	and	r24, r24
     4d4:	2c f4       	brge	.+10     	; 0x4e0 <__stack+0x81>
		__ticks = 1;
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	9d ab       	std	Y+53, r25	; 0x35
     4dc:	8c ab       	std	Y+52, r24	; 0x34
     4de:	3f c0       	rjmp	.+126    	; 0x55e <__stack+0xff>
	else if (__tmp > 65535)
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	3f ef       	ldi	r19, 0xFF	; 255
     4e4:	4f e7       	ldi	r20, 0x7F	; 127
     4e6:	57 e4       	ldi	r21, 0x47	; 71
     4e8:	68 a9       	ldd	r22, Y+48	; 0x30
     4ea:	79 a9       	ldd	r23, Y+49	; 0x31
     4ec:	8a a9       	ldd	r24, Y+50	; 0x32
     4ee:	9b a9       	ldd	r25, Y+51	; 0x33
     4f0:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
     4f4:	18 16       	cp	r1, r24
     4f6:	4c f5       	brge	.+82     	; 0x54a <__stack+0xeb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	40 e2       	ldi	r20, 0x20	; 32
     4fe:	51 e4       	ldi	r21, 0x41	; 65
     500:	69 85       	ldd	r22, Y+9	; 0x09
     502:	7a 85       	ldd	r23, Y+10	; 0x0a
     504:	8b 85       	ldd	r24, Y+11	; 0x0b
     506:	9c 85       	ldd	r25, Y+12	; 0x0c
     508:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     50c:	dc 01       	movw	r26, r24
     50e:	cb 01       	movw	r24, r22
     510:	bc 01       	movw	r22, r24
     512:	cd 01       	movw	r24, r26
     514:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     518:	dc 01       	movw	r26, r24
     51a:	cb 01       	movw	r24, r22
     51c:	9d ab       	std	Y+53, r25	; 0x35
     51e:	8c ab       	std	Y+52, r24	; 0x34
     520:	0f c0       	rjmp	.+30     	; 0x540 <__stack+0xe1>
     522:	88 ec       	ldi	r24, 0xC8	; 200
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	9f ab       	std	Y+55, r25	; 0x37
     528:	8e ab       	std	Y+54, r24	; 0x36
     52a:	8e a9       	ldd	r24, Y+54	; 0x36
     52c:	9f a9       	ldd	r25, Y+55	; 0x37
     52e:	01 97       	sbiw	r24, 0x01	; 1
     530:	f1 f7       	brne	.-4      	; 0x52e <__stack+0xcf>
     532:	9f ab       	std	Y+55, r25	; 0x37
     534:	8e ab       	std	Y+54, r24	; 0x36
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     536:	8c a9       	ldd	r24, Y+52	; 0x34
     538:	9d a9       	ldd	r25, Y+53	; 0x35
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	9d ab       	std	Y+53, r25	; 0x35
     53e:	8c ab       	std	Y+52, r24	; 0x34
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     540:	8c a9       	ldd	r24, Y+52	; 0x34
     542:	9d a9       	ldd	r25, Y+53	; 0x35
     544:	89 2b       	or	r24, r25
     546:	69 f7       	brne	.-38     	; 0x522 <__stack+0xc3>
     548:	14 c0       	rjmp	.+40     	; 0x572 <__stack+0x113>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     54a:	68 a9       	ldd	r22, Y+48	; 0x30
     54c:	79 a9       	ldd	r23, Y+49	; 0x31
     54e:	8a a9       	ldd	r24, Y+50	; 0x32
     550:	9b a9       	ldd	r25, Y+51	; 0x33
     552:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     556:	dc 01       	movw	r26, r24
     558:	cb 01       	movw	r24, r22
     55a:	9d ab       	std	Y+53, r25	; 0x35
     55c:	8c ab       	std	Y+52, r24	; 0x34
     55e:	8c a9       	ldd	r24, Y+52	; 0x34
     560:	9d a9       	ldd	r25, Y+53	; 0x35
     562:	99 af       	std	Y+57, r25	; 0x39
     564:	88 af       	std	Y+56, r24	; 0x38
     566:	88 ad       	ldd	r24, Y+56	; 0x38
     568:	99 ad       	ldd	r25, Y+57	; 0x39
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <__stack+0x10b>
     56e:	99 af       	std	Y+57, r25	; 0x39
     570:	88 af       	std	Y+56, r24	; 0x38
				_delay_ms(400);
						if(confirm_key2==1)
     572:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <confirm_key2>
     576:	81 30       	cpi	r24, 0x01	; 1
     578:	21 f4       	brne	.+8      	; 0x582 <__stack+0x123>
						UART_sendByte('s');
     57a:	83 e7       	ldi	r24, 0x73	; 115
     57c:	0e 94 ba 10 	call	0x2174	; 0x2174 <UART_sendByte>
						else if(confirm_key2==2)
						UART_sendByte('o');
						break;
     580:	17 c0       	rjmp	.+46     	; 0x5b0 <__stack+0x151>
				LCD_displayString("press set 1, open 2");
				confirm_key2=KeyPad_getPressedKey();
				_delay_ms(400);
						if(confirm_key2==1)
						UART_sendByte('s');
						else if(confirm_key2==2)
     582:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <confirm_key2>
     586:	82 30       	cpi	r24, 0x02	; 2
     588:	99 f4       	brne	.+38     	; 0x5b0 <__stack+0x151>
						UART_sendByte('o');
     58a:	8f e6       	ldi	r24, 0x6F	; 111
     58c:	0e 94 ba 10 	call	0x2174	; 0x2174 <UART_sendByte>
						break;
     590:	0f c0       	rjmp	.+30     	; 0x5b0 <__stack+0x151>
				 	 }
				 	 else if(temp_data=='B')
     592:	8d 85       	ldd	r24, Y+13	; 0x0d
     594:	82 34       	cpi	r24, 0x42	; 66
     596:	09 f0       	breq	.+2      	; 0x59a <__stack+0x13b>
     598:	5b cf       	rjmp	.-330    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
				 		 {LCD_clearScreen();
     59a:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_clearScreen>
				 		 break;
     59e:	09 c0       	rjmp	.+18     	; 0x5b2 <__stack+0x153>
				 		 }
	}
	}

	else if(data=='B')
     5a0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <data>
     5a4:	82 34       	cpi	r24, 0x42	; 66
     5a6:	09 f0       	breq	.+2      	; 0x5aa <__stack+0x14b>
     5a8:	ac cd       	rjmp	.-1192   	; 0x102 <main+0x50>
	{
		LCD_clearScreen();
     5aa:	0e 94 46 0b 	call	0x168c	; 0x168c <LCD_clearScreen>
     5ae:	a9 cd       	rjmp	.-1198   	; 0x102 <main+0x50>
				_delay_ms(400);
						if(confirm_key2==1)
						UART_sendByte('s');
						else if(confirm_key2==2)
						UART_sendByte('o');
						break;
     5b0:	00 00       	nop
	{
		LCD_clearScreen();

	}

}
     5b2:	a7 cd       	rjmp	.-1202   	; 0x102 <main+0x50>

000005b4 <intgerToString>:

}

void intgerToString(int data)
{
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <intgerToString+0x6>
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	9a 83       	std	Y+2, r25	; 0x02
     5c0:	89 83       	std	Y+1, r24	; 0x01
	/* buffer to hold acii result */
	itoa(data,buff,10); /* 10 for decimal base */
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	9a 81       	ldd	r25, Y+2	; 0x02
     5c6:	4a e0       	ldi	r20, 0x0A	; 10
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	63 eb       	ldi	r22, 0xB3	; 179
     5cc:	71 e0       	ldi	r23, 0x01	; 1
     5ce:	0e 94 85 13 	call	0x270a	; 0x270a <itoa>
}
     5d2:	00 00       	nop
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <readPassword>:

 void readPassword(uint8 *data)
 {
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	60 97       	sbiw	r28, 0x10	; 16
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
     5f2:	98 8b       	std	Y+16, r25	; 0x10
     5f4:	8f 87       	std	Y+15, r24	; 0x0f
	// key =KeyPad_getPressedKey();

	 	while(enter==1)
     5f6:	86 c0       	rjmp	.+268    	; 0x704 <readPassword+0x126>
	 	{
	 	key =KeyPad_getPressedKey();
     5f8:	0e 94 93 03 	call	0x726	; 0x726 <KeyPad_getPressedKey>
     5fc:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	a8 ec       	ldi	r26, 0xC8	; 200
     606:	b3 e4       	ldi	r27, 0x43	; 67
     608:	89 83       	std	Y+1, r24	; 0x01
     60a:	9a 83       	std	Y+2, r25	; 0x02
     60c:	ab 83       	std	Y+3, r26	; 0x03
     60e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	4a ef       	ldi	r20, 0xFA	; 250
     616:	54 e4       	ldi	r21, 0x44	; 68
     618:	69 81       	ldd	r22, Y+1	; 0x01
     61a:	7a 81       	ldd	r23, Y+2	; 0x02
     61c:	8b 81       	ldd	r24, Y+3	; 0x03
     61e:	9c 81       	ldd	r25, Y+4	; 0x04
     620:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     624:	dc 01       	movw	r26, r24
     626:	cb 01       	movw	r24, r22
     628:	8d 83       	std	Y+5, r24	; 0x05
     62a:	9e 83       	std	Y+6, r25	; 0x06
     62c:	af 83       	std	Y+7, r26	; 0x07
     62e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e8       	ldi	r20, 0x80	; 128
     636:	5f e3       	ldi	r21, 0x3F	; 63
     638:	6d 81       	ldd	r22, Y+5	; 0x05
     63a:	7e 81       	ldd	r23, Y+6	; 0x06
     63c:	8f 81       	ldd	r24, Y+7	; 0x07
     63e:	98 85       	ldd	r25, Y+8	; 0x08
     640:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__cmpsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <readPassword+0x74>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9a 87       	std	Y+10, r25	; 0x0a
     64e:	89 87       	std	Y+9, r24	; 0x09
     650:	3f c0       	rjmp	.+126    	; 0x6d0 <readPassword+0xf2>
	else if (__tmp > 65535)
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	3f ef       	ldi	r19, 0xFF	; 255
     656:	4f e7       	ldi	r20, 0x7F	; 127
     658:	57 e4       	ldi	r21, 0x47	; 71
     65a:	6d 81       	ldd	r22, Y+5	; 0x05
     65c:	7e 81       	ldd	r23, Y+6	; 0x06
     65e:	8f 81       	ldd	r24, Y+7	; 0x07
     660:	98 85       	ldd	r25, Y+8	; 0x08
     662:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
     666:	18 16       	cp	r1, r24
     668:	4c f5       	brge	.+82     	; 0x6bc <readPassword+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	40 e2       	ldi	r20, 0x20	; 32
     670:	51 e4       	ldi	r21, 0x41	; 65
     672:	69 81       	ldd	r22, Y+1	; 0x01
     674:	7a 81       	ldd	r23, Y+2	; 0x02
     676:	8b 81       	ldd	r24, Y+3	; 0x03
     678:	9c 81       	ldd	r25, Y+4	; 0x04
     67a:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	bc 01       	movw	r22, r24
     684:	cd 01       	movw	r24, r26
     686:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     68a:	dc 01       	movw	r26, r24
     68c:	cb 01       	movw	r24, r22
     68e:	9a 87       	std	Y+10, r25	; 0x0a
     690:	89 87       	std	Y+9, r24	; 0x09
     692:	0f c0       	rjmp	.+30     	; 0x6b2 <readPassword+0xd4>
     694:	88 ec       	ldi	r24, 0xC8	; 200
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	9c 87       	std	Y+12, r25	; 0x0c
     69a:	8b 87       	std	Y+11, r24	; 0x0b
     69c:	8b 85       	ldd	r24, Y+11	; 0x0b
     69e:	9c 85       	ldd	r25, Y+12	; 0x0c
     6a0:	01 97       	sbiw	r24, 0x01	; 1
     6a2:	f1 f7       	brne	.-4      	; 0x6a0 <readPassword+0xc2>
     6a4:	9c 87       	std	Y+12, r25	; 0x0c
     6a6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6a8:	89 85       	ldd	r24, Y+9	; 0x09
     6aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	9a 87       	std	Y+10, r25	; 0x0a
     6b0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6b2:	89 85       	ldd	r24, Y+9	; 0x09
     6b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b6:	89 2b       	or	r24, r25
     6b8:	69 f7       	brne	.-38     	; 0x694 <readPassword+0xb6>
     6ba:	14 c0       	rjmp	.+40     	; 0x6e4 <readPassword+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6bc:	6d 81       	ldd	r22, Y+5	; 0x05
     6be:	7e 81       	ldd	r23, Y+6	; 0x06
     6c0:	8f 81       	ldd	r24, Y+7	; 0x07
     6c2:	98 85       	ldd	r25, Y+8	; 0x08
     6c4:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     6c8:	dc 01       	movw	r26, r24
     6ca:	cb 01       	movw	r24, r22
     6cc:	9a 87       	std	Y+10, r25	; 0x0a
     6ce:	89 87       	std	Y+9, r24	; 0x09
     6d0:	89 85       	ldd	r24, Y+9	; 0x09
     6d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d4:	9e 87       	std	Y+14, r25	; 0x0e
     6d6:	8d 87       	std	Y+13, r24	; 0x0d
     6d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     6da:	9e 85       	ldd	r25, Y+14	; 0x0e
     6dc:	01 97       	sbiw	r24, 0x01	; 1
     6de:	f1 f7       	brne	.-4      	; 0x6dc <readPassword+0xfe>
     6e0:	9e 87       	std	Y+14, r25	; 0x0e
     6e2:	8d 87       	std	Y+13, r24	; 0x0d
	 	_delay_ms(400);
	 	if(key==13)
     6e4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
     6e8:	8d 30       	cpi	r24, 0x0D	; 13
     6ea:	91 f0       	breq	.+36     	; 0x710 <readPassword+0x132>
	 		break;
	 	intgerToString(key);
     6ec:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
     6f0:	88 2f       	mov	r24, r24
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 da 02 	call	0x5b4	; 0x5b4 <intgerToString>
	 	strcat(data,buff);
     6f8:	8f 85       	ldd	r24, Y+15	; 0x0f
     6fa:	98 89       	ldd	r25, Y+16	; 0x10
     6fc:	63 eb       	ldi	r22, 0xB3	; 179
     6fe:	71 e0       	ldi	r23, 0x01	; 1
     700:	0e 94 71 13 	call	0x26e2	; 0x26e2 <strcat>

 void readPassword(uint8 *data)
 {
	// key =KeyPad_getPressedKey();

	 	while(enter==1)
     704:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <enter>
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	09 f4       	brne	.+2      	; 0x70e <readPassword+0x130>
     70c:	75 cf       	rjmp	.-278    	; 0x5f8 <readPassword+0x1a>
	 	if(key==13)
	 		break;
	 	intgerToString(key);
	 	strcat(data,buff);
	 	}
 }
     70e:	01 c0       	rjmp	.+2      	; 0x712 <readPassword+0x134>
	 	while(enter==1)
	 	{
	 	key =KeyPad_getPressedKey();
	 	_delay_ms(400);
	 	if(key==13)
	 		break;
     710:	00 00       	nop
	 	intgerToString(key);
	 	strcat(data,buff);
	 	}
 }
     712:	00 00       	nop
     714:	60 96       	adiw	r28, 0x10	; 16
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <KeyPad_getPressedKey>:
/***************************************************************
 * 					function definition 						*
 * *************************************************************
 */

uint8 KeyPad_getPressedKey(void) {
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	00 d0       	rcall	.+0      	; 0x72c <KeyPad_getPressedKey+0x6>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1)
	{
	for (col = 0; col < N_COL; col++) {
     730:	1a 82       	std	Y+2, r1	; 0x02
     732:	44 c0       	rjmp	.+136    	; 0x7bc <KeyPad_getPressedKey+0x96>
		/* set the specified column in this trace output pin and the first 4 pins as input */
		KEYPAD_PORT_DIR = (0b00010000 << col);
     734:	8a e3       	ldi	r24, 0x3A	; 58
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	2a 81       	ldd	r18, Y+2	; 0x02
     73a:	42 2f       	mov	r20, r18
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	20 e1       	ldi	r18, 0x10	; 16
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	02 c0       	rjmp	.+4      	; 0x748 <KeyPad_getPressedKey+0x22>
     744:	22 0f       	add	r18, r18
     746:	33 1f       	adc	r19, r19
     748:	4a 95       	dec	r20
     74a:	e2 f7       	brpl	.-8      	; 0x744 <KeyPad_getPressedKey+0x1e>
     74c:	fc 01       	movw	r30, r24
     74e:	20 83       	st	Z, r18
		/* put on the specified column in this trace output pin 0 and  make the first 4 pins as pull up */
		KEYPAD_PORT_OUT = (~(0b00010000 << col));
     750:	8b e3       	ldi	r24, 0x3B	; 59
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	2a 81       	ldd	r18, Y+2	; 0x02
     756:	42 2f       	mov	r20, r18
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	20 e1       	ldi	r18, 0x10	; 16
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	02 c0       	rjmp	.+4      	; 0x764 <KeyPad_getPressedKey+0x3e>
     760:	22 0f       	add	r18, r18
     762:	33 1f       	adc	r19, r19
     764:	4a 95       	dec	r20
     766:	e2 f7       	brpl	.-8      	; 0x760 <KeyPad_getPressedKey+0x3a>
     768:	20 95       	com	r18
     76a:	fc 01       	movw	r30, r24
     76c:	20 83       	st	Z, r18
		for (row = 0; row < N_ROW; row++) /* loop for rows */
     76e:	19 82       	std	Y+1, r1	; 0x01
     770:	1f c0       	rjmp	.+62     	; 0x7b0 <KeyPad_getPressedKey+0x8a>
		{
			if (BIT_IS_CLEAR(KEYPAD_PORT_IN, row))/* if the switch is pressed in this row */
     772:	89 e3       	ldi	r24, 0x39	; 57
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	fc 01       	movw	r30, r24
     778:	80 81       	ld	r24, Z
     77a:	88 2f       	mov	r24, r24
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	29 81       	ldd	r18, Y+1	; 0x01
     780:	22 2f       	mov	r18, r18
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	02 c0       	rjmp	.+4      	; 0x78a <KeyPad_getPressedKey+0x64>
     786:	95 95       	asr	r25
     788:	87 95       	ror	r24
     78a:	2a 95       	dec	r18
     78c:	e2 f7       	brpl	.-8      	; 0x786 <KeyPad_getPressedKey+0x60>
     78e:	81 70       	andi	r24, 0x01	; 1
     790:	99 27       	eor	r25, r25
     792:	89 2b       	or	r24, r25
     794:	51 f4       	brne	.+20     	; 0x7aa <KeyPad_getPressedKey+0x84>
			{
				#if(N_COL==3)
				return KeyPad_4x3_adjustSwitchNumber((row * N_COL) + col + 1);
				#elif(N_COL==4)
				return KeyPad_4x4_adjustSwitchNumber((row * N_COL) + col + 1);
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	98 2f       	mov	r25, r24
     79a:	99 0f       	add	r25, r25
     79c:	99 0f       	add	r25, r25
     79e:	8a 81       	ldd	r24, Y+2	; 0x02
     7a0:	89 0f       	add	r24, r25
     7a2:	8f 5f       	subi	r24, 0xFF	; 255
     7a4:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <KeyPad_4x4_adjustSwitchNumber>
     7a8:	0e c0       	rjmp	.+28     	; 0x7c6 <KeyPad_getPressedKey+0xa0>
	for (col = 0; col < N_COL; col++) {
		/* set the specified column in this trace output pin and the first 4 pins as input */
		KEYPAD_PORT_DIR = (0b00010000 << col);
		/* put on the specified column in this trace output pin 0 and  make the first 4 pins as pull up */
		KEYPAD_PORT_OUT = (~(0b00010000 << col));
		for (row = 0; row < N_ROW; row++) /* loop for rows */
     7aa:	89 81       	ldd	r24, Y+1	; 0x01
     7ac:	8f 5f       	subi	r24, 0xFF	; 255
     7ae:	89 83       	std	Y+1, r24	; 0x01
     7b0:	89 81       	ldd	r24, Y+1	; 0x01
     7b2:	84 30       	cpi	r24, 0x04	; 4
     7b4:	f0 f2       	brcs	.-68     	; 0x772 <KeyPad_getPressedKey+0x4c>

uint8 KeyPad_getPressedKey(void) {
	uint8 row, col;
	while(1)
	{
	for (col = 0; col < N_COL; col++) {
     7b6:	8a 81       	ldd	r24, Y+2	; 0x02
     7b8:	8f 5f       	subi	r24, 0xFF	; 255
     7ba:	8a 83       	std	Y+2, r24	; 0x02
     7bc:	8a 81       	ldd	r24, Y+2	; 0x02
     7be:	84 30       	cpi	r24, 0x04	; 4
     7c0:	08 f4       	brcc	.+2      	; 0x7c4 <KeyPad_getPressedKey+0x9e>
     7c2:	b8 cf       	rjmp	.-144    	; 0x734 <KeyPad_getPressedKey+0xe>
				#endif
			}
		}
	}

}
     7c4:	b5 cf       	rjmp	.-150    	; 0x730 <KeyPad_getPressedKey+0xa>
}
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret

000007d0 <KeyPad_4x4_adjustSwitchNumber>:
 }


#elif(N_COL==4)

static uint8 KeyPad_4x4_adjustSwitchNumber(uint8 a_number) {
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	1f 92       	push	r1
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	89 83       	std	Y+1, r24	; 0x01
	switch (a_number) {
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	88 2f       	mov	r24, r24
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	09 2e       	mov	r0, r25
     7e4:	00 0c       	add	r0, r0
     7e6:	aa 0b       	sbc	r26, r26
     7e8:	bb 0b       	sbc	r27, r27
     7ea:	41 e0       	ldi	r20, 0x01	; 1
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	2f e0       	ldi	r18, 0x0F	; 15
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	84 1b       	sub	r24, r20
     7f4:	95 0b       	sbc	r25, r21
     7f6:	28 17       	cp	r18, r24
     7f8:	39 07       	cpc	r19, r25
     7fa:	28 f1       	brcs	.+74     	; 0x846 <KeyPad_4x4_adjustSwitchNumber+0x76>
     7fc:	86 5d       	subi	r24, 0xD6	; 214
     7fe:	9f 4f       	sbci	r25, 0xFF	; 255
     800:	fc 01       	movw	r30, r24
     802:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__tablejump2__>
	case 1:
		return 7;
     806:	87 e0       	ldi	r24, 0x07	; 7
     808:	1e c0       	rjmp	.+60     	; 0x846 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 2:
		return 8;
     80a:	88 e0       	ldi	r24, 0x08	; 8
     80c:	1c c0       	rjmp	.+56     	; 0x846 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 3:
		return 9;
     80e:	89 e0       	ldi	r24, 0x09	; 9
     810:	1a c0       	rjmp	.+52     	; 0x846 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 4:
		return '/';
     812:	8f e2       	ldi	r24, 0x2F	; 47
     814:	18 c0       	rjmp	.+48     	; 0x846 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 5:
		return 4;
     816:	84 e0       	ldi	r24, 0x04	; 4
     818:	16 c0       	rjmp	.+44     	; 0x846 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 6:
		return 5;
     81a:	85 e0       	ldi	r24, 0x05	; 5
     81c:	14 c0       	rjmp	.+40     	; 0x846 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 7:
		return 6;
     81e:	86 e0       	ldi	r24, 0x06	; 6
     820:	12 c0       	rjmp	.+36     	; 0x846 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 8:
		return '*';
     822:	8a e2       	ldi	r24, 0x2A	; 42
     824:	10 c0       	rjmp	.+32     	; 0x846 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 9:
		return 1;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	0e c0       	rjmp	.+28     	; 0x846 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 10:
		return 2;
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	0c c0       	rjmp	.+24     	; 0x846 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 11:
		return 3;
     82e:	83 e0       	ldi	r24, 0x03	; 3
     830:	0a c0       	rjmp	.+20     	; 0x846 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 12:
		return '-';
     832:	8d e2       	ldi	r24, 0x2D	; 45
     834:	08 c0       	rjmp	.+16     	; 0x846 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 13:
		return 13;
     836:	8d e0       	ldi	r24, 0x0D	; 13
     838:	06 c0       	rjmp	.+12     	; 0x846 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 14:
		return 0;
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	04 c0       	rjmp	.+8      	; 0x846 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 15:
		return '=';
     83e:	8d e3       	ldi	r24, 0x3D	; 61
     840:	02 c0       	rjmp	.+4      	; 0x846 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 16:
		return '+';
     842:	8b e2       	ldi	r24, 0x2B	; 43
     844:	00 c0       	rjmp	.+0      	; 0x846 <KeyPad_4x4_adjustSwitchNumber+0x76>

	}
}
     846:	0f 90       	pop	r0
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	08 95       	ret

0000084e <LCD_init>:
 * 								Functions Definitions				   *
 ***********************************************************************
 */

void LCD_init(void)
{
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
LCD_CTRL_PORT_DIR |=(1<<4)|(1<<5)|(1<<6);/* configure control port pins(RS ,R/W ,ENABLE) AS OUTPUT*/
     856:	81 e3       	ldi	r24, 0x31	; 49
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	21 e3       	ldi	r18, 0x31	; 49
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	f9 01       	movw	r30, r18
     860:	20 81       	ld	r18, Z
     862:	20 67       	ori	r18, 0x70	; 112
     864:	fc 01       	movw	r30, r24
     866:	20 83       	st	Z, r18
LCD_DATA_PORT_DIR=0XFF; /* configure the data port as output port */
     868:	84 e3       	ldi	r24, 0x34	; 52
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	2f ef       	ldi	r18, 0xFF	; 255
     86e:	fc 01       	movw	r30, r24
     870:	20 83       	st	Z, r18
LCD_sendCommand(FUNCTION_SET_8_BIT_2LINE); /* using 2 lines + LCD 8 bit mode + 5*7 dot  display mode*/
     872:	88 e3       	ldi	r24, 0x38	; 56
     874:	0e 94 46 04 	call	0x88c	; 0x88c <LCD_sendCommand>
LCD_sendCommand(DISPLAY_CURSOR_OFF);
     878:	8c e0       	ldi	r24, 0x0C	; 12
     87a:	0e 94 46 04 	call	0x88c	; 0x88c <LCD_sendCommand>
LCD_sendCommand(CLEAR_COMMAND);
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	0e 94 46 04 	call	0x88c	; 0x88c <LCD_sendCommand>

}
     884:	00 00       	nop
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	08 95       	ret

0000088c <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
     894:	e9 97       	sbiw	r28, 0x39	; 57
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	cd bf       	out	0x3d, r28	; 61
     8a0:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS);/* instruction mode RS =0*/
     8a2:	82 e3       	ldi	r24, 0x32	; 50
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	22 e3       	ldi	r18, 0x32	; 50
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	f9 01       	movw	r30, r18
     8ac:	20 81       	ld	r18, Z
     8ae:	2f 7e       	andi	r18, 0xEF	; 239
     8b0:	fc 01       	movw	r30, r24
     8b2:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_PORT,READWRITE); /* write data to LCD so readwrite=0*/
     8b4:	82 e3       	ldi	r24, 0x32	; 50
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	22 e3       	ldi	r18, 0x32	; 50
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	f9 01       	movw	r30, r18
     8be:	20 81       	ld	r18, Z
     8c0:	2f 7d       	andi	r18, 0xDF	; 223
     8c2:	fc 01       	movw	r30, r24
     8c4:	20 83       	st	Z, r18
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	a0 e8       	ldi	r26, 0x80	; 128
     8cc:	bf e3       	ldi	r27, 0x3F	; 63
     8ce:	89 83       	std	Y+1, r24	; 0x01
     8d0:	9a 83       	std	Y+2, r25	; 0x02
     8d2:	ab 83       	std	Y+3, r26	; 0x03
     8d4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	4a ef       	ldi	r20, 0xFA	; 250
     8dc:	54 e4       	ldi	r21, 0x44	; 68
     8de:	69 81       	ldd	r22, Y+1	; 0x01
     8e0:	7a 81       	ldd	r23, Y+2	; 0x02
     8e2:	8b 81       	ldd	r24, Y+3	; 0x03
     8e4:	9c 81       	ldd	r25, Y+4	; 0x04
     8e6:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     8ea:	dc 01       	movw	r26, r24
     8ec:	cb 01       	movw	r24, r22
     8ee:	8f a7       	std	Y+47, r24	; 0x2f
     8f0:	98 ab       	std	Y+48, r25	; 0x30
     8f2:	a9 ab       	std	Y+49, r26	; 0x31
     8f4:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	40 e8       	ldi	r20, 0x80	; 128
     8fc:	5f e3       	ldi	r21, 0x3F	; 63
     8fe:	6f a5       	ldd	r22, Y+47	; 0x2f
     900:	78 a9       	ldd	r23, Y+48	; 0x30
     902:	89 a9       	ldd	r24, Y+49	; 0x31
     904:	9a a9       	ldd	r25, Y+50	; 0x32
     906:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__cmpsf2>
     90a:	88 23       	and	r24, r24
     90c:	2c f4       	brge	.+10     	; 0x918 <LCD_sendCommand+0x8c>
		__ticks = 1;
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	9c ab       	std	Y+52, r25	; 0x34
     914:	8b ab       	std	Y+51, r24	; 0x33
     916:	3f c0       	rjmp	.+126    	; 0x996 <LCD_sendCommand+0x10a>
	else if (__tmp > 65535)
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	3f ef       	ldi	r19, 0xFF	; 255
     91c:	4f e7       	ldi	r20, 0x7F	; 127
     91e:	57 e4       	ldi	r21, 0x47	; 71
     920:	6f a5       	ldd	r22, Y+47	; 0x2f
     922:	78 a9       	ldd	r23, Y+48	; 0x30
     924:	89 a9       	ldd	r24, Y+49	; 0x31
     926:	9a a9       	ldd	r25, Y+50	; 0x32
     928:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
     92c:	18 16       	cp	r1, r24
     92e:	4c f5       	brge	.+82     	; 0x982 <LCD_sendCommand+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e2       	ldi	r20, 0x20	; 32
     936:	51 e4       	ldi	r21, 0x41	; 65
     938:	69 81       	ldd	r22, Y+1	; 0x01
     93a:	7a 81       	ldd	r23, Y+2	; 0x02
     93c:	8b 81       	ldd	r24, Y+3	; 0x03
     93e:	9c 81       	ldd	r25, Y+4	; 0x04
     940:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     944:	dc 01       	movw	r26, r24
     946:	cb 01       	movw	r24, r22
     948:	bc 01       	movw	r22, r24
     94a:	cd 01       	movw	r24, r26
     94c:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     950:	dc 01       	movw	r26, r24
     952:	cb 01       	movw	r24, r22
     954:	9c ab       	std	Y+52, r25	; 0x34
     956:	8b ab       	std	Y+51, r24	; 0x33
     958:	0f c0       	rjmp	.+30     	; 0x978 <LCD_sendCommand+0xec>
     95a:	88 ec       	ldi	r24, 0xC8	; 200
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	9e ab       	std	Y+54, r25	; 0x36
     960:	8d ab       	std	Y+53, r24	; 0x35
     962:	8d a9       	ldd	r24, Y+53	; 0x35
     964:	9e a9       	ldd	r25, Y+54	; 0x36
     966:	01 97       	sbiw	r24, 0x01	; 1
     968:	f1 f7       	brne	.-4      	; 0x966 <LCD_sendCommand+0xda>
     96a:	9e ab       	std	Y+54, r25	; 0x36
     96c:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     96e:	8b a9       	ldd	r24, Y+51	; 0x33
     970:	9c a9       	ldd	r25, Y+52	; 0x34
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	9c ab       	std	Y+52, r25	; 0x34
     976:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     978:	8b a9       	ldd	r24, Y+51	; 0x33
     97a:	9c a9       	ldd	r25, Y+52	; 0x34
     97c:	89 2b       	or	r24, r25
     97e:	69 f7       	brne	.-38     	; 0x95a <LCD_sendCommand+0xce>
     980:	14 c0       	rjmp	.+40     	; 0x9aa <LCD_sendCommand+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     982:	6f a5       	ldd	r22, Y+47	; 0x2f
     984:	78 a9       	ldd	r23, Y+48	; 0x30
     986:	89 a9       	ldd	r24, Y+49	; 0x31
     988:	9a a9       	ldd	r25, Y+50	; 0x32
     98a:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     98e:	dc 01       	movw	r26, r24
     990:	cb 01       	movw	r24, r22
     992:	9c ab       	std	Y+52, r25	; 0x34
     994:	8b ab       	std	Y+51, r24	; 0x33
     996:	8b a9       	ldd	r24, Y+51	; 0x33
     998:	9c a9       	ldd	r25, Y+52	; 0x34
     99a:	98 af       	std	Y+56, r25	; 0x38
     99c:	8f ab       	std	Y+55, r24	; 0x37
     99e:	8f a9       	ldd	r24, Y+55	; 0x37
     9a0:	98 ad       	ldd	r25, Y+56	; 0x38
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <LCD_sendCommand+0x116>
     9a6:	98 af       	std	Y+56, r25	; 0x38
     9a8:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1);/* delay for prossing tas=50ns*/
	SET_BIT(LCD_CTRL_PORT,LCD_ENABLE); /*enable LCD so enable pin =1*/
     9aa:	82 e3       	ldi	r24, 0x32	; 50
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	22 e3       	ldi	r18, 0x32	; 50
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	f9 01       	movw	r30, r18
     9b4:	20 81       	ld	r18, Z
     9b6:	20 64       	ori	r18, 0x40	; 64
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e8       	ldi	r26, 0x80	; 128
     9c2:	bf e3       	ldi	r27, 0x3F	; 63
     9c4:	8d 83       	std	Y+5, r24	; 0x05
     9c6:	9e 83       	std	Y+6, r25	; 0x06
     9c8:	af 83       	std	Y+7, r26	; 0x07
     9ca:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	4a ef       	ldi	r20, 0xFA	; 250
     9d2:	54 e4       	ldi	r21, 0x44	; 68
     9d4:	6d 81       	ldd	r22, Y+5	; 0x05
     9d6:	7e 81       	ldd	r23, Y+6	; 0x06
     9d8:	8f 81       	ldd	r24, Y+7	; 0x07
     9da:	98 85       	ldd	r25, Y+8	; 0x08
     9dc:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     9e0:	dc 01       	movw	r26, r24
     9e2:	cb 01       	movw	r24, r22
     9e4:	8d a3       	std	Y+37, r24	; 0x25
     9e6:	9e a3       	std	Y+38, r25	; 0x26
     9e8:	af a3       	std	Y+39, r26	; 0x27
     9ea:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	40 e8       	ldi	r20, 0x80	; 128
     9f2:	5f e3       	ldi	r21, 0x3F	; 63
     9f4:	6d a1       	ldd	r22, Y+37	; 0x25
     9f6:	7e a1       	ldd	r23, Y+38	; 0x26
     9f8:	8f a1       	ldd	r24, Y+39	; 0x27
     9fa:	98 a5       	ldd	r25, Y+40	; 0x28
     9fc:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__cmpsf2>
     a00:	88 23       	and	r24, r24
     a02:	2c f4       	brge	.+10     	; 0xa0e <LCD_sendCommand+0x182>
		__ticks = 1;
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	9a a7       	std	Y+42, r25	; 0x2a
     a0a:	89 a7       	std	Y+41, r24	; 0x29
     a0c:	3f c0       	rjmp	.+126    	; 0xa8c <LCD_sendCommand+0x200>
	else if (__tmp > 65535)
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	3f ef       	ldi	r19, 0xFF	; 255
     a12:	4f e7       	ldi	r20, 0x7F	; 127
     a14:	57 e4       	ldi	r21, 0x47	; 71
     a16:	6d a1       	ldd	r22, Y+37	; 0x25
     a18:	7e a1       	ldd	r23, Y+38	; 0x26
     a1a:	8f a1       	ldd	r24, Y+39	; 0x27
     a1c:	98 a5       	ldd	r25, Y+40	; 0x28
     a1e:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
     a22:	18 16       	cp	r1, r24
     a24:	4c f5       	brge	.+82     	; 0xa78 <LCD_sendCommand+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	40 e2       	ldi	r20, 0x20	; 32
     a2c:	51 e4       	ldi	r21, 0x41	; 65
     a2e:	6d 81       	ldd	r22, Y+5	; 0x05
     a30:	7e 81       	ldd	r23, Y+6	; 0x06
     a32:	8f 81       	ldd	r24, Y+7	; 0x07
     a34:	98 85       	ldd	r25, Y+8	; 0x08
     a36:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     a3a:	dc 01       	movw	r26, r24
     a3c:	cb 01       	movw	r24, r22
     a3e:	bc 01       	movw	r22, r24
     a40:	cd 01       	movw	r24, r26
     a42:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     a46:	dc 01       	movw	r26, r24
     a48:	cb 01       	movw	r24, r22
     a4a:	9a a7       	std	Y+42, r25	; 0x2a
     a4c:	89 a7       	std	Y+41, r24	; 0x29
     a4e:	0f c0       	rjmp	.+30     	; 0xa6e <LCD_sendCommand+0x1e2>
     a50:	88 ec       	ldi	r24, 0xC8	; 200
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	9c a7       	std	Y+44, r25	; 0x2c
     a56:	8b a7       	std	Y+43, r24	; 0x2b
     a58:	8b a5       	ldd	r24, Y+43	; 0x2b
     a5a:	9c a5       	ldd	r25, Y+44	; 0x2c
     a5c:	01 97       	sbiw	r24, 0x01	; 1
     a5e:	f1 f7       	brne	.-4      	; 0xa5c <LCD_sendCommand+0x1d0>
     a60:	9c a7       	std	Y+44, r25	; 0x2c
     a62:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a64:	89 a5       	ldd	r24, Y+41	; 0x29
     a66:	9a a5       	ldd	r25, Y+42	; 0x2a
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	9a a7       	std	Y+42, r25	; 0x2a
     a6c:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a6e:	89 a5       	ldd	r24, Y+41	; 0x29
     a70:	9a a5       	ldd	r25, Y+42	; 0x2a
     a72:	89 2b       	or	r24, r25
     a74:	69 f7       	brne	.-38     	; 0xa50 <LCD_sendCommand+0x1c4>
     a76:	14 c0       	rjmp	.+40     	; 0xaa0 <LCD_sendCommand+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a78:	6d a1       	ldd	r22, Y+37	; 0x25
     a7a:	7e a1       	ldd	r23, Y+38	; 0x26
     a7c:	8f a1       	ldd	r24, Y+39	; 0x27
     a7e:	98 a5       	ldd	r25, Y+40	; 0x28
     a80:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     a84:	dc 01       	movw	r26, r24
     a86:	cb 01       	movw	r24, r22
     a88:	9a a7       	std	Y+42, r25	; 0x2a
     a8a:	89 a7       	std	Y+41, r24	; 0x29
     a8c:	89 a5       	ldd	r24, Y+41	; 0x29
     a8e:	9a a5       	ldd	r25, Y+42	; 0x2a
     a90:	9e a7       	std	Y+46, r25	; 0x2e
     a92:	8d a7       	std	Y+45, r24	; 0x2d
     a94:	8d a5       	ldd	r24, Y+45	; 0x2d
     a96:	9e a5       	ldd	r25, Y+46	; 0x2e
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	f1 f7       	brne	.-4      	; 0xa98 <LCD_sendCommand+0x20c>
     a9c:	9e a7       	std	Y+46, r25	; 0x2e
     a9e:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(1); /*delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT=command;/* out the required command to the data bus D0--->D7*/
     aa0:	85 e3       	ldi	r24, 0x35	; 53
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	29 ad       	ldd	r18, Y+57	; 0x39
     aa6:	fc 01       	movw	r30, r24
     aa8:	20 83       	st	Z, r18
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	a0 e8       	ldi	r26, 0x80	; 128
     ab0:	bf e3       	ldi	r27, 0x3F	; 63
     ab2:	89 87       	std	Y+9, r24	; 0x09
     ab4:	9a 87       	std	Y+10, r25	; 0x0a
     ab6:	ab 87       	std	Y+11, r26	; 0x0b
     ab8:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	4a ef       	ldi	r20, 0xFA	; 250
     ac0:	54 e4       	ldi	r21, 0x44	; 68
     ac2:	69 85       	ldd	r22, Y+9	; 0x09
     ac4:	7a 85       	ldd	r23, Y+10	; 0x0a
     ac6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ac8:	9c 85       	ldd	r25, Y+12	; 0x0c
     aca:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     ace:	dc 01       	movw	r26, r24
     ad0:	cb 01       	movw	r24, r22
     ad2:	8b 8f       	std	Y+27, r24	; 0x1b
     ad4:	9c 8f       	std	Y+28, r25	; 0x1c
     ad6:	ad 8f       	std	Y+29, r26	; 0x1d
     ad8:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	40 e8       	ldi	r20, 0x80	; 128
     ae0:	5f e3       	ldi	r21, 0x3F	; 63
     ae2:	6b 8d       	ldd	r22, Y+27	; 0x1b
     ae4:	7c 8d       	ldd	r23, Y+28	; 0x1c
     ae6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ae8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     aea:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__cmpsf2>
     aee:	88 23       	and	r24, r24
     af0:	2c f4       	brge	.+10     	; 0xafc <LCD_sendCommand+0x270>
		__ticks = 1;
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	98 a3       	std	Y+32, r25	; 0x20
     af8:	8f 8f       	std	Y+31, r24	; 0x1f
     afa:	3f c0       	rjmp	.+126    	; 0xb7a <LCD_sendCommand+0x2ee>
	else if (__tmp > 65535)
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	3f ef       	ldi	r19, 0xFF	; 255
     b00:	4f e7       	ldi	r20, 0x7F	; 127
     b02:	57 e4       	ldi	r21, 0x47	; 71
     b04:	6b 8d       	ldd	r22, Y+27	; 0x1b
     b06:	7c 8d       	ldd	r23, Y+28	; 0x1c
     b08:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b0c:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
     b10:	18 16       	cp	r1, r24
     b12:	4c f5       	brge	.+82     	; 0xb66 <LCD_sendCommand+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	40 e2       	ldi	r20, 0x20	; 32
     b1a:	51 e4       	ldi	r21, 0x41	; 65
     b1c:	69 85       	ldd	r22, Y+9	; 0x09
     b1e:	7a 85       	ldd	r23, Y+10	; 0x0a
     b20:	8b 85       	ldd	r24, Y+11	; 0x0b
     b22:	9c 85       	ldd	r25, Y+12	; 0x0c
     b24:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     b28:	dc 01       	movw	r26, r24
     b2a:	cb 01       	movw	r24, r22
     b2c:	bc 01       	movw	r22, r24
     b2e:	cd 01       	movw	r24, r26
     b30:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     b34:	dc 01       	movw	r26, r24
     b36:	cb 01       	movw	r24, r22
     b38:	98 a3       	std	Y+32, r25	; 0x20
     b3a:	8f 8f       	std	Y+31, r24	; 0x1f
     b3c:	0f c0       	rjmp	.+30     	; 0xb5c <LCD_sendCommand+0x2d0>
     b3e:	88 ec       	ldi	r24, 0xC8	; 200
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	9a a3       	std	Y+34, r25	; 0x22
     b44:	89 a3       	std	Y+33, r24	; 0x21
     b46:	89 a1       	ldd	r24, Y+33	; 0x21
     b48:	9a a1       	ldd	r25, Y+34	; 0x22
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	f1 f7       	brne	.-4      	; 0xb4a <LCD_sendCommand+0x2be>
     b4e:	9a a3       	std	Y+34, r25	; 0x22
     b50:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b52:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b54:	98 a1       	ldd	r25, Y+32	; 0x20
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	98 a3       	std	Y+32, r25	; 0x20
     b5a:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b5e:	98 a1       	ldd	r25, Y+32	; 0x20
     b60:	89 2b       	or	r24, r25
     b62:	69 f7       	brne	.-38     	; 0xb3e <LCD_sendCommand+0x2b2>
     b64:	14 c0       	rjmp	.+40     	; 0xb8e <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b66:	6b 8d       	ldd	r22, Y+27	; 0x1b
     b68:	7c 8d       	ldd	r23, Y+28	; 0x1c
     b6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b6e:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     b72:	dc 01       	movw	r26, r24
     b74:	cb 01       	movw	r24, r22
     b76:	98 a3       	std	Y+32, r25	; 0x20
     b78:	8f 8f       	std	Y+31, r24	; 0x1f
     b7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b7c:	98 a1       	ldd	r25, Y+32	; 0x20
     b7e:	9c a3       	std	Y+36, r25	; 0x24
     b80:	8b a3       	std	Y+35, r24	; 0x23
     b82:	8b a1       	ldd	r24, Y+35	; 0x23
     b84:	9c a1       	ldd	r25, Y+36	; 0x24
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	f1 f7       	brne	.-4      	; 0xb86 <LCD_sendCommand+0x2fa>
     b8a:	9c a3       	std	Y+36, r25	; 0x24
     b8c:	8b a3       	std	Y+35, r24	; 0x23
	_delay_ms(1);/* delay for processing command setup time tdsw =60ns */
	CLEAR_BIT(LCD_CTRL_PORT,LCD_ENABLE); /* disable LCD so enable pin =0 */
     b8e:	82 e3       	ldi	r24, 0x32	; 50
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	22 e3       	ldi	r18, 0x32	; 50
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	f9 01       	movw	r30, r18
     b98:	20 81       	ld	r18, Z
     b9a:	2f 7b       	andi	r18, 0xBF	; 191
     b9c:	fc 01       	movw	r30, r24
     b9e:	20 83       	st	Z, r18
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	a0 e8       	ldi	r26, 0x80	; 128
     ba6:	bf e3       	ldi	r27, 0x3F	; 63
     ba8:	8d 87       	std	Y+13, r24	; 0x0d
     baa:	9e 87       	std	Y+14, r25	; 0x0e
     bac:	af 87       	std	Y+15, r26	; 0x0f
     bae:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	4a ef       	ldi	r20, 0xFA	; 250
     bb6:	54 e4       	ldi	r21, 0x44	; 68
     bb8:	6d 85       	ldd	r22, Y+13	; 0x0d
     bba:	7e 85       	ldd	r23, Y+14	; 0x0e
     bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     bbe:	98 89       	ldd	r25, Y+16	; 0x10
     bc0:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	89 8b       	std	Y+17, r24	; 0x11
     bca:	9a 8b       	std	Y+18, r25	; 0x12
     bcc:	ab 8b       	std	Y+19, r26	; 0x13
     bce:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e8       	ldi	r20, 0x80	; 128
     bd6:	5f e3       	ldi	r21, 0x3F	; 63
     bd8:	69 89       	ldd	r22, Y+17	; 0x11
     bda:	7a 89       	ldd	r23, Y+18	; 0x12
     bdc:	8b 89       	ldd	r24, Y+19	; 0x13
     bde:	9c 89       	ldd	r25, Y+20	; 0x14
     be0:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__cmpsf2>
     be4:	88 23       	and	r24, r24
     be6:	2c f4       	brge	.+10     	; 0xbf2 <LCD_sendCommand+0x366>
		__ticks = 1;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	9e 8b       	std	Y+22, r25	; 0x16
     bee:	8d 8b       	std	Y+21, r24	; 0x15
     bf0:	3f c0       	rjmp	.+126    	; 0xc70 <LCD_sendCommand+0x3e4>
	else if (__tmp > 65535)
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	3f ef       	ldi	r19, 0xFF	; 255
     bf6:	4f e7       	ldi	r20, 0x7F	; 127
     bf8:	57 e4       	ldi	r21, 0x47	; 71
     bfa:	69 89       	ldd	r22, Y+17	; 0x11
     bfc:	7a 89       	ldd	r23, Y+18	; 0x12
     bfe:	8b 89       	ldd	r24, Y+19	; 0x13
     c00:	9c 89       	ldd	r25, Y+20	; 0x14
     c02:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
     c06:	18 16       	cp	r1, r24
     c08:	4c f5       	brge	.+82     	; 0xc5c <LCD_sendCommand+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e2       	ldi	r20, 0x20	; 32
     c10:	51 e4       	ldi	r21, 0x41	; 65
     c12:	6d 85       	ldd	r22, Y+13	; 0x0d
     c14:	7e 85       	ldd	r23, Y+14	; 0x0e
     c16:	8f 85       	ldd	r24, Y+15	; 0x0f
     c18:	98 89       	ldd	r25, Y+16	; 0x10
     c1a:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	bc 01       	movw	r22, r24
     c24:	cd 01       	movw	r24, r26
     c26:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	9e 8b       	std	Y+22, r25	; 0x16
     c30:	8d 8b       	std	Y+21, r24	; 0x15
     c32:	0f c0       	rjmp	.+30     	; 0xc52 <LCD_sendCommand+0x3c6>
     c34:	88 ec       	ldi	r24, 0xC8	; 200
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	98 8f       	std	Y+24, r25	; 0x18
     c3a:	8f 8b       	std	Y+23, r24	; 0x17
     c3c:	8f 89       	ldd	r24, Y+23	; 0x17
     c3e:	98 8d       	ldd	r25, Y+24	; 0x18
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <LCD_sendCommand+0x3b4>
     c44:	98 8f       	std	Y+24, r25	; 0x18
     c46:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c48:	8d 89       	ldd	r24, Y+21	; 0x15
     c4a:	9e 89       	ldd	r25, Y+22	; 0x16
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	9e 8b       	std	Y+22, r25	; 0x16
     c50:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c52:	8d 89       	ldd	r24, Y+21	; 0x15
     c54:	9e 89       	ldd	r25, Y+22	; 0x16
     c56:	89 2b       	or	r24, r25
     c58:	69 f7       	brne	.-38     	; 0xc34 <LCD_sendCommand+0x3a8>
	_delay_ms(1); /* delay for processing hold time th=10ns */

}
     c5a:	14 c0       	rjmp	.+40     	; 0xc84 <LCD_sendCommand+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c5c:	69 89       	ldd	r22, Y+17	; 0x11
     c5e:	7a 89       	ldd	r23, Y+18	; 0x12
     c60:	8b 89       	ldd	r24, Y+19	; 0x13
     c62:	9c 89       	ldd	r25, Y+20	; 0x14
     c64:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	9e 8b       	std	Y+22, r25	; 0x16
     c6e:	8d 8b       	std	Y+21, r24	; 0x15
     c70:	8d 89       	ldd	r24, Y+21	; 0x15
     c72:	9e 89       	ldd	r25, Y+22	; 0x16
     c74:	9a 8f       	std	Y+26, r25	; 0x1a
     c76:	89 8f       	std	Y+25, r24	; 0x19
     c78:	89 8d       	ldd	r24, Y+25	; 0x19
     c7a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <LCD_sendCommand+0x3f0>
     c80:	9a 8f       	std	Y+26, r25	; 0x1a
     c82:	89 8f       	std	Y+25, r24	; 0x19
     c84:	00 00       	nop
     c86:	e9 96       	adiw	r28, 0x39	; 57
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data)
{
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	cb 56       	subi	r28, 0x6B	; 107
     ca6:	d1 09       	sbc	r29, r1
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	9e 01       	movw	r18, r28
     cb4:	25 59       	subi	r18, 0x95	; 149
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
     cb8:	f9 01       	movw	r30, r18
     cba:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* data mode so RS =1*/
     cbc:	82 e3       	ldi	r24, 0x32	; 50
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	22 e3       	ldi	r18, 0x32	; 50
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	f9 01       	movw	r30, r18
     cc6:	20 81       	ld	r18, Z
     cc8:	20 61       	ori	r18, 0x10	; 16
     cca:	fc 01       	movw	r30, r24
     ccc:	20 83       	st	Z, r18
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	a0 e8       	ldi	r26, 0x80	; 128
     cd4:	bf e3       	ldi	r27, 0x3F	; 63
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	9a 83       	std	Y+2, r25	; 0x02
     cda:	ab 83       	std	Y+3, r26	; 0x03
     cdc:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     cde:	8e 01       	movw	r16, r28
     ce0:	01 5b       	subi	r16, 0xB1	; 177
     ce2:	1f 4f       	sbci	r17, 0xFF	; 255
     ce4:	2b ea       	ldi	r18, 0xAB	; 171
     ce6:	3a ea       	ldi	r19, 0xAA	; 170
     ce8:	4a e2       	ldi	r20, 0x2A	; 42
     cea:	50 e4       	ldi	r21, 0x40	; 64
     cec:	69 81       	ldd	r22, Y+1	; 0x01
     cee:	7a 81       	ldd	r23, Y+2	; 0x02
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	9c 81       	ldd	r25, Y+4	; 0x04
     cf4:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	f8 01       	movw	r30, r16
     cfe:	80 83       	st	Z, r24
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	a2 83       	std	Z+2, r26	; 0x02
     d04:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     d06:	8e 01       	movw	r16, r28
     d08:	0d 5a       	subi	r16, 0xAD	; 173
     d0a:	1f 4f       	sbci	r17, 0xFF	; 255
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	ab 81       	ldd	r26, Y+3	; 0x03
     d12:	bc 81       	ldd	r27, Y+4	; 0x04
     d14:	9c 01       	movw	r18, r24
     d16:	ad 01       	movw	r20, r26
     d18:	bc 01       	movw	r22, r24
     d1a:	cd 01       	movw	r24, r26
     d1c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__addsf3>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	f8 01       	movw	r30, r16
     d26:	80 83       	st	Z, r24
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	a2 83       	std	Z+2, r26	; 0x02
     d2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d2e:	ce 01       	movw	r24, r28
     d30:	81 5b       	subi	r24, 0xB1	; 177
     d32:	9f 4f       	sbci	r25, 0xFF	; 255
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e8       	ldi	r20, 0x80	; 128
     d3a:	5f e3       	ldi	r21, 0x3F	; 63
     d3c:	fc 01       	movw	r30, r24
     d3e:	60 81       	ld	r22, Z
     d40:	71 81       	ldd	r23, Z+1	; 0x01
     d42:	82 81       	ldd	r24, Z+2	; 0x02
     d44:	93 81       	ldd	r25, Z+3	; 0x03
     d46:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__cmpsf2>
     d4a:	88 23       	and	r24, r24
     d4c:	3c f4       	brge	.+14     	; 0xd5c <LCD_displayCharacter+0xc4>
		__ticks = 1;
     d4e:	ce 01       	movw	r24, r28
     d50:	89 5a       	subi	r24, 0xA9	; 169
     d52:	9f 4f       	sbci	r25, 0xFF	; 255
     d54:	21 e0       	ldi	r18, 0x01	; 1
     d56:	fc 01       	movw	r30, r24
     d58:	20 83       	st	Z, r18
     d5a:	2c c1       	rjmp	.+600    	; 0xfb4 <LCD_displayCharacter+0x31c>
	else if (__tmp2 > 65535)
     d5c:	ce 01       	movw	r24, r28
     d5e:	8d 5a       	subi	r24, 0xAD	; 173
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	3f ef       	ldi	r19, 0xFF	; 255
     d66:	4f e7       	ldi	r20, 0x7F	; 127
     d68:	57 e4       	ldi	r21, 0x47	; 71
     d6a:	fc 01       	movw	r30, r24
     d6c:	60 81       	ld	r22, Z
     d6e:	71 81       	ldd	r23, Z+1	; 0x01
     d70:	82 81       	ldd	r24, Z+2	; 0x02
     d72:	93 81       	ldd	r25, Z+3	; 0x03
     d74:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
     d78:	18 16       	cp	r1, r24
     d7a:	0c f0       	brlt	.+2      	; 0xd7e <LCD_displayCharacter+0xe6>
     d7c:	cd c0       	rjmp	.+410    	; 0xf18 <LCD_displayCharacter+0x280>
	{
		_delay_ms(__us / 1000.0);
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	4a e7       	ldi	r20, 0x7A	; 122
     d84:	54 e4       	ldi	r21, 0x44	; 68
     d86:	69 81       	ldd	r22, Y+1	; 0x01
     d88:	7a 81       	ldd	r23, Y+2	; 0x02
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	9c 81       	ldd	r25, Y+4	; 0x04
     d8e:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__divsf3>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	9e 01       	movw	r18, r28
     d98:	28 5a       	subi	r18, 0xA8	; 168
     d9a:	3f 4f       	sbci	r19, 0xFF	; 255
     d9c:	f9 01       	movw	r30, r18
     d9e:	80 83       	st	Z, r24
     da0:	91 83       	std	Z+1, r25	; 0x01
     da2:	a2 83       	std	Z+2, r26	; 0x02
     da4:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     da6:	8e 01       	movw	r16, r28
     da8:	04 5a       	subi	r16, 0xA4	; 164
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
     dac:	ce 01       	movw	r24, r28
     dae:	88 5a       	subi	r24, 0xA8	; 168
     db0:	9f 4f       	sbci	r25, 0xFF	; 255
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	4a ef       	ldi	r20, 0xFA	; 250
     db8:	54 e4       	ldi	r21, 0x44	; 68
     dba:	fc 01       	movw	r30, r24
     dbc:	60 81       	ld	r22, Z
     dbe:	71 81       	ldd	r23, Z+1	; 0x01
     dc0:	82 81       	ldd	r24, Z+2	; 0x02
     dc2:	93 81       	ldd	r25, Z+3	; 0x03
     dc4:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	f8 01       	movw	r30, r16
     dce:	80 83       	st	Z, r24
     dd0:	91 83       	std	Z+1, r25	; 0x01
     dd2:	a2 83       	std	Z+2, r26	; 0x02
     dd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dd6:	ce 01       	movw	r24, r28
     dd8:	84 5a       	subi	r24, 0xA4	; 164
     dda:	9f 4f       	sbci	r25, 0xFF	; 255
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	40 e8       	ldi	r20, 0x80	; 128
     de2:	5f e3       	ldi	r21, 0x3F	; 63
     de4:	fc 01       	movw	r30, r24
     de6:	60 81       	ld	r22, Z
     de8:	71 81       	ldd	r23, Z+1	; 0x01
     dea:	82 81       	ldd	r24, Z+2	; 0x02
     dec:	93 81       	ldd	r25, Z+3	; 0x03
     dee:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__cmpsf2>
     df2:	88 23       	and	r24, r24
     df4:	4c f4       	brge	.+18     	; 0xe08 <LCD_displayCharacter+0x170>
		__ticks = 1;
     df6:	ce 01       	movw	r24, r28
     df8:	80 5a       	subi	r24, 0xA0	; 160
     dfa:	9f 4f       	sbci	r25, 0xFF	; 255
     dfc:	21 e0       	ldi	r18, 0x01	; 1
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	fc 01       	movw	r30, r24
     e02:	31 83       	std	Z+1, r19	; 0x01
     e04:	20 83       	st	Z, r18
     e06:	6d c0       	rjmp	.+218    	; 0xee2 <LCD_displayCharacter+0x24a>
	else if (__tmp > 65535)
     e08:	ce 01       	movw	r24, r28
     e0a:	84 5a       	subi	r24, 0xA4	; 164
     e0c:	9f 4f       	sbci	r25, 0xFF	; 255
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	3f ef       	ldi	r19, 0xFF	; 255
     e12:	4f e7       	ldi	r20, 0x7F	; 127
     e14:	57 e4       	ldi	r21, 0x47	; 71
     e16:	fc 01       	movw	r30, r24
     e18:	60 81       	ld	r22, Z
     e1a:	71 81       	ldd	r23, Z+1	; 0x01
     e1c:	82 81       	ldd	r24, Z+2	; 0x02
     e1e:	93 81       	ldd	r25, Z+3	; 0x03
     e20:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
     e24:	18 16       	cp	r1, r24
     e26:	0c f0       	brlt	.+2      	; 0xe2a <LCD_displayCharacter+0x192>
     e28:	4a c0       	rjmp	.+148    	; 0xebe <LCD_displayCharacter+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e2a:	ce 01       	movw	r24, r28
     e2c:	88 5a       	subi	r24, 0xA8	; 168
     e2e:	9f 4f       	sbci	r25, 0xFF	; 255
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	40 e2       	ldi	r20, 0x20	; 32
     e36:	51 e4       	ldi	r21, 0x41	; 65
     e38:	fc 01       	movw	r30, r24
     e3a:	60 81       	ld	r22, Z
     e3c:	71 81       	ldd	r23, Z+1	; 0x01
     e3e:	82 81       	ldd	r24, Z+2	; 0x02
     e40:	93 81       	ldd	r25, Z+3	; 0x03
     e42:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	8e 01       	movw	r16, r28
     e4c:	00 5a       	subi	r16, 0xA0	; 160
     e4e:	1f 4f       	sbci	r17, 0xFF	; 255
     e50:	bc 01       	movw	r22, r24
     e52:	cd 01       	movw	r24, r26
     e54:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	f8 01       	movw	r30, r16
     e5e:	91 83       	std	Z+1, r25	; 0x01
     e60:	80 83       	st	Z, r24
     e62:	24 c0       	rjmp	.+72     	; 0xeac <LCD_displayCharacter+0x214>
     e64:	ce 01       	movw	r24, r28
     e66:	8e 59       	subi	r24, 0x9E	; 158
     e68:	9f 4f       	sbci	r25, 0xFF	; 255
     e6a:	28 ec       	ldi	r18, 0xC8	; 200
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	fc 01       	movw	r30, r24
     e70:	31 83       	std	Z+1, r19	; 0x01
     e72:	20 83       	st	Z, r18
     e74:	ce 01       	movw	r24, r28
     e76:	8e 59       	subi	r24, 0x9E	; 158
     e78:	9f 4f       	sbci	r25, 0xFF	; 255
     e7a:	fc 01       	movw	r30, r24
     e7c:	80 81       	ld	r24, Z
     e7e:	91 81       	ldd	r25, Z+1	; 0x01
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	f1 f7       	brne	.-4      	; 0xe80 <LCD_displayCharacter+0x1e8>
     e84:	9e 01       	movw	r18, r28
     e86:	2e 59       	subi	r18, 0x9E	; 158
     e88:	3f 4f       	sbci	r19, 0xFF	; 255
     e8a:	f9 01       	movw	r30, r18
     e8c:	91 83       	std	Z+1, r25	; 0x01
     e8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e90:	ce 01       	movw	r24, r28
     e92:	80 5a       	subi	r24, 0xA0	; 160
     e94:	9f 4f       	sbci	r25, 0xFF	; 255
     e96:	9e 01       	movw	r18, r28
     e98:	20 5a       	subi	r18, 0xA0	; 160
     e9a:	3f 4f       	sbci	r19, 0xFF	; 255
     e9c:	f9 01       	movw	r30, r18
     e9e:	20 81       	ld	r18, Z
     ea0:	31 81       	ldd	r19, Z+1	; 0x01
     ea2:	21 50       	subi	r18, 0x01	; 1
     ea4:	31 09       	sbc	r19, r1
     ea6:	fc 01       	movw	r30, r24
     ea8:	31 83       	std	Z+1, r19	; 0x01
     eaa:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eac:	ce 01       	movw	r24, r28
     eae:	80 5a       	subi	r24, 0xA0	; 160
     eb0:	9f 4f       	sbci	r25, 0xFF	; 255
     eb2:	fc 01       	movw	r30, r24
     eb4:	80 81       	ld	r24, Z
     eb6:	91 81       	ldd	r25, Z+1	; 0x01
     eb8:	89 2b       	or	r24, r25
     eba:	a1 f6       	brne	.-88     	; 0xe64 <LCD_displayCharacter+0x1cc>
     ebc:	7b c0       	rjmp	.+246    	; 0xfb4 <LCD_displayCharacter+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebe:	8e 01       	movw	r16, r28
     ec0:	00 5a       	subi	r16, 0xA0	; 160
     ec2:	1f 4f       	sbci	r17, 0xFF	; 255
     ec4:	ce 01       	movw	r24, r28
     ec6:	84 5a       	subi	r24, 0xA4	; 164
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	fc 01       	movw	r30, r24
     ecc:	60 81       	ld	r22, Z
     ece:	71 81       	ldd	r23, Z+1	; 0x01
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	f8 01       	movw	r30, r16
     ede:	91 83       	std	Z+1, r25	; 0x01
     ee0:	80 83       	st	Z, r24
     ee2:	ce 01       	movw	r24, r28
     ee4:	8c 59       	subi	r24, 0x9C	; 156
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	9e 01       	movw	r18, r28
     eea:	20 5a       	subi	r18, 0xA0	; 160
     eec:	3f 4f       	sbci	r19, 0xFF	; 255
     eee:	f9 01       	movw	r30, r18
     ef0:	20 81       	ld	r18, Z
     ef2:	31 81       	ldd	r19, Z+1	; 0x01
     ef4:	fc 01       	movw	r30, r24
     ef6:	31 83       	std	Z+1, r19	; 0x01
     ef8:	20 83       	st	Z, r18
     efa:	ce 01       	movw	r24, r28
     efc:	8c 59       	subi	r24, 0x9C	; 156
     efe:	9f 4f       	sbci	r25, 0xFF	; 255
     f00:	fc 01       	movw	r30, r24
     f02:	80 81       	ld	r24, Z
     f04:	91 81       	ldd	r25, Z+1	; 0x01
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <LCD_displayCharacter+0x26e>
     f0a:	9e 01       	movw	r18, r28
     f0c:	2c 59       	subi	r18, 0x9C	; 156
     f0e:	3f 4f       	sbci	r19, 0xFF	; 255
     f10:	f9 01       	movw	r30, r18
     f12:	91 83       	std	Z+1, r25	; 0x01
     f14:	80 83       	st	Z, r24
     f16:	4e c0       	rjmp	.+156    	; 0xfb4 <LCD_displayCharacter+0x31c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     f18:	ce 01       	movw	r24, r28
     f1a:	81 5b       	subi	r24, 0xB1	; 177
     f1c:	9f 4f       	sbci	r25, 0xFF	; 255
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	4f e7       	ldi	r20, 0x7F	; 127
     f24:	53 e4       	ldi	r21, 0x43	; 67
     f26:	fc 01       	movw	r30, r24
     f28:	60 81       	ld	r22, Z
     f2a:	71 81       	ldd	r23, Z+1	; 0x01
     f2c:	82 81       	ldd	r24, Z+2	; 0x02
     f2e:	93 81       	ldd	r25, Z+3	; 0x03
     f30:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
     f34:	18 16       	cp	r1, r24
     f36:	6c f5       	brge	.+90     	; 0xf92 <LCD_displayCharacter+0x2fa>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     f38:	8e 01       	movw	r16, r28
     f3a:	0a 59       	subi	r16, 0x9A	; 154
     f3c:	1f 4f       	sbci	r17, 0xFF	; 255
     f3e:	ce 01       	movw	r24, r28
     f40:	8d 5a       	subi	r24, 0xAD	; 173
     f42:	9f 4f       	sbci	r25, 0xFF	; 255
     f44:	fc 01       	movw	r30, r24
     f46:	60 81       	ld	r22, Z
     f48:	71 81       	ldd	r23, Z+1	; 0x01
     f4a:	82 81       	ldd	r24, Z+2	; 0x02
     f4c:	93 81       	ldd	r25, Z+3	; 0x03
     f4e:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	f8 01       	movw	r30, r16
     f58:	91 83       	std	Z+1, r25	; 0x01
     f5a:	80 83       	st	Z, r24
     f5c:	ce 01       	movw	r24, r28
     f5e:	88 59       	subi	r24, 0x98	; 152
     f60:	9f 4f       	sbci	r25, 0xFF	; 255
     f62:	9e 01       	movw	r18, r28
     f64:	2a 59       	subi	r18, 0x9A	; 154
     f66:	3f 4f       	sbci	r19, 0xFF	; 255
     f68:	f9 01       	movw	r30, r18
     f6a:	20 81       	ld	r18, Z
     f6c:	31 81       	ldd	r19, Z+1	; 0x01
     f6e:	fc 01       	movw	r30, r24
     f70:	31 83       	std	Z+1, r19	; 0x01
     f72:	20 83       	st	Z, r18
     f74:	ce 01       	movw	r24, r28
     f76:	88 59       	subi	r24, 0x98	; 152
     f78:	9f 4f       	sbci	r25, 0xFF	; 255
     f7a:	fc 01       	movw	r30, r24
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <LCD_displayCharacter+0x2e8>
     f84:	9e 01       	movw	r18, r28
     f86:	28 59       	subi	r18, 0x98	; 152
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
     f8a:	f9 01       	movw	r30, r18
     f8c:	91 83       	std	Z+1, r25	; 0x01
     f8e:	80 83       	st	Z, r24
     f90:	28 c0       	rjmp	.+80     	; 0xfe2 <LCD_displayCharacter+0x34a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f92:	8e 01       	movw	r16, r28
     f94:	09 5a       	subi	r16, 0xA9	; 169
     f96:	1f 4f       	sbci	r17, 0xFF	; 255
     f98:	ce 01       	movw	r24, r28
     f9a:	81 5b       	subi	r24, 0xB1	; 177
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	fc 01       	movw	r30, r24
     fa0:	60 81       	ld	r22, Z
     fa2:	71 81       	ldd	r23, Z+1	; 0x01
     fa4:	82 81       	ldd	r24, Z+2	; 0x02
     fa6:	93 81       	ldd	r25, Z+3	; 0x03
     fa8:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	f8 01       	movw	r30, r16
     fb2:	80 83       	st	Z, r24
     fb4:	ce 01       	movw	r24, r28
     fb6:	86 59       	subi	r24, 0x96	; 150
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	9e 01       	movw	r18, r28
     fbc:	29 5a       	subi	r18, 0xA9	; 169
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	f9 01       	movw	r30, r18
     fc2:	20 81       	ld	r18, Z
     fc4:	fc 01       	movw	r30, r24
     fc6:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fc8:	ce 01       	movw	r24, r28
     fca:	86 59       	subi	r24, 0x96	; 150
     fcc:	9f 4f       	sbci	r25, 0xFF	; 255
     fce:	fc 01       	movw	r30, r24
     fd0:	80 81       	ld	r24, Z
     fd2:	28 2f       	mov	r18, r24
     fd4:	2a 95       	dec	r18
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <LCD_displayCharacter+0x33c>
     fd8:	ce 01       	movw	r24, r28
     fda:	86 59       	subi	r24, 0x96	; 150
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	fc 01       	movw	r30, r24
     fe0:	20 83       	st	Z, r18
	_delay_us(1);/*delay processing RS set time tas=40ns */
	CLEAR_BIT(LCD_CTRL_PORT,READWRITE); /*write data to LCD so READWRITE =0 */
     fe2:	82 e3       	ldi	r24, 0x32	; 50
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	22 e3       	ldi	r18, 0x32	; 50
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	f9 01       	movw	r30, r18
     fec:	20 81       	ld	r18, Z
     fee:	2f 7d       	andi	r18, 0xDF	; 223
     ff0:	fc 01       	movw	r30, r24
     ff2:	20 83       	st	Z, r18
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a0 e8       	ldi	r26, 0x80	; 128
     ffa:	bf e3       	ldi	r27, 0x3F	; 63
     ffc:	8d 83       	std	Y+5, r24	; 0x05
     ffe:	9e 83       	std	Y+6, r25	; 0x06
    1000:	af 83       	std	Y+7, r26	; 0x07
    1002:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1004:	2b ea       	ldi	r18, 0xAB	; 171
    1006:	3a ea       	ldi	r19, 0xAA	; 170
    1008:	4a e2       	ldi	r20, 0x2A	; 42
    100a:	50 e4       	ldi	r21, 0x40	; 64
    100c:	6d 81       	ldd	r22, Y+5	; 0x05
    100e:	7e 81       	ldd	r23, Y+6	; 0x06
    1010:	8f 81       	ldd	r24, Y+7	; 0x07
    1012:	98 85       	ldd	r25, Y+8	; 0x08
    1014:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	8b ab       	std	Y+51, r24	; 0x33
    101e:	9c ab       	std	Y+52, r25	; 0x34
    1020:	ad ab       	std	Y+53, r26	; 0x35
    1022:	be ab       	std	Y+54, r27	; 0x36
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	9e 81       	ldd	r25, Y+6	; 0x06
    1028:	af 81       	ldd	r26, Y+7	; 0x07
    102a:	b8 85       	ldd	r27, Y+8	; 0x08
    102c:	9c 01       	movw	r18, r24
    102e:	ad 01       	movw	r20, r26
    1030:	bc 01       	movw	r22, r24
    1032:	cd 01       	movw	r24, r26
    1034:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__addsf3>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	8f ab       	std	Y+55, r24	; 0x37
    103e:	98 af       	std	Y+56, r25	; 0x38
    1040:	a9 af       	std	Y+57, r26	; 0x39
    1042:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e8       	ldi	r20, 0x80	; 128
    104a:	5f e3       	ldi	r21, 0x3F	; 63
    104c:	6b a9       	ldd	r22, Y+51	; 0x33
    104e:	7c a9       	ldd	r23, Y+52	; 0x34
    1050:	8d a9       	ldd	r24, Y+53	; 0x35
    1052:	9e a9       	ldd	r25, Y+54	; 0x36
    1054:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__cmpsf2>
    1058:	88 23       	and	r24, r24
    105a:	1c f4       	brge	.+6      	; 0x1062 <LCD_displayCharacter+0x3ca>
		__ticks = 1;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	8b af       	std	Y+59, r24	; 0x3b
    1060:	0c c1       	rjmp	.+536    	; 0x127a <LCD_displayCharacter+0x5e2>
	else if (__tmp2 > 65535)
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	3f ef       	ldi	r19, 0xFF	; 255
    1066:	4f e7       	ldi	r20, 0x7F	; 127
    1068:	57 e4       	ldi	r21, 0x47	; 71
    106a:	6f a9       	ldd	r22, Y+55	; 0x37
    106c:	78 ad       	ldd	r23, Y+56	; 0x38
    106e:	89 ad       	ldd	r24, Y+57	; 0x39
    1070:	9a ad       	ldd	r25, Y+58	; 0x3a
    1072:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
    1076:	18 16       	cp	r1, r24
    1078:	0c f0       	brlt	.+2      	; 0x107c <LCD_displayCharacter+0x3e4>
    107a:	c1 c0       	rjmp	.+386    	; 0x11fe <LCD_displayCharacter+0x566>
	{
		_delay_ms(__us / 1000.0);
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	4a e7       	ldi	r20, 0x7A	; 122
    1082:	54 e4       	ldi	r21, 0x44	; 68
    1084:	6d 81       	ldd	r22, Y+5	; 0x05
    1086:	7e 81       	ldd	r23, Y+6	; 0x06
    1088:	8f 81       	ldd	r24, Y+7	; 0x07
    108a:	98 85       	ldd	r25, Y+8	; 0x08
    108c:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__divsf3>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	8c af       	std	Y+60, r24	; 0x3c
    1096:	9d af       	std	Y+61, r25	; 0x3d
    1098:	ae af       	std	Y+62, r26	; 0x3e
    109a:	bf af       	std	Y+63, r27	; 0x3f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    109c:	8e 01       	movw	r16, r28
    109e:	00 5c       	subi	r16, 0xC0	; 192
    10a0:	1f 4f       	sbci	r17, 0xFF	; 255
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	4a ef       	ldi	r20, 0xFA	; 250
    10a8:	54 e4       	ldi	r21, 0x44	; 68
    10aa:	6c ad       	ldd	r22, Y+60	; 0x3c
    10ac:	7d ad       	ldd	r23, Y+61	; 0x3d
    10ae:	8e ad       	ldd	r24, Y+62	; 0x3e
    10b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    10b2:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	f8 01       	movw	r30, r16
    10bc:	80 83       	st	Z, r24
    10be:	91 83       	std	Z+1, r25	; 0x01
    10c0:	a2 83       	std	Z+2, r26	; 0x02
    10c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10c4:	ce 01       	movw	r24, r28
    10c6:	80 5c       	subi	r24, 0xC0	; 192
    10c8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e8       	ldi	r20, 0x80	; 128
    10d0:	5f e3       	ldi	r21, 0x3F	; 63
    10d2:	fc 01       	movw	r30, r24
    10d4:	60 81       	ld	r22, Z
    10d6:	71 81       	ldd	r23, Z+1	; 0x01
    10d8:	82 81       	ldd	r24, Z+2	; 0x02
    10da:	93 81       	ldd	r25, Z+3	; 0x03
    10dc:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__cmpsf2>
    10e0:	88 23       	and	r24, r24
    10e2:	4c f4       	brge	.+18     	; 0x10f6 <LCD_displayCharacter+0x45e>
		__ticks = 1;
    10e4:	ce 01       	movw	r24, r28
    10e6:	8c 5b       	subi	r24, 0xBC	; 188
    10e8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ea:	21 e0       	ldi	r18, 0x01	; 1
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	fc 01       	movw	r30, r24
    10f0:	31 83       	std	Z+1, r19	; 0x01
    10f2:	20 83       	st	Z, r18
    10f4:	69 c0       	rjmp	.+210    	; 0x11c8 <LCD_displayCharacter+0x530>
	else if (__tmp > 65535)
    10f6:	ce 01       	movw	r24, r28
    10f8:	80 5c       	subi	r24, 0xC0	; 192
    10fa:	9f 4f       	sbci	r25, 0xFF	; 255
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	3f ef       	ldi	r19, 0xFF	; 255
    1100:	4f e7       	ldi	r20, 0x7F	; 127
    1102:	57 e4       	ldi	r21, 0x47	; 71
    1104:	fc 01       	movw	r30, r24
    1106:	60 81       	ld	r22, Z
    1108:	71 81       	ldd	r23, Z+1	; 0x01
    110a:	82 81       	ldd	r24, Z+2	; 0x02
    110c:	93 81       	ldd	r25, Z+3	; 0x03
    110e:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
    1112:	18 16       	cp	r1, r24
    1114:	0c f0       	brlt	.+2      	; 0x1118 <LCD_displayCharacter+0x480>
    1116:	46 c0       	rjmp	.+140    	; 0x11a4 <LCD_displayCharacter+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e2       	ldi	r20, 0x20	; 32
    111e:	51 e4       	ldi	r21, 0x41	; 65
    1120:	6c ad       	ldd	r22, Y+60	; 0x3c
    1122:	7d ad       	ldd	r23, Y+61	; 0x3d
    1124:	8e ad       	ldd	r24, Y+62	; 0x3e
    1126:	9f ad       	ldd	r25, Y+63	; 0x3f
    1128:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	8e 01       	movw	r16, r28
    1132:	0c 5b       	subi	r16, 0xBC	; 188
    1134:	1f 4f       	sbci	r17, 0xFF	; 255
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	f8 01       	movw	r30, r16
    1144:	91 83       	std	Z+1, r25	; 0x01
    1146:	80 83       	st	Z, r24
    1148:	24 c0       	rjmp	.+72     	; 0x1192 <LCD_displayCharacter+0x4fa>
    114a:	ce 01       	movw	r24, r28
    114c:	8a 5b       	subi	r24, 0xBA	; 186
    114e:	9f 4f       	sbci	r25, 0xFF	; 255
    1150:	28 ec       	ldi	r18, 0xC8	; 200
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	fc 01       	movw	r30, r24
    1156:	31 83       	std	Z+1, r19	; 0x01
    1158:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    115a:	ce 01       	movw	r24, r28
    115c:	8a 5b       	subi	r24, 0xBA	; 186
    115e:	9f 4f       	sbci	r25, 0xFF	; 255
    1160:	fc 01       	movw	r30, r24
    1162:	80 81       	ld	r24, Z
    1164:	91 81       	ldd	r25, Z+1	; 0x01
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <LCD_displayCharacter+0x4ce>
    116a:	9e 01       	movw	r18, r28
    116c:	2a 5b       	subi	r18, 0xBA	; 186
    116e:	3f 4f       	sbci	r19, 0xFF	; 255
    1170:	f9 01       	movw	r30, r18
    1172:	91 83       	std	Z+1, r25	; 0x01
    1174:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1176:	ce 01       	movw	r24, r28
    1178:	8c 5b       	subi	r24, 0xBC	; 188
    117a:	9f 4f       	sbci	r25, 0xFF	; 255
    117c:	9e 01       	movw	r18, r28
    117e:	2c 5b       	subi	r18, 0xBC	; 188
    1180:	3f 4f       	sbci	r19, 0xFF	; 255
    1182:	f9 01       	movw	r30, r18
    1184:	20 81       	ld	r18, Z
    1186:	31 81       	ldd	r19, Z+1	; 0x01
    1188:	21 50       	subi	r18, 0x01	; 1
    118a:	31 09       	sbc	r19, r1
    118c:	fc 01       	movw	r30, r24
    118e:	31 83       	std	Z+1, r19	; 0x01
    1190:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1192:	ce 01       	movw	r24, r28
    1194:	8c 5b       	subi	r24, 0xBC	; 188
    1196:	9f 4f       	sbci	r25, 0xFF	; 255
    1198:	fc 01       	movw	r30, r24
    119a:	80 81       	ld	r24, Z
    119c:	91 81       	ldd	r25, Z+1	; 0x01
    119e:	89 2b       	or	r24, r25
    11a0:	a1 f6       	brne	.-88     	; 0x114a <LCD_displayCharacter+0x4b2>
    11a2:	6b c0       	rjmp	.+214    	; 0x127a <LCD_displayCharacter+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a4:	8e 01       	movw	r16, r28
    11a6:	0c 5b       	subi	r16, 0xBC	; 188
    11a8:	1f 4f       	sbci	r17, 0xFF	; 255
    11aa:	ce 01       	movw	r24, r28
    11ac:	80 5c       	subi	r24, 0xC0	; 192
    11ae:	9f 4f       	sbci	r25, 0xFF	; 255
    11b0:	fc 01       	movw	r30, r24
    11b2:	60 81       	ld	r22, Z
    11b4:	71 81       	ldd	r23, Z+1	; 0x01
    11b6:	82 81       	ldd	r24, Z+2	; 0x02
    11b8:	93 81       	ldd	r25, Z+3	; 0x03
    11ba:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	f8 01       	movw	r30, r16
    11c4:	91 83       	std	Z+1, r25	; 0x01
    11c6:	80 83       	st	Z, r24
    11c8:	ce 01       	movw	r24, r28
    11ca:	88 5b       	subi	r24, 0xB8	; 184
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	9e 01       	movw	r18, r28
    11d0:	2c 5b       	subi	r18, 0xBC	; 188
    11d2:	3f 4f       	sbci	r19, 0xFF	; 255
    11d4:	f9 01       	movw	r30, r18
    11d6:	20 81       	ld	r18, Z
    11d8:	31 81       	ldd	r19, Z+1	; 0x01
    11da:	fc 01       	movw	r30, r24
    11dc:	31 83       	std	Z+1, r19	; 0x01
    11de:	20 83       	st	Z, r18
    11e0:	ce 01       	movw	r24, r28
    11e2:	88 5b       	subi	r24, 0xB8	; 184
    11e4:	9f 4f       	sbci	r25, 0xFF	; 255
    11e6:	fc 01       	movw	r30, r24
    11e8:	80 81       	ld	r24, Z
    11ea:	91 81       	ldd	r25, Z+1	; 0x01
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <LCD_displayCharacter+0x554>
    11f0:	9e 01       	movw	r18, r28
    11f2:	28 5b       	subi	r18, 0xB8	; 184
    11f4:	3f 4f       	sbci	r19, 0xFF	; 255
    11f6:	f9 01       	movw	r30, r18
    11f8:	91 83       	std	Z+1, r25	; 0x01
    11fa:	80 83       	st	Z, r24
    11fc:	3e c0       	rjmp	.+124    	; 0x127a <LCD_displayCharacter+0x5e2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	4f e7       	ldi	r20, 0x7F	; 127
    1204:	53 e4       	ldi	r21, 0x43	; 67
    1206:	6b a9       	ldd	r22, Y+51	; 0x33
    1208:	7c a9       	ldd	r23, Y+52	; 0x34
    120a:	8d a9       	ldd	r24, Y+53	; 0x35
    120c:	9e a9       	ldd	r25, Y+54	; 0x36
    120e:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
    1212:	18 16       	cp	r1, r24
    1214:	4c f5       	brge	.+82     	; 0x1268 <LCD_displayCharacter+0x5d0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1216:	8e 01       	movw	r16, r28
    1218:	06 5b       	subi	r16, 0xB6	; 182
    121a:	1f 4f       	sbci	r17, 0xFF	; 255
    121c:	6f a9       	ldd	r22, Y+55	; 0x37
    121e:	78 ad       	ldd	r23, Y+56	; 0x38
    1220:	89 ad       	ldd	r24, Y+57	; 0x39
    1222:	9a ad       	ldd	r25, Y+58	; 0x3a
    1224:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	f8 01       	movw	r30, r16
    122e:	91 83       	std	Z+1, r25	; 0x01
    1230:	80 83       	st	Z, r24
    1232:	ce 01       	movw	r24, r28
    1234:	84 5b       	subi	r24, 0xB4	; 180
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	9e 01       	movw	r18, r28
    123a:	26 5b       	subi	r18, 0xB6	; 182
    123c:	3f 4f       	sbci	r19, 0xFF	; 255
    123e:	f9 01       	movw	r30, r18
    1240:	20 81       	ld	r18, Z
    1242:	31 81       	ldd	r19, Z+1	; 0x01
    1244:	fc 01       	movw	r30, r24
    1246:	31 83       	std	Z+1, r19	; 0x01
    1248:	20 83       	st	Z, r18
    124a:	ce 01       	movw	r24, r28
    124c:	84 5b       	subi	r24, 0xB4	; 180
    124e:	9f 4f       	sbci	r25, 0xFF	; 255
    1250:	fc 01       	movw	r30, r24
    1252:	80 81       	ld	r24, Z
    1254:	91 81       	ldd	r25, Z+1	; 0x01
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	f1 f7       	brne	.-4      	; 0x1256 <LCD_displayCharacter+0x5be>
    125a:	9e 01       	movw	r18, r28
    125c:	24 5b       	subi	r18, 0xB4	; 180
    125e:	3f 4f       	sbci	r19, 0xFF	; 255
    1260:	f9 01       	movw	r30, r18
    1262:	91 83       	std	Z+1, r25	; 0x01
    1264:	80 83       	st	Z, r24
    1266:	1c c0       	rjmp	.+56     	; 0x12a0 <LCD_displayCharacter+0x608>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1268:	6b a9       	ldd	r22, Y+51	; 0x33
    126a:	7c a9       	ldd	r23, Y+52	; 0x34
    126c:	8d a9       	ldd	r24, Y+53	; 0x35
    126e:	9e a9       	ldd	r25, Y+54	; 0x36
    1270:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	8b af       	std	Y+59, r24	; 0x3b
    127a:	ce 01       	movw	r24, r28
    127c:	82 5b       	subi	r24, 0xB2	; 178
    127e:	9f 4f       	sbci	r25, 0xFF	; 255
    1280:	2b ad       	ldd	r18, Y+59	; 0x3b
    1282:	fc 01       	movw	r30, r24
    1284:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1286:	ce 01       	movw	r24, r28
    1288:	82 5b       	subi	r24, 0xB2	; 178
    128a:	9f 4f       	sbci	r25, 0xFF	; 255
    128c:	fc 01       	movw	r30, r24
    128e:	80 81       	ld	r24, Z
    1290:	28 2f       	mov	r18, r24
    1292:	2a 95       	dec	r18
    1294:	f1 f7       	brne	.-4      	; 0x1292 <LCD_displayCharacter+0x5fa>
    1296:	ce 01       	movw	r24, r28
    1298:	82 5b       	subi	r24, 0xB2	; 178
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	fc 01       	movw	r30, r24
    129e:	20 83       	st	Z, r18
	_delay_us(1);/* delay processing R/W set time tas =40ns */
	SET_BIT(LCD_CTRL_PORT,LCD_ENABLE); /* enable LCD so enable =1 */
    12a0:	82 e3       	ldi	r24, 0x32	; 50
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	22 e3       	ldi	r18, 0x32	; 50
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	f9 01       	movw	r30, r18
    12aa:	20 81       	ld	r18, Z
    12ac:	20 64       	ori	r18, 0x40	; 64
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 83       	st	Z, r18
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a0 e8       	ldi	r26, 0x80	; 128
    12b8:	bf e3       	ldi	r27, 0x3F	; 63
    12ba:	89 87       	std	Y+9, r24	; 0x09
    12bc:	9a 87       	std	Y+10, r25	; 0x0a
    12be:	ab 87       	std	Y+11, r26	; 0x0b
    12c0:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	4a ef       	ldi	r20, 0xFA	; 250
    12c8:	54 e4       	ldi	r21, 0x44	; 68
    12ca:	69 85       	ldd	r22, Y+9	; 0x09
    12cc:	7a 85       	ldd	r23, Y+10	; 0x0a
    12ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    12d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    12d2:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	89 a7       	std	Y+41, r24	; 0x29
    12dc:	9a a7       	std	Y+42, r25	; 0x2a
    12de:	ab a7       	std	Y+43, r26	; 0x2b
    12e0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e8       	ldi	r20, 0x80	; 128
    12e8:	5f e3       	ldi	r21, 0x3F	; 63
    12ea:	69 a5       	ldd	r22, Y+41	; 0x29
    12ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    12ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    12f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    12f2:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__cmpsf2>
    12f6:	88 23       	and	r24, r24
    12f8:	2c f4       	brge	.+10     	; 0x1304 <LCD_displayCharacter+0x66c>
		__ticks = 1;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9e a7       	std	Y+46, r25	; 0x2e
    1300:	8d a7       	std	Y+45, r24	; 0x2d
    1302:	3f c0       	rjmp	.+126    	; 0x1382 <LCD_displayCharacter+0x6ea>
	else if (__tmp > 65535)
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	3f ef       	ldi	r19, 0xFF	; 255
    1308:	4f e7       	ldi	r20, 0x7F	; 127
    130a:	57 e4       	ldi	r21, 0x47	; 71
    130c:	69 a5       	ldd	r22, Y+41	; 0x29
    130e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1310:	8b a5       	ldd	r24, Y+43	; 0x2b
    1312:	9c a5       	ldd	r25, Y+44	; 0x2c
    1314:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
    1318:	18 16       	cp	r1, r24
    131a:	4c f5       	brge	.+82     	; 0x136e <LCD_displayCharacter+0x6d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 e2       	ldi	r20, 0x20	; 32
    1322:	51 e4       	ldi	r21, 0x41	; 65
    1324:	69 85       	ldd	r22, Y+9	; 0x09
    1326:	7a 85       	ldd	r23, Y+10	; 0x0a
    1328:	8b 85       	ldd	r24, Y+11	; 0x0b
    132a:	9c 85       	ldd	r25, Y+12	; 0x0c
    132c:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	bc 01       	movw	r22, r24
    1336:	cd 01       	movw	r24, r26
    1338:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	9e a7       	std	Y+46, r25	; 0x2e
    1342:	8d a7       	std	Y+45, r24	; 0x2d
    1344:	0f c0       	rjmp	.+30     	; 0x1364 <LCD_displayCharacter+0x6cc>
    1346:	88 ec       	ldi	r24, 0xC8	; 200
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	98 ab       	std	Y+48, r25	; 0x30
    134c:	8f a7       	std	Y+47, r24	; 0x2f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    134e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1350:	98 a9       	ldd	r25, Y+48	; 0x30
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	f1 f7       	brne	.-4      	; 0x1352 <LCD_displayCharacter+0x6ba>
    1356:	98 ab       	std	Y+48, r25	; 0x30
    1358:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135a:	8d a5       	ldd	r24, Y+45	; 0x2d
    135c:	9e a5       	ldd	r25, Y+46	; 0x2e
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	9e a7       	std	Y+46, r25	; 0x2e
    1362:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1364:	8d a5       	ldd	r24, Y+45	; 0x2d
    1366:	9e a5       	ldd	r25, Y+46	; 0x2e
    1368:	89 2b       	or	r24, r25
    136a:	69 f7       	brne	.-38     	; 0x1346 <LCD_displayCharacter+0x6ae>
    136c:	14 c0       	rjmp	.+40     	; 0x1396 <LCD_displayCharacter+0x6fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    136e:	69 a5       	ldd	r22, Y+41	; 0x29
    1370:	7a a5       	ldd	r23, Y+42	; 0x2a
    1372:	8b a5       	ldd	r24, Y+43	; 0x2b
    1374:	9c a5       	ldd	r25, Y+44	; 0x2c
    1376:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	9e a7       	std	Y+46, r25	; 0x2e
    1380:	8d a7       	std	Y+45, r24	; 0x2d
    1382:	8d a5       	ldd	r24, Y+45	; 0x2d
    1384:	9e a5       	ldd	r25, Y+46	; 0x2e
    1386:	9a ab       	std	Y+50, r25	; 0x32
    1388:	89 ab       	std	Y+49, r24	; 0x31
    138a:	89 a9       	ldd	r24, Y+49	; 0x31
    138c:	9a a9       	ldd	r25, Y+50	; 0x32
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	f1 f7       	brne	.-4      	; 0x138e <LCD_displayCharacter+0x6f6>
    1392:	9a ab       	std	Y+50, r25	; 0x32
    1394:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1); /*delay for processing Tpw - Tdws = 190ns*/
	PORTC=data; /* out the required data to output data bus D0-->D7 */
    1396:	85 e3       	ldi	r24, 0x35	; 53
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	9e 01       	movw	r18, r28
    139c:	25 59       	subi	r18, 0x95	; 149
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
    13a0:	f9 01       	movw	r30, r18
    13a2:	20 81       	ld	r18, Z
    13a4:	fc 01       	movw	r30, r24
    13a6:	20 83       	st	Z, r18
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	a0 e8       	ldi	r26, 0x80	; 128
    13ae:	bf e3       	ldi	r27, 0x3F	; 63
    13b0:	8d 87       	std	Y+13, r24	; 0x0d
    13b2:	9e 87       	std	Y+14, r25	; 0x0e
    13b4:	af 87       	std	Y+15, r26	; 0x0f
    13b6:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	4a ef       	ldi	r20, 0xFA	; 250
    13be:	54 e4       	ldi	r21, 0x44	; 68
    13c0:	6d 85       	ldd	r22, Y+13	; 0x0d
    13c2:	7e 85       	ldd	r23, Y+14	; 0x0e
    13c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c6:	98 89       	ldd	r25, Y+16	; 0x10
    13c8:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	8f 8f       	std	Y+31, r24	; 0x1f
    13d2:	98 a3       	std	Y+32, r25	; 0x20
    13d4:	a9 a3       	std	Y+33, r26	; 0x21
    13d6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	40 e8       	ldi	r20, 0x80	; 128
    13de:	5f e3       	ldi	r21, 0x3F	; 63
    13e0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    13e2:	78 a1       	ldd	r23, Y+32	; 0x20
    13e4:	89 a1       	ldd	r24, Y+33	; 0x21
    13e6:	9a a1       	ldd	r25, Y+34	; 0x22
    13e8:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__cmpsf2>
    13ec:	88 23       	and	r24, r24
    13ee:	2c f4       	brge	.+10     	; 0x13fa <LCD_displayCharacter+0x762>
		__ticks = 1;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	9c a3       	std	Y+36, r25	; 0x24
    13f6:	8b a3       	std	Y+35, r24	; 0x23
    13f8:	3f c0       	rjmp	.+126    	; 0x1478 <LCD_displayCharacter+0x7e0>
	else if (__tmp > 65535)
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	3f ef       	ldi	r19, 0xFF	; 255
    13fe:	4f e7       	ldi	r20, 0x7F	; 127
    1400:	57 e4       	ldi	r21, 0x47	; 71
    1402:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1404:	78 a1       	ldd	r23, Y+32	; 0x20
    1406:	89 a1       	ldd	r24, Y+33	; 0x21
    1408:	9a a1       	ldd	r25, Y+34	; 0x22
    140a:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
    140e:	18 16       	cp	r1, r24
    1410:	4c f5       	brge	.+82     	; 0x1464 <LCD_displayCharacter+0x7cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e2       	ldi	r20, 0x20	; 32
    1418:	51 e4       	ldi	r21, 0x41	; 65
    141a:	6d 85       	ldd	r22, Y+13	; 0x0d
    141c:	7e 85       	ldd	r23, Y+14	; 0x0e
    141e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1420:	98 89       	ldd	r25, Y+16	; 0x10
    1422:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	bc 01       	movw	r22, r24
    142c:	cd 01       	movw	r24, r26
    142e:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	9c a3       	std	Y+36, r25	; 0x24
    1438:	8b a3       	std	Y+35, r24	; 0x23
    143a:	0f c0       	rjmp	.+30     	; 0x145a <LCD_displayCharacter+0x7c2>
    143c:	88 ec       	ldi	r24, 0xC8	; 200
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	9e a3       	std	Y+38, r25	; 0x26
    1442:	8d a3       	std	Y+37, r24	; 0x25
    1444:	8d a1       	ldd	r24, Y+37	; 0x25
    1446:	9e a1       	ldd	r25, Y+38	; 0x26
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	f1 f7       	brne	.-4      	; 0x1448 <LCD_displayCharacter+0x7b0>
    144c:	9e a3       	std	Y+38, r25	; 0x26
    144e:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1450:	8b a1       	ldd	r24, Y+35	; 0x23
    1452:	9c a1       	ldd	r25, Y+36	; 0x24
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	9c a3       	std	Y+36, r25	; 0x24
    1458:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145a:	8b a1       	ldd	r24, Y+35	; 0x23
    145c:	9c a1       	ldd	r25, Y+36	; 0x24
    145e:	89 2b       	or	r24, r25
    1460:	69 f7       	brne	.-38     	; 0x143c <LCD_displayCharacter+0x7a4>
    1462:	14 c0       	rjmp	.+40     	; 0x148c <LCD_displayCharacter+0x7f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1464:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1466:	78 a1       	ldd	r23, Y+32	; 0x20
    1468:	89 a1       	ldd	r24, Y+33	; 0x21
    146a:	9a a1       	ldd	r25, Y+34	; 0x22
    146c:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	9c a3       	std	Y+36, r25	; 0x24
    1476:	8b a3       	std	Y+35, r24	; 0x23
    1478:	8b a1       	ldd	r24, Y+35	; 0x23
    147a:	9c a1       	ldd	r25, Y+36	; 0x24
    147c:	98 a7       	std	Y+40, r25	; 0x28
    147e:	8f a3       	std	Y+39, r24	; 0x27
    1480:	8f a1       	ldd	r24, Y+39	; 0x27
    1482:	98 a5       	ldd	r25, Y+40	; 0x28
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <LCD_displayCharacter+0x7ec>
    1488:	98 a7       	std	Y+40, r25	; 0x28
    148a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(1);/* delay processing command setup time tdsw=60ns */
	CLEAR_BIT(LCD_CTRL_PORT,6); /* disable LCD so enable pin =0*/
    148c:	82 e3       	ldi	r24, 0x32	; 50
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	22 e3       	ldi	r18, 0x32	; 50
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	f9 01       	movw	r30, r18
    1496:	20 81       	ld	r18, Z
    1498:	2f 7b       	andi	r18, 0xBF	; 191
    149a:	fc 01       	movw	r30, r24
    149c:	20 83       	st	Z, r18
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	a0 e8       	ldi	r26, 0x80	; 128
    14a4:	bf e3       	ldi	r27, 0x3F	; 63
    14a6:	89 8b       	std	Y+17, r24	; 0x11
    14a8:	9a 8b       	std	Y+18, r25	; 0x12
    14aa:	ab 8b       	std	Y+19, r26	; 0x13
    14ac:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	4a ef       	ldi	r20, 0xFA	; 250
    14b4:	54 e4       	ldi	r21, 0x44	; 68
    14b6:	69 89       	ldd	r22, Y+17	; 0x11
    14b8:	7a 89       	ldd	r23, Y+18	; 0x12
    14ba:	8b 89       	ldd	r24, Y+19	; 0x13
    14bc:	9c 89       	ldd	r25, Y+20	; 0x14
    14be:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	8d 8b       	std	Y+21, r24	; 0x15
    14c8:	9e 8b       	std	Y+22, r25	; 0x16
    14ca:	af 8b       	std	Y+23, r26	; 0x17
    14cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e8       	ldi	r20, 0x80	; 128
    14d4:	5f e3       	ldi	r21, 0x3F	; 63
    14d6:	6d 89       	ldd	r22, Y+21	; 0x15
    14d8:	7e 89       	ldd	r23, Y+22	; 0x16
    14da:	8f 89       	ldd	r24, Y+23	; 0x17
    14dc:	98 8d       	ldd	r25, Y+24	; 0x18
    14de:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__cmpsf2>
    14e2:	88 23       	and	r24, r24
    14e4:	2c f4       	brge	.+10     	; 0x14f0 <LCD_displayCharacter+0x858>
		__ticks = 1;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	9a 8f       	std	Y+26, r25	; 0x1a
    14ec:	89 8f       	std	Y+25, r24	; 0x19
    14ee:	3f c0       	rjmp	.+126    	; 0x156e <LCD_displayCharacter+0x8d6>
	else if (__tmp > 65535)
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	3f ef       	ldi	r19, 0xFF	; 255
    14f4:	4f e7       	ldi	r20, 0x7F	; 127
    14f6:	57 e4       	ldi	r21, 0x47	; 71
    14f8:	6d 89       	ldd	r22, Y+21	; 0x15
    14fa:	7e 89       	ldd	r23, Y+22	; 0x16
    14fc:	8f 89       	ldd	r24, Y+23	; 0x17
    14fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1500:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__gesf2>
    1504:	18 16       	cp	r1, r24
    1506:	4c f5       	brge	.+82     	; 0x155a <LCD_displayCharacter+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e2       	ldi	r20, 0x20	; 32
    150e:	51 e4       	ldi	r21, 0x41	; 65
    1510:	69 89       	ldd	r22, Y+17	; 0x11
    1512:	7a 89       	ldd	r23, Y+18	; 0x12
    1514:	8b 89       	ldd	r24, Y+19	; 0x13
    1516:	9c 89       	ldd	r25, Y+20	; 0x14
    1518:	0e 94 04 13 	call	0x2608	; 0x2608 <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	bc 01       	movw	r22, r24
    1522:	cd 01       	movw	r24, r26
    1524:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	9a 8f       	std	Y+26, r25	; 0x1a
    152e:	89 8f       	std	Y+25, r24	; 0x19
    1530:	0f c0       	rjmp	.+30     	; 0x1550 <LCD_displayCharacter+0x8b8>
    1532:	88 ec       	ldi	r24, 0xC8	; 200
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	9c 8f       	std	Y+28, r25	; 0x1c
    1538:	8b 8f       	std	Y+27, r24	; 0x1b
    153a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    153c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <LCD_displayCharacter+0x8a6>
    1542:	9c 8f       	std	Y+28, r25	; 0x1c
    1544:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1546:	89 8d       	ldd	r24, Y+25	; 0x19
    1548:	9a 8d       	ldd	r25, Y+26	; 0x1a
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	9a 8f       	std	Y+26, r25	; 0x1a
    154e:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1550:	89 8d       	ldd	r24, Y+25	; 0x19
    1552:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1554:	89 2b       	or	r24, r25
    1556:	69 f7       	brne	.-38     	; 0x1532 <LCD_displayCharacter+0x89a>
	_delay_ms(1); /* delay for processing hold time th =10ns*/
}
    1558:	14 c0       	rjmp	.+40     	; 0x1582 <LCD_displayCharacter+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155a:	6d 89       	ldd	r22, Y+21	; 0x15
    155c:	7e 89       	ldd	r23, Y+22	; 0x16
    155e:	8f 89       	ldd	r24, Y+23	; 0x17
    1560:	98 8d       	ldd	r25, Y+24	; 0x18
    1562:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <__fixunssfsi>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	9a 8f       	std	Y+26, r25	; 0x1a
    156c:	89 8f       	std	Y+25, r24	; 0x19
    156e:	89 8d       	ldd	r24, Y+25	; 0x19
    1570:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1572:	9e 8f       	std	Y+30, r25	; 0x1e
    1574:	8d 8f       	std	Y+29, r24	; 0x1d
    1576:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1578:	9e 8d       	ldd	r25, Y+30	; 0x1e
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <LCD_displayCharacter+0x8e2>
    157e:	9e 8f       	std	Y+30, r25	; 0x1e
    1580:	8d 8f       	std	Y+29, r24	; 0x1d
    1582:	00 00       	nop
    1584:	c5 59       	subi	r28, 0x95	; 149
    1586:	df 4f       	sbci	r29, 0xFF	; 255
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	1f 91       	pop	r17
    1598:	0f 91       	pop	r16
    159a:	08 95       	ret

0000159c <LCD_displayString>:
void LCD_displayString(uint8 *str)
{
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <LCD_displayString+0x6>
    15a2:	1f 92       	push	r1
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	9b 83       	std	Y+3, r25	; 0x03
    15aa:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0 ;str[i]!='\0';i++)
    15ac:	19 82       	std	Y+1, r1	; 0x01
    15ae:	0e c0       	rjmp	.+28     	; 0x15cc <LCD_displayString+0x30>
	LCD_displayCharacter( str[i]);
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	2a 81       	ldd	r18, Y+2	; 0x02
    15b8:	3b 81       	ldd	r19, Y+3	; 0x03
    15ba:	82 0f       	add	r24, r18
    15bc:	93 1f       	adc	r25, r19
    15be:	fc 01       	movw	r30, r24
    15c0:	80 81       	ld	r24, Z
    15c2:	0e 94 4c 06 	call	0xc98	; 0xc98 <LCD_displayCharacter>
	CLEAR_BIT(LCD_CTRL_PORT,6); /* disable LCD so enable pin =0*/
	_delay_ms(1); /* delay for processing hold time th =10ns*/
}
void LCD_displayString(uint8 *str)
{
	for(uint8 i=0 ;str[i]!='\0';i++)
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	8f 5f       	subi	r24, 0xFF	; 255
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	2a 81       	ldd	r18, Y+2	; 0x02
    15d4:	3b 81       	ldd	r19, Y+3	; 0x03
    15d6:	82 0f       	add	r24, r18
    15d8:	93 1f       	adc	r25, r19
    15da:	fc 01       	movw	r30, r24
    15dc:	80 81       	ld	r24, Z
    15de:	88 23       	and	r24, r24
    15e0:	39 f7       	brne	.-50     	; 0x15b0 <LCD_displayString+0x14>
	LCD_displayCharacter( str[i]);
}
    15e2:	00 00       	nop
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	08 95       	ret

000015f0 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{	/* first of all calculate the required address */
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <LCD_goToRowColumn+0x6>
    15f6:	1f 92       	push	r1
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	8a 83       	std	Y+2, r24	; 0x02
    15fe:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	91 05       	cpc	r25, r1
    160a:	79 f0       	breq	.+30     	; 0x162a <LCD_goToRowColumn+0x3a>
    160c:	82 30       	cpi	r24, 0x02	; 2
    160e:	91 05       	cpc	r25, r1
    1610:	1c f4       	brge	.+6      	; 0x1618 <LCD_goToRowColumn+0x28>
    1612:	89 2b       	or	r24, r25
    1614:	39 f0       	breq	.+14     	; 0x1624 <LCD_goToRowColumn+0x34>
    1616:	15 c0       	rjmp	.+42     	; 0x1642 <LCD_goToRowColumn+0x52>
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	91 05       	cpc	r25, r1
    161c:	51 f0       	breq	.+20     	; 0x1632 <LCD_goToRowColumn+0x42>
    161e:	03 97       	sbiw	r24, 0x03	; 3
    1620:	61 f0       	breq	.+24     	; 0x163a <LCD_goToRowColumn+0x4a>
    1622:	0f c0       	rjmp	.+30     	; 0x1642 <LCD_goToRowColumn+0x52>
	{
	case 0:
		address=col;
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	89 83       	std	Y+1, r24	; 0x01
		break;
    1628:	0c c0       	rjmp	.+24     	; 0x1642 <LCD_goToRowColumn+0x52>
	case 1:
		address=0x40+col;
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	80 5c       	subi	r24, 0xC0	; 192
    162e:	89 83       	std	Y+1, r24	; 0x01
		break;
    1630:	08 c0       	rjmp	.+16     	; 0x1642 <LCD_goToRowColumn+0x52>
	case 2:
		address=0x10+col;
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	80 5f       	subi	r24, 0xF0	; 240
    1636:	89 83       	std	Y+1, r24	; 0x01
		break;
    1638:	04 c0       	rjmp	.+8      	; 0x1642 <LCD_goToRowColumn+0x52>
	case 3:
		address=0x50+col;
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	80 5b       	subi	r24, 0xB0	; 176
    163e:	89 83       	std	Y+1, r24	; 0x01
		break;
    1640:	00 00       	nop
		}
	/* pass the specific address to the LCD
	 * to change the address you should add 0x80 to address
	 */
	LCD_sendCommand(address|0x80);
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	80 68       	ori	r24, 0x80	; 128
    1646:	0e 94 46 04 	call	0x88c	; 0x88c <LCD_sendCommand>
}
    164a:	00 00       	nop
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	08 95       	ret

00001658 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row, uint8 col ,uint8 *str)
{
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	00 d0       	rcall	.+0      	; 0x165e <LCD_displayStringRowColumn+0x6>
    165e:	00 d0       	rcall	.+0      	; 0x1660 <LCD_displayStringRowColumn+0x8>
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	6a 83       	std	Y+2, r22	; 0x02
    1668:	5c 83       	std	Y+4, r21	; 0x04
    166a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn( row, col);/* go to the required position*/
    166c:	6a 81       	ldd	r22, Y+2	; 0x02
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <LCD_goToRowColumn>
	LCD_displayString(str);/* display the string*/
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_displayString>
}
    167c:	00 00       	nop
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <LCD_clearScreen>:
void LCD_clearScreen()
{
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);/* clear display*/
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	0e 94 46 04 	call	0x88c	; 0x88c <LCD_sendCommand>
}
    169a:	00 00       	nop
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	08 95       	ret

000016a2 <LCD_intgerToString>:
void LCD_intgerToString(int data)
{
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	62 97       	sbiw	r28, 0x12	; 18
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	9a 8b       	std	Y+18, r25	; 0x12
    16b8:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];/* buffer to hold acii result */
	itoa(data,buff,10); /* 10 for decimal base */
    16ba:	89 89       	ldd	r24, Y+17	; 0x11
    16bc:	9a 89       	ldd	r25, Y+18	; 0x12
    16be:	4a e0       	ldi	r20, 0x0A	; 10
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	9e 01       	movw	r18, r28
    16c4:	2f 5f       	subi	r18, 0xFF	; 255
    16c6:	3f 4f       	sbci	r19, 0xFF	; 255
    16c8:	b9 01       	movw	r22, r18
    16ca:	0e 94 85 13 	call	0x270a	; 0x270a <itoa>
	LCD_displayString(buff);
    16ce:	ce 01       	movw	r24, r28
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_displayString>
}
    16d6:	00 00       	nop
    16d8:	62 96       	adiw	r28, 0x12	; 18
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	08 95       	ret

000016ea <__vector_19>:

#include"timer.h"
static volatile  void(*g_callBackPtr)(void)= NULL_PTR;
static volatile TIMER_configurationType * configPtr;
ISR(TIMER0_COMP_vect)
{
    16ea:	1f 92       	push	r1
    16ec:	0f 92       	push	r0
    16ee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    16f2:	0f 92       	push	r0
    16f4:	11 24       	eor	r1, r1
    16f6:	2f 93       	push	r18
    16f8:	3f 93       	push	r19
    16fa:	4f 93       	push	r20
    16fc:	5f 93       	push	r21
    16fe:	6f 93       	push	r22
    1700:	7f 93       	push	r23
    1702:	8f 93       	push	r24
    1704:	9f 93       	push	r25
    1706:	af 93       	push	r26
    1708:	bf 93       	push	r27
    170a:	ef 93       	push	r30
    170c:	ff 93       	push	r31
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    1716:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <g_callBackPtr>
    171a:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <g_callBackPtr+0x1>
    171e:	89 2b       	or	r24, r25
    1720:	31 f0       	breq	.+12     	; 0x172e <__vector_19+0x44>
		g_callBackPtr();
    1722:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <g_callBackPtr>
    1726:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <g_callBackPtr+0x1>
    172a:	fc 01       	movw	r30, r24
    172c:	09 95       	icall

}
    172e:	00 00       	nop
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	ff 91       	pop	r31
    1736:	ef 91       	pop	r30
    1738:	bf 91       	pop	r27
    173a:	af 91       	pop	r26
    173c:	9f 91       	pop	r25
    173e:	8f 91       	pop	r24
    1740:	7f 91       	pop	r23
    1742:	6f 91       	pop	r22
    1744:	5f 91       	pop	r21
    1746:	4f 91       	pop	r20
    1748:	3f 91       	pop	r19
    174a:	2f 91       	pop	r18
    174c:	0f 90       	pop	r0
    174e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1752:	0f 90       	pop	r0
    1754:	1f 90       	pop	r1
    1756:	18 95       	reti

00001758 <__vector_9>:
ISR(TIMER0_OVF_vect)
{
    1758:	1f 92       	push	r1
    175a:	0f 92       	push	r0
    175c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1760:	0f 92       	push	r0
    1762:	11 24       	eor	r1, r1
    1764:	2f 93       	push	r18
    1766:	3f 93       	push	r19
    1768:	4f 93       	push	r20
    176a:	5f 93       	push	r21
    176c:	6f 93       	push	r22
    176e:	7f 93       	push	r23
    1770:	8f 93       	push	r24
    1772:	9f 93       	push	r25
    1774:	af 93       	push	r26
    1776:	bf 93       	push	r27
    1778:	ef 93       	push	r30
    177a:	ff 93       	push	r31
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    1784:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <g_callBackPtr>
    1788:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <g_callBackPtr+0x1>
    178c:	89 2b       	or	r24, r25
    178e:	31 f0       	breq	.+12     	; 0x179c <__vector_9+0x44>
		g_callBackPtr();
    1790:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <g_callBackPtr>
    1794:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <g_callBackPtr+0x1>
    1798:	fc 01       	movw	r30, r24
    179a:	09 95       	icall

}
    179c:	00 00       	nop
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	ff 91       	pop	r31
    17a4:	ef 91       	pop	r30
    17a6:	bf 91       	pop	r27
    17a8:	af 91       	pop	r26
    17aa:	9f 91       	pop	r25
    17ac:	8f 91       	pop	r24
    17ae:	7f 91       	pop	r23
    17b0:	6f 91       	pop	r22
    17b2:	5f 91       	pop	r21
    17b4:	4f 91       	pop	r20
    17b6:	3f 91       	pop	r19
    17b8:	2f 91       	pop	r18
    17ba:	0f 90       	pop	r0
    17bc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    17c0:	0f 90       	pop	r0
    17c2:	1f 90       	pop	r1
    17c4:	18 95       	reti

000017c6 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    17c6:	1f 92       	push	r1
    17c8:	0f 92       	push	r0
    17ca:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    17ce:	0f 92       	push	r0
    17d0:	11 24       	eor	r1, r1
    17d2:	2f 93       	push	r18
    17d4:	3f 93       	push	r19
    17d6:	4f 93       	push	r20
    17d8:	5f 93       	push	r21
    17da:	6f 93       	push	r22
    17dc:	7f 93       	push	r23
    17de:	8f 93       	push	r24
    17e0:	9f 93       	push	r25
    17e2:	af 93       	push	r26
    17e4:	bf 93       	push	r27
    17e6:	ef 93       	push	r30
    17e8:	ff 93       	push	r31
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    17f2:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <g_callBackPtr>
    17f6:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <g_callBackPtr+0x1>
    17fa:	89 2b       	or	r24, r25
    17fc:	31 f0       	breq	.+12     	; 0x180a <__vector_6+0x44>
			g_callBackPtr();
    17fe:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <g_callBackPtr>
    1802:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <g_callBackPtr+0x1>
    1806:	fc 01       	movw	r30, r24
    1808:	09 95       	icall
}
    180a:	00 00       	nop
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	ff 91       	pop	r31
    1812:	ef 91       	pop	r30
    1814:	bf 91       	pop	r27
    1816:	af 91       	pop	r26
    1818:	9f 91       	pop	r25
    181a:	8f 91       	pop	r24
    181c:	7f 91       	pop	r23
    181e:	6f 91       	pop	r22
    1820:	5f 91       	pop	r21
    1822:	4f 91       	pop	r20
    1824:	3f 91       	pop	r19
    1826:	2f 91       	pop	r18
    1828:	0f 90       	pop	r0
    182a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    182e:	0f 90       	pop	r0
    1830:	1f 90       	pop	r1
    1832:	18 95       	reti

00001834 <TIMER_init>:
void TIMER_init( TIMER_configurationType * config)
{configPtr=config;
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	00 d0       	rcall	.+0      	; 0x183a <TIMER_init+0x6>
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	9a 83       	std	Y+2, r25	; 0x02
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	9a 81       	ldd	r25, Y+2	; 0x02
    1846:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <configPtr+0x1>
    184a:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <configPtr>
	if(config->timerNumber==0)
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	9a 81       	ldd	r25, Y+2	; 0x02
    1852:	fc 01       	movw	r30, r24
    1854:	80 81       	ld	r24, Z
    1856:	88 23       	and	r24, r24
    1858:	09 f0       	breq	.+2      	; 0x185c <TIMER_init+0x28>
    185a:	22 c1       	rjmp	.+580    	; 0x1aa0 <TIMER_init+0x26c>
	{
		TCCR0=0;
    185c:	83 e5       	ldi	r24, 0x53	; 83
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	fc 01       	movw	r30, r24
    1862:	10 82       	st	Z, r1
	switch(config->prescaler)
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	9a 81       	ldd	r25, Y+2	; 0x02
    1868:	fc 01       	movw	r30, r24
    186a:	85 89       	ldd	r24, Z+21	; 0x15
    186c:	96 89       	ldd	r25, Z+22	; 0x16
    186e:	80 34       	cpi	r24, 0x40	; 64
    1870:	91 05       	cpc	r25, r1
    1872:	c1 f0       	breq	.+48     	; 0x18a4 <TIMER_init+0x70>
    1874:	81 34       	cpi	r24, 0x41	; 65
    1876:	91 05       	cpc	r25, r1
    1878:	18 f4       	brcc	.+6      	; 0x1880 <TIMER_init+0x4c>
    187a:	08 97       	sbiw	r24, 0x08	; 8
    187c:	49 f0       	breq	.+18     	; 0x1890 <TIMER_init+0x5c>
    187e:	30 c0       	rjmp	.+96     	; 0x18e0 <TIMER_init+0xac>
    1880:	81 15       	cp	r24, r1
    1882:	f1 e0       	ldi	r31, 0x01	; 1
    1884:	9f 07       	cpc	r25, r31
    1886:	c1 f0       	breq	.+48     	; 0x18b8 <TIMER_init+0x84>
    1888:	81 15       	cp	r24, r1
    188a:	94 40       	sbci	r25, 0x04	; 4
    188c:	f9 f0       	breq	.+62     	; 0x18cc <TIMER_init+0x98>
    188e:	28 c0       	rjmp	.+80     	; 0x18e0 <TIMER_init+0xac>
	{
	case 8:
		TCCR0|=(1<<CS01);
    1890:	83 e5       	ldi	r24, 0x53	; 83
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	23 e5       	ldi	r18, 0x53	; 83
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	f9 01       	movw	r30, r18
    189a:	20 81       	ld	r18, Z
    189c:	22 60       	ori	r18, 0x02	; 2
    189e:	fc 01       	movw	r30, r24
    18a0:	20 83       	st	Z, r18
		break;
    18a2:	27 c0       	rjmp	.+78     	; 0x18f2 <TIMER_init+0xbe>
	case 64:
			TCCR0|=(1<<CS00)|(1<<CS01);
    18a4:	83 e5       	ldi	r24, 0x53	; 83
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	23 e5       	ldi	r18, 0x53	; 83
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	f9 01       	movw	r30, r18
    18ae:	20 81       	ld	r18, Z
    18b0:	23 60       	ori	r18, 0x03	; 3
    18b2:	fc 01       	movw	r30, r24
    18b4:	20 83       	st	Z, r18
			break;
    18b6:	1d c0       	rjmp	.+58     	; 0x18f2 <TIMER_init+0xbe>
	case 256:
			TCCR0|=(1<<CS02);
    18b8:	83 e5       	ldi	r24, 0x53	; 83
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	23 e5       	ldi	r18, 0x53	; 83
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	f9 01       	movw	r30, r18
    18c2:	20 81       	ld	r18, Z
    18c4:	24 60       	ori	r18, 0x04	; 4
    18c6:	fc 01       	movw	r30, r24
    18c8:	20 83       	st	Z, r18
			break;
    18ca:	13 c0       	rjmp	.+38     	; 0x18f2 <TIMER_init+0xbe>
	case 1024:
			TCCR0|=(1<<CS00)|(1<<CS02);
    18cc:	83 e5       	ldi	r24, 0x53	; 83
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	23 e5       	ldi	r18, 0x53	; 83
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	f9 01       	movw	r30, r18
    18d6:	20 81       	ld	r18, Z
    18d8:	25 60       	ori	r18, 0x05	; 5
    18da:	fc 01       	movw	r30, r24
    18dc:	20 83       	st	Z, r18
			break;
    18de:	09 c0       	rjmp	.+18     	; 0x18f2 <TIMER_init+0xbe>
	default:
			TCCR0|=(1<<CS00);
    18e0:	83 e5       	ldi	r24, 0x53	; 83
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	23 e5       	ldi	r18, 0x53	; 83
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	f9 01       	movw	r30, r18
    18ea:	20 81       	ld	r18, Z
    18ec:	21 60       	ori	r18, 0x01	; 1
    18ee:	fc 01       	movw	r30, r24
    18f0:	20 83       	st	Z, r18

		}

	if(!strcmp(config->mode,"compare"))
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	9a 81       	ldd	r25, Y+2	; 0x02
    18f6:	01 96       	adiw	r24, 0x01	; 1
    18f8:	6d e2       	ldi	r22, 0x2D	; 45
    18fa:	71 e0       	ldi	r23, 0x01	; 1
    18fc:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    1900:	89 2b       	or	r24, r25
    1902:	09 f0       	breq	.+2      	; 0x1906 <TIMER_init+0xd2>
    1904:	62 c0       	rjmp	.+196    	; 0x19ca <TIMER_init+0x196>
	{	TCCR0|=(1<<FOC0)|(1<<WGM01);
    1906:	83 e5       	ldi	r24, 0x53	; 83
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	23 e5       	ldi	r18, 0x53	; 83
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	f9 01       	movw	r30, r18
    1910:	20 81       	ld	r18, Z
    1912:	28 68       	ori	r18, 0x88	; 136
    1914:	fc 01       	movw	r30, r24
    1916:	20 83       	st	Z, r18

		if(!strcmp(config->compareMatchMode,"toggle"))
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
    191c:	47 96       	adiw	r24, 0x17	; 23
    191e:	65 e3       	ldi	r22, 0x35	; 53
    1920:	71 e0       	ldi	r23, 0x01	; 1
    1922:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    1926:	89 2b       	or	r24, r25
    1928:	99 f4       	brne	.+38     	; 0x1950 <TIMER_init+0x11c>
		{
		TCCR0|=(1<<COM00);
    192a:	83 e5       	ldi	r24, 0x53	; 83
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	23 e5       	ldi	r18, 0x53	; 83
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	f9 01       	movw	r30, r18
    1934:	20 81       	ld	r18, Z
    1936:	20 61       	ori	r18, 0x10	; 16
    1938:	fc 01       	movw	r30, r24
    193a:	20 83       	st	Z, r18
		SET_BIT(DDRB,3);
    193c:	87 e3       	ldi	r24, 0x37	; 55
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	27 e3       	ldi	r18, 0x37	; 55
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	f9 01       	movw	r30, r18
    1946:	20 81       	ld	r18, Z
    1948:	28 60       	ori	r18, 0x08	; 8
    194a:	fc 01       	movw	r30, r24
    194c:	20 83       	st	Z, r18
    194e:	37 c0       	rjmp	.+110    	; 0x19be <TIMER_init+0x18a>
		}
		else if(!strcmp(config->compareMatchMode,"clear"))
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	9a 81       	ldd	r25, Y+2	; 0x02
    1954:	47 96       	adiw	r24, 0x17	; 23
    1956:	6c e3       	ldi	r22, 0x3C	; 60
    1958:	71 e0       	ldi	r23, 0x01	; 1
    195a:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    195e:	89 2b       	or	r24, r25
    1960:	99 f4       	brne	.+38     	; 0x1988 <TIMER_init+0x154>
			{
			TCCR0|=(1<<COM01);
    1962:	83 e5       	ldi	r24, 0x53	; 83
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	23 e5       	ldi	r18, 0x53	; 83
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	f9 01       	movw	r30, r18
    196c:	20 81       	ld	r18, Z
    196e:	20 62       	ori	r18, 0x20	; 32
    1970:	fc 01       	movw	r30, r24
    1972:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    1974:	87 e3       	ldi	r24, 0x37	; 55
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	27 e3       	ldi	r18, 0x37	; 55
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	f9 01       	movw	r30, r18
    197e:	20 81       	ld	r18, Z
    1980:	28 60       	ori	r18, 0x08	; 8
    1982:	fc 01       	movw	r30, r24
    1984:	20 83       	st	Z, r18
    1986:	1b c0       	rjmp	.+54     	; 0x19be <TIMER_init+0x18a>

			}
		else if(!strcmp(config->compareMatchMode,"set"))
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	9a 81       	ldd	r25, Y+2	; 0x02
    198c:	47 96       	adiw	r24, 0x17	; 23
    198e:	62 e4       	ldi	r22, 0x42	; 66
    1990:	71 e0       	ldi	r23, 0x01	; 1
    1992:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    1996:	89 2b       	or	r24, r25
    1998:	91 f4       	brne	.+36     	; 0x19be <TIMER_init+0x18a>
			{
			TCCR0|=(1<<COM01)|(1<<COM00);
    199a:	83 e5       	ldi	r24, 0x53	; 83
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	23 e5       	ldi	r18, 0x53	; 83
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	f9 01       	movw	r30, r18
    19a4:	20 81       	ld	r18, Z
    19a6:	20 63       	ori	r18, 0x30	; 48
    19a8:	fc 01       	movw	r30, r24
    19aa:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    19ac:	87 e3       	ldi	r24, 0x37	; 55
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	27 e3       	ldi	r18, 0x37	; 55
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	f9 01       	movw	r30, r18
    19b6:	20 81       	ld	r18, Z
    19b8:	28 60       	ori	r18, 0x08	; 8
    19ba:	fc 01       	movw	r30, r24
    19bc:	20 83       	st	Z, r18

			}
		//enable interrupt
		TIMSK=(1<<OCIE0);
    19be:	89 e5       	ldi	r24, 0x59	; 89
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	22 e0       	ldi	r18, 0x02	; 2
    19c4:	fc 01       	movw	r30, r24
    19c6:	20 83       	st	Z, r18
    19c8:	6b c0       	rjmp	.+214    	; 0x1aa0 <TIMER_init+0x26c>

	}
	else if(!strcmp(config->mode,"normal"))
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	9a 81       	ldd	r25, Y+2	; 0x02
    19ce:	01 96       	adiw	r24, 0x01	; 1
    19d0:	66 e4       	ldi	r22, 0x46	; 70
    19d2:	71 e0       	ldi	r23, 0x01	; 1
    19d4:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    19d8:	89 2b       	or	r24, r25
    19da:	79 f4       	brne	.+30     	; 0x19fa <TIMER_init+0x1c6>
	{
		TCCR0|=(1<<FOC0);
    19dc:	83 e5       	ldi	r24, 0x53	; 83
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	23 e5       	ldi	r18, 0x53	; 83
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	f9 01       	movw	r30, r18
    19e6:	20 81       	ld	r18, Z
    19e8:	20 68       	ori	r18, 0x80	; 128
    19ea:	fc 01       	movw	r30, r24
    19ec:	20 83       	st	Z, r18
		TIMSK=(1<<TOIE0);
    19ee:	89 e5       	ldi	r24, 0x59	; 89
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	21 e0       	ldi	r18, 0x01	; 1
    19f4:	fc 01       	movw	r30, r24
    19f6:	20 83       	st	Z, r18
    19f8:	53 c0       	rjmp	.+166    	; 0x1aa0 <TIMER_init+0x26c>
	}
	else if(!strcmp(config->mode,"pwm"))
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	9a 81       	ldd	r25, Y+2	; 0x02
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	6d e4       	ldi	r22, 0x4D	; 77
    1a02:	71 e0       	ldi	r23, 0x01	; 1
    1a04:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    1a08:	89 2b       	or	r24, r25
    1a0a:	09 f0       	breq	.+2      	; 0x1a0e <TIMER_init+0x1da>
    1a0c:	49 c0       	rjmp	.+146    	; 0x1aa0 <TIMER_init+0x26c>
	{
		TCCR0 |=(1<<WGM00)|(1<<WGM01);
    1a0e:	83 e5       	ldi	r24, 0x53	; 83
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	23 e5       	ldi	r18, 0x53	; 83
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	f9 01       	movw	r30, r18
    1a18:	20 81       	ld	r18, Z
    1a1a:	28 64       	ori	r18, 0x48	; 72
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	20 83       	st	Z, r18
		if(!strcmp(config->pwmMode,"inverting"))
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	9a 81       	ldd	r25, Y+2	; 0x02
    1a24:	8b 96       	adiw	r24, 0x2b	; 43
    1a26:	61 e5       	ldi	r22, 0x51	; 81
    1a28:	71 e0       	ldi	r23, 0x01	; 1
    1a2a:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    1a2e:	89 2b       	or	r24, r25
    1a30:	e1 f4       	brne	.+56     	; 0x1a6a <TIMER_init+0x236>
				{
				TCCR0|=(1<<COM00);
    1a32:	83 e5       	ldi	r24, 0x53	; 83
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	23 e5       	ldi	r18, 0x53	; 83
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	f9 01       	movw	r30, r18
    1a3c:	20 81       	ld	r18, Z
    1a3e:	20 61       	ori	r18, 0x10	; 16
    1a40:	fc 01       	movw	r30, r24
    1a42:	20 83       	st	Z, r18
				TCCR0|=(1<<COM01);
    1a44:	83 e5       	ldi	r24, 0x53	; 83
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	23 e5       	ldi	r18, 0x53	; 83
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	f9 01       	movw	r30, r18
    1a4e:	20 81       	ld	r18, Z
    1a50:	20 62       	ori	r18, 0x20	; 32
    1a52:	fc 01       	movw	r30, r24
    1a54:	20 83       	st	Z, r18
				SET_BIT(DDRB,3);
    1a56:	87 e3       	ldi	r24, 0x37	; 55
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	27 e3       	ldi	r18, 0x37	; 55
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	f9 01       	movw	r30, r18
    1a60:	20 81       	ld	r18, Z
    1a62:	28 60       	ori	r18, 0x08	; 8
    1a64:	fc 01       	movw	r30, r24
    1a66:	20 83       	st	Z, r18
    1a68:	1b c0       	rjmp	.+54     	; 0x1aa0 <TIMER_init+0x26c>
				}
				else if(!strcmp(config->pwmMode,"non-inverting"))
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6e:	8b 96       	adiw	r24, 0x2b	; 43
    1a70:	6b e5       	ldi	r22, 0x5B	; 91
    1a72:	71 e0       	ldi	r23, 0x01	; 1
    1a74:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    1a78:	89 2b       	or	r24, r25
    1a7a:	91 f4       	brne	.+36     	; 0x1aa0 <TIMER_init+0x26c>
					{
					TCCR0|=(1<<COM01);
    1a7c:	83 e5       	ldi	r24, 0x53	; 83
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	23 e5       	ldi	r18, 0x53	; 83
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	f9 01       	movw	r30, r18
    1a86:	20 81       	ld	r18, Z
    1a88:	20 62       	ori	r18, 0x20	; 32
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    1a8e:	87 e3       	ldi	r24, 0x37	; 55
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	27 e3       	ldi	r18, 0x37	; 55
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	f9 01       	movw	r30, r18
    1a98:	20 81       	ld	r18, Z
    1a9a:	28 60       	ori	r18, 0x08	; 8
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	20 83       	st	Z, r18

	}

	}
	///
	if(config->timerNumber==1)
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	80 81       	ld	r24, Z
    1aa8:	81 30       	cpi	r24, 0x01	; 1
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <TIMER_init+0x27a>
    1aac:	30 c1       	rjmp	.+608    	; 0x1d0e <TIMER_init+0x4da>
		{
			TCCR1A=0;
    1aae:	8f e4       	ldi	r24, 0x4F	; 79
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	10 82       	st	Z, r1
			TCCR1B=0;
    1ab6:	8e e4       	ldi	r24, 0x4E	; 78
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	fc 01       	movw	r30, r24
    1abc:	10 82       	st	Z, r1

		switch(config->prescaler)
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	85 89       	ldd	r24, Z+21	; 0x15
    1ac6:	96 89       	ldd	r25, Z+22	; 0x16
    1ac8:	80 34       	cpi	r24, 0x40	; 64
    1aca:	91 05       	cpc	r25, r1
    1acc:	c1 f0       	breq	.+48     	; 0x1afe <TIMER_init+0x2ca>
    1ace:	81 34       	cpi	r24, 0x41	; 65
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	18 f4       	brcc	.+6      	; 0x1ada <TIMER_init+0x2a6>
    1ad4:	08 97       	sbiw	r24, 0x08	; 8
    1ad6:	49 f0       	breq	.+18     	; 0x1aea <TIMER_init+0x2b6>
    1ad8:	30 c0       	rjmp	.+96     	; 0x1b3a <TIMER_init+0x306>
    1ada:	81 15       	cp	r24, r1
    1adc:	f1 e0       	ldi	r31, 0x01	; 1
    1ade:	9f 07       	cpc	r25, r31
    1ae0:	c1 f0       	breq	.+48     	; 0x1b12 <TIMER_init+0x2de>
    1ae2:	81 15       	cp	r24, r1
    1ae4:	94 40       	sbci	r25, 0x04	; 4
    1ae6:	f9 f0       	breq	.+62     	; 0x1b26 <TIMER_init+0x2f2>
    1ae8:	28 c0       	rjmp	.+80     	; 0x1b3a <TIMER_init+0x306>
		{
		case 8:
			TCCR1B|=(1<<CS11);
    1aea:	8e e4       	ldi	r24, 0x4E	; 78
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	2e e4       	ldi	r18, 0x4E	; 78
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	f9 01       	movw	r30, r18
    1af4:	20 81       	ld	r18, Z
    1af6:	22 60       	ori	r18, 0x02	; 2
    1af8:	fc 01       	movw	r30, r24
    1afa:	20 83       	st	Z, r18
			break;
    1afc:	27 c0       	rjmp	.+78     	; 0x1b4c <TIMER_init+0x318>
		case 64:
				TCCR1B|=(1<<CS10)|(1<<CS11);
    1afe:	8e e4       	ldi	r24, 0x4E	; 78
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	2e e4       	ldi	r18, 0x4E	; 78
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	f9 01       	movw	r30, r18
    1b08:	20 81       	ld	r18, Z
    1b0a:	23 60       	ori	r18, 0x03	; 3
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	20 83       	st	Z, r18
				break;
    1b10:	1d c0       	rjmp	.+58     	; 0x1b4c <TIMER_init+0x318>
		case 256:
				TCCR1B|=(1<<CS12);
    1b12:	8e e4       	ldi	r24, 0x4E	; 78
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	2e e4       	ldi	r18, 0x4E	; 78
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	f9 01       	movw	r30, r18
    1b1c:	20 81       	ld	r18, Z
    1b1e:	24 60       	ori	r18, 0x04	; 4
    1b20:	fc 01       	movw	r30, r24
    1b22:	20 83       	st	Z, r18
				break;
    1b24:	13 c0       	rjmp	.+38     	; 0x1b4c <TIMER_init+0x318>
		case 1024:
				TCCR1B|=(1<<CS10)|(1<<CS12);
    1b26:	8e e4       	ldi	r24, 0x4E	; 78
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	2e e4       	ldi	r18, 0x4E	; 78
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	f9 01       	movw	r30, r18
    1b30:	20 81       	ld	r18, Z
    1b32:	25 60       	ori	r18, 0x05	; 5
    1b34:	fc 01       	movw	r30, r24
    1b36:	20 83       	st	Z, r18
				break;
    1b38:	09 c0       	rjmp	.+18     	; 0x1b4c <TIMER_init+0x318>
		default:
				TCCR1B|=(1<<CS10);
    1b3a:	8e e4       	ldi	r24, 0x4E	; 78
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	2e e4       	ldi	r18, 0x4E	; 78
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	f9 01       	movw	r30, r18
    1b44:	20 81       	ld	r18, Z
    1b46:	21 60       	ori	r18, 0x01	; 1
    1b48:	fc 01       	movw	r30, r24
    1b4a:	20 83       	st	Z, r18

			}
//FOR A
		if(!strcmp(config->mode,"compare"))
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b50:	01 96       	adiw	r24, 0x01	; 1
    1b52:	6d e2       	ldi	r22, 0x2D	; 45
    1b54:	71 e0       	ldi	r23, 0x01	; 1
    1b56:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    1b5a:	89 2b       	or	r24, r25
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <TIMER_init+0x32c>
    1b5e:	6b c0       	rjmp	.+214    	; 0x1c36 <TIMER_init+0x402>
		{	TCCR1A|=(1<<FOC1A);
    1b60:	8f e4       	ldi	r24, 0x4F	; 79
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	2f e4       	ldi	r18, 0x4F	; 79
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	f9 01       	movw	r30, r18
    1b6a:	20 81       	ld	r18, Z
    1b6c:	28 60       	ori	r18, 0x08	; 8
    1b6e:	fc 01       	movw	r30, r24
    1b70:	20 83       	st	Z, r18
			TCCR1B|=(1<<WGM12);
    1b72:	8e e4       	ldi	r24, 0x4E	; 78
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	2e e4       	ldi	r18, 0x4E	; 78
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	f9 01       	movw	r30, r18
    1b7c:	20 81       	ld	r18, Z
    1b7e:	28 60       	ori	r18, 0x08	; 8
    1b80:	fc 01       	movw	r30, r24
    1b82:	20 83       	st	Z, r18
			if(!strcmp(config->compareMatchMode,"toggle"))
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	9a 81       	ldd	r25, Y+2	; 0x02
    1b88:	47 96       	adiw	r24, 0x17	; 23
    1b8a:	65 e3       	ldi	r22, 0x35	; 53
    1b8c:	71 e0       	ldi	r23, 0x01	; 1
    1b8e:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    1b92:	89 2b       	or	r24, r25
    1b94:	99 f4       	brne	.+38     	; 0x1bbc <TIMER_init+0x388>
			{
			TCCR1A|=(1<<COM1A0);
    1b96:	8f e4       	ldi	r24, 0x4F	; 79
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	2f e4       	ldi	r18, 0x4F	; 79
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	f9 01       	movw	r30, r18
    1ba0:	20 81       	ld	r18, Z
    1ba2:	20 64       	ori	r18, 0x40	; 64
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	20 83       	st	Z, r18
			SET_BIT(DDRD,5);
    1ba8:	81 e3       	ldi	r24, 0x31	; 49
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	21 e3       	ldi	r18, 0x31	; 49
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	f9 01       	movw	r30, r18
    1bb2:	20 81       	ld	r18, Z
    1bb4:	20 62       	ori	r18, 0x20	; 32
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	20 83       	st	Z, r18
    1bba:	37 c0       	rjmp	.+110    	; 0x1c2a <TIMER_init+0x3f6>
			}
			else if(!strcmp(config->compareMatchMode,"clear"))
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc0:	47 96       	adiw	r24, 0x17	; 23
    1bc2:	6c e3       	ldi	r22, 0x3C	; 60
    1bc4:	71 e0       	ldi	r23, 0x01	; 1
    1bc6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    1bca:	89 2b       	or	r24, r25
    1bcc:	99 f4       	brne	.+38     	; 0x1bf4 <TIMER_init+0x3c0>
				{
				TCCR1A|=(1<<COM1A1);
    1bce:	8f e4       	ldi	r24, 0x4F	; 79
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	2f e4       	ldi	r18, 0x4F	; 79
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	f9 01       	movw	r30, r18
    1bd8:	20 81       	ld	r18, Z
    1bda:	20 68       	ori	r18, 0x80	; 128
    1bdc:	fc 01       	movw	r30, r24
    1bde:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    1be0:	81 e3       	ldi	r24, 0x31	; 49
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	21 e3       	ldi	r18, 0x31	; 49
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	f9 01       	movw	r30, r18
    1bea:	20 81       	ld	r18, Z
    1bec:	20 62       	ori	r18, 0x20	; 32
    1bee:	fc 01       	movw	r30, r24
    1bf0:	20 83       	st	Z, r18
    1bf2:	1b c0       	rjmp	.+54     	; 0x1c2a <TIMER_init+0x3f6>

				}
			else if(!strcmp(config->compareMatchMode,"set"))
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf8:	47 96       	adiw	r24, 0x17	; 23
    1bfa:	62 e4       	ldi	r22, 0x42	; 66
    1bfc:	71 e0       	ldi	r23, 0x01	; 1
    1bfe:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    1c02:	89 2b       	or	r24, r25
    1c04:	91 f4       	brne	.+36     	; 0x1c2a <TIMER_init+0x3f6>
				{
				TCCR1A|=(1<<COM1A1)|(1<<COM1A0);
    1c06:	8f e4       	ldi	r24, 0x4F	; 79
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	2f e4       	ldi	r18, 0x4F	; 79
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	f9 01       	movw	r30, r18
    1c10:	20 81       	ld	r18, Z
    1c12:	20 6c       	ori	r18, 0xC0	; 192
    1c14:	fc 01       	movw	r30, r24
    1c16:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    1c18:	81 e3       	ldi	r24, 0x31	; 49
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	21 e3       	ldi	r18, 0x31	; 49
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	f9 01       	movw	r30, r18
    1c22:	20 81       	ld	r18, Z
    1c24:	20 62       	ori	r18, 0x20	; 32
    1c26:	fc 01       	movw	r30, r24
    1c28:	20 83       	st	Z, r18

				}
			//enable interrupt
			TIMSK=(1<<OCIE1A);
    1c2a:	89 e5       	ldi	r24, 0x59	; 89
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	20 e1       	ldi	r18, 0x10	; 16
    1c30:	fc 01       	movw	r30, r24
    1c32:	20 83       	st	Z, r18
    1c34:	6b c0       	rjmp	.+214    	; 0x1d0c <TIMER_init+0x4d8>

		}
		else if(!strcmp(config->mode,"normal"))
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3a:	01 96       	adiw	r24, 0x01	; 1
    1c3c:	66 e4       	ldi	r22, 0x46	; 70
    1c3e:	71 e0       	ldi	r23, 0x01	; 1
    1c40:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    1c44:	89 2b       	or	r24, r25
    1c46:	79 f4       	brne	.+30     	; 0x1c66 <TIMER_init+0x432>
		{
			TCCR0|=(1<<FOC0);
    1c48:	83 e5       	ldi	r24, 0x53	; 83
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	23 e5       	ldi	r18, 0x53	; 83
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	f9 01       	movw	r30, r18
    1c52:	20 81       	ld	r18, Z
    1c54:	20 68       	ori	r18, 0x80	; 128
    1c56:	fc 01       	movw	r30, r24
    1c58:	20 83       	st	Z, r18
			TIMSK=(1<<TOIE0);
    1c5a:	89 e5       	ldi	r24, 0x59	; 89
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	21 e0       	ldi	r18, 0x01	; 1
    1c60:	fc 01       	movw	r30, r24
    1c62:	20 83       	st	Z, r18
    1c64:	53 c0       	rjmp	.+166    	; 0x1d0c <TIMER_init+0x4d8>
		}
		else if(!strcmp(config->mode,"pwm"))
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6a:	01 96       	adiw	r24, 0x01	; 1
    1c6c:	6d e4       	ldi	r22, 0x4D	; 77
    1c6e:	71 e0       	ldi	r23, 0x01	; 1
    1c70:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    1c74:	89 2b       	or	r24, r25
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <TIMER_init+0x446>
    1c78:	49 c0       	rjmp	.+146    	; 0x1d0c <TIMER_init+0x4d8>
		{
			TCCR0 |=(1<<WGM00)|(1<<WGM01);
    1c7a:	83 e5       	ldi	r24, 0x53	; 83
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	23 e5       	ldi	r18, 0x53	; 83
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	f9 01       	movw	r30, r18
    1c84:	20 81       	ld	r18, Z
    1c86:	28 64       	ori	r18, 0x48	; 72
    1c88:	fc 01       	movw	r30, r24
    1c8a:	20 83       	st	Z, r18
			if(!strcmp(config->pwmMode,"inverting"))
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	8b 96       	adiw	r24, 0x2b	; 43
    1c92:	61 e5       	ldi	r22, 0x51	; 81
    1c94:	71 e0       	ldi	r23, 0x01	; 1
    1c96:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    1c9a:	89 2b       	or	r24, r25
    1c9c:	e1 f4       	brne	.+56     	; 0x1cd6 <TIMER_init+0x4a2>
					{
					TCCR0|=(1<<COM00);
    1c9e:	83 e5       	ldi	r24, 0x53	; 83
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	23 e5       	ldi	r18, 0x53	; 83
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	f9 01       	movw	r30, r18
    1ca8:	20 81       	ld	r18, Z
    1caa:	20 61       	ori	r18, 0x10	; 16
    1cac:	fc 01       	movw	r30, r24
    1cae:	20 83       	st	Z, r18
					TCCR0|=(1<<COM01);
    1cb0:	83 e5       	ldi	r24, 0x53	; 83
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	23 e5       	ldi	r18, 0x53	; 83
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	f9 01       	movw	r30, r18
    1cba:	20 81       	ld	r18, Z
    1cbc:	20 62       	ori	r18, 0x20	; 32
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    1cc2:	87 e3       	ldi	r24, 0x37	; 55
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	27 e3       	ldi	r18, 0x37	; 55
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	f9 01       	movw	r30, r18
    1ccc:	20 81       	ld	r18, Z
    1cce:	28 60       	ori	r18, 0x08	; 8
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	20 83       	st	Z, r18
    1cd4:	1b c0       	rjmp	.+54     	; 0x1d0c <TIMER_init+0x4d8>
					}
					else if(!strcmp(config->pwmMode,"non-inverting"))
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cda:	8b 96       	adiw	r24, 0x2b	; 43
    1cdc:	6b e5       	ldi	r22, 0x5B	; 91
    1cde:	71 e0       	ldi	r23, 0x01	; 1
    1ce0:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    1ce4:	89 2b       	or	r24, r25
    1ce6:	91 f4       	brne	.+36     	; 0x1d0c <TIMER_init+0x4d8>
						{
						TCCR0|=(1<<COM01);
    1ce8:	83 e5       	ldi	r24, 0x53	; 83
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	23 e5       	ldi	r18, 0x53	; 83
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	f9 01       	movw	r30, r18
    1cf2:	20 81       	ld	r18, Z
    1cf4:	20 62       	ori	r18, 0x20	; 32
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	20 83       	st	Z, r18
						SET_BIT(DDRB,3);
    1cfa:	87 e3       	ldi	r24, 0x37	; 55
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	27 e3       	ldi	r18, 0x37	; 55
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	f9 01       	movw	r30, r18
    1d04:	20 81       	ld	r18, Z
    1d06:	28 60       	ori	r18, 0x08	; 8
    1d08:	fc 01       	movw	r30, r24
    1d0a:	20 83       	st	Z, r18
	//TCCR0=(1<<FOC0)|(1<<COM00)|(1<<CS00)|(1<<CS02);


	//enable

	sei();
    1d0c:	78 94       	sei
}
}
    1d0e:	00 00       	nop
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	08 95       	ret

00001d1a <TIMER_setCompare>:

void TIMER_setCompare(uint16 compareValue)
{
    1d1a:	cf 93       	push	r28
    1d1c:	df 93       	push	r29
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <TIMER_setCompare+0x6>
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	9a 83       	std	Y+2, r25	; 0x02
    1d26:	89 83       	std	Y+1, r24	; 0x01
	switch (configPtr->timerNumber)
    1d28:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <configPtr>
    1d2c:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <configPtr+0x1>
    1d30:	fc 01       	movw	r30, r24
    1d32:	80 81       	ld	r24, Z
    1d34:	88 2f       	mov	r24, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	19 f0       	breq	.+6      	; 0x1d42 <TIMER_setCompare+0x28>
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	59 f0       	breq	.+22     	; 0x1d56 <TIMER_setCompare+0x3c>
	case 1:
		TCNT1=0;
		OCR1A=compareValue;
		break;
	}
}
    1d40:	17 c0       	rjmp	.+46     	; 0x1d70 <TIMER_setCompare+0x56>
void TIMER_setCompare(uint16 compareValue)
{
	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=0;
    1d42:	82 e5       	ldi	r24, 0x52	; 82
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	fc 01       	movw	r30, r24
    1d48:	10 82       	st	Z, r1
		OCR0=compareValue;
    1d4a:	8c e5       	ldi	r24, 0x5C	; 92
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	29 81       	ldd	r18, Y+1	; 0x01
    1d50:	fc 01       	movw	r30, r24
    1d52:	20 83       	st	Z, r18
		break;
    1d54:	0d c0       	rjmp	.+26     	; 0x1d70 <TIMER_setCompare+0x56>
	case 1:
		TCNT1=0;
    1d56:	8c e4       	ldi	r24, 0x4C	; 76
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	11 82       	std	Z+1, r1	; 0x01
    1d5e:	10 82       	st	Z, r1
		OCR1A=compareValue;
    1d60:	8a e4       	ldi	r24, 0x4A	; 74
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	29 81       	ldd	r18, Y+1	; 0x01
    1d66:	3a 81       	ldd	r19, Y+2	; 0x02
    1d68:	fc 01       	movw	r30, r24
    1d6a:	31 83       	std	Z+1, r19	; 0x01
    1d6c:	20 83       	st	Z, r18
		break;
    1d6e:	00 00       	nop
	}
}
    1d70:	00 00       	nop
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	08 95       	ret

00001d7c <TIMER_setNormal>:
void TIMER_setNormal(uint8 initValue)

{
    1d7c:	cf 93       	push	r28
    1d7e:	df 93       	push	r29
    1d80:	1f 92       	push	r1
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	89 83       	std	Y+1, r24	; 0x01

	switch (configPtr->timerNumber)
    1d88:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <configPtr>
    1d8c:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <configPtr+0x1>
    1d90:	fc 01       	movw	r30, r24
    1d92:	80 81       	ld	r24, Z
    1d94:	88 2f       	mov	r24, r24
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	19 f0       	breq	.+6      	; 0x1da2 <TIMER_setNormal+0x26>
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	39 f0       	breq	.+14     	; 0x1dae <TIMER_setNormal+0x32>
		TCNT1=initValue;
		break;


}
}
    1da0:	0f c0       	rjmp	.+30     	; 0x1dc0 <TIMER_setNormal+0x44>
{

	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=initValue;
    1da2:	82 e5       	ldi	r24, 0x52	; 82
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	29 81       	ldd	r18, Y+1	; 0x01
    1da8:	fc 01       	movw	r30, r24
    1daa:	20 83       	st	Z, r18
		break;
    1dac:	09 c0       	rjmp	.+18     	; 0x1dc0 <TIMER_setNormal+0x44>
	case 1:
		TCNT1=initValue;
    1dae:	8c e4       	ldi	r24, 0x4C	; 76
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	29 81       	ldd	r18, Y+1	; 0x01
    1db4:	22 2f       	mov	r18, r18
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	fc 01       	movw	r30, r24
    1dba:	31 83       	std	Z+1, r19	; 0x01
    1dbc:	20 83       	st	Z, r18
		break;
    1dbe:	00 00       	nop


}
}
    1dc0:	00 00       	nop
    1dc2:	0f 90       	pop	r0
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	08 95       	ret

00001dca <TIMER_setpwm>:
void TIMER_setpwm(uint8 dutyCycle)
{
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	1f 92       	push	r1
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
    1dd6:	82 e5       	ldi	r24, 0x52	; 82
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	fc 01       	movw	r30, r24
    1ddc:	10 82       	st	Z, r1
	OCR0=dutyCycle;
    1dde:	8c e5       	ldi	r24, 0x5C	; 92
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	29 81       	ldd	r18, Y+1	; 0x01
    1de4:	fc 01       	movw	r30, r24
    1de6:	20 83       	st	Z, r18
}
    1de8:	00 00       	nop
    1dea:	0f 90       	pop	r0
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	08 95       	ret

00001df2 <TIMER_setCallBackPtr>:
void TIMER_setCallBackPtr(void(*a_ptr)(void))
{
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <TIMER_setCallBackPtr+0x6>
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	9a 83       	std	Y+2, r25	; 0x02
    1dfe:	89 83       	std	Y+1, r24	; 0x01
g_callBackPtr=a_ptr;
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	9a 81       	ldd	r25, Y+2	; 0x02
    1e04:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <g_callBackPtr+0x1>
    1e08:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <g_callBackPtr>
}
    1e0c:	00 00       	nop
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	08 95       	ret

00001e18 <TIMER_stop>:
void TIMER_stop()
{
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
	switch (configPtr->timerNumber)
    1e20:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <configPtr>
    1e24:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <configPtr+0x1>
    1e28:	fc 01       	movw	r30, r24
    1e2a:	80 81       	ld	r24, Z
    1e2c:	88 2f       	mov	r24, r24
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	89 2b       	or	r24, r25
    1e32:	51 f4       	brne	.+20     	; 0x1e48 <TIMER_stop+0x30>

{
case 0:
	TCCR0&=~(1<<CS00)&~(1<<CS01)&~(1<<CS02);
    1e34:	83 e5       	ldi	r24, 0x53	; 83
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	23 e5       	ldi	r18, 0x53	; 83
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	f9 01       	movw	r30, r18
    1e3e:	20 81       	ld	r18, Z
    1e40:	28 7f       	andi	r18, 0xF8	; 248
    1e42:	fc 01       	movw	r30, r24
    1e44:	20 83       	st	Z, r18
	break;
    1e46:	01 c0       	rjmp	.+2      	; 0x1e4a <TIMER_stop+0x32>
case 1:
	break;
    1e48:	00 00       	nop

}
}
    1e4a:	00 00       	nop
    1e4c:	df 91       	pop	r29
    1e4e:	cf 91       	pop	r28
    1e50:	08 95       	ret

00001e52 <UART_init>:
 *      Author: hesham
 */
#include"uart.h"

void UART_init(UART_configurationType * config)
{UCSRA=0;
    1e52:	0f 93       	push	r16
    1e54:	1f 93       	push	r17
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <UART_init+0xa>
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	9a 83       	std	Y+2, r25	; 0x02
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	8b e2       	ldi	r24, 0x2B	; 43
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	fc 01       	movw	r30, r24
    1e6a:	10 82       	st	Z, r1
UCSRB=0;
    1e6c:	8a e2       	ldi	r24, 0x2A	; 42
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	fc 01       	movw	r30, r24
    1e72:	10 82       	st	Z, r1
UCSRC=0;
    1e74:	80 e4       	ldi	r24, 0x40	; 64
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	fc 01       	movw	r30, r24
    1e7a:	10 82       	st	Z, r1
/* enables */
	if(!strcmp(config->mode,"normal"))
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e80:	05 96       	adiw	r24, 0x05	; 5
    1e82:	69 e6       	ldi	r22, 0x69	; 105
    1e84:	71 e0       	ldi	r23, 0x01	; 1
    1e86:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    1e8a:	89 2b       	or	r24, r25
    1e8c:	09 f0       	breq	.+2      	; 0x1e90 <UART_init+0x3e>
    1e8e:	60 c0       	rjmp	.+192    	; 0x1f50 <UART_init+0xfe>
	{
CLEAR_BIT(UCSRA,U2X);
    1e90:	8b e2       	ldi	r24, 0x2B	; 43
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	2b e2       	ldi	r18, 0x2B	; 43
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	f9 01       	movw	r30, r18
    1e9a:	20 81       	ld	r18, Z
    1e9c:	2d 7f       	andi	r18, 0xFD	; 253
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	20 83       	st	Z, r18
UBRRL=((F_CPU /(16*config->buadRate))-1);
    1ea2:	09 e2       	ldi	r16, 0x29	; 41
    1ea4:	10 e0       	ldi	r17, 0x00	; 0
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eaa:	fc 01       	movw	r30, r24
    1eac:	81 81       	ldd	r24, Z+1	; 0x01
    1eae:	92 81       	ldd	r25, Z+2	; 0x02
    1eb0:	a3 81       	ldd	r26, Z+3	; 0x03
    1eb2:	b4 81       	ldd	r27, Z+4	; 0x04
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	aa 1f       	adc	r26, r26
    1eba:	bb 1f       	adc	r27, r27
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	aa 1f       	adc	r26, r26
    1ec2:	bb 1f       	adc	r27, r27
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	aa 1f       	adc	r26, r26
    1eca:	bb 1f       	adc	r27, r27
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	aa 1f       	adc	r26, r26
    1ed2:	bb 1f       	adc	r27, r27
    1ed4:	9c 01       	movw	r18, r24
    1ed6:	ad 01       	movw	r20, r26
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	92 e1       	ldi	r25, 0x12	; 18
    1edc:	aa e7       	ldi	r26, 0x7A	; 122
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	bc 01       	movw	r22, r24
    1ee2:	cd 01       	movw	r24, r26
    1ee4:	0e 94 4f 11 	call	0x229e	; 0x229e <__udivmodsi4>
    1ee8:	da 01       	movw	r26, r20
    1eea:	c9 01       	movw	r24, r18
    1eec:	81 50       	subi	r24, 0x01	; 1
    1eee:	f8 01       	movw	r30, r16
    1ef0:	80 83       	st	Z, r24
UBRRH=((F_CPU /(16*config->buadRate))-1)>>8;
    1ef2:	00 e4       	ldi	r16, 0x40	; 64
    1ef4:	10 e0       	ldi	r17, 0x00	; 0
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    1efa:	fc 01       	movw	r30, r24
    1efc:	81 81       	ldd	r24, Z+1	; 0x01
    1efe:	92 81       	ldd	r25, Z+2	; 0x02
    1f00:	a3 81       	ldd	r26, Z+3	; 0x03
    1f02:	b4 81       	ldd	r27, Z+4	; 0x04
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	aa 1f       	adc	r26, r26
    1f0a:	bb 1f       	adc	r27, r27
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	aa 1f       	adc	r26, r26
    1f12:	bb 1f       	adc	r27, r27
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	aa 1f       	adc	r26, r26
    1f1a:	bb 1f       	adc	r27, r27
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	aa 1f       	adc	r26, r26
    1f22:	bb 1f       	adc	r27, r27
    1f24:	9c 01       	movw	r18, r24
    1f26:	ad 01       	movw	r20, r26
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	92 e1       	ldi	r25, 0x12	; 18
    1f2c:	aa e7       	ldi	r26, 0x7A	; 122
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	0e 94 4f 11 	call	0x229e	; 0x229e <__udivmodsi4>
    1f38:	da 01       	movw	r26, r20
    1f3a:	c9 01       	movw	r24, r18
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	a1 09       	sbc	r26, r1
    1f40:	b1 09       	sbc	r27, r1
    1f42:	89 2f       	mov	r24, r25
    1f44:	9a 2f       	mov	r25, r26
    1f46:	ab 2f       	mov	r26, r27
    1f48:	bb 27       	eor	r27, r27
    1f4a:	f8 01       	movw	r30, r16
    1f4c:	80 83       	st	Z, r24
    1f4e:	61 c0       	rjmp	.+194    	; 0x2012 <UART_init+0x1c0>


	}
	else if(!strcmp(config->mode,"double speed"))
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	9a 81       	ldd	r25, Y+2	; 0x02
    1f54:	05 96       	adiw	r24, 0x05	; 5
    1f56:	60 e7       	ldi	r22, 0x70	; 112
    1f58:	71 e0       	ldi	r23, 0x01	; 1
    1f5a:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <strcmp>
    1f5e:	89 2b       	or	r24, r25
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <UART_init+0x112>
    1f62:	57 c0       	rjmp	.+174    	; 0x2012 <UART_init+0x1c0>
	{
		SET_BIT(UCSRA,U2X);
    1f64:	8b e2       	ldi	r24, 0x2B	; 43
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	2b e2       	ldi	r18, 0x2B	; 43
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	f9 01       	movw	r30, r18
    1f6e:	20 81       	ld	r18, Z
    1f70:	22 60       	ori	r18, 0x02	; 2
    1f72:	fc 01       	movw	r30, r24
    1f74:	20 83       	st	Z, r18
		UBRRL=((F_CPU /(8*config->buadRate))-1);
    1f76:	09 e2       	ldi	r16, 0x29	; 41
    1f78:	10 e0       	ldi	r17, 0x00	; 0
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7e:	fc 01       	movw	r30, r24
    1f80:	81 81       	ldd	r24, Z+1	; 0x01
    1f82:	92 81       	ldd	r25, Z+2	; 0x02
    1f84:	a3 81       	ldd	r26, Z+3	; 0x03
    1f86:	b4 81       	ldd	r27, Z+4	; 0x04
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	aa 1f       	adc	r26, r26
    1f8e:	bb 1f       	adc	r27, r27
    1f90:	88 0f       	add	r24, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	aa 1f       	adc	r26, r26
    1f96:	bb 1f       	adc	r27, r27
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	aa 1f       	adc	r26, r26
    1f9e:	bb 1f       	adc	r27, r27
    1fa0:	9c 01       	movw	r18, r24
    1fa2:	ad 01       	movw	r20, r26
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	92 e1       	ldi	r25, 0x12	; 18
    1fa8:	aa e7       	ldi	r26, 0x7A	; 122
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	bc 01       	movw	r22, r24
    1fae:	cd 01       	movw	r24, r26
    1fb0:	0e 94 4f 11 	call	0x229e	; 0x229e <__udivmodsi4>
    1fb4:	da 01       	movw	r26, r20
    1fb6:	c9 01       	movw	r24, r18
    1fb8:	81 50       	subi	r24, 0x01	; 1
    1fba:	f8 01       	movw	r30, r16
    1fbc:	80 83       	st	Z, r24
		UBRRH=((F_CPU /(8*config->buadRate))-1)>>8;
    1fbe:	00 e4       	ldi	r16, 0x40	; 64
    1fc0:	10 e0       	ldi	r17, 0x00	; 0
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	81 81       	ldd	r24, Z+1	; 0x01
    1fca:	92 81       	ldd	r25, Z+2	; 0x02
    1fcc:	a3 81       	ldd	r26, Z+3	; 0x03
    1fce:	b4 81       	ldd	r27, Z+4	; 0x04
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	aa 1f       	adc	r26, r26
    1fd6:	bb 1f       	adc	r27, r27
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	aa 1f       	adc	r26, r26
    1fde:	bb 1f       	adc	r27, r27
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	aa 1f       	adc	r26, r26
    1fe6:	bb 1f       	adc	r27, r27
    1fe8:	9c 01       	movw	r18, r24
    1fea:	ad 01       	movw	r20, r26
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	92 e1       	ldi	r25, 0x12	; 18
    1ff0:	aa e7       	ldi	r26, 0x7A	; 122
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	bc 01       	movw	r22, r24
    1ff6:	cd 01       	movw	r24, r26
    1ff8:	0e 94 4f 11 	call	0x229e	; 0x229e <__udivmodsi4>
    1ffc:	da 01       	movw	r26, r20
    1ffe:	c9 01       	movw	r24, r18
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	a1 09       	sbc	r26, r1
    2004:	b1 09       	sbc	r27, r1
    2006:	89 2f       	mov	r24, r25
    2008:	9a 2f       	mov	r25, r26
    200a:	ab 2f       	mov	r26, r27
    200c:	bb 27       	eor	r27, r27
    200e:	f8 01       	movw	r30, r16
    2010:	80 83       	st	Z, r24

	}


/* TO enable writing on Register UCSRC (used for define the frame )as it has the same address with UBRR register */
SET_BIT(UCSRC,URSEL);
    2012:	80 e4       	ldi	r24, 0x40	; 64
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	20 e4       	ldi	r18, 0x40	; 64
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	f9 01       	movw	r30, r18
    201c:	20 81       	ld	r18, Z
    201e:	20 68       	ori	r18, 0x80	; 128
    2020:	fc 01       	movw	r30, r24
    2022:	20 83       	st	Z, r18
/* the UART frame parameters*/
/* character size */
//SET_BIT(UCSRC,UCSZ0);
//SET_BIT(UCSRC,UCSZ1);
switch(config->character_size)
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	fc 01       	movw	r30, r24
    202a:	80 81       	ld	r24, Z
    202c:	88 2f       	mov	r24, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	86 30       	cpi	r24, 0x06	; 6
    2032:	91 05       	cpc	r25, r1
    2034:	f9 f0       	breq	.+62     	; 0x2074 <UART_init+0x222>
    2036:	87 30       	cpi	r24, 0x07	; 7
    2038:	91 05       	cpc	r25, r1
    203a:	1c f4       	brge	.+6      	; 0x2042 <UART_init+0x1f0>
    203c:	05 97       	sbiw	r24, 0x05	; 5
    203e:	39 f0       	breq	.+14     	; 0x204e <UART_init+0x1fc>
    2040:	5b c0       	rjmp	.+182    	; 0x20f8 <UART_init+0x2a6>
    2042:	87 30       	cpi	r24, 0x07	; 7
    2044:	91 05       	cpc	r25, r1
    2046:	49 f1       	breq	.+82     	; 0x209a <UART_init+0x248>
    2048:	09 97       	sbiw	r24, 0x09	; 9
    204a:	d1 f1       	breq	.+116    	; 0x20c0 <UART_init+0x26e>
    204c:	55 c0       	rjmp	.+170    	; 0x20f8 <UART_init+0x2a6>
{
case 5:
	CLEAR_BIT(UCSRC,UCSZ0);
    204e:	80 e4       	ldi	r24, 0x40	; 64
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	20 e4       	ldi	r18, 0x40	; 64
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	f9 01       	movw	r30, r18
    2058:	20 81       	ld	r18, Z
    205a:	2d 7f       	andi	r18, 0xFD	; 253
    205c:	fc 01       	movw	r30, r24
    205e:	20 83       	st	Z, r18
	CLEAR_BIT(UCSRC,UCSZ1);
    2060:	80 e4       	ldi	r24, 0x40	; 64
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	20 e4       	ldi	r18, 0x40	; 64
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	f9 01       	movw	r30, r18
    206a:	20 81       	ld	r18, Z
    206c:	2b 7f       	andi	r18, 0xFB	; 251
    206e:	fc 01       	movw	r30, r24
    2070:	20 83       	st	Z, r18
	break;
    2072:	54 c0       	rjmp	.+168    	; 0x211c <UART_init+0x2ca>

case 6:
	CLEAR_BIT(UCSRC,UCSZ0);
    2074:	80 e4       	ldi	r24, 0x40	; 64
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	20 e4       	ldi	r18, 0x40	; 64
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	f9 01       	movw	r30, r18
    207e:	20 81       	ld	r18, Z
    2080:	2d 7f       	andi	r18, 0xFD	; 253
    2082:	fc 01       	movw	r30, r24
    2084:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    2086:	80 e4       	ldi	r24, 0x40	; 64
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	20 e4       	ldi	r18, 0x40	; 64
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	f9 01       	movw	r30, r18
    2090:	20 81       	ld	r18, Z
    2092:	24 60       	ori	r18, 0x04	; 4
    2094:	fc 01       	movw	r30, r24
    2096:	20 83       	st	Z, r18
	break;
    2098:	41 c0       	rjmp	.+130    	; 0x211c <UART_init+0x2ca>
case 7:
	CLEAR_BIT(UCSRC,UCSZ1);
    209a:	80 e4       	ldi	r24, 0x40	; 64
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	20 e4       	ldi	r18, 0x40	; 64
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	f9 01       	movw	r30, r18
    20a4:	20 81       	ld	r18, Z
    20a6:	2b 7f       	andi	r18, 0xFB	; 251
    20a8:	fc 01       	movw	r30, r24
    20aa:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ0);
    20ac:	80 e4       	ldi	r24, 0x40	; 64
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	20 e4       	ldi	r18, 0x40	; 64
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	f9 01       	movw	r30, r18
    20b6:	20 81       	ld	r18, Z
    20b8:	22 60       	ori	r18, 0x02	; 2
    20ba:	fc 01       	movw	r30, r24
    20bc:	20 83       	st	Z, r18
		break;
    20be:	2e c0       	rjmp	.+92     	; 0x211c <UART_init+0x2ca>
case 9:
	SET_BIT(UCSRC,UCSZ0);
    20c0:	80 e4       	ldi	r24, 0x40	; 64
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	20 e4       	ldi	r18, 0x40	; 64
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	f9 01       	movw	r30, r18
    20ca:	20 81       	ld	r18, Z
    20cc:	22 60       	ori	r18, 0x02	; 2
    20ce:	fc 01       	movw	r30, r24
    20d0:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    20d2:	80 e4       	ldi	r24, 0x40	; 64
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	20 e4       	ldi	r18, 0x40	; 64
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	f9 01       	movw	r30, r18
    20dc:	20 81       	ld	r18, Z
    20de:	24 60       	ori	r18, 0x04	; 4
    20e0:	fc 01       	movw	r30, r24
    20e2:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ2);
    20e4:	80 e4       	ldi	r24, 0x40	; 64
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	20 e4       	ldi	r18, 0x40	; 64
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	f9 01       	movw	r30, r18
    20ee:	20 81       	ld	r18, Z
    20f0:	24 60       	ori	r18, 0x04	; 4
    20f2:	fc 01       	movw	r30, r24
    20f4:	20 83       	st	Z, r18


	break;
    20f6:	12 c0       	rjmp	.+36     	; 0x211c <UART_init+0x2ca>

default :
	//SET_BIT(UCSRC,URSEL);
	SET_BIT(UCSRC,UCSZ0);
    20f8:	80 e4       	ldi	r24, 0x40	; 64
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	20 e4       	ldi	r18, 0x40	; 64
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	f9 01       	movw	r30, r18
    2102:	20 81       	ld	r18, Z
    2104:	22 60       	ori	r18, 0x02	; 2
    2106:	fc 01       	movw	r30, r24
    2108:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    210a:	80 e4       	ldi	r24, 0x40	; 64
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	20 e4       	ldi	r18, 0x40	; 64
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	f9 01       	movw	r30, r18
    2114:	20 81       	ld	r18, Z
    2116:	24 60       	ori	r18, 0x04	; 4
    2118:	fc 01       	movw	r30, r24
    211a:	20 83       	st	Z, r18
/* write on UBRR instead of ucsrc register */
//CLEAR_BIT(UCSRC,URSEL);//---------------------------------------<<<<
/* writing the baud rate prescaler */
//UBRRL=12;
//UBRRH=12>>8;
SET_BIT(UCSRB,RXEN);
    211c:	8a e2       	ldi	r24, 0x2A	; 42
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	2a e2       	ldi	r18, 0x2A	; 42
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	f9 01       	movw	r30, r18
    2126:	20 81       	ld	r18, Z
    2128:	20 61       	ori	r18, 0x10	; 16
    212a:	fc 01       	movw	r30, r24
    212c:	20 83       	st	Z, r18
SET_BIT(UCSRB,TXEN);
    212e:	8a e2       	ldi	r24, 0x2A	; 42
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	2a e2       	ldi	r18, 0x2A	; 42
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	f9 01       	movw	r30, r18
    2138:	20 81       	ld	r18, Z
    213a:	28 60       	ori	r18, 0x08	; 8
    213c:	fc 01       	movw	r30, r24
    213e:	20 83       	st	Z, r18
}
    2140:	00 00       	nop
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	df 91       	pop	r29
    2148:	cf 91       	pop	r28
    214a:	1f 91       	pop	r17
    214c:	0f 91       	pop	r16
    214e:	08 95       	ret

00002150 <UART_receiveByte>:

uint8 UART_receiveByte(void)
{
    2150:	cf 93       	push	r28
    2152:	df 93       	push	r29
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)); /* wait until RXC  flag be 1 it means that there is data not read */
    2158:	00 00       	nop
    215a:	8b e2       	ldi	r24, 0x2B	; 43
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	fc 01       	movw	r30, r24
    2160:	80 81       	ld	r24, Z
    2162:	88 23       	and	r24, r24
    2164:	d4 f7       	brge	.-12     	; 0x215a <UART_receiveByte+0xa>

	return UDR;/* read and return RXC flag to zero */
    2166:	8c e2       	ldi	r24, 0x2C	; 44
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	fc 01       	movw	r30, r24
    216c:	80 81       	ld	r24, Z
}
    216e:	df 91       	pop	r29
    2170:	cf 91       	pop	r28
    2172:	08 95       	ret

00002174 <UART_sendByte>:
void UART_sendByte(const uint8 data)
{
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	1f 92       	push	r1
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
    2180:	8c e2       	ldi	r24, 0x2C	; 44
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	29 81       	ldd	r18, Y+1	; 0x01
    2186:	fc 01       	movw	r30, r24
    2188:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(UCSRA,TXC));//wait until send data txc =1;
    218a:	00 00       	nop
    218c:	8b e2       	ldi	r24, 0x2B	; 43
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	fc 01       	movw	r30, r24
    2192:	80 81       	ld	r24, Z
    2194:	88 2f       	mov	r24, r24
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	80 74       	andi	r24, 0x40	; 64
    219a:	99 27       	eor	r25, r25
    219c:	89 2b       	or	r24, r25
    219e:	b1 f3       	breq	.-20     	; 0x218c <UART_sendByte+0x18>
	SET_BIT(UCSRA,TXC); //clear the flag as it doesnt clear automatically as ISR
    21a0:	8b e2       	ldi	r24, 0x2B	; 43
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	2b e2       	ldi	r18, 0x2B	; 43
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	f9 01       	movw	r30, r18
    21aa:	20 81       	ld	r18, Z
    21ac:	20 64       	ori	r18, 0x40	; 64
    21ae:	fc 01       	movw	r30, r24
    21b0:	20 83       	st	Z, r18
	//while(BIT_IS_CLEAR(UCSRA,UDRE)){}
		/* Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now */
	//	UDR = data;
}
    21b2:	00 00       	nop
    21b4:	0f 90       	pop	r0
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	08 95       	ret

000021bc <UART_sendString>:
void UART_sendString(uint8 *str)
{
    21bc:	cf 93       	push	r28
    21be:	df 93       	push	r29
    21c0:	00 d0       	rcall	.+0      	; 0x21c2 <UART_sendString+0x6>
    21c2:	1f 92       	push	r1
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	9b 83       	std	Y+3, r25	; 0x03
    21ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21cc:	19 82       	std	Y+1, r1	; 0x01
		while(str[i] != '\0')
    21ce:	0e c0       	rjmp	.+28     	; 0x21ec <UART_sendString+0x30>
		{
			UART_sendByte(str[i]);
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	88 2f       	mov	r24, r24
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	2a 81       	ldd	r18, Y+2	; 0x02
    21d8:	3b 81       	ldd	r19, Y+3	; 0x03
    21da:	82 0f       	add	r24, r18
    21dc:	93 1f       	adc	r25, r19
    21de:	fc 01       	movw	r30, r24
    21e0:	80 81       	ld	r24, Z
    21e2:	0e 94 ba 10 	call	0x2174	; 0x2174 <UART_sendByte>
			i++;
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	8f 5f       	subi	r24, 0xFF	; 255
    21ea:	89 83       	std	Y+1, r24	; 0x01
	//	UDR = data;
}
void UART_sendString(uint8 *str)
{
	uint8 i = 0;
		while(str[i] != '\0')
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	88 2f       	mov	r24, r24
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	2a 81       	ldd	r18, Y+2	; 0x02
    21f4:	3b 81       	ldd	r19, Y+3	; 0x03
    21f6:	82 0f       	add	r24, r18
    21f8:	93 1f       	adc	r25, r19
    21fa:	fc 01       	movw	r30, r24
    21fc:	80 81       	ld	r24, Z
    21fe:	88 23       	and	r24, r24
    2200:	39 f7       	brne	.-50     	; 0x21d0 <UART_sendString+0x14>
		{
			UART_sendByte(str[i]);
			i++;
		}
	UART_sendByte('#');
    2202:	83 e2       	ldi	r24, 0x23	; 35
    2204:	0e 94 ba 10 	call	0x2174	; 0x2174 <UART_sendByte>

}
    2208:	00 00       	nop
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	df 91       	pop	r29
    2212:	cf 91       	pop	r28
    2214:	08 95       	ret

00002216 <UART_receiveString>:
void UART_receiveString(uint8 *str)
{
    2216:	0f 93       	push	r16
    2218:	1f 93       	push	r17
    221a:	cf 93       	push	r28
    221c:	df 93       	push	r29
    221e:	00 d0       	rcall	.+0      	; 0x2220 <UART_receiveString+0xa>
    2220:	1f 92       	push	r1
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	9b 83       	std	Y+3, r25	; 0x03
    2228:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    222a:	19 82       	std	Y+1, r1	; 0x01
		str[i] = UART_receiveByte();
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	88 2f       	mov	r24, r24
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	2a 81       	ldd	r18, Y+2	; 0x02
    2234:	3b 81       	ldd	r19, Y+3	; 0x03
    2236:	89 01       	movw	r16, r18
    2238:	08 0f       	add	r16, r24
    223a:	19 1f       	adc	r17, r25
    223c:	0e 94 a8 10 	call	0x2150	; 0x2150 <UART_receiveByte>
    2240:	f8 01       	movw	r30, r16
    2242:	80 83       	st	Z, r24
		while(str[i] != '#')
    2244:	0f c0       	rjmp	.+30     	; 0x2264 <UART_receiveString+0x4e>
		{
			i++;
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	8f 5f       	subi	r24, 0xFF	; 255
    224a:	89 83       	std	Y+1, r24	; 0x01
			str[i] = UART_receiveByte();
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	88 2f       	mov	r24, r24
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	2a 81       	ldd	r18, Y+2	; 0x02
    2254:	3b 81       	ldd	r19, Y+3	; 0x03
    2256:	89 01       	movw	r16, r18
    2258:	08 0f       	add	r16, r24
    225a:	19 1f       	adc	r17, r25
    225c:	0e 94 a8 10 	call	0x2150	; 0x2150 <UART_receiveByte>
    2260:	f8 01       	movw	r30, r16
    2262:	80 83       	st	Z, r24
}
void UART_receiveString(uint8 *str)
{
	uint8 i = 0;
		str[i] = UART_receiveByte();
		while(str[i] != '#')
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	88 2f       	mov	r24, r24
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	2a 81       	ldd	r18, Y+2	; 0x02
    226c:	3b 81       	ldd	r19, Y+3	; 0x03
    226e:	82 0f       	add	r24, r18
    2270:	93 1f       	adc	r25, r19
    2272:	fc 01       	movw	r30, r24
    2274:	80 81       	ld	r24, Z
    2276:	83 32       	cpi	r24, 0x23	; 35
    2278:	31 f7       	brne	.-52     	; 0x2246 <UART_receiveString+0x30>
		{
			i++;
			str[i] = UART_receiveByte();
		}
		str[i] = '\0';
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	88 2f       	mov	r24, r24
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	2a 81       	ldd	r18, Y+2	; 0x02
    2282:	3b 81       	ldd	r19, Y+3	; 0x03
    2284:	82 0f       	add	r24, r18
    2286:	93 1f       	adc	r25, r19
    2288:	fc 01       	movw	r30, r24
    228a:	10 82       	st	Z, r1
}
    228c:	00 00       	nop
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	1f 91       	pop	r17
    229a:	0f 91       	pop	r16
    229c:	08 95       	ret

0000229e <__udivmodsi4>:
    229e:	a1 e2       	ldi	r26, 0x21	; 33
    22a0:	1a 2e       	mov	r1, r26
    22a2:	aa 1b       	sub	r26, r26
    22a4:	bb 1b       	sub	r27, r27
    22a6:	fd 01       	movw	r30, r26
    22a8:	0d c0       	rjmp	.+26     	; 0x22c4 <__udivmodsi4_ep>

000022aa <__udivmodsi4_loop>:
    22aa:	aa 1f       	adc	r26, r26
    22ac:	bb 1f       	adc	r27, r27
    22ae:	ee 1f       	adc	r30, r30
    22b0:	ff 1f       	adc	r31, r31
    22b2:	a2 17       	cp	r26, r18
    22b4:	b3 07       	cpc	r27, r19
    22b6:	e4 07       	cpc	r30, r20
    22b8:	f5 07       	cpc	r31, r21
    22ba:	20 f0       	brcs	.+8      	; 0x22c4 <__udivmodsi4_ep>
    22bc:	a2 1b       	sub	r26, r18
    22be:	b3 0b       	sbc	r27, r19
    22c0:	e4 0b       	sbc	r30, r20
    22c2:	f5 0b       	sbc	r31, r21

000022c4 <__udivmodsi4_ep>:
    22c4:	66 1f       	adc	r22, r22
    22c6:	77 1f       	adc	r23, r23
    22c8:	88 1f       	adc	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	1a 94       	dec	r1
    22ce:	69 f7       	brne	.-38     	; 0x22aa <__udivmodsi4_loop>
    22d0:	60 95       	com	r22
    22d2:	70 95       	com	r23
    22d4:	80 95       	com	r24
    22d6:	90 95       	com	r25
    22d8:	9b 01       	movw	r18, r22
    22da:	ac 01       	movw	r20, r24
    22dc:	bd 01       	movw	r22, r26
    22de:	cf 01       	movw	r24, r30
    22e0:	08 95       	ret

000022e2 <__tablejump2__>:
    22e2:	ee 0f       	add	r30, r30
    22e4:	ff 1f       	adc	r31, r31
    22e6:	05 90       	lpm	r0, Z+
    22e8:	f4 91       	lpm	r31, Z
    22ea:	e0 2d       	mov	r30, r0
    22ec:	09 94       	ijmp

000022ee <__subsf3>:
    22ee:	50 58       	subi	r21, 0x80	; 128

000022f0 <__addsf3>:
    22f0:	bb 27       	eor	r27, r27
    22f2:	aa 27       	eor	r26, r26
    22f4:	0e 94 8f 11 	call	0x231e	; 0x231e <__addsf3x>
    22f8:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__fp_round>
    22fc:	0e 94 b7 12 	call	0x256e	; 0x256e <__fp_pscA>
    2300:	38 f0       	brcs	.+14     	; 0x2310 <__addsf3+0x20>
    2302:	0e 94 be 12 	call	0x257c	; 0x257c <__fp_pscB>
    2306:	20 f0       	brcs	.+8      	; 0x2310 <__addsf3+0x20>
    2308:	39 f4       	brne	.+14     	; 0x2318 <__addsf3+0x28>
    230a:	9f 3f       	cpi	r25, 0xFF	; 255
    230c:	19 f4       	brne	.+6      	; 0x2314 <__addsf3+0x24>
    230e:	26 f4       	brtc	.+8      	; 0x2318 <__addsf3+0x28>
    2310:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__fp_nan>
    2314:	0e f4       	brtc	.+2      	; 0x2318 <__addsf3+0x28>
    2316:	e0 95       	com	r30
    2318:	e7 fb       	bst	r30, 7
    231a:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__fp_inf>

0000231e <__addsf3x>:
    231e:	e9 2f       	mov	r30, r25
    2320:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__fp_split3>
    2324:	58 f3       	brcs	.-42     	; 0x22fc <__addsf3+0xc>
    2326:	ba 17       	cp	r27, r26
    2328:	62 07       	cpc	r22, r18
    232a:	73 07       	cpc	r23, r19
    232c:	84 07       	cpc	r24, r20
    232e:	95 07       	cpc	r25, r21
    2330:	20 f0       	brcs	.+8      	; 0x233a <__addsf3x+0x1c>
    2332:	79 f4       	brne	.+30     	; 0x2352 <__addsf3x+0x34>
    2334:	a6 f5       	brtc	.+104    	; 0x239e <__addsf3x+0x80>
    2336:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__fp_zero>
    233a:	0e f4       	brtc	.+2      	; 0x233e <__addsf3x+0x20>
    233c:	e0 95       	com	r30
    233e:	0b 2e       	mov	r0, r27
    2340:	ba 2f       	mov	r27, r26
    2342:	a0 2d       	mov	r26, r0
    2344:	0b 01       	movw	r0, r22
    2346:	b9 01       	movw	r22, r18
    2348:	90 01       	movw	r18, r0
    234a:	0c 01       	movw	r0, r24
    234c:	ca 01       	movw	r24, r20
    234e:	a0 01       	movw	r20, r0
    2350:	11 24       	eor	r1, r1
    2352:	ff 27       	eor	r31, r31
    2354:	59 1b       	sub	r21, r25
    2356:	99 f0       	breq	.+38     	; 0x237e <__addsf3x+0x60>
    2358:	59 3f       	cpi	r21, 0xF9	; 249
    235a:	50 f4       	brcc	.+20     	; 0x2370 <__addsf3x+0x52>
    235c:	50 3e       	cpi	r21, 0xE0	; 224
    235e:	68 f1       	brcs	.+90     	; 0x23ba <__addsf3x+0x9c>
    2360:	1a 16       	cp	r1, r26
    2362:	f0 40       	sbci	r31, 0x00	; 0
    2364:	a2 2f       	mov	r26, r18
    2366:	23 2f       	mov	r18, r19
    2368:	34 2f       	mov	r19, r20
    236a:	44 27       	eor	r20, r20
    236c:	58 5f       	subi	r21, 0xF8	; 248
    236e:	f3 cf       	rjmp	.-26     	; 0x2356 <__addsf3x+0x38>
    2370:	46 95       	lsr	r20
    2372:	37 95       	ror	r19
    2374:	27 95       	ror	r18
    2376:	a7 95       	ror	r26
    2378:	f0 40       	sbci	r31, 0x00	; 0
    237a:	53 95       	inc	r21
    237c:	c9 f7       	brne	.-14     	; 0x2370 <__addsf3x+0x52>
    237e:	7e f4       	brtc	.+30     	; 0x239e <__addsf3x+0x80>
    2380:	1f 16       	cp	r1, r31
    2382:	ba 0b       	sbc	r27, r26
    2384:	62 0b       	sbc	r22, r18
    2386:	73 0b       	sbc	r23, r19
    2388:	84 0b       	sbc	r24, r20
    238a:	ba f0       	brmi	.+46     	; 0x23ba <__addsf3x+0x9c>
    238c:	91 50       	subi	r25, 0x01	; 1
    238e:	a1 f0       	breq	.+40     	; 0x23b8 <__addsf3x+0x9a>
    2390:	ff 0f       	add	r31, r31
    2392:	bb 1f       	adc	r27, r27
    2394:	66 1f       	adc	r22, r22
    2396:	77 1f       	adc	r23, r23
    2398:	88 1f       	adc	r24, r24
    239a:	c2 f7       	brpl	.-16     	; 0x238c <__addsf3x+0x6e>
    239c:	0e c0       	rjmp	.+28     	; 0x23ba <__addsf3x+0x9c>
    239e:	ba 0f       	add	r27, r26
    23a0:	62 1f       	adc	r22, r18
    23a2:	73 1f       	adc	r23, r19
    23a4:	84 1f       	adc	r24, r20
    23a6:	48 f4       	brcc	.+18     	; 0x23ba <__addsf3x+0x9c>
    23a8:	87 95       	ror	r24
    23aa:	77 95       	ror	r23
    23ac:	67 95       	ror	r22
    23ae:	b7 95       	ror	r27
    23b0:	f7 95       	ror	r31
    23b2:	9e 3f       	cpi	r25, 0xFE	; 254
    23b4:	08 f0       	brcs	.+2      	; 0x23b8 <__addsf3x+0x9a>
    23b6:	b0 cf       	rjmp	.-160    	; 0x2318 <__addsf3+0x28>
    23b8:	93 95       	inc	r25
    23ba:	88 0f       	add	r24, r24
    23bc:	08 f0       	brcs	.+2      	; 0x23c0 <__addsf3x+0xa2>
    23be:	99 27       	eor	r25, r25
    23c0:	ee 0f       	add	r30, r30
    23c2:	97 95       	ror	r25
    23c4:	87 95       	ror	r24
    23c6:	08 95       	ret

000023c8 <__cmpsf2>:
    23c8:	0e 94 8a 12 	call	0x2514	; 0x2514 <__fp_cmp>
    23cc:	08 f4       	brcc	.+2      	; 0x23d0 <__cmpsf2+0x8>
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	08 95       	ret

000023d2 <__divsf3>:
    23d2:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__divsf3x>
    23d6:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__fp_round>
    23da:	0e 94 be 12 	call	0x257c	; 0x257c <__fp_pscB>
    23de:	58 f0       	brcs	.+22     	; 0x23f6 <__divsf3+0x24>
    23e0:	0e 94 b7 12 	call	0x256e	; 0x256e <__fp_pscA>
    23e4:	40 f0       	brcs	.+16     	; 0x23f6 <__divsf3+0x24>
    23e6:	29 f4       	brne	.+10     	; 0x23f2 <__divsf3+0x20>
    23e8:	5f 3f       	cpi	r21, 0xFF	; 255
    23ea:	29 f0       	breq	.+10     	; 0x23f6 <__divsf3+0x24>
    23ec:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__fp_inf>
    23f0:	51 11       	cpse	r21, r1
    23f2:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__fp_szero>
    23f6:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__fp_nan>

000023fa <__divsf3x>:
    23fa:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__fp_split3>
    23fe:	68 f3       	brcs	.-38     	; 0x23da <__divsf3+0x8>

00002400 <__divsf3_pse>:
    2400:	99 23       	and	r25, r25
    2402:	b1 f3       	breq	.-20     	; 0x23f0 <__divsf3+0x1e>
    2404:	55 23       	and	r21, r21
    2406:	91 f3       	breq	.-28     	; 0x23ec <__divsf3+0x1a>
    2408:	95 1b       	sub	r25, r21
    240a:	55 0b       	sbc	r21, r21
    240c:	bb 27       	eor	r27, r27
    240e:	aa 27       	eor	r26, r26
    2410:	62 17       	cp	r22, r18
    2412:	73 07       	cpc	r23, r19
    2414:	84 07       	cpc	r24, r20
    2416:	38 f0       	brcs	.+14     	; 0x2426 <__divsf3_pse+0x26>
    2418:	9f 5f       	subi	r25, 0xFF	; 255
    241a:	5f 4f       	sbci	r21, 0xFF	; 255
    241c:	22 0f       	add	r18, r18
    241e:	33 1f       	adc	r19, r19
    2420:	44 1f       	adc	r20, r20
    2422:	aa 1f       	adc	r26, r26
    2424:	a9 f3       	breq	.-22     	; 0x2410 <__divsf3_pse+0x10>
    2426:	35 d0       	rcall	.+106    	; 0x2492 <__divsf3_pse+0x92>
    2428:	0e 2e       	mov	r0, r30
    242a:	3a f0       	brmi	.+14     	; 0x243a <__divsf3_pse+0x3a>
    242c:	e0 e8       	ldi	r30, 0x80	; 128
    242e:	32 d0       	rcall	.+100    	; 0x2494 <__divsf3_pse+0x94>
    2430:	91 50       	subi	r25, 0x01	; 1
    2432:	50 40       	sbci	r21, 0x00	; 0
    2434:	e6 95       	lsr	r30
    2436:	00 1c       	adc	r0, r0
    2438:	ca f7       	brpl	.-14     	; 0x242c <__divsf3_pse+0x2c>
    243a:	2b d0       	rcall	.+86     	; 0x2492 <__divsf3_pse+0x92>
    243c:	fe 2f       	mov	r31, r30
    243e:	29 d0       	rcall	.+82     	; 0x2492 <__divsf3_pse+0x92>
    2440:	66 0f       	add	r22, r22
    2442:	77 1f       	adc	r23, r23
    2444:	88 1f       	adc	r24, r24
    2446:	bb 1f       	adc	r27, r27
    2448:	26 17       	cp	r18, r22
    244a:	37 07       	cpc	r19, r23
    244c:	48 07       	cpc	r20, r24
    244e:	ab 07       	cpc	r26, r27
    2450:	b0 e8       	ldi	r27, 0x80	; 128
    2452:	09 f0       	breq	.+2      	; 0x2456 <__divsf3_pse+0x56>
    2454:	bb 0b       	sbc	r27, r27
    2456:	80 2d       	mov	r24, r0
    2458:	bf 01       	movw	r22, r30
    245a:	ff 27       	eor	r31, r31
    245c:	93 58       	subi	r25, 0x83	; 131
    245e:	5f 4f       	sbci	r21, 0xFF	; 255
    2460:	3a f0       	brmi	.+14     	; 0x2470 <__divsf3_pse+0x70>
    2462:	9e 3f       	cpi	r25, 0xFE	; 254
    2464:	51 05       	cpc	r21, r1
    2466:	78 f0       	brcs	.+30     	; 0x2486 <__divsf3_pse+0x86>
    2468:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__fp_inf>
    246c:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__fp_szero>
    2470:	5f 3f       	cpi	r21, 0xFF	; 255
    2472:	e4 f3       	brlt	.-8      	; 0x246c <__divsf3_pse+0x6c>
    2474:	98 3e       	cpi	r25, 0xE8	; 232
    2476:	d4 f3       	brlt	.-12     	; 0x246c <__divsf3_pse+0x6c>
    2478:	86 95       	lsr	r24
    247a:	77 95       	ror	r23
    247c:	67 95       	ror	r22
    247e:	b7 95       	ror	r27
    2480:	f7 95       	ror	r31
    2482:	9f 5f       	subi	r25, 0xFF	; 255
    2484:	c9 f7       	brne	.-14     	; 0x2478 <__divsf3_pse+0x78>
    2486:	88 0f       	add	r24, r24
    2488:	91 1d       	adc	r25, r1
    248a:	96 95       	lsr	r25
    248c:	87 95       	ror	r24
    248e:	97 f9       	bld	r25, 7
    2490:	08 95       	ret
    2492:	e1 e0       	ldi	r30, 0x01	; 1
    2494:	66 0f       	add	r22, r22
    2496:	77 1f       	adc	r23, r23
    2498:	88 1f       	adc	r24, r24
    249a:	bb 1f       	adc	r27, r27
    249c:	62 17       	cp	r22, r18
    249e:	73 07       	cpc	r23, r19
    24a0:	84 07       	cpc	r24, r20
    24a2:	ba 07       	cpc	r27, r26
    24a4:	20 f0       	brcs	.+8      	; 0x24ae <__divsf3_pse+0xae>
    24a6:	62 1b       	sub	r22, r18
    24a8:	73 0b       	sbc	r23, r19
    24aa:	84 0b       	sbc	r24, r20
    24ac:	ba 0b       	sbc	r27, r26
    24ae:	ee 1f       	adc	r30, r30
    24b0:	88 f7       	brcc	.-30     	; 0x2494 <__divsf3_pse+0x94>
    24b2:	e0 95       	com	r30
    24b4:	08 95       	ret

000024b6 <__fixunssfsi>:
    24b6:	0e 94 de 12 	call	0x25bc	; 0x25bc <__fp_splitA>
    24ba:	88 f0       	brcs	.+34     	; 0x24de <__fixunssfsi+0x28>
    24bc:	9f 57       	subi	r25, 0x7F	; 127
    24be:	98 f0       	brcs	.+38     	; 0x24e6 <__fixunssfsi+0x30>
    24c0:	b9 2f       	mov	r27, r25
    24c2:	99 27       	eor	r25, r25
    24c4:	b7 51       	subi	r27, 0x17	; 23
    24c6:	b0 f0       	brcs	.+44     	; 0x24f4 <__fixunssfsi+0x3e>
    24c8:	e1 f0       	breq	.+56     	; 0x2502 <__fixunssfsi+0x4c>
    24ca:	66 0f       	add	r22, r22
    24cc:	77 1f       	adc	r23, r23
    24ce:	88 1f       	adc	r24, r24
    24d0:	99 1f       	adc	r25, r25
    24d2:	1a f0       	brmi	.+6      	; 0x24da <__fixunssfsi+0x24>
    24d4:	ba 95       	dec	r27
    24d6:	c9 f7       	brne	.-14     	; 0x24ca <__fixunssfsi+0x14>
    24d8:	14 c0       	rjmp	.+40     	; 0x2502 <__fixunssfsi+0x4c>
    24da:	b1 30       	cpi	r27, 0x01	; 1
    24dc:	91 f0       	breq	.+36     	; 0x2502 <__fixunssfsi+0x4c>
    24de:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <__fp_zero>
    24e2:	b1 e0       	ldi	r27, 0x01	; 1
    24e4:	08 95       	ret
    24e6:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__fp_zero>
    24ea:	67 2f       	mov	r22, r23
    24ec:	78 2f       	mov	r23, r24
    24ee:	88 27       	eor	r24, r24
    24f0:	b8 5f       	subi	r27, 0xF8	; 248
    24f2:	39 f0       	breq	.+14     	; 0x2502 <__fixunssfsi+0x4c>
    24f4:	b9 3f       	cpi	r27, 0xF9	; 249
    24f6:	cc f3       	brlt	.-14     	; 0x24ea <__fixunssfsi+0x34>
    24f8:	86 95       	lsr	r24
    24fa:	77 95       	ror	r23
    24fc:	67 95       	ror	r22
    24fe:	b3 95       	inc	r27
    2500:	d9 f7       	brne	.-10     	; 0x24f8 <__fixunssfsi+0x42>
    2502:	3e f4       	brtc	.+14     	; 0x2512 <__fixunssfsi+0x5c>
    2504:	90 95       	com	r25
    2506:	80 95       	com	r24
    2508:	70 95       	com	r23
    250a:	61 95       	neg	r22
    250c:	7f 4f       	sbci	r23, 0xFF	; 255
    250e:	8f 4f       	sbci	r24, 0xFF	; 255
    2510:	9f 4f       	sbci	r25, 0xFF	; 255
    2512:	08 95       	ret

00002514 <__fp_cmp>:
    2514:	99 0f       	add	r25, r25
    2516:	00 08       	sbc	r0, r0
    2518:	55 0f       	add	r21, r21
    251a:	aa 0b       	sbc	r26, r26
    251c:	e0 e8       	ldi	r30, 0x80	; 128
    251e:	fe ef       	ldi	r31, 0xFE	; 254
    2520:	16 16       	cp	r1, r22
    2522:	17 06       	cpc	r1, r23
    2524:	e8 07       	cpc	r30, r24
    2526:	f9 07       	cpc	r31, r25
    2528:	c0 f0       	brcs	.+48     	; 0x255a <__fp_cmp+0x46>
    252a:	12 16       	cp	r1, r18
    252c:	13 06       	cpc	r1, r19
    252e:	e4 07       	cpc	r30, r20
    2530:	f5 07       	cpc	r31, r21
    2532:	98 f0       	brcs	.+38     	; 0x255a <__fp_cmp+0x46>
    2534:	62 1b       	sub	r22, r18
    2536:	73 0b       	sbc	r23, r19
    2538:	84 0b       	sbc	r24, r20
    253a:	95 0b       	sbc	r25, r21
    253c:	39 f4       	brne	.+14     	; 0x254c <__fp_cmp+0x38>
    253e:	0a 26       	eor	r0, r26
    2540:	61 f0       	breq	.+24     	; 0x255a <__fp_cmp+0x46>
    2542:	23 2b       	or	r18, r19
    2544:	24 2b       	or	r18, r20
    2546:	25 2b       	or	r18, r21
    2548:	21 f4       	brne	.+8      	; 0x2552 <__fp_cmp+0x3e>
    254a:	08 95       	ret
    254c:	0a 26       	eor	r0, r26
    254e:	09 f4       	brne	.+2      	; 0x2552 <__fp_cmp+0x3e>
    2550:	a1 40       	sbci	r26, 0x01	; 1
    2552:	a6 95       	lsr	r26
    2554:	8f ef       	ldi	r24, 0xFF	; 255
    2556:	81 1d       	adc	r24, r1
    2558:	81 1d       	adc	r24, r1
    255a:	08 95       	ret

0000255c <__fp_inf>:
    255c:	97 f9       	bld	r25, 7
    255e:	9f 67       	ori	r25, 0x7F	; 127
    2560:	80 e8       	ldi	r24, 0x80	; 128
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	60 e0       	ldi	r22, 0x00	; 0
    2566:	08 95       	ret

00002568 <__fp_nan>:
    2568:	9f ef       	ldi	r25, 0xFF	; 255
    256a:	80 ec       	ldi	r24, 0xC0	; 192
    256c:	08 95       	ret

0000256e <__fp_pscA>:
    256e:	00 24       	eor	r0, r0
    2570:	0a 94       	dec	r0
    2572:	16 16       	cp	r1, r22
    2574:	17 06       	cpc	r1, r23
    2576:	18 06       	cpc	r1, r24
    2578:	09 06       	cpc	r0, r25
    257a:	08 95       	ret

0000257c <__fp_pscB>:
    257c:	00 24       	eor	r0, r0
    257e:	0a 94       	dec	r0
    2580:	12 16       	cp	r1, r18
    2582:	13 06       	cpc	r1, r19
    2584:	14 06       	cpc	r1, r20
    2586:	05 06       	cpc	r0, r21
    2588:	08 95       	ret

0000258a <__fp_round>:
    258a:	09 2e       	mov	r0, r25
    258c:	03 94       	inc	r0
    258e:	00 0c       	add	r0, r0
    2590:	11 f4       	brne	.+4      	; 0x2596 <__fp_round+0xc>
    2592:	88 23       	and	r24, r24
    2594:	52 f0       	brmi	.+20     	; 0x25aa <__fp_round+0x20>
    2596:	bb 0f       	add	r27, r27
    2598:	40 f4       	brcc	.+16     	; 0x25aa <__fp_round+0x20>
    259a:	bf 2b       	or	r27, r31
    259c:	11 f4       	brne	.+4      	; 0x25a2 <__fp_round+0x18>
    259e:	60 ff       	sbrs	r22, 0
    25a0:	04 c0       	rjmp	.+8      	; 0x25aa <__fp_round+0x20>
    25a2:	6f 5f       	subi	r22, 0xFF	; 255
    25a4:	7f 4f       	sbci	r23, 0xFF	; 255
    25a6:	8f 4f       	sbci	r24, 0xFF	; 255
    25a8:	9f 4f       	sbci	r25, 0xFF	; 255
    25aa:	08 95       	ret

000025ac <__fp_split3>:
    25ac:	57 fd       	sbrc	r21, 7
    25ae:	90 58       	subi	r25, 0x80	; 128
    25b0:	44 0f       	add	r20, r20
    25b2:	55 1f       	adc	r21, r21
    25b4:	59 f0       	breq	.+22     	; 0x25cc <__fp_splitA+0x10>
    25b6:	5f 3f       	cpi	r21, 0xFF	; 255
    25b8:	71 f0       	breq	.+28     	; 0x25d6 <__fp_splitA+0x1a>
    25ba:	47 95       	ror	r20

000025bc <__fp_splitA>:
    25bc:	88 0f       	add	r24, r24
    25be:	97 fb       	bst	r25, 7
    25c0:	99 1f       	adc	r25, r25
    25c2:	61 f0       	breq	.+24     	; 0x25dc <__fp_splitA+0x20>
    25c4:	9f 3f       	cpi	r25, 0xFF	; 255
    25c6:	79 f0       	breq	.+30     	; 0x25e6 <__fp_splitA+0x2a>
    25c8:	87 95       	ror	r24
    25ca:	08 95       	ret
    25cc:	12 16       	cp	r1, r18
    25ce:	13 06       	cpc	r1, r19
    25d0:	14 06       	cpc	r1, r20
    25d2:	55 1f       	adc	r21, r21
    25d4:	f2 cf       	rjmp	.-28     	; 0x25ba <__fp_split3+0xe>
    25d6:	46 95       	lsr	r20
    25d8:	f1 df       	rcall	.-30     	; 0x25bc <__fp_splitA>
    25da:	08 c0       	rjmp	.+16     	; 0x25ec <__fp_splitA+0x30>
    25dc:	16 16       	cp	r1, r22
    25de:	17 06       	cpc	r1, r23
    25e0:	18 06       	cpc	r1, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	f1 cf       	rjmp	.-30     	; 0x25c8 <__fp_splitA+0xc>
    25e6:	86 95       	lsr	r24
    25e8:	71 05       	cpc	r23, r1
    25ea:	61 05       	cpc	r22, r1
    25ec:	08 94       	sec
    25ee:	08 95       	ret

000025f0 <__fp_zero>:
    25f0:	e8 94       	clt

000025f2 <__fp_szero>:
    25f2:	bb 27       	eor	r27, r27
    25f4:	66 27       	eor	r22, r22
    25f6:	77 27       	eor	r23, r23
    25f8:	cb 01       	movw	r24, r22
    25fa:	97 f9       	bld	r25, 7
    25fc:	08 95       	ret

000025fe <__gesf2>:
    25fe:	0e 94 8a 12 	call	0x2514	; 0x2514 <__fp_cmp>
    2602:	08 f4       	brcc	.+2      	; 0x2606 <__gesf2+0x8>
    2604:	8f ef       	ldi	r24, 0xFF	; 255
    2606:	08 95       	ret

00002608 <__mulsf3>:
    2608:	0e 94 17 13 	call	0x262e	; 0x262e <__mulsf3x>
    260c:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__fp_round>
    2610:	0e 94 b7 12 	call	0x256e	; 0x256e <__fp_pscA>
    2614:	38 f0       	brcs	.+14     	; 0x2624 <__mulsf3+0x1c>
    2616:	0e 94 be 12 	call	0x257c	; 0x257c <__fp_pscB>
    261a:	20 f0       	brcs	.+8      	; 0x2624 <__mulsf3+0x1c>
    261c:	95 23       	and	r25, r21
    261e:	11 f0       	breq	.+4      	; 0x2624 <__mulsf3+0x1c>
    2620:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__fp_inf>
    2624:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__fp_nan>
    2628:	11 24       	eor	r1, r1
    262a:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__fp_szero>

0000262e <__mulsf3x>:
    262e:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__fp_split3>
    2632:	70 f3       	brcs	.-36     	; 0x2610 <__mulsf3+0x8>

00002634 <__mulsf3_pse>:
    2634:	95 9f       	mul	r25, r21
    2636:	c1 f3       	breq	.-16     	; 0x2628 <__mulsf3+0x20>
    2638:	95 0f       	add	r25, r21
    263a:	50 e0       	ldi	r21, 0x00	; 0
    263c:	55 1f       	adc	r21, r21
    263e:	62 9f       	mul	r22, r18
    2640:	f0 01       	movw	r30, r0
    2642:	72 9f       	mul	r23, r18
    2644:	bb 27       	eor	r27, r27
    2646:	f0 0d       	add	r31, r0
    2648:	b1 1d       	adc	r27, r1
    264a:	63 9f       	mul	r22, r19
    264c:	aa 27       	eor	r26, r26
    264e:	f0 0d       	add	r31, r0
    2650:	b1 1d       	adc	r27, r1
    2652:	aa 1f       	adc	r26, r26
    2654:	64 9f       	mul	r22, r20
    2656:	66 27       	eor	r22, r22
    2658:	b0 0d       	add	r27, r0
    265a:	a1 1d       	adc	r26, r1
    265c:	66 1f       	adc	r22, r22
    265e:	82 9f       	mul	r24, r18
    2660:	22 27       	eor	r18, r18
    2662:	b0 0d       	add	r27, r0
    2664:	a1 1d       	adc	r26, r1
    2666:	62 1f       	adc	r22, r18
    2668:	73 9f       	mul	r23, r19
    266a:	b0 0d       	add	r27, r0
    266c:	a1 1d       	adc	r26, r1
    266e:	62 1f       	adc	r22, r18
    2670:	83 9f       	mul	r24, r19
    2672:	a0 0d       	add	r26, r0
    2674:	61 1d       	adc	r22, r1
    2676:	22 1f       	adc	r18, r18
    2678:	74 9f       	mul	r23, r20
    267a:	33 27       	eor	r19, r19
    267c:	a0 0d       	add	r26, r0
    267e:	61 1d       	adc	r22, r1
    2680:	23 1f       	adc	r18, r19
    2682:	84 9f       	mul	r24, r20
    2684:	60 0d       	add	r22, r0
    2686:	21 1d       	adc	r18, r1
    2688:	82 2f       	mov	r24, r18
    268a:	76 2f       	mov	r23, r22
    268c:	6a 2f       	mov	r22, r26
    268e:	11 24       	eor	r1, r1
    2690:	9f 57       	subi	r25, 0x7F	; 127
    2692:	50 40       	sbci	r21, 0x00	; 0
    2694:	9a f0       	brmi	.+38     	; 0x26bc <__mulsf3_pse+0x88>
    2696:	f1 f0       	breq	.+60     	; 0x26d4 <__mulsf3_pse+0xa0>
    2698:	88 23       	and	r24, r24
    269a:	4a f0       	brmi	.+18     	; 0x26ae <__mulsf3_pse+0x7a>
    269c:	ee 0f       	add	r30, r30
    269e:	ff 1f       	adc	r31, r31
    26a0:	bb 1f       	adc	r27, r27
    26a2:	66 1f       	adc	r22, r22
    26a4:	77 1f       	adc	r23, r23
    26a6:	88 1f       	adc	r24, r24
    26a8:	91 50       	subi	r25, 0x01	; 1
    26aa:	50 40       	sbci	r21, 0x00	; 0
    26ac:	a9 f7       	brne	.-22     	; 0x2698 <__mulsf3_pse+0x64>
    26ae:	9e 3f       	cpi	r25, 0xFE	; 254
    26b0:	51 05       	cpc	r21, r1
    26b2:	80 f0       	brcs	.+32     	; 0x26d4 <__mulsf3_pse+0xa0>
    26b4:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__fp_inf>
    26b8:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__fp_szero>
    26bc:	5f 3f       	cpi	r21, 0xFF	; 255
    26be:	e4 f3       	brlt	.-8      	; 0x26b8 <__mulsf3_pse+0x84>
    26c0:	98 3e       	cpi	r25, 0xE8	; 232
    26c2:	d4 f3       	brlt	.-12     	; 0x26b8 <__mulsf3_pse+0x84>
    26c4:	86 95       	lsr	r24
    26c6:	77 95       	ror	r23
    26c8:	67 95       	ror	r22
    26ca:	b7 95       	ror	r27
    26cc:	f7 95       	ror	r31
    26ce:	e7 95       	ror	r30
    26d0:	9f 5f       	subi	r25, 0xFF	; 255
    26d2:	c1 f7       	brne	.-16     	; 0x26c4 <__mulsf3_pse+0x90>
    26d4:	fe 2b       	or	r31, r30
    26d6:	88 0f       	add	r24, r24
    26d8:	91 1d       	adc	r25, r1
    26da:	96 95       	lsr	r25
    26dc:	87 95       	ror	r24
    26de:	97 f9       	bld	r25, 7
    26e0:	08 95       	ret

000026e2 <strcat>:
    26e2:	fb 01       	movw	r30, r22
    26e4:	dc 01       	movw	r26, r24
    26e6:	0d 90       	ld	r0, X+
    26e8:	00 20       	and	r0, r0
    26ea:	e9 f7       	brne	.-6      	; 0x26e6 <strcat+0x4>
    26ec:	11 97       	sbiw	r26, 0x01	; 1
    26ee:	01 90       	ld	r0, Z+
    26f0:	0d 92       	st	X+, r0
    26f2:	00 20       	and	r0, r0
    26f4:	e1 f7       	brne	.-8      	; 0x26ee <strcat+0xc>
    26f6:	08 95       	ret

000026f8 <strcmp>:
    26f8:	fb 01       	movw	r30, r22
    26fa:	dc 01       	movw	r26, r24
    26fc:	8d 91       	ld	r24, X+
    26fe:	01 90       	ld	r0, Z+
    2700:	80 19       	sub	r24, r0
    2702:	01 10       	cpse	r0, r1
    2704:	d9 f3       	breq	.-10     	; 0x26fc <strcmp+0x4>
    2706:	99 0b       	sbc	r25, r25
    2708:	08 95       	ret

0000270a <itoa>:
    270a:	45 32       	cpi	r20, 0x25	; 37
    270c:	51 05       	cpc	r21, r1
    270e:	20 f4       	brcc	.+8      	; 0x2718 <itoa+0xe>
    2710:	42 30       	cpi	r20, 0x02	; 2
    2712:	10 f0       	brcs	.+4      	; 0x2718 <itoa+0xe>
    2714:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__itoa_ncheck>
    2718:	fb 01       	movw	r30, r22
    271a:	10 82       	st	Z, r1
    271c:	cb 01       	movw	r24, r22
    271e:	08 95       	ret

00002720 <__itoa_ncheck>:
    2720:	bb 27       	eor	r27, r27
    2722:	4a 30       	cpi	r20, 0x0A	; 10
    2724:	31 f4       	brne	.+12     	; 0x2732 <__itoa_ncheck+0x12>
    2726:	99 23       	and	r25, r25
    2728:	22 f4       	brpl	.+8      	; 0x2732 <__itoa_ncheck+0x12>
    272a:	bd e2       	ldi	r27, 0x2D	; 45
    272c:	90 95       	com	r25
    272e:	81 95       	neg	r24
    2730:	9f 4f       	sbci	r25, 0xFF	; 255
    2732:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__utoa_common>

00002736 <__utoa_ncheck>:
    2736:	bb 27       	eor	r27, r27

00002738 <__utoa_common>:
    2738:	fb 01       	movw	r30, r22
    273a:	55 27       	eor	r21, r21
    273c:	aa 27       	eor	r26, r26
    273e:	88 0f       	add	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	aa 1f       	adc	r26, r26
    2744:	a4 17       	cp	r26, r20
    2746:	10 f0       	brcs	.+4      	; 0x274c <__utoa_common+0x14>
    2748:	a4 1b       	sub	r26, r20
    274a:	83 95       	inc	r24
    274c:	50 51       	subi	r21, 0x10	; 16
    274e:	b9 f7       	brne	.-18     	; 0x273e <__utoa_common+0x6>
    2750:	a0 5d       	subi	r26, 0xD0	; 208
    2752:	aa 33       	cpi	r26, 0x3A	; 58
    2754:	08 f0       	brcs	.+2      	; 0x2758 <__utoa_common+0x20>
    2756:	a9 5d       	subi	r26, 0xD9	; 217
    2758:	a1 93       	st	Z+, r26
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	79 f7       	brne	.-34     	; 0x273c <__utoa_common+0x4>
    275e:	b1 11       	cpse	r27, r1
    2760:	b1 93       	st	Z+, r27
    2762:	11 92       	st	Z+, r1
    2764:	cb 01       	movw	r24, r22
    2766:	0c 94 b5 13 	jmp	0x276a	; 0x276a <strrev>

0000276a <strrev>:
    276a:	dc 01       	movw	r26, r24
    276c:	fc 01       	movw	r30, r24
    276e:	67 2f       	mov	r22, r23
    2770:	71 91       	ld	r23, Z+
    2772:	77 23       	and	r23, r23
    2774:	e1 f7       	brne	.-8      	; 0x276e <strrev+0x4>
    2776:	32 97       	sbiw	r30, 0x02	; 2
    2778:	04 c0       	rjmp	.+8      	; 0x2782 <strrev+0x18>
    277a:	7c 91       	ld	r23, X
    277c:	6d 93       	st	X+, r22
    277e:	70 83       	st	Z, r23
    2780:	62 91       	ld	r22, -Z
    2782:	ae 17       	cp	r26, r30
    2784:	bf 07       	cpc	r27, r31
    2786:	c8 f3       	brcs	.-14     	; 0x277a <strrev+0x10>
    2788:	08 95       	ret

0000278a <_exit>:
    278a:	f8 94       	cli

0000278c <__stop_program>:
    278c:	ff cf       	rjmp	.-2      	; 0x278c <__stop_program>
