
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  000022ae  00002342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b0  008000ce  008000ce  000023b0  2**0
                  ALLOC
  3 .stab         00002afc  00000000  00000000  000023b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001401  00000000  00000000  00004eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000062ad  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000062c0  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  000062fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  0000682a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00006d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  00006d2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 81 09 	jmp	0x1302	; 0x1302 <__vector_6>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__vector_9>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__vector_19>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	a1 01       	movw	r20, r2
      56:	a3 01       	movw	r20, r6
      58:	a5 01       	movw	r20, r10
      5a:	a7 01       	movw	r20, r14
      5c:	a9 01       	movw	r20, r18
      5e:	ab 01       	movw	r20, r22
      60:	ad 01       	movw	r20, r26
      62:	af 01       	movw	r20, r30
      64:	b1 01       	movw	r22, r2
      66:	b3 01       	movw	r22, r6
      68:	b5 01       	movw	r22, r10
      6a:	b7 01       	movw	r22, r14
      6c:	b9 01       	movw	r22, r18
      6e:	bb 01       	movw	r22, r22
      70:	bd 01       	movw	r22, r26
      72:	bf 01       	movw	r22, r30

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf e5       	ldi	r28, 0x5F	; 95
      7a:	d4 e0       	ldi	r29, 0x04	; 4
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	10 e0       	ldi	r17, 0x00	; 0
      82:	a0 e6       	ldi	r26, 0x60	; 96
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	ee ea       	ldi	r30, 0xAE	; 174
      88:	f2 e2       	ldi	r31, 0x22	; 34
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	ae 3c       	cpi	r26, 0xCE	; 206
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	21 e0       	ldi	r18, 0x01	; 1
      98:	ae ec       	ldi	r26, 0xCE	; 206
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	ae 37       	cpi	r26, 0x7E	; 126
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
      aa:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:
uint8 enter=1;
uint8 strrr[16]="hesham";
void intgerToString(int data);
UART_configurationType UART_config ;
int main()
{
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
      ba:	2e 97       	sbiw	r28, 0x0e	; 14
      bc:	0f b6       	in	r0, 0x3f	; 63
      be:	f8 94       	cli
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	0f be       	out	0x3f, r0	; 63
      c4:	cd bf       	out	0x3d, r28	; 61
	UART_config.buadRate=9600;
      c6:	80 e8       	ldi	r24, 0x80	; 128
      c8:	95 e2       	ldi	r25, 0x25	; 37
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <UART_config+0x1>
      d2:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <UART_config+0x2>
      d6:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <UART_config+0x3>
      da:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <UART_config+0x4>
	UART_config.character_size=8;
      de:	88 e0       	ldi	r24, 0x08	; 8
      e0:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <UART_config>
	strcpy(UART_config.mode,"double speed");
      e4:	8d e0       	ldi	r24, 0x0D	; 13
      e6:	e1 e7       	ldi	r30, 0x71	; 113
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	ac e4       	ldi	r26, 0x4C	; 76
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 90       	ld	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	8a 95       	dec	r24
      f4:	e1 f7       	brne	.-8      	; 0xee <main+0x3c>

LCD_init();
      f6:	0e 94 c5 01 	call	0x38a	; 0x38a <LCD_init>
UART_init(&UART_config);
      fa:	87 e4       	ldi	r24, 0x47	; 71
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	0e 94 c7 0c 	call	0x198e	; 0x198e <UART_init>
//UART_sendString("hesham");
while(1)
{


	key =KeyPad_getPressedKey();
     102:	0e 94 31 01 	call	0x262	; 0x262 <KeyPad_getPressedKey>
     106:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__data_end>

	while(enter==1)
     10a:	86 c0       	rjmp	.+268    	; 0x218 <main+0x166>
	{
	key =KeyPad_getPressedKey();
     10c:	0e 94 31 01 	call	0x262	; 0x262 <KeyPad_getPressedKey>
     110:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__data_end>
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	a8 ec       	ldi	r26, 0xC8	; 200
     11a:	b3 e4       	ldi	r27, 0x43	; 67
     11c:	89 83       	std	Y+1, r24	; 0x01
     11e:	9a 83       	std	Y+2, r25	; 0x02
     120:	ab 83       	std	Y+3, r26	; 0x03
     122:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	4a ef       	ldi	r20, 0xFA	; 250
     12a:	54 e4       	ldi	r21, 0x44	; 68
     12c:	69 81       	ldd	r22, Y+1	; 0x01
     12e:	7a 81       	ldd	r23, Y+2	; 0x02
     130:	8b 81       	ldd	r24, Y+3	; 0x03
     132:	9c 81       	ldd	r25, Y+4	; 0x04
     134:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     138:	dc 01       	movw	r26, r24
     13a:	cb 01       	movw	r24, r22
     13c:	8d 83       	std	Y+5, r24	; 0x05
     13e:	9e 83       	std	Y+6, r25	; 0x06
     140:	af 83       	std	Y+7, r26	; 0x07
     142:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	40 e8       	ldi	r20, 0x80	; 128
     14a:	5f e3       	ldi	r21, 0x3F	; 63
     14c:	6d 81       	ldd	r22, Y+5	; 0x05
     14e:	7e 81       	ldd	r23, Y+6	; 0x06
     150:	8f 81       	ldd	r24, Y+7	; 0x07
     152:	98 85       	ldd	r25, Y+8	; 0x08
     154:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__cmpsf2>
     158:	88 23       	and	r24, r24
     15a:	2c f4       	brge	.+10     	; 0x166 <main+0xb4>
		__ticks = 1;
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	9a 87       	std	Y+10, r25	; 0x0a
     162:	89 87       	std	Y+9, r24	; 0x09
     164:	3f c0       	rjmp	.+126    	; 0x1e4 <main+0x132>
	else if (__tmp > 65535)
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	3f ef       	ldi	r19, 0xFF	; 255
     16a:	4f e7       	ldi	r20, 0x7F	; 127
     16c:	57 e4       	ldi	r21, 0x47	; 71
     16e:	6d 81       	ldd	r22, Y+5	; 0x05
     170:	7e 81       	ldd	r23, Y+6	; 0x06
     172:	8f 81       	ldd	r24, Y+7	; 0x07
     174:	98 85       	ldd	r25, Y+8	; 0x08
     176:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
     17a:	18 16       	cp	r1, r24
     17c:	4c f5       	brge	.+82     	; 0x1d0 <main+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	40 e2       	ldi	r20, 0x20	; 32
     184:	51 e4       	ldi	r21, 0x41	; 65
     186:	69 81       	ldd	r22, Y+1	; 0x01
     188:	7a 81       	ldd	r23, Y+2	; 0x02
     18a:	8b 81       	ldd	r24, Y+3	; 0x03
     18c:	9c 81       	ldd	r25, Y+4	; 0x04
     18e:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     192:	dc 01       	movw	r26, r24
     194:	cb 01       	movw	r24, r22
     196:	bc 01       	movw	r22, r24
     198:	cd 01       	movw	r24, r26
     19a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     19e:	dc 01       	movw	r26, r24
     1a0:	cb 01       	movw	r24, r22
     1a2:	9a 87       	std	Y+10, r25	; 0x0a
     1a4:	89 87       	std	Y+9, r24	; 0x09
     1a6:	0f c0       	rjmp	.+30     	; 0x1c6 <main+0x114>
     1a8:	88 ec       	ldi	r24, 0xC8	; 200
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	9c 87       	std	Y+12, r25	; 0x0c
     1ae:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     1b2:	9c 85       	ldd	r25, Y+12	; 0x0c
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0x102>
     1b8:	9c 87       	std	Y+12, r25	; 0x0c
     1ba:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1bc:	89 85       	ldd	r24, Y+9	; 0x09
     1be:	9a 85       	ldd	r25, Y+10	; 0x0a
     1c0:	01 97       	sbiw	r24, 0x01	; 1
     1c2:	9a 87       	std	Y+10, r25	; 0x0a
     1c4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1c6:	89 85       	ldd	r24, Y+9	; 0x09
     1c8:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ca:	89 2b       	or	r24, r25
     1cc:	69 f7       	brne	.-38     	; 0x1a8 <main+0xf6>
     1ce:	14 c0       	rjmp	.+40     	; 0x1f8 <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1d0:	6d 81       	ldd	r22, Y+5	; 0x05
     1d2:	7e 81       	ldd	r23, Y+6	; 0x06
     1d4:	8f 81       	ldd	r24, Y+7	; 0x07
     1d6:	98 85       	ldd	r25, Y+8	; 0x08
     1d8:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     1dc:	dc 01       	movw	r26, r24
     1de:	cb 01       	movw	r24, r22
     1e0:	9a 87       	std	Y+10, r25	; 0x0a
     1e2:	89 87       	std	Y+9, r24	; 0x09
     1e4:	89 85       	ldd	r24, Y+9	; 0x09
     1e6:	9a 85       	ldd	r25, Y+10	; 0x0a
     1e8:	9e 87       	std	Y+14, r25	; 0x0e
     1ea:	8d 87       	std	Y+13, r24	; 0x0d
     1ec:	8d 85       	ldd	r24, Y+13	; 0x0d
     1ee:	9e 85       	ldd	r25, Y+14	; 0x0e
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <main+0x13e>
     1f4:	9e 87       	std	Y+14, r25	; 0x0e
     1f6:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(400);
	if(key==13)
     1f8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__data_end>
     1fc:	8d 30       	cpi	r24, 0x0D	; 13
     1fe:	91 f0       	breq	.+36     	; 0x224 <main+0x172>
		break;
	intgerToString(key);
     200:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__data_end>
     204:	88 2f       	mov	r24, r24
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 1c 01 	call	0x238	; 0x238 <intgerToString>
	strcat(str,buff);
     20c:	67 e3       	ldi	r22, 0x37	; 55
     20e:	71 e0       	ldi	r23, 0x01	; 1
     210:	8f ec       	ldi	r24, 0xCF	; 207
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 01 11 	call	0x2202	; 0x2202 <strcat>
{


	key =KeyPad_getPressedKey();

	while(enter==1)
     218:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     21c:	81 30       	cpi	r24, 0x01	; 1
     21e:	09 f4       	brne	.+2      	; 0x222 <main+0x170>
     220:	75 cf       	rjmp	.-278    	; 0x10c <main+0x5a>
     222:	01 c0       	rjmp	.+2      	; 0x226 <main+0x174>
	{
	key =KeyPad_getPressedKey();
	_delay_ms(400);
	if(key==13)
		break;
     224:	00 00       	nop
	intgerToString(key);
	strcat(str,buff);
	}
	LCD_displayString(str);
     226:	8f ec       	ldi	r24, 0xCF	; 207
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <LCD_displayString>
	UART_sendString(str);
     22e:	8f ec       	ldi	r24, 0xCF	; 207
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <UART_sendString>
}
     236:	65 cf       	rjmp	.-310    	; 0x102 <main+0x50>

00000238 <intgerToString>:
}
void intgerToString(int data)
{
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	00 d0       	rcall	.+0      	; 0x23e <intgerToString+0x6>
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	9a 83       	std	Y+2, r25	; 0x02
     244:	89 83       	std	Y+1, r24	; 0x01
	/* buffer to hold acii result */
	itoa(data,buff,10); /* 10 for decimal base */
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	9a 81       	ldd	r25, Y+2	; 0x02
     24a:	4a e0       	ldi	r20, 0x0A	; 10
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	67 e3       	ldi	r22, 0x37	; 55
     250:	71 e0       	ldi	r23, 0x01	; 1
     252:	0e 94 15 11 	call	0x222a	; 0x222a <itoa>
}
     256:	00 00       	nop
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	08 95       	ret

00000262 <KeyPad_getPressedKey>:
/***************************************************************
 * 					function definition 						*
 * *************************************************************
 */

uint8 KeyPad_getPressedKey(void) {
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	00 d0       	rcall	.+0      	; 0x268 <KeyPad_getPressedKey+0x6>
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1)
	{
	for (col = 0; col < N_COL; col++) {
     26c:	1a 82       	std	Y+2, r1	; 0x02
     26e:	44 c0       	rjmp	.+136    	; 0x2f8 <KeyPad_getPressedKey+0x96>
		/* set the specified column in this trace output pin and the first 4 pins as input */
		KEYPAD_PORT_DIR = (0b00010000 << col);
     270:	8a e3       	ldi	r24, 0x3A	; 58
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	2a 81       	ldd	r18, Y+2	; 0x02
     276:	42 2f       	mov	r20, r18
     278:	50 e0       	ldi	r21, 0x00	; 0
     27a:	20 e1       	ldi	r18, 0x10	; 16
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	02 c0       	rjmp	.+4      	; 0x284 <KeyPad_getPressedKey+0x22>
     280:	22 0f       	add	r18, r18
     282:	33 1f       	adc	r19, r19
     284:	4a 95       	dec	r20
     286:	e2 f7       	brpl	.-8      	; 0x280 <KeyPad_getPressedKey+0x1e>
     288:	fc 01       	movw	r30, r24
     28a:	20 83       	st	Z, r18
		/* put on the specified column in this trace output pin 0 and  make the first 4 pins as pull up */
		KEYPAD_PORT_OUT = (~(0b00010000 << col));
     28c:	8b e3       	ldi	r24, 0x3B	; 59
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	2a 81       	ldd	r18, Y+2	; 0x02
     292:	42 2f       	mov	r20, r18
     294:	50 e0       	ldi	r21, 0x00	; 0
     296:	20 e1       	ldi	r18, 0x10	; 16
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <KeyPad_getPressedKey+0x3e>
     29c:	22 0f       	add	r18, r18
     29e:	33 1f       	adc	r19, r19
     2a0:	4a 95       	dec	r20
     2a2:	e2 f7       	brpl	.-8      	; 0x29c <KeyPad_getPressedKey+0x3a>
     2a4:	20 95       	com	r18
     2a6:	fc 01       	movw	r30, r24
     2a8:	20 83       	st	Z, r18
		for (row = 0; row < N_ROW; row++) /* loop for rows */
     2aa:	19 82       	std	Y+1, r1	; 0x01
     2ac:	1f c0       	rjmp	.+62     	; 0x2ec <KeyPad_getPressedKey+0x8a>
		{
			if (BIT_IS_CLEAR(KEYPAD_PORT_IN, row))/* if the switch is pressed in this row */
     2ae:	89 e3       	ldi	r24, 0x39	; 57
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	fc 01       	movw	r30, r24
     2b4:	80 81       	ld	r24, Z
     2b6:	88 2f       	mov	r24, r24
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	29 81       	ldd	r18, Y+1	; 0x01
     2bc:	22 2f       	mov	r18, r18
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <KeyPad_getPressedKey+0x64>
     2c2:	95 95       	asr	r25
     2c4:	87 95       	ror	r24
     2c6:	2a 95       	dec	r18
     2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <KeyPad_getPressedKey+0x60>
     2ca:	81 70       	andi	r24, 0x01	; 1
     2cc:	99 27       	eor	r25, r25
     2ce:	89 2b       	or	r24, r25
     2d0:	51 f4       	brne	.+20     	; 0x2e6 <KeyPad_getPressedKey+0x84>
			{
				#if(N_COL==3)
				return KeyPad_4x3_adjustSwitchNumber((row * N_COL) + col + 1);
				#elif(N_COL==4)
				return KeyPad_4x4_adjustSwitchNumber((row * N_COL) + col + 1);
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	98 2f       	mov	r25, r24
     2d6:	99 0f       	add	r25, r25
     2d8:	99 0f       	add	r25, r25
     2da:	8a 81       	ldd	r24, Y+2	; 0x02
     2dc:	89 0f       	add	r24, r25
     2de:	8f 5f       	subi	r24, 0xFF	; 255
     2e0:	0e 94 86 01 	call	0x30c	; 0x30c <KeyPad_4x4_adjustSwitchNumber>
     2e4:	0e c0       	rjmp	.+28     	; 0x302 <KeyPad_getPressedKey+0xa0>
	for (col = 0; col < N_COL; col++) {
		/* set the specified column in this trace output pin and the first 4 pins as input */
		KEYPAD_PORT_DIR = (0b00010000 << col);
		/* put on the specified column in this trace output pin 0 and  make the first 4 pins as pull up */
		KEYPAD_PORT_OUT = (~(0b00010000 << col));
		for (row = 0; row < N_ROW; row++) /* loop for rows */
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	8f 5f       	subi	r24, 0xFF	; 255
     2ea:	89 83       	std	Y+1, r24	; 0x01
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	84 30       	cpi	r24, 0x04	; 4
     2f0:	f0 f2       	brcs	.-68     	; 0x2ae <KeyPad_getPressedKey+0x4c>

uint8 KeyPad_getPressedKey(void) {
	uint8 row, col;
	while(1)
	{
	for (col = 0; col < N_COL; col++) {
     2f2:	8a 81       	ldd	r24, Y+2	; 0x02
     2f4:	8f 5f       	subi	r24, 0xFF	; 255
     2f6:	8a 83       	std	Y+2, r24	; 0x02
     2f8:	8a 81       	ldd	r24, Y+2	; 0x02
     2fa:	84 30       	cpi	r24, 0x04	; 4
     2fc:	08 f4       	brcc	.+2      	; 0x300 <KeyPad_getPressedKey+0x9e>
     2fe:	b8 cf       	rjmp	.-144    	; 0x270 <KeyPad_getPressedKey+0xe>
				#endif
			}
		}
	}

}
     300:	b5 cf       	rjmp	.-150    	; 0x26c <KeyPad_getPressedKey+0xa>
}
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <KeyPad_4x4_adjustSwitchNumber>:
 }


#elif(N_COL==4)

static uint8 KeyPad_4x4_adjustSwitchNumber(uint8 a_number) {
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	1f 92       	push	r1
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
     316:	89 83       	std	Y+1, r24	; 0x01
	switch (a_number) {
     318:	89 81       	ldd	r24, Y+1	; 0x01
     31a:	88 2f       	mov	r24, r24
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	09 2e       	mov	r0, r25
     320:	00 0c       	add	r0, r0
     322:	aa 0b       	sbc	r26, r26
     324:	bb 0b       	sbc	r27, r27
     326:	41 e0       	ldi	r20, 0x01	; 1
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	2f e0       	ldi	r18, 0x0F	; 15
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	84 1b       	sub	r24, r20
     330:	95 0b       	sbc	r25, r21
     332:	28 17       	cp	r18, r24
     334:	39 07       	cpc	r19, r25
     336:	28 f1       	brcs	.+74     	; 0x382 <KeyPad_4x4_adjustSwitchNumber+0x76>
     338:	86 5d       	subi	r24, 0xD6	; 214
     33a:	9f 4f       	sbci	r25, 0xFF	; 255
     33c:	fc 01       	movw	r30, r24
     33e:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <__tablejump2__>
	case 1:
		return 7;
     342:	87 e0       	ldi	r24, 0x07	; 7
     344:	1e c0       	rjmp	.+60     	; 0x382 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 2:
		return 8;
     346:	88 e0       	ldi	r24, 0x08	; 8
     348:	1c c0       	rjmp	.+56     	; 0x382 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 3:
		return 9;
     34a:	89 e0       	ldi	r24, 0x09	; 9
     34c:	1a c0       	rjmp	.+52     	; 0x382 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 4:
		return '/';
     34e:	8f e2       	ldi	r24, 0x2F	; 47
     350:	18 c0       	rjmp	.+48     	; 0x382 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 5:
		return 4;
     352:	84 e0       	ldi	r24, 0x04	; 4
     354:	16 c0       	rjmp	.+44     	; 0x382 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 6:
		return 5;
     356:	85 e0       	ldi	r24, 0x05	; 5
     358:	14 c0       	rjmp	.+40     	; 0x382 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 7:
		return 6;
     35a:	86 e0       	ldi	r24, 0x06	; 6
     35c:	12 c0       	rjmp	.+36     	; 0x382 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 8:
		return '*';
     35e:	8a e2       	ldi	r24, 0x2A	; 42
     360:	10 c0       	rjmp	.+32     	; 0x382 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 9:
		return 1;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	0e c0       	rjmp	.+28     	; 0x382 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 10:
		return 2;
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	0c c0       	rjmp	.+24     	; 0x382 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 11:
		return 3;
     36a:	83 e0       	ldi	r24, 0x03	; 3
     36c:	0a c0       	rjmp	.+20     	; 0x382 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 12:
		return '-';
     36e:	8d e2       	ldi	r24, 0x2D	; 45
     370:	08 c0       	rjmp	.+16     	; 0x382 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 13:
		return 13;
     372:	8d e0       	ldi	r24, 0x0D	; 13
     374:	06 c0       	rjmp	.+12     	; 0x382 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 14:
		return 0;
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	04 c0       	rjmp	.+8      	; 0x382 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 15:
		return '=';
     37a:	8d e3       	ldi	r24, 0x3D	; 61
     37c:	02 c0       	rjmp	.+4      	; 0x382 <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 16:
		return '+';
     37e:	8b e2       	ldi	r24, 0x2B	; 43
     380:	00 c0       	rjmp	.+0      	; 0x382 <KeyPad_4x4_adjustSwitchNumber+0x76>

	}
}
     382:	0f 90       	pop	r0
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <LCD_init>:
 * 								Functions Definitions				   *
 ***********************************************************************
 */

void LCD_init(void)
{
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
LCD_CTRL_PORT_DIR |=(1<<4)|(1<<5)|(1<<6);/* configure control port pins(RS ,R/W ,ENABLE) AS OUTPUT*/
     392:	81 e3       	ldi	r24, 0x31	; 49
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	21 e3       	ldi	r18, 0x31	; 49
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	f9 01       	movw	r30, r18
     39c:	20 81       	ld	r18, Z
     39e:	20 67       	ori	r18, 0x70	; 112
     3a0:	fc 01       	movw	r30, r24
     3a2:	20 83       	st	Z, r18
LCD_DATA_PORT_DIR=0XFF; /* configure the data port as output port */
     3a4:	84 e3       	ldi	r24, 0x34	; 52
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	2f ef       	ldi	r18, 0xFF	; 255
     3aa:	fc 01       	movw	r30, r24
     3ac:	20 83       	st	Z, r18
LCD_sendCommand(FUNCTION_SET_8_BIT_2LINE); /* using 2 lines + LCD 8 bit mode + 5*7 dot  display mode*/
     3ae:	88 e3       	ldi	r24, 0x38	; 56
     3b0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_sendCommand>
LCD_sendCommand(DISPLAY_CURSOR_OFF);
     3b4:	8c e0       	ldi	r24, 0x0C	; 12
     3b6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_sendCommand>
LCD_sendCommand(CLEAR_COMMAND);
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_sendCommand>

}
     3c0:	00 00       	nop
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	e9 97       	sbiw	r28, 0x39	; 57
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
     3dc:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS);/* instruction mode RS =0*/
     3de:	82 e3       	ldi	r24, 0x32	; 50
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	22 e3       	ldi	r18, 0x32	; 50
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	f9 01       	movw	r30, r18
     3e8:	20 81       	ld	r18, Z
     3ea:	2f 7e       	andi	r18, 0xEF	; 239
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_PORT,READWRITE); /* write data to LCD so readwrite=0*/
     3f0:	82 e3       	ldi	r24, 0x32	; 50
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	22 e3       	ldi	r18, 0x32	; 50
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	f9 01       	movw	r30, r18
     3fa:	20 81       	ld	r18, Z
     3fc:	2f 7d       	andi	r18, 0xDF	; 223
     3fe:	fc 01       	movw	r30, r24
     400:	20 83       	st	Z, r18
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	a0 e8       	ldi	r26, 0x80	; 128
     408:	bf e3       	ldi	r27, 0x3F	; 63
     40a:	89 83       	std	Y+1, r24	; 0x01
     40c:	9a 83       	std	Y+2, r25	; 0x02
     40e:	ab 83       	std	Y+3, r26	; 0x03
     410:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	4a ef       	ldi	r20, 0xFA	; 250
     418:	54 e4       	ldi	r21, 0x44	; 68
     41a:	69 81       	ldd	r22, Y+1	; 0x01
     41c:	7a 81       	ldd	r23, Y+2	; 0x02
     41e:	8b 81       	ldd	r24, Y+3	; 0x03
     420:	9c 81       	ldd	r25, Y+4	; 0x04
     422:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     426:	dc 01       	movw	r26, r24
     428:	cb 01       	movw	r24, r22
     42a:	8f a7       	std	Y+47, r24	; 0x2f
     42c:	98 ab       	std	Y+48, r25	; 0x30
     42e:	a9 ab       	std	Y+49, r26	; 0x31
     430:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	40 e8       	ldi	r20, 0x80	; 128
     438:	5f e3       	ldi	r21, 0x3F	; 63
     43a:	6f a5       	ldd	r22, Y+47	; 0x2f
     43c:	78 a9       	ldd	r23, Y+48	; 0x30
     43e:	89 a9       	ldd	r24, Y+49	; 0x31
     440:	9a a9       	ldd	r25, Y+50	; 0x32
     442:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__cmpsf2>
     446:	88 23       	and	r24, r24
     448:	2c f4       	brge	.+10     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		__ticks = 1;
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	9c ab       	std	Y+52, r25	; 0x34
     450:	8b ab       	std	Y+51, r24	; 0x33
     452:	3f c0       	rjmp	.+126    	; 0x4d2 <__stack+0x73>
	else if (__tmp > 65535)
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	3f ef       	ldi	r19, 0xFF	; 255
     458:	4f e7       	ldi	r20, 0x7F	; 127
     45a:	57 e4       	ldi	r21, 0x47	; 71
     45c:	6f a5       	ldd	r22, Y+47	; 0x2f
     45e:	78 a9       	ldd	r23, Y+48	; 0x30
     460:	89 a9       	ldd	r24, Y+49	; 0x31
     462:	9a a9       	ldd	r25, Y+50	; 0x32
     464:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
     468:	18 16       	cp	r1, r24
     46a:	4c f5       	brge	.+82     	; 0x4be <__stack+0x5f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	40 e2       	ldi	r20, 0x20	; 32
     472:	51 e4       	ldi	r21, 0x41	; 65
     474:	69 81       	ldd	r22, Y+1	; 0x01
     476:	7a 81       	ldd	r23, Y+2	; 0x02
     478:	8b 81       	ldd	r24, Y+3	; 0x03
     47a:	9c 81       	ldd	r25, Y+4	; 0x04
     47c:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	bc 01       	movw	r22, r24
     486:	cd 01       	movw	r24, r26
     488:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     48c:	dc 01       	movw	r26, r24
     48e:	cb 01       	movw	r24, r22
     490:	9c ab       	std	Y+52, r25	; 0x34
     492:	8b ab       	std	Y+51, r24	; 0x33
     494:	0f c0       	rjmp	.+30     	; 0x4b4 <__stack+0x55>
     496:	88 ec       	ldi	r24, 0xC8	; 200
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	9e ab       	std	Y+54, r25	; 0x36
     49c:	8d ab       	std	Y+53, r24	; 0x35
     49e:	8d a9       	ldd	r24, Y+53	; 0x35
     4a0:	9e a9       	ldd	r25, Y+54	; 0x36
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	f1 f7       	brne	.-4      	; 0x4a2 <__stack+0x43>
     4a6:	9e ab       	std	Y+54, r25	; 0x36
     4a8:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4aa:	8b a9       	ldd	r24, Y+51	; 0x33
     4ac:	9c a9       	ldd	r25, Y+52	; 0x34
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	9c ab       	std	Y+52, r25	; 0x34
     4b2:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4b4:	8b a9       	ldd	r24, Y+51	; 0x33
     4b6:	9c a9       	ldd	r25, Y+52	; 0x34
     4b8:	89 2b       	or	r24, r25
     4ba:	69 f7       	brne	.-38     	; 0x496 <__stack+0x37>
     4bc:	14 c0       	rjmp	.+40     	; 0x4e6 <__stack+0x87>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4be:	6f a5       	ldd	r22, Y+47	; 0x2f
     4c0:	78 a9       	ldd	r23, Y+48	; 0x30
     4c2:	89 a9       	ldd	r24, Y+49	; 0x31
     4c4:	9a a9       	ldd	r25, Y+50	; 0x32
     4c6:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     4ca:	dc 01       	movw	r26, r24
     4cc:	cb 01       	movw	r24, r22
     4ce:	9c ab       	std	Y+52, r25	; 0x34
     4d0:	8b ab       	std	Y+51, r24	; 0x33
     4d2:	8b a9       	ldd	r24, Y+51	; 0x33
     4d4:	9c a9       	ldd	r25, Y+52	; 0x34
     4d6:	98 af       	std	Y+56, r25	; 0x38
     4d8:	8f ab       	std	Y+55, r24	; 0x37
     4da:	8f a9       	ldd	r24, Y+55	; 0x37
     4dc:	98 ad       	ldd	r25, Y+56	; 0x38
     4de:	01 97       	sbiw	r24, 0x01	; 1
     4e0:	f1 f7       	brne	.-4      	; 0x4de <__stack+0x7f>
     4e2:	98 af       	std	Y+56, r25	; 0x38
     4e4:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1);/* delay for prossing tas=50ns*/
	SET_BIT(LCD_CTRL_PORT,LCD_ENABLE); /*enable LCD so enable pin =1*/
     4e6:	82 e3       	ldi	r24, 0x32	; 50
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	22 e3       	ldi	r18, 0x32	; 50
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	f9 01       	movw	r30, r18
     4f0:	20 81       	ld	r18, Z
     4f2:	20 64       	ori	r18, 0x40	; 64
     4f4:	fc 01       	movw	r30, r24
     4f6:	20 83       	st	Z, r18
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	a0 e8       	ldi	r26, 0x80	; 128
     4fe:	bf e3       	ldi	r27, 0x3F	; 63
     500:	8d 83       	std	Y+5, r24	; 0x05
     502:	9e 83       	std	Y+6, r25	; 0x06
     504:	af 83       	std	Y+7, r26	; 0x07
     506:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	4a ef       	ldi	r20, 0xFA	; 250
     50e:	54 e4       	ldi	r21, 0x44	; 68
     510:	6d 81       	ldd	r22, Y+5	; 0x05
     512:	7e 81       	ldd	r23, Y+6	; 0x06
     514:	8f 81       	ldd	r24, Y+7	; 0x07
     516:	98 85       	ldd	r25, Y+8	; 0x08
     518:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     51c:	dc 01       	movw	r26, r24
     51e:	cb 01       	movw	r24, r22
     520:	8d a3       	std	Y+37, r24	; 0x25
     522:	9e a3       	std	Y+38, r25	; 0x26
     524:	af a3       	std	Y+39, r26	; 0x27
     526:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	40 e8       	ldi	r20, 0x80	; 128
     52e:	5f e3       	ldi	r21, 0x3F	; 63
     530:	6d a1       	ldd	r22, Y+37	; 0x25
     532:	7e a1       	ldd	r23, Y+38	; 0x26
     534:	8f a1       	ldd	r24, Y+39	; 0x27
     536:	98 a5       	ldd	r25, Y+40	; 0x28
     538:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__cmpsf2>
     53c:	88 23       	and	r24, r24
     53e:	2c f4       	brge	.+10     	; 0x54a <__stack+0xeb>
		__ticks = 1;
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	9a a7       	std	Y+42, r25	; 0x2a
     546:	89 a7       	std	Y+41, r24	; 0x29
     548:	3f c0       	rjmp	.+126    	; 0x5c8 <__stack+0x169>
	else if (__tmp > 65535)
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	3f ef       	ldi	r19, 0xFF	; 255
     54e:	4f e7       	ldi	r20, 0x7F	; 127
     550:	57 e4       	ldi	r21, 0x47	; 71
     552:	6d a1       	ldd	r22, Y+37	; 0x25
     554:	7e a1       	ldd	r23, Y+38	; 0x26
     556:	8f a1       	ldd	r24, Y+39	; 0x27
     558:	98 a5       	ldd	r25, Y+40	; 0x28
     55a:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
     55e:	18 16       	cp	r1, r24
     560:	4c f5       	brge	.+82     	; 0x5b4 <__stack+0x155>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	40 e2       	ldi	r20, 0x20	; 32
     568:	51 e4       	ldi	r21, 0x41	; 65
     56a:	6d 81       	ldd	r22, Y+5	; 0x05
     56c:	7e 81       	ldd	r23, Y+6	; 0x06
     56e:	8f 81       	ldd	r24, Y+7	; 0x07
     570:	98 85       	ldd	r25, Y+8	; 0x08
     572:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     576:	dc 01       	movw	r26, r24
     578:	cb 01       	movw	r24, r22
     57a:	bc 01       	movw	r22, r24
     57c:	cd 01       	movw	r24, r26
     57e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     582:	dc 01       	movw	r26, r24
     584:	cb 01       	movw	r24, r22
     586:	9a a7       	std	Y+42, r25	; 0x2a
     588:	89 a7       	std	Y+41, r24	; 0x29
     58a:	0f c0       	rjmp	.+30     	; 0x5aa <__stack+0x14b>
     58c:	88 ec       	ldi	r24, 0xC8	; 200
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	9c a7       	std	Y+44, r25	; 0x2c
     592:	8b a7       	std	Y+43, r24	; 0x2b
     594:	8b a5       	ldd	r24, Y+43	; 0x2b
     596:	9c a5       	ldd	r25, Y+44	; 0x2c
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	f1 f7       	brne	.-4      	; 0x598 <__stack+0x139>
     59c:	9c a7       	std	Y+44, r25	; 0x2c
     59e:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a0:	89 a5       	ldd	r24, Y+41	; 0x29
     5a2:	9a a5       	ldd	r25, Y+42	; 0x2a
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	9a a7       	std	Y+42, r25	; 0x2a
     5a8:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5aa:	89 a5       	ldd	r24, Y+41	; 0x29
     5ac:	9a a5       	ldd	r25, Y+42	; 0x2a
     5ae:	89 2b       	or	r24, r25
     5b0:	69 f7       	brne	.-38     	; 0x58c <__stack+0x12d>
     5b2:	14 c0       	rjmp	.+40     	; 0x5dc <__stack+0x17d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5b4:	6d a1       	ldd	r22, Y+37	; 0x25
     5b6:	7e a1       	ldd	r23, Y+38	; 0x26
     5b8:	8f a1       	ldd	r24, Y+39	; 0x27
     5ba:	98 a5       	ldd	r25, Y+40	; 0x28
     5bc:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     5c0:	dc 01       	movw	r26, r24
     5c2:	cb 01       	movw	r24, r22
     5c4:	9a a7       	std	Y+42, r25	; 0x2a
     5c6:	89 a7       	std	Y+41, r24	; 0x29
     5c8:	89 a5       	ldd	r24, Y+41	; 0x29
     5ca:	9a a5       	ldd	r25, Y+42	; 0x2a
     5cc:	9e a7       	std	Y+46, r25	; 0x2e
     5ce:	8d a7       	std	Y+45, r24	; 0x2d
     5d0:	8d a5       	ldd	r24, Y+45	; 0x2d
     5d2:	9e a5       	ldd	r25, Y+46	; 0x2e
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <__stack+0x175>
     5d8:	9e a7       	std	Y+46, r25	; 0x2e
     5da:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(1); /*delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT=command;/* out the required command to the data bus D0--->D7*/
     5dc:	85 e3       	ldi	r24, 0x35	; 53
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	29 ad       	ldd	r18, Y+57	; 0x39
     5e2:	fc 01       	movw	r30, r24
     5e4:	20 83       	st	Z, r18
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	a0 e8       	ldi	r26, 0x80	; 128
     5ec:	bf e3       	ldi	r27, 0x3F	; 63
     5ee:	89 87       	std	Y+9, r24	; 0x09
     5f0:	9a 87       	std	Y+10, r25	; 0x0a
     5f2:	ab 87       	std	Y+11, r26	; 0x0b
     5f4:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	4a ef       	ldi	r20, 0xFA	; 250
     5fc:	54 e4       	ldi	r21, 0x44	; 68
     5fe:	69 85       	ldd	r22, Y+9	; 0x09
     600:	7a 85       	ldd	r23, Y+10	; 0x0a
     602:	8b 85       	ldd	r24, Y+11	; 0x0b
     604:	9c 85       	ldd	r25, Y+12	; 0x0c
     606:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     60a:	dc 01       	movw	r26, r24
     60c:	cb 01       	movw	r24, r22
     60e:	8b 8f       	std	Y+27, r24	; 0x1b
     610:	9c 8f       	std	Y+28, r25	; 0x1c
     612:	ad 8f       	std	Y+29, r26	; 0x1d
     614:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	40 e8       	ldi	r20, 0x80	; 128
     61c:	5f e3       	ldi	r21, 0x3F	; 63
     61e:	6b 8d       	ldd	r22, Y+27	; 0x1b
     620:	7c 8d       	ldd	r23, Y+28	; 0x1c
     622:	8d 8d       	ldd	r24, Y+29	; 0x1d
     624:	9e 8d       	ldd	r25, Y+30	; 0x1e
     626:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__cmpsf2>
     62a:	88 23       	and	r24, r24
     62c:	2c f4       	brge	.+10     	; 0x638 <__stack+0x1d9>
		__ticks = 1;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	98 a3       	std	Y+32, r25	; 0x20
     634:	8f 8f       	std	Y+31, r24	; 0x1f
     636:	3f c0       	rjmp	.+126    	; 0x6b6 <__stack+0x257>
	else if (__tmp > 65535)
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	3f ef       	ldi	r19, 0xFF	; 255
     63c:	4f e7       	ldi	r20, 0x7F	; 127
     63e:	57 e4       	ldi	r21, 0x47	; 71
     640:	6b 8d       	ldd	r22, Y+27	; 0x1b
     642:	7c 8d       	ldd	r23, Y+28	; 0x1c
     644:	8d 8d       	ldd	r24, Y+29	; 0x1d
     646:	9e 8d       	ldd	r25, Y+30	; 0x1e
     648:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
     64c:	18 16       	cp	r1, r24
     64e:	4c f5       	brge	.+82     	; 0x6a2 <__stack+0x243>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	40 e2       	ldi	r20, 0x20	; 32
     656:	51 e4       	ldi	r21, 0x41	; 65
     658:	69 85       	ldd	r22, Y+9	; 0x09
     65a:	7a 85       	ldd	r23, Y+10	; 0x0a
     65c:	8b 85       	ldd	r24, Y+11	; 0x0b
     65e:	9c 85       	ldd	r25, Y+12	; 0x0c
     660:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     664:	dc 01       	movw	r26, r24
     666:	cb 01       	movw	r24, r22
     668:	bc 01       	movw	r22, r24
     66a:	cd 01       	movw	r24, r26
     66c:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     670:	dc 01       	movw	r26, r24
     672:	cb 01       	movw	r24, r22
     674:	98 a3       	std	Y+32, r25	; 0x20
     676:	8f 8f       	std	Y+31, r24	; 0x1f
     678:	0f c0       	rjmp	.+30     	; 0x698 <__stack+0x239>
     67a:	88 ec       	ldi	r24, 0xC8	; 200
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	9a a3       	std	Y+34, r25	; 0x22
     680:	89 a3       	std	Y+33, r24	; 0x21
     682:	89 a1       	ldd	r24, Y+33	; 0x21
     684:	9a a1       	ldd	r25, Y+34	; 0x22
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <__stack+0x227>
     68a:	9a a3       	std	Y+34, r25	; 0x22
     68c:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     68e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     690:	98 a1       	ldd	r25, Y+32	; 0x20
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	98 a3       	std	Y+32, r25	; 0x20
     696:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     698:	8f 8d       	ldd	r24, Y+31	; 0x1f
     69a:	98 a1       	ldd	r25, Y+32	; 0x20
     69c:	89 2b       	or	r24, r25
     69e:	69 f7       	brne	.-38     	; 0x67a <__stack+0x21b>
     6a0:	14 c0       	rjmp	.+40     	; 0x6ca <__stack+0x26b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6a2:	6b 8d       	ldd	r22, Y+27	; 0x1b
     6a4:	7c 8d       	ldd	r23, Y+28	; 0x1c
     6a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     6a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     6aa:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     6ae:	dc 01       	movw	r26, r24
     6b0:	cb 01       	movw	r24, r22
     6b2:	98 a3       	std	Y+32, r25	; 0x20
     6b4:	8f 8f       	std	Y+31, r24	; 0x1f
     6b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     6b8:	98 a1       	ldd	r25, Y+32	; 0x20
     6ba:	9c a3       	std	Y+36, r25	; 0x24
     6bc:	8b a3       	std	Y+35, r24	; 0x23
     6be:	8b a1       	ldd	r24, Y+35	; 0x23
     6c0:	9c a1       	ldd	r25, Y+36	; 0x24
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <__stack+0x263>
     6c6:	9c a3       	std	Y+36, r25	; 0x24
     6c8:	8b a3       	std	Y+35, r24	; 0x23
	_delay_ms(1);/* delay for processing command setup time tdsw =60ns */
	CLEAR_BIT(LCD_CTRL_PORT,LCD_ENABLE); /* disable LCD so enable pin =0 */
     6ca:	82 e3       	ldi	r24, 0x32	; 50
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	22 e3       	ldi	r18, 0x32	; 50
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	f9 01       	movw	r30, r18
     6d4:	20 81       	ld	r18, Z
     6d6:	2f 7b       	andi	r18, 0xBF	; 191
     6d8:	fc 01       	movw	r30, r24
     6da:	20 83       	st	Z, r18
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	a0 e8       	ldi	r26, 0x80	; 128
     6e2:	bf e3       	ldi	r27, 0x3F	; 63
     6e4:	8d 87       	std	Y+13, r24	; 0x0d
     6e6:	9e 87       	std	Y+14, r25	; 0x0e
     6e8:	af 87       	std	Y+15, r26	; 0x0f
     6ea:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	4a ef       	ldi	r20, 0xFA	; 250
     6f2:	54 e4       	ldi	r21, 0x44	; 68
     6f4:	6d 85       	ldd	r22, Y+13	; 0x0d
     6f6:	7e 85       	ldd	r23, Y+14	; 0x0e
     6f8:	8f 85       	ldd	r24, Y+15	; 0x0f
     6fa:	98 89       	ldd	r25, Y+16	; 0x10
     6fc:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     700:	dc 01       	movw	r26, r24
     702:	cb 01       	movw	r24, r22
     704:	89 8b       	std	Y+17, r24	; 0x11
     706:	9a 8b       	std	Y+18, r25	; 0x12
     708:	ab 8b       	std	Y+19, r26	; 0x13
     70a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	40 e8       	ldi	r20, 0x80	; 128
     712:	5f e3       	ldi	r21, 0x3F	; 63
     714:	69 89       	ldd	r22, Y+17	; 0x11
     716:	7a 89       	ldd	r23, Y+18	; 0x12
     718:	8b 89       	ldd	r24, Y+19	; 0x13
     71a:	9c 89       	ldd	r25, Y+20	; 0x14
     71c:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__cmpsf2>
     720:	88 23       	and	r24, r24
     722:	2c f4       	brge	.+10     	; 0x72e <__stack+0x2cf>
		__ticks = 1;
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	9e 8b       	std	Y+22, r25	; 0x16
     72a:	8d 8b       	std	Y+21, r24	; 0x15
     72c:	3f c0       	rjmp	.+126    	; 0x7ac <__stack+0x34d>
	else if (__tmp > 65535)
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	3f ef       	ldi	r19, 0xFF	; 255
     732:	4f e7       	ldi	r20, 0x7F	; 127
     734:	57 e4       	ldi	r21, 0x47	; 71
     736:	69 89       	ldd	r22, Y+17	; 0x11
     738:	7a 89       	ldd	r23, Y+18	; 0x12
     73a:	8b 89       	ldd	r24, Y+19	; 0x13
     73c:	9c 89       	ldd	r25, Y+20	; 0x14
     73e:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
     742:	18 16       	cp	r1, r24
     744:	4c f5       	brge	.+82     	; 0x798 <__stack+0x339>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	40 e2       	ldi	r20, 0x20	; 32
     74c:	51 e4       	ldi	r21, 0x41	; 65
     74e:	6d 85       	ldd	r22, Y+13	; 0x0d
     750:	7e 85       	ldd	r23, Y+14	; 0x0e
     752:	8f 85       	ldd	r24, Y+15	; 0x0f
     754:	98 89       	ldd	r25, Y+16	; 0x10
     756:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     75a:	dc 01       	movw	r26, r24
     75c:	cb 01       	movw	r24, r22
     75e:	bc 01       	movw	r22, r24
     760:	cd 01       	movw	r24, r26
     762:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     766:	dc 01       	movw	r26, r24
     768:	cb 01       	movw	r24, r22
     76a:	9e 8b       	std	Y+22, r25	; 0x16
     76c:	8d 8b       	std	Y+21, r24	; 0x15
     76e:	0f c0       	rjmp	.+30     	; 0x78e <__stack+0x32f>
     770:	88 ec       	ldi	r24, 0xC8	; 200
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	98 8f       	std	Y+24, r25	; 0x18
     776:	8f 8b       	std	Y+23, r24	; 0x17
     778:	8f 89       	ldd	r24, Y+23	; 0x17
     77a:	98 8d       	ldd	r25, Y+24	; 0x18
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <__stack+0x31d>
     780:	98 8f       	std	Y+24, r25	; 0x18
     782:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     784:	8d 89       	ldd	r24, Y+21	; 0x15
     786:	9e 89       	ldd	r25, Y+22	; 0x16
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	9e 8b       	std	Y+22, r25	; 0x16
     78c:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     78e:	8d 89       	ldd	r24, Y+21	; 0x15
     790:	9e 89       	ldd	r25, Y+22	; 0x16
     792:	89 2b       	or	r24, r25
     794:	69 f7       	brne	.-38     	; 0x770 <__stack+0x311>
	_delay_ms(1); /* delay for processing hold time th=10ns */

}
     796:	14 c0       	rjmp	.+40     	; 0x7c0 <__stack+0x361>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     798:	69 89       	ldd	r22, Y+17	; 0x11
     79a:	7a 89       	ldd	r23, Y+18	; 0x12
     79c:	8b 89       	ldd	r24, Y+19	; 0x13
     79e:	9c 89       	ldd	r25, Y+20	; 0x14
     7a0:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     7a4:	dc 01       	movw	r26, r24
     7a6:	cb 01       	movw	r24, r22
     7a8:	9e 8b       	std	Y+22, r25	; 0x16
     7aa:	8d 8b       	std	Y+21, r24	; 0x15
     7ac:	8d 89       	ldd	r24, Y+21	; 0x15
     7ae:	9e 89       	ldd	r25, Y+22	; 0x16
     7b0:	9a 8f       	std	Y+26, r25	; 0x1a
     7b2:	89 8f       	std	Y+25, r24	; 0x19
     7b4:	89 8d       	ldd	r24, Y+25	; 0x19
     7b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <__stack+0x359>
     7bc:	9a 8f       	std	Y+26, r25	; 0x1a
     7be:	89 8f       	std	Y+25, r24	; 0x19
     7c0:	00 00       	nop
     7c2:	e9 96       	adiw	r28, 0x39	; 57
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	cd bf       	out	0x3d, r28	; 61
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	08 95       	ret

000007d4 <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data)
{
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	cb 56       	subi	r28, 0x6B	; 107
     7e2:	d1 09       	sbc	r29, r1
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	cd bf       	out	0x3d, r28	; 61
     7ee:	9e 01       	movw	r18, r28
     7f0:	25 59       	subi	r18, 0x95	; 149
     7f2:	3f 4f       	sbci	r19, 0xFF	; 255
     7f4:	f9 01       	movw	r30, r18
     7f6:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* data mode so RS =1*/
     7f8:	82 e3       	ldi	r24, 0x32	; 50
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	22 e3       	ldi	r18, 0x32	; 50
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	f9 01       	movw	r30, r18
     802:	20 81       	ld	r18, Z
     804:	20 61       	ori	r18, 0x10	; 16
     806:	fc 01       	movw	r30, r24
     808:	20 83       	st	Z, r18
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	a0 e8       	ldi	r26, 0x80	; 128
     810:	bf e3       	ldi	r27, 0x3F	; 63
     812:	89 83       	std	Y+1, r24	; 0x01
     814:	9a 83       	std	Y+2, r25	; 0x02
     816:	ab 83       	std	Y+3, r26	; 0x03
     818:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     81a:	8e 01       	movw	r16, r28
     81c:	01 5b       	subi	r16, 0xB1	; 177
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	2b ea       	ldi	r18, 0xAB	; 171
     822:	3a ea       	ldi	r19, 0xAA	; 170
     824:	4a e2       	ldi	r20, 0x2A	; 42
     826:	50 e4       	ldi	r21, 0x40	; 64
     828:	69 81       	ldd	r22, Y+1	; 0x01
     82a:	7a 81       	ldd	r23, Y+2	; 0x02
     82c:	8b 81       	ldd	r24, Y+3	; 0x03
     82e:	9c 81       	ldd	r25, Y+4	; 0x04
     830:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     834:	dc 01       	movw	r26, r24
     836:	cb 01       	movw	r24, r22
     838:	f8 01       	movw	r30, r16
     83a:	80 83       	st	Z, r24
     83c:	91 83       	std	Z+1, r25	; 0x01
     83e:	a2 83       	std	Z+2, r26	; 0x02
     840:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     842:	8e 01       	movw	r16, r28
     844:	0d 5a       	subi	r16, 0xAD	; 173
     846:	1f 4f       	sbci	r17, 0xFF	; 255
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	9a 81       	ldd	r25, Y+2	; 0x02
     84c:	ab 81       	ldd	r26, Y+3	; 0x03
     84e:	bc 81       	ldd	r27, Y+4	; 0x04
     850:	9c 01       	movw	r18, r24
     852:	ad 01       	movw	r20, r26
     854:	bc 01       	movw	r22, r24
     856:	cd 01       	movw	r24, r26
     858:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__addsf3>
     85c:	dc 01       	movw	r26, r24
     85e:	cb 01       	movw	r24, r22
     860:	f8 01       	movw	r30, r16
     862:	80 83       	st	Z, r24
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	a2 83       	std	Z+2, r26	; 0x02
     868:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     86a:	ce 01       	movw	r24, r28
     86c:	81 5b       	subi	r24, 0xB1	; 177
     86e:	9f 4f       	sbci	r25, 0xFF	; 255
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	40 e8       	ldi	r20, 0x80	; 128
     876:	5f e3       	ldi	r21, 0x3F	; 63
     878:	fc 01       	movw	r30, r24
     87a:	60 81       	ld	r22, Z
     87c:	71 81       	ldd	r23, Z+1	; 0x01
     87e:	82 81       	ldd	r24, Z+2	; 0x02
     880:	93 81       	ldd	r25, Z+3	; 0x03
     882:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__cmpsf2>
     886:	88 23       	and	r24, r24
     888:	3c f4       	brge	.+14     	; 0x898 <LCD_displayCharacter+0xc4>
		__ticks = 1;
     88a:	ce 01       	movw	r24, r28
     88c:	89 5a       	subi	r24, 0xA9	; 169
     88e:	9f 4f       	sbci	r25, 0xFF	; 255
     890:	21 e0       	ldi	r18, 0x01	; 1
     892:	fc 01       	movw	r30, r24
     894:	20 83       	st	Z, r18
     896:	2c c1       	rjmp	.+600    	; 0xaf0 <LCD_displayCharacter+0x31c>
	else if (__tmp2 > 65535)
     898:	ce 01       	movw	r24, r28
     89a:	8d 5a       	subi	r24, 0xAD	; 173
     89c:	9f 4f       	sbci	r25, 0xFF	; 255
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	3f ef       	ldi	r19, 0xFF	; 255
     8a2:	4f e7       	ldi	r20, 0x7F	; 127
     8a4:	57 e4       	ldi	r21, 0x47	; 71
     8a6:	fc 01       	movw	r30, r24
     8a8:	60 81       	ld	r22, Z
     8aa:	71 81       	ldd	r23, Z+1	; 0x01
     8ac:	82 81       	ldd	r24, Z+2	; 0x02
     8ae:	93 81       	ldd	r25, Z+3	; 0x03
     8b0:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
     8b4:	18 16       	cp	r1, r24
     8b6:	0c f0       	brlt	.+2      	; 0x8ba <LCD_displayCharacter+0xe6>
     8b8:	cd c0       	rjmp	.+410    	; 0xa54 <LCD_displayCharacter+0x280>
	{
		_delay_ms(__us / 1000.0);
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	4a e7       	ldi	r20, 0x7A	; 122
     8c0:	54 e4       	ldi	r21, 0x44	; 68
     8c2:	69 81       	ldd	r22, Y+1	; 0x01
     8c4:	7a 81       	ldd	r23, Y+2	; 0x02
     8c6:	8b 81       	ldd	r24, Y+3	; 0x03
     8c8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ca:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__divsf3>
     8ce:	dc 01       	movw	r26, r24
     8d0:	cb 01       	movw	r24, r22
     8d2:	9e 01       	movw	r18, r28
     8d4:	28 5a       	subi	r18, 0xA8	; 168
     8d6:	3f 4f       	sbci	r19, 0xFF	; 255
     8d8:	f9 01       	movw	r30, r18
     8da:	80 83       	st	Z, r24
     8dc:	91 83       	std	Z+1, r25	; 0x01
     8de:	a2 83       	std	Z+2, r26	; 0x02
     8e0:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8e2:	8e 01       	movw	r16, r28
     8e4:	04 5a       	subi	r16, 0xA4	; 164
     8e6:	1f 4f       	sbci	r17, 0xFF	; 255
     8e8:	ce 01       	movw	r24, r28
     8ea:	88 5a       	subi	r24, 0xA8	; 168
     8ec:	9f 4f       	sbci	r25, 0xFF	; 255
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	4a ef       	ldi	r20, 0xFA	; 250
     8f4:	54 e4       	ldi	r21, 0x44	; 68
     8f6:	fc 01       	movw	r30, r24
     8f8:	60 81       	ld	r22, Z
     8fa:	71 81       	ldd	r23, Z+1	; 0x01
     8fc:	82 81       	ldd	r24, Z+2	; 0x02
     8fe:	93 81       	ldd	r25, Z+3	; 0x03
     900:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     904:	dc 01       	movw	r26, r24
     906:	cb 01       	movw	r24, r22
     908:	f8 01       	movw	r30, r16
     90a:	80 83       	st	Z, r24
     90c:	91 83       	std	Z+1, r25	; 0x01
     90e:	a2 83       	std	Z+2, r26	; 0x02
     910:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     912:	ce 01       	movw	r24, r28
     914:	84 5a       	subi	r24, 0xA4	; 164
     916:	9f 4f       	sbci	r25, 0xFF	; 255
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	40 e8       	ldi	r20, 0x80	; 128
     91e:	5f e3       	ldi	r21, 0x3F	; 63
     920:	fc 01       	movw	r30, r24
     922:	60 81       	ld	r22, Z
     924:	71 81       	ldd	r23, Z+1	; 0x01
     926:	82 81       	ldd	r24, Z+2	; 0x02
     928:	93 81       	ldd	r25, Z+3	; 0x03
     92a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__cmpsf2>
     92e:	88 23       	and	r24, r24
     930:	4c f4       	brge	.+18     	; 0x944 <LCD_displayCharacter+0x170>
		__ticks = 1;
     932:	ce 01       	movw	r24, r28
     934:	80 5a       	subi	r24, 0xA0	; 160
     936:	9f 4f       	sbci	r25, 0xFF	; 255
     938:	21 e0       	ldi	r18, 0x01	; 1
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	fc 01       	movw	r30, r24
     93e:	31 83       	std	Z+1, r19	; 0x01
     940:	20 83       	st	Z, r18
     942:	6d c0       	rjmp	.+218    	; 0xa1e <LCD_displayCharacter+0x24a>
	else if (__tmp > 65535)
     944:	ce 01       	movw	r24, r28
     946:	84 5a       	subi	r24, 0xA4	; 164
     948:	9f 4f       	sbci	r25, 0xFF	; 255
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	3f ef       	ldi	r19, 0xFF	; 255
     94e:	4f e7       	ldi	r20, 0x7F	; 127
     950:	57 e4       	ldi	r21, 0x47	; 71
     952:	fc 01       	movw	r30, r24
     954:	60 81       	ld	r22, Z
     956:	71 81       	ldd	r23, Z+1	; 0x01
     958:	82 81       	ldd	r24, Z+2	; 0x02
     95a:	93 81       	ldd	r25, Z+3	; 0x03
     95c:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
     960:	18 16       	cp	r1, r24
     962:	0c f0       	brlt	.+2      	; 0x966 <LCD_displayCharacter+0x192>
     964:	4a c0       	rjmp	.+148    	; 0x9fa <LCD_displayCharacter+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     966:	ce 01       	movw	r24, r28
     968:	88 5a       	subi	r24, 0xA8	; 168
     96a:	9f 4f       	sbci	r25, 0xFF	; 255
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	40 e2       	ldi	r20, 0x20	; 32
     972:	51 e4       	ldi	r21, 0x41	; 65
     974:	fc 01       	movw	r30, r24
     976:	60 81       	ld	r22, Z
     978:	71 81       	ldd	r23, Z+1	; 0x01
     97a:	82 81       	ldd	r24, Z+2	; 0x02
     97c:	93 81       	ldd	r25, Z+3	; 0x03
     97e:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     982:	dc 01       	movw	r26, r24
     984:	cb 01       	movw	r24, r22
     986:	8e 01       	movw	r16, r28
     988:	00 5a       	subi	r16, 0xA0	; 160
     98a:	1f 4f       	sbci	r17, 0xFF	; 255
     98c:	bc 01       	movw	r22, r24
     98e:	cd 01       	movw	r24, r26
     990:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     994:	dc 01       	movw	r26, r24
     996:	cb 01       	movw	r24, r22
     998:	f8 01       	movw	r30, r16
     99a:	91 83       	std	Z+1, r25	; 0x01
     99c:	80 83       	st	Z, r24
     99e:	24 c0       	rjmp	.+72     	; 0x9e8 <LCD_displayCharacter+0x214>
     9a0:	ce 01       	movw	r24, r28
     9a2:	8e 59       	subi	r24, 0x9E	; 158
     9a4:	9f 4f       	sbci	r25, 0xFF	; 255
     9a6:	28 ec       	ldi	r18, 0xC8	; 200
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	fc 01       	movw	r30, r24
     9ac:	31 83       	std	Z+1, r19	; 0x01
     9ae:	20 83       	st	Z, r18
     9b0:	ce 01       	movw	r24, r28
     9b2:	8e 59       	subi	r24, 0x9E	; 158
     9b4:	9f 4f       	sbci	r25, 0xFF	; 255
     9b6:	fc 01       	movw	r30, r24
     9b8:	80 81       	ld	r24, Z
     9ba:	91 81       	ldd	r25, Z+1	; 0x01
     9bc:	01 97       	sbiw	r24, 0x01	; 1
     9be:	f1 f7       	brne	.-4      	; 0x9bc <LCD_displayCharacter+0x1e8>
     9c0:	9e 01       	movw	r18, r28
     9c2:	2e 59       	subi	r18, 0x9E	; 158
     9c4:	3f 4f       	sbci	r19, 0xFF	; 255
     9c6:	f9 01       	movw	r30, r18
     9c8:	91 83       	std	Z+1, r25	; 0x01
     9ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9cc:	ce 01       	movw	r24, r28
     9ce:	80 5a       	subi	r24, 0xA0	; 160
     9d0:	9f 4f       	sbci	r25, 0xFF	; 255
     9d2:	9e 01       	movw	r18, r28
     9d4:	20 5a       	subi	r18, 0xA0	; 160
     9d6:	3f 4f       	sbci	r19, 0xFF	; 255
     9d8:	f9 01       	movw	r30, r18
     9da:	20 81       	ld	r18, Z
     9dc:	31 81       	ldd	r19, Z+1	; 0x01
     9de:	21 50       	subi	r18, 0x01	; 1
     9e0:	31 09       	sbc	r19, r1
     9e2:	fc 01       	movw	r30, r24
     9e4:	31 83       	std	Z+1, r19	; 0x01
     9e6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9e8:	ce 01       	movw	r24, r28
     9ea:	80 5a       	subi	r24, 0xA0	; 160
     9ec:	9f 4f       	sbci	r25, 0xFF	; 255
     9ee:	fc 01       	movw	r30, r24
     9f0:	80 81       	ld	r24, Z
     9f2:	91 81       	ldd	r25, Z+1	; 0x01
     9f4:	89 2b       	or	r24, r25
     9f6:	a1 f6       	brne	.-88     	; 0x9a0 <LCD_displayCharacter+0x1cc>
     9f8:	7b c0       	rjmp	.+246    	; 0xaf0 <LCD_displayCharacter+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9fa:	8e 01       	movw	r16, r28
     9fc:	00 5a       	subi	r16, 0xA0	; 160
     9fe:	1f 4f       	sbci	r17, 0xFF	; 255
     a00:	ce 01       	movw	r24, r28
     a02:	84 5a       	subi	r24, 0xA4	; 164
     a04:	9f 4f       	sbci	r25, 0xFF	; 255
     a06:	fc 01       	movw	r30, r24
     a08:	60 81       	ld	r22, Z
     a0a:	71 81       	ldd	r23, Z+1	; 0x01
     a0c:	82 81       	ldd	r24, Z+2	; 0x02
     a0e:	93 81       	ldd	r25, Z+3	; 0x03
     a10:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     a14:	dc 01       	movw	r26, r24
     a16:	cb 01       	movw	r24, r22
     a18:	f8 01       	movw	r30, r16
     a1a:	91 83       	std	Z+1, r25	; 0x01
     a1c:	80 83       	st	Z, r24
     a1e:	ce 01       	movw	r24, r28
     a20:	8c 59       	subi	r24, 0x9C	; 156
     a22:	9f 4f       	sbci	r25, 0xFF	; 255
     a24:	9e 01       	movw	r18, r28
     a26:	20 5a       	subi	r18, 0xA0	; 160
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	f9 01       	movw	r30, r18
     a2c:	20 81       	ld	r18, Z
     a2e:	31 81       	ldd	r19, Z+1	; 0x01
     a30:	fc 01       	movw	r30, r24
     a32:	31 83       	std	Z+1, r19	; 0x01
     a34:	20 83       	st	Z, r18
     a36:	ce 01       	movw	r24, r28
     a38:	8c 59       	subi	r24, 0x9C	; 156
     a3a:	9f 4f       	sbci	r25, 0xFF	; 255
     a3c:	fc 01       	movw	r30, r24
     a3e:	80 81       	ld	r24, Z
     a40:	91 81       	ldd	r25, Z+1	; 0x01
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	f1 f7       	brne	.-4      	; 0xa42 <LCD_displayCharacter+0x26e>
     a46:	9e 01       	movw	r18, r28
     a48:	2c 59       	subi	r18, 0x9C	; 156
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	f9 01       	movw	r30, r18
     a4e:	91 83       	std	Z+1, r25	; 0x01
     a50:	80 83       	st	Z, r24
     a52:	4e c0       	rjmp	.+156    	; 0xaf0 <LCD_displayCharacter+0x31c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     a54:	ce 01       	movw	r24, r28
     a56:	81 5b       	subi	r24, 0xB1	; 177
     a58:	9f 4f       	sbci	r25, 0xFF	; 255
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	4f e7       	ldi	r20, 0x7F	; 127
     a60:	53 e4       	ldi	r21, 0x43	; 67
     a62:	fc 01       	movw	r30, r24
     a64:	60 81       	ld	r22, Z
     a66:	71 81       	ldd	r23, Z+1	; 0x01
     a68:	82 81       	ldd	r24, Z+2	; 0x02
     a6a:	93 81       	ldd	r25, Z+3	; 0x03
     a6c:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
     a70:	18 16       	cp	r1, r24
     a72:	6c f5       	brge	.+90     	; 0xace <LCD_displayCharacter+0x2fa>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     a74:	8e 01       	movw	r16, r28
     a76:	0a 59       	subi	r16, 0x9A	; 154
     a78:	1f 4f       	sbci	r17, 0xFF	; 255
     a7a:	ce 01       	movw	r24, r28
     a7c:	8d 5a       	subi	r24, 0xAD	; 173
     a7e:	9f 4f       	sbci	r25, 0xFF	; 255
     a80:	fc 01       	movw	r30, r24
     a82:	60 81       	ld	r22, Z
     a84:	71 81       	ldd	r23, Z+1	; 0x01
     a86:	82 81       	ldd	r24, Z+2	; 0x02
     a88:	93 81       	ldd	r25, Z+3	; 0x03
     a8a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     a8e:	dc 01       	movw	r26, r24
     a90:	cb 01       	movw	r24, r22
     a92:	f8 01       	movw	r30, r16
     a94:	91 83       	std	Z+1, r25	; 0x01
     a96:	80 83       	st	Z, r24
     a98:	ce 01       	movw	r24, r28
     a9a:	88 59       	subi	r24, 0x98	; 152
     a9c:	9f 4f       	sbci	r25, 0xFF	; 255
     a9e:	9e 01       	movw	r18, r28
     aa0:	2a 59       	subi	r18, 0x9A	; 154
     aa2:	3f 4f       	sbci	r19, 0xFF	; 255
     aa4:	f9 01       	movw	r30, r18
     aa6:	20 81       	ld	r18, Z
     aa8:	31 81       	ldd	r19, Z+1	; 0x01
     aaa:	fc 01       	movw	r30, r24
     aac:	31 83       	std	Z+1, r19	; 0x01
     aae:	20 83       	st	Z, r18
     ab0:	ce 01       	movw	r24, r28
     ab2:	88 59       	subi	r24, 0x98	; 152
     ab4:	9f 4f       	sbci	r25, 0xFF	; 255
     ab6:	fc 01       	movw	r30, r24
     ab8:	80 81       	ld	r24, Z
     aba:	91 81       	ldd	r25, Z+1	; 0x01
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	f1 f7       	brne	.-4      	; 0xabc <LCD_displayCharacter+0x2e8>
     ac0:	9e 01       	movw	r18, r28
     ac2:	28 59       	subi	r18, 0x98	; 152
     ac4:	3f 4f       	sbci	r19, 0xFF	; 255
     ac6:	f9 01       	movw	r30, r18
     ac8:	91 83       	std	Z+1, r25	; 0x01
     aca:	80 83       	st	Z, r24
     acc:	28 c0       	rjmp	.+80     	; 0xb1e <LCD_displayCharacter+0x34a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ace:	8e 01       	movw	r16, r28
     ad0:	09 5a       	subi	r16, 0xA9	; 169
     ad2:	1f 4f       	sbci	r17, 0xFF	; 255
     ad4:	ce 01       	movw	r24, r28
     ad6:	81 5b       	subi	r24, 0xB1	; 177
     ad8:	9f 4f       	sbci	r25, 0xFF	; 255
     ada:	fc 01       	movw	r30, r24
     adc:	60 81       	ld	r22, Z
     ade:	71 81       	ldd	r23, Z+1	; 0x01
     ae0:	82 81       	ldd	r24, Z+2	; 0x02
     ae2:	93 81       	ldd	r25, Z+3	; 0x03
     ae4:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     ae8:	dc 01       	movw	r26, r24
     aea:	cb 01       	movw	r24, r22
     aec:	f8 01       	movw	r30, r16
     aee:	80 83       	st	Z, r24
     af0:	ce 01       	movw	r24, r28
     af2:	86 59       	subi	r24, 0x96	; 150
     af4:	9f 4f       	sbci	r25, 0xFF	; 255
     af6:	9e 01       	movw	r18, r28
     af8:	29 5a       	subi	r18, 0xA9	; 169
     afa:	3f 4f       	sbci	r19, 0xFF	; 255
     afc:	f9 01       	movw	r30, r18
     afe:	20 81       	ld	r18, Z
     b00:	fc 01       	movw	r30, r24
     b02:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b04:	ce 01       	movw	r24, r28
     b06:	86 59       	subi	r24, 0x96	; 150
     b08:	9f 4f       	sbci	r25, 0xFF	; 255
     b0a:	fc 01       	movw	r30, r24
     b0c:	80 81       	ld	r24, Z
     b0e:	28 2f       	mov	r18, r24
     b10:	2a 95       	dec	r18
     b12:	f1 f7       	brne	.-4      	; 0xb10 <LCD_displayCharacter+0x33c>
     b14:	ce 01       	movw	r24, r28
     b16:	86 59       	subi	r24, 0x96	; 150
     b18:	9f 4f       	sbci	r25, 0xFF	; 255
     b1a:	fc 01       	movw	r30, r24
     b1c:	20 83       	st	Z, r18
	_delay_us(1);/*delay processing RS set time tas=40ns */
	CLEAR_BIT(LCD_CTRL_PORT,READWRITE); /*write data to LCD so READWRITE =0 */
     b1e:	82 e3       	ldi	r24, 0x32	; 50
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	22 e3       	ldi	r18, 0x32	; 50
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	f9 01       	movw	r30, r18
     b28:	20 81       	ld	r18, Z
     b2a:	2f 7d       	andi	r18, 0xDF	; 223
     b2c:	fc 01       	movw	r30, r24
     b2e:	20 83       	st	Z, r18
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e8       	ldi	r26, 0x80	; 128
     b36:	bf e3       	ldi	r27, 0x3F	; 63
     b38:	8d 83       	std	Y+5, r24	; 0x05
     b3a:	9e 83       	std	Y+6, r25	; 0x06
     b3c:	af 83       	std	Y+7, r26	; 0x07
     b3e:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     b40:	2b ea       	ldi	r18, 0xAB	; 171
     b42:	3a ea       	ldi	r19, 0xAA	; 170
     b44:	4a e2       	ldi	r20, 0x2A	; 42
     b46:	50 e4       	ldi	r21, 0x40	; 64
     b48:	6d 81       	ldd	r22, Y+5	; 0x05
     b4a:	7e 81       	ldd	r23, Y+6	; 0x06
     b4c:	8f 81       	ldd	r24, Y+7	; 0x07
     b4e:	98 85       	ldd	r25, Y+8	; 0x08
     b50:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     b54:	dc 01       	movw	r26, r24
     b56:	cb 01       	movw	r24, r22
     b58:	8b ab       	std	Y+51, r24	; 0x33
     b5a:	9c ab       	std	Y+52, r25	; 0x34
     b5c:	ad ab       	std	Y+53, r26	; 0x35
     b5e:	be ab       	std	Y+54, r27	; 0x36
	__tmp2 = ((F_CPU) / 4e6) * __us;
     b60:	8d 81       	ldd	r24, Y+5	; 0x05
     b62:	9e 81       	ldd	r25, Y+6	; 0x06
     b64:	af 81       	ldd	r26, Y+7	; 0x07
     b66:	b8 85       	ldd	r27, Y+8	; 0x08
     b68:	9c 01       	movw	r18, r24
     b6a:	ad 01       	movw	r20, r26
     b6c:	bc 01       	movw	r22, r24
     b6e:	cd 01       	movw	r24, r26
     b70:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__addsf3>
     b74:	dc 01       	movw	r26, r24
     b76:	cb 01       	movw	r24, r22
     b78:	8f ab       	std	Y+55, r24	; 0x37
     b7a:	98 af       	std	Y+56, r25	; 0x38
     b7c:	a9 af       	std	Y+57, r26	; 0x39
     b7e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	40 e8       	ldi	r20, 0x80	; 128
     b86:	5f e3       	ldi	r21, 0x3F	; 63
     b88:	6b a9       	ldd	r22, Y+51	; 0x33
     b8a:	7c a9       	ldd	r23, Y+52	; 0x34
     b8c:	8d a9       	ldd	r24, Y+53	; 0x35
     b8e:	9e a9       	ldd	r25, Y+54	; 0x36
     b90:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__cmpsf2>
     b94:	88 23       	and	r24, r24
     b96:	1c f4       	brge	.+6      	; 0xb9e <LCD_displayCharacter+0x3ca>
		__ticks = 1;
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	8b af       	std	Y+59, r24	; 0x3b
     b9c:	0c c1       	rjmp	.+536    	; 0xdb6 <LCD_displayCharacter+0x5e2>
	else if (__tmp2 > 65535)
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	3f ef       	ldi	r19, 0xFF	; 255
     ba2:	4f e7       	ldi	r20, 0x7F	; 127
     ba4:	57 e4       	ldi	r21, 0x47	; 71
     ba6:	6f a9       	ldd	r22, Y+55	; 0x37
     ba8:	78 ad       	ldd	r23, Y+56	; 0x38
     baa:	89 ad       	ldd	r24, Y+57	; 0x39
     bac:	9a ad       	ldd	r25, Y+58	; 0x3a
     bae:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
     bb2:	18 16       	cp	r1, r24
     bb4:	0c f0       	brlt	.+2      	; 0xbb8 <LCD_displayCharacter+0x3e4>
     bb6:	c1 c0       	rjmp	.+386    	; 0xd3a <LCD_displayCharacter+0x566>
	{
		_delay_ms(__us / 1000.0);
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	4a e7       	ldi	r20, 0x7A	; 122
     bbe:	54 e4       	ldi	r21, 0x44	; 68
     bc0:	6d 81       	ldd	r22, Y+5	; 0x05
     bc2:	7e 81       	ldd	r23, Y+6	; 0x06
     bc4:	8f 81       	ldd	r24, Y+7	; 0x07
     bc6:	98 85       	ldd	r25, Y+8	; 0x08
     bc8:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__divsf3>
     bcc:	dc 01       	movw	r26, r24
     bce:	cb 01       	movw	r24, r22
     bd0:	8c af       	std	Y+60, r24	; 0x3c
     bd2:	9d af       	std	Y+61, r25	; 0x3d
     bd4:	ae af       	std	Y+62, r26	; 0x3e
     bd6:	bf af       	std	Y+63, r27	; 0x3f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bd8:	8e 01       	movw	r16, r28
     bda:	00 5c       	subi	r16, 0xC0	; 192
     bdc:	1f 4f       	sbci	r17, 0xFF	; 255
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	4a ef       	ldi	r20, 0xFA	; 250
     be4:	54 e4       	ldi	r21, 0x44	; 68
     be6:	6c ad       	ldd	r22, Y+60	; 0x3c
     be8:	7d ad       	ldd	r23, Y+61	; 0x3d
     bea:	8e ad       	ldd	r24, Y+62	; 0x3e
     bec:	9f ad       	ldd	r25, Y+63	; 0x3f
     bee:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     bf2:	dc 01       	movw	r26, r24
     bf4:	cb 01       	movw	r24, r22
     bf6:	f8 01       	movw	r30, r16
     bf8:	80 83       	st	Z, r24
     bfa:	91 83       	std	Z+1, r25	; 0x01
     bfc:	a2 83       	std	Z+2, r26	; 0x02
     bfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c00:	ce 01       	movw	r24, r28
     c02:	80 5c       	subi	r24, 0xC0	; 192
     c04:	9f 4f       	sbci	r25, 0xFF	; 255
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	40 e8       	ldi	r20, 0x80	; 128
     c0c:	5f e3       	ldi	r21, 0x3F	; 63
     c0e:	fc 01       	movw	r30, r24
     c10:	60 81       	ld	r22, Z
     c12:	71 81       	ldd	r23, Z+1	; 0x01
     c14:	82 81       	ldd	r24, Z+2	; 0x02
     c16:	93 81       	ldd	r25, Z+3	; 0x03
     c18:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__cmpsf2>
     c1c:	88 23       	and	r24, r24
     c1e:	4c f4       	brge	.+18     	; 0xc32 <LCD_displayCharacter+0x45e>
		__ticks = 1;
     c20:	ce 01       	movw	r24, r28
     c22:	8c 5b       	subi	r24, 0xBC	; 188
     c24:	9f 4f       	sbci	r25, 0xFF	; 255
     c26:	21 e0       	ldi	r18, 0x01	; 1
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	fc 01       	movw	r30, r24
     c2c:	31 83       	std	Z+1, r19	; 0x01
     c2e:	20 83       	st	Z, r18
     c30:	69 c0       	rjmp	.+210    	; 0xd04 <LCD_displayCharacter+0x530>
	else if (__tmp > 65535)
     c32:	ce 01       	movw	r24, r28
     c34:	80 5c       	subi	r24, 0xC0	; 192
     c36:	9f 4f       	sbci	r25, 0xFF	; 255
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	3f ef       	ldi	r19, 0xFF	; 255
     c3c:	4f e7       	ldi	r20, 0x7F	; 127
     c3e:	57 e4       	ldi	r21, 0x47	; 71
     c40:	fc 01       	movw	r30, r24
     c42:	60 81       	ld	r22, Z
     c44:	71 81       	ldd	r23, Z+1	; 0x01
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
     c4e:	18 16       	cp	r1, r24
     c50:	0c f0       	brlt	.+2      	; 0xc54 <LCD_displayCharacter+0x480>
     c52:	46 c0       	rjmp	.+140    	; 0xce0 <LCD_displayCharacter+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	40 e2       	ldi	r20, 0x20	; 32
     c5a:	51 e4       	ldi	r21, 0x41	; 65
     c5c:	6c ad       	ldd	r22, Y+60	; 0x3c
     c5e:	7d ad       	ldd	r23, Y+61	; 0x3d
     c60:	8e ad       	ldd	r24, Y+62	; 0x3e
     c62:	9f ad       	ldd	r25, Y+63	; 0x3f
     c64:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	8e 01       	movw	r16, r28
     c6e:	0c 5b       	subi	r16, 0xBC	; 188
     c70:	1f 4f       	sbci	r17, 0xFF	; 255
     c72:	bc 01       	movw	r22, r24
     c74:	cd 01       	movw	r24, r26
     c76:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	f8 01       	movw	r30, r16
     c80:	91 83       	std	Z+1, r25	; 0x01
     c82:	80 83       	st	Z, r24
     c84:	24 c0       	rjmp	.+72     	; 0xcce <LCD_displayCharacter+0x4fa>
     c86:	ce 01       	movw	r24, r28
     c88:	8a 5b       	subi	r24, 0xBA	; 186
     c8a:	9f 4f       	sbci	r25, 0xFF	; 255
     c8c:	28 ec       	ldi	r18, 0xC8	; 200
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	fc 01       	movw	r30, r24
     c92:	31 83       	std	Z+1, r19	; 0x01
     c94:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c96:	ce 01       	movw	r24, r28
     c98:	8a 5b       	subi	r24, 0xBA	; 186
     c9a:	9f 4f       	sbci	r25, 0xFF	; 255
     c9c:	fc 01       	movw	r30, r24
     c9e:	80 81       	ld	r24, Z
     ca0:	91 81       	ldd	r25, Z+1	; 0x01
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <LCD_displayCharacter+0x4ce>
     ca6:	9e 01       	movw	r18, r28
     ca8:	2a 5b       	subi	r18, 0xBA	; 186
     caa:	3f 4f       	sbci	r19, 0xFF	; 255
     cac:	f9 01       	movw	r30, r18
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb2:	ce 01       	movw	r24, r28
     cb4:	8c 5b       	subi	r24, 0xBC	; 188
     cb6:	9f 4f       	sbci	r25, 0xFF	; 255
     cb8:	9e 01       	movw	r18, r28
     cba:	2c 5b       	subi	r18, 0xBC	; 188
     cbc:	3f 4f       	sbci	r19, 0xFF	; 255
     cbe:	f9 01       	movw	r30, r18
     cc0:	20 81       	ld	r18, Z
     cc2:	31 81       	ldd	r19, Z+1	; 0x01
     cc4:	21 50       	subi	r18, 0x01	; 1
     cc6:	31 09       	sbc	r19, r1
     cc8:	fc 01       	movw	r30, r24
     cca:	31 83       	std	Z+1, r19	; 0x01
     ccc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cce:	ce 01       	movw	r24, r28
     cd0:	8c 5b       	subi	r24, 0xBC	; 188
     cd2:	9f 4f       	sbci	r25, 0xFF	; 255
     cd4:	fc 01       	movw	r30, r24
     cd6:	80 81       	ld	r24, Z
     cd8:	91 81       	ldd	r25, Z+1	; 0x01
     cda:	89 2b       	or	r24, r25
     cdc:	a1 f6       	brne	.-88     	; 0xc86 <LCD_displayCharacter+0x4b2>
     cde:	6b c0       	rjmp	.+214    	; 0xdb6 <LCD_displayCharacter+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ce0:	8e 01       	movw	r16, r28
     ce2:	0c 5b       	subi	r16, 0xBC	; 188
     ce4:	1f 4f       	sbci	r17, 0xFF	; 255
     ce6:	ce 01       	movw	r24, r28
     ce8:	80 5c       	subi	r24, 0xC0	; 192
     cea:	9f 4f       	sbci	r25, 0xFF	; 255
     cec:	fc 01       	movw	r30, r24
     cee:	60 81       	ld	r22, Z
     cf0:	71 81       	ldd	r23, Z+1	; 0x01
     cf2:	82 81       	ldd	r24, Z+2	; 0x02
     cf4:	93 81       	ldd	r25, Z+3	; 0x03
     cf6:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	f8 01       	movw	r30, r16
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	80 83       	st	Z, r24
     d04:	ce 01       	movw	r24, r28
     d06:	88 5b       	subi	r24, 0xB8	; 184
     d08:	9f 4f       	sbci	r25, 0xFF	; 255
     d0a:	9e 01       	movw	r18, r28
     d0c:	2c 5b       	subi	r18, 0xBC	; 188
     d0e:	3f 4f       	sbci	r19, 0xFF	; 255
     d10:	f9 01       	movw	r30, r18
     d12:	20 81       	ld	r18, Z
     d14:	31 81       	ldd	r19, Z+1	; 0x01
     d16:	fc 01       	movw	r30, r24
     d18:	31 83       	std	Z+1, r19	; 0x01
     d1a:	20 83       	st	Z, r18
     d1c:	ce 01       	movw	r24, r28
     d1e:	88 5b       	subi	r24, 0xB8	; 184
     d20:	9f 4f       	sbci	r25, 0xFF	; 255
     d22:	fc 01       	movw	r30, r24
     d24:	80 81       	ld	r24, Z
     d26:	91 81       	ldd	r25, Z+1	; 0x01
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	f1 f7       	brne	.-4      	; 0xd28 <LCD_displayCharacter+0x554>
     d2c:	9e 01       	movw	r18, r28
     d2e:	28 5b       	subi	r18, 0xB8	; 184
     d30:	3f 4f       	sbci	r19, 0xFF	; 255
     d32:	f9 01       	movw	r30, r18
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	80 83       	st	Z, r24
     d38:	3e c0       	rjmp	.+124    	; 0xdb6 <LCD_displayCharacter+0x5e2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	4f e7       	ldi	r20, 0x7F	; 127
     d40:	53 e4       	ldi	r21, 0x43	; 67
     d42:	6b a9       	ldd	r22, Y+51	; 0x33
     d44:	7c a9       	ldd	r23, Y+52	; 0x34
     d46:	8d a9       	ldd	r24, Y+53	; 0x35
     d48:	9e a9       	ldd	r25, Y+54	; 0x36
     d4a:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
     d4e:	18 16       	cp	r1, r24
     d50:	4c f5       	brge	.+82     	; 0xda4 <LCD_displayCharacter+0x5d0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     d52:	8e 01       	movw	r16, r28
     d54:	06 5b       	subi	r16, 0xB6	; 182
     d56:	1f 4f       	sbci	r17, 0xFF	; 255
     d58:	6f a9       	ldd	r22, Y+55	; 0x37
     d5a:	78 ad       	ldd	r23, Y+56	; 0x38
     d5c:	89 ad       	ldd	r24, Y+57	; 0x39
     d5e:	9a ad       	ldd	r25, Y+58	; 0x3a
     d60:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	f8 01       	movw	r30, r16
     d6a:	91 83       	std	Z+1, r25	; 0x01
     d6c:	80 83       	st	Z, r24
     d6e:	ce 01       	movw	r24, r28
     d70:	84 5b       	subi	r24, 0xB4	; 180
     d72:	9f 4f       	sbci	r25, 0xFF	; 255
     d74:	9e 01       	movw	r18, r28
     d76:	26 5b       	subi	r18, 0xB6	; 182
     d78:	3f 4f       	sbci	r19, 0xFF	; 255
     d7a:	f9 01       	movw	r30, r18
     d7c:	20 81       	ld	r18, Z
     d7e:	31 81       	ldd	r19, Z+1	; 0x01
     d80:	fc 01       	movw	r30, r24
     d82:	31 83       	std	Z+1, r19	; 0x01
     d84:	20 83       	st	Z, r18
     d86:	ce 01       	movw	r24, r28
     d88:	84 5b       	subi	r24, 0xB4	; 180
     d8a:	9f 4f       	sbci	r25, 0xFF	; 255
     d8c:	fc 01       	movw	r30, r24
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	f1 f7       	brne	.-4      	; 0xd92 <LCD_displayCharacter+0x5be>
     d96:	9e 01       	movw	r18, r28
     d98:	24 5b       	subi	r18, 0xB4	; 180
     d9a:	3f 4f       	sbci	r19, 0xFF	; 255
     d9c:	f9 01       	movw	r30, r18
     d9e:	91 83       	std	Z+1, r25	; 0x01
     da0:	80 83       	st	Z, r24
     da2:	1c c0       	rjmp	.+56     	; 0xddc <LCD_displayCharacter+0x608>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     da4:	6b a9       	ldd	r22, Y+51	; 0x33
     da6:	7c a9       	ldd	r23, Y+52	; 0x34
     da8:	8d a9       	ldd	r24, Y+53	; 0x35
     daa:	9e a9       	ldd	r25, Y+54	; 0x36
     dac:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     db0:	dc 01       	movw	r26, r24
     db2:	cb 01       	movw	r24, r22
     db4:	8b af       	std	Y+59, r24	; 0x3b
     db6:	ce 01       	movw	r24, r28
     db8:	82 5b       	subi	r24, 0xB2	; 178
     dba:	9f 4f       	sbci	r25, 0xFF	; 255
     dbc:	2b ad       	ldd	r18, Y+59	; 0x3b
     dbe:	fc 01       	movw	r30, r24
     dc0:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     dc2:	ce 01       	movw	r24, r28
     dc4:	82 5b       	subi	r24, 0xB2	; 178
     dc6:	9f 4f       	sbci	r25, 0xFF	; 255
     dc8:	fc 01       	movw	r30, r24
     dca:	80 81       	ld	r24, Z
     dcc:	28 2f       	mov	r18, r24
     dce:	2a 95       	dec	r18
     dd0:	f1 f7       	brne	.-4      	; 0xdce <LCD_displayCharacter+0x5fa>
     dd2:	ce 01       	movw	r24, r28
     dd4:	82 5b       	subi	r24, 0xB2	; 178
     dd6:	9f 4f       	sbci	r25, 0xFF	; 255
     dd8:	fc 01       	movw	r30, r24
     dda:	20 83       	st	Z, r18
	_delay_us(1);/* delay processing R/W set time tas =40ns */
	SET_BIT(LCD_CTRL_PORT,LCD_ENABLE); /* enable LCD so enable =1 */
     ddc:	82 e3       	ldi	r24, 0x32	; 50
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	22 e3       	ldi	r18, 0x32	; 50
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	f9 01       	movw	r30, r18
     de6:	20 81       	ld	r18, Z
     de8:	20 64       	ori	r18, 0x40	; 64
     dea:	fc 01       	movw	r30, r24
     dec:	20 83       	st	Z, r18
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	a0 e8       	ldi	r26, 0x80	; 128
     df4:	bf e3       	ldi	r27, 0x3F	; 63
     df6:	89 87       	std	Y+9, r24	; 0x09
     df8:	9a 87       	std	Y+10, r25	; 0x0a
     dfa:	ab 87       	std	Y+11, r26	; 0x0b
     dfc:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	4a ef       	ldi	r20, 0xFA	; 250
     e04:	54 e4       	ldi	r21, 0x44	; 68
     e06:	69 85       	ldd	r22, Y+9	; 0x09
     e08:	7a 85       	ldd	r23, Y+10	; 0x0a
     e0a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e0c:	9c 85       	ldd	r25, Y+12	; 0x0c
     e0e:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	89 a7       	std	Y+41, r24	; 0x29
     e18:	9a a7       	std	Y+42, r25	; 0x2a
     e1a:	ab a7       	std	Y+43, r26	; 0x2b
     e1c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e8       	ldi	r20, 0x80	; 128
     e24:	5f e3       	ldi	r21, 0x3F	; 63
     e26:	69 a5       	ldd	r22, Y+41	; 0x29
     e28:	7a a5       	ldd	r23, Y+42	; 0x2a
     e2a:	8b a5       	ldd	r24, Y+43	; 0x2b
     e2c:	9c a5       	ldd	r25, Y+44	; 0x2c
     e2e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__cmpsf2>
     e32:	88 23       	and	r24, r24
     e34:	2c f4       	brge	.+10     	; 0xe40 <LCD_displayCharacter+0x66c>
		__ticks = 1;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	9e a7       	std	Y+46, r25	; 0x2e
     e3c:	8d a7       	std	Y+45, r24	; 0x2d
     e3e:	3f c0       	rjmp	.+126    	; 0xebe <LCD_displayCharacter+0x6ea>
	else if (__tmp > 65535)
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	3f ef       	ldi	r19, 0xFF	; 255
     e44:	4f e7       	ldi	r20, 0x7F	; 127
     e46:	57 e4       	ldi	r21, 0x47	; 71
     e48:	69 a5       	ldd	r22, Y+41	; 0x29
     e4a:	7a a5       	ldd	r23, Y+42	; 0x2a
     e4c:	8b a5       	ldd	r24, Y+43	; 0x2b
     e4e:	9c a5       	ldd	r25, Y+44	; 0x2c
     e50:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
     e54:	18 16       	cp	r1, r24
     e56:	4c f5       	brge	.+82     	; 0xeaa <LCD_displayCharacter+0x6d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e2       	ldi	r20, 0x20	; 32
     e5e:	51 e4       	ldi	r21, 0x41	; 65
     e60:	69 85       	ldd	r22, Y+9	; 0x09
     e62:	7a 85       	ldd	r23, Y+10	; 0x0a
     e64:	8b 85       	ldd	r24, Y+11	; 0x0b
     e66:	9c 85       	ldd	r25, Y+12	; 0x0c
     e68:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	bc 01       	movw	r22, r24
     e72:	cd 01       	movw	r24, r26
     e74:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	9e a7       	std	Y+46, r25	; 0x2e
     e7e:	8d a7       	std	Y+45, r24	; 0x2d
     e80:	0f c0       	rjmp	.+30     	; 0xea0 <LCD_displayCharacter+0x6cc>
     e82:	88 ec       	ldi	r24, 0xC8	; 200
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	98 ab       	std	Y+48, r25	; 0x30
     e88:	8f a7       	std	Y+47, r24	; 0x2f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e8a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e8c:	98 a9       	ldd	r25, Y+48	; 0x30
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	f1 f7       	brne	.-4      	; 0xe8e <LCD_displayCharacter+0x6ba>
     e92:	98 ab       	std	Y+48, r25	; 0x30
     e94:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e96:	8d a5       	ldd	r24, Y+45	; 0x2d
     e98:	9e a5       	ldd	r25, Y+46	; 0x2e
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	9e a7       	std	Y+46, r25	; 0x2e
     e9e:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea0:	8d a5       	ldd	r24, Y+45	; 0x2d
     ea2:	9e a5       	ldd	r25, Y+46	; 0x2e
     ea4:	89 2b       	or	r24, r25
     ea6:	69 f7       	brne	.-38     	; 0xe82 <LCD_displayCharacter+0x6ae>
     ea8:	14 c0       	rjmp	.+40     	; 0xed2 <LCD_displayCharacter+0x6fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eaa:	69 a5       	ldd	r22, Y+41	; 0x29
     eac:	7a a5       	ldd	r23, Y+42	; 0x2a
     eae:	8b a5       	ldd	r24, Y+43	; 0x2b
     eb0:	9c a5       	ldd	r25, Y+44	; 0x2c
     eb2:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	9e a7       	std	Y+46, r25	; 0x2e
     ebc:	8d a7       	std	Y+45, r24	; 0x2d
     ebe:	8d a5       	ldd	r24, Y+45	; 0x2d
     ec0:	9e a5       	ldd	r25, Y+46	; 0x2e
     ec2:	9a ab       	std	Y+50, r25	; 0x32
     ec4:	89 ab       	std	Y+49, r24	; 0x31
     ec6:	89 a9       	ldd	r24, Y+49	; 0x31
     ec8:	9a a9       	ldd	r25, Y+50	; 0x32
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <LCD_displayCharacter+0x6f6>
     ece:	9a ab       	std	Y+50, r25	; 0x32
     ed0:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1); /*delay for processing Tpw - Tdws = 190ns*/
	PORTC=data; /* out the required data to output data bus D0-->D7 */
     ed2:	85 e3       	ldi	r24, 0x35	; 53
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	9e 01       	movw	r18, r28
     ed8:	25 59       	subi	r18, 0x95	; 149
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	f9 01       	movw	r30, r18
     ede:	20 81       	ld	r18, Z
     ee0:	fc 01       	movw	r30, r24
     ee2:	20 83       	st	Z, r18
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a0 e8       	ldi	r26, 0x80	; 128
     eea:	bf e3       	ldi	r27, 0x3F	; 63
     eec:	8d 87       	std	Y+13, r24	; 0x0d
     eee:	9e 87       	std	Y+14, r25	; 0x0e
     ef0:	af 87       	std	Y+15, r26	; 0x0f
     ef2:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	4a ef       	ldi	r20, 0xFA	; 250
     efa:	54 e4       	ldi	r21, 0x44	; 68
     efc:	6d 85       	ldd	r22, Y+13	; 0x0d
     efe:	7e 85       	ldd	r23, Y+14	; 0x0e
     f00:	8f 85       	ldd	r24, Y+15	; 0x0f
     f02:	98 89       	ldd	r25, Y+16	; 0x10
     f04:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	8f 8f       	std	Y+31, r24	; 0x1f
     f0e:	98 a3       	std	Y+32, r25	; 0x20
     f10:	a9 a3       	std	Y+33, r26	; 0x21
     f12:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	40 e8       	ldi	r20, 0x80	; 128
     f1a:	5f e3       	ldi	r21, 0x3F	; 63
     f1c:	6f 8d       	ldd	r22, Y+31	; 0x1f
     f1e:	78 a1       	ldd	r23, Y+32	; 0x20
     f20:	89 a1       	ldd	r24, Y+33	; 0x21
     f22:	9a a1       	ldd	r25, Y+34	; 0x22
     f24:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__cmpsf2>
     f28:	88 23       	and	r24, r24
     f2a:	2c f4       	brge	.+10     	; 0xf36 <LCD_displayCharacter+0x762>
		__ticks = 1;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9c a3       	std	Y+36, r25	; 0x24
     f32:	8b a3       	std	Y+35, r24	; 0x23
     f34:	3f c0       	rjmp	.+126    	; 0xfb4 <LCD_displayCharacter+0x7e0>
	else if (__tmp > 65535)
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	3f ef       	ldi	r19, 0xFF	; 255
     f3a:	4f e7       	ldi	r20, 0x7F	; 127
     f3c:	57 e4       	ldi	r21, 0x47	; 71
     f3e:	6f 8d       	ldd	r22, Y+31	; 0x1f
     f40:	78 a1       	ldd	r23, Y+32	; 0x20
     f42:	89 a1       	ldd	r24, Y+33	; 0x21
     f44:	9a a1       	ldd	r25, Y+34	; 0x22
     f46:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
     f4a:	18 16       	cp	r1, r24
     f4c:	4c f5       	brge	.+82     	; 0xfa0 <LCD_displayCharacter+0x7cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e2       	ldi	r20, 0x20	; 32
     f54:	51 e4       	ldi	r21, 0x41	; 65
     f56:	6d 85       	ldd	r22, Y+13	; 0x0d
     f58:	7e 85       	ldd	r23, Y+14	; 0x0e
     f5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f5c:	98 89       	ldd	r25, Y+16	; 0x10
     f5e:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	bc 01       	movw	r22, r24
     f68:	cd 01       	movw	r24, r26
     f6a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	9c a3       	std	Y+36, r25	; 0x24
     f74:	8b a3       	std	Y+35, r24	; 0x23
     f76:	0f c0       	rjmp	.+30     	; 0xf96 <LCD_displayCharacter+0x7c2>
     f78:	88 ec       	ldi	r24, 0xC8	; 200
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	9e a3       	std	Y+38, r25	; 0x26
     f7e:	8d a3       	std	Y+37, r24	; 0x25
     f80:	8d a1       	ldd	r24, Y+37	; 0x25
     f82:	9e a1       	ldd	r25, Y+38	; 0x26
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <LCD_displayCharacter+0x7b0>
     f88:	9e a3       	std	Y+38, r25	; 0x26
     f8a:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8c:	8b a1       	ldd	r24, Y+35	; 0x23
     f8e:	9c a1       	ldd	r25, Y+36	; 0x24
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	9c a3       	std	Y+36, r25	; 0x24
     f94:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f96:	8b a1       	ldd	r24, Y+35	; 0x23
     f98:	9c a1       	ldd	r25, Y+36	; 0x24
     f9a:	89 2b       	or	r24, r25
     f9c:	69 f7       	brne	.-38     	; 0xf78 <LCD_displayCharacter+0x7a4>
     f9e:	14 c0       	rjmp	.+40     	; 0xfc8 <LCD_displayCharacter+0x7f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa0:	6f 8d       	ldd	r22, Y+31	; 0x1f
     fa2:	78 a1       	ldd	r23, Y+32	; 0x20
     fa4:	89 a1       	ldd	r24, Y+33	; 0x21
     fa6:	9a a1       	ldd	r25, Y+34	; 0x22
     fa8:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	9c a3       	std	Y+36, r25	; 0x24
     fb2:	8b a3       	std	Y+35, r24	; 0x23
     fb4:	8b a1       	ldd	r24, Y+35	; 0x23
     fb6:	9c a1       	ldd	r25, Y+36	; 0x24
     fb8:	98 a7       	std	Y+40, r25	; 0x28
     fba:	8f a3       	std	Y+39, r24	; 0x27
     fbc:	8f a1       	ldd	r24, Y+39	; 0x27
     fbe:	98 a5       	ldd	r25, Y+40	; 0x28
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <LCD_displayCharacter+0x7ec>
     fc4:	98 a7       	std	Y+40, r25	; 0x28
     fc6:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(1);/* delay processing command setup time tdsw=60ns */
	CLEAR_BIT(LCD_CTRL_PORT,6); /* disable LCD so enable pin =0*/
     fc8:	82 e3       	ldi	r24, 0x32	; 50
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	22 e3       	ldi	r18, 0x32	; 50
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	f9 01       	movw	r30, r18
     fd2:	20 81       	ld	r18, Z
     fd4:	2f 7b       	andi	r18, 0xBF	; 191
     fd6:	fc 01       	movw	r30, r24
     fd8:	20 83       	st	Z, r18
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	a0 e8       	ldi	r26, 0x80	; 128
     fe0:	bf e3       	ldi	r27, 0x3F	; 63
     fe2:	89 8b       	std	Y+17, r24	; 0x11
     fe4:	9a 8b       	std	Y+18, r25	; 0x12
     fe6:	ab 8b       	std	Y+19, r26	; 0x13
     fe8:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	4a ef       	ldi	r20, 0xFA	; 250
     ff0:	54 e4       	ldi	r21, 0x44	; 68
     ff2:	69 89       	ldd	r22, Y+17	; 0x11
     ff4:	7a 89       	ldd	r23, Y+18	; 0x12
     ff6:	8b 89       	ldd	r24, Y+19	; 0x13
     ff8:	9c 89       	ldd	r25, Y+20	; 0x14
     ffa:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	8d 8b       	std	Y+21, r24	; 0x15
    1004:	9e 8b       	std	Y+22, r25	; 0x16
    1006:	af 8b       	std	Y+23, r26	; 0x17
    1008:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e8       	ldi	r20, 0x80	; 128
    1010:	5f e3       	ldi	r21, 0x3F	; 63
    1012:	6d 89       	ldd	r22, Y+21	; 0x15
    1014:	7e 89       	ldd	r23, Y+22	; 0x16
    1016:	8f 89       	ldd	r24, Y+23	; 0x17
    1018:	98 8d       	ldd	r25, Y+24	; 0x18
    101a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <__cmpsf2>
    101e:	88 23       	and	r24, r24
    1020:	2c f4       	brge	.+10     	; 0x102c <LCD_displayCharacter+0x858>
		__ticks = 1;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	9a 8f       	std	Y+26, r25	; 0x1a
    1028:	89 8f       	std	Y+25, r24	; 0x19
    102a:	3f c0       	rjmp	.+126    	; 0x10aa <LCD_displayCharacter+0x8d6>
	else if (__tmp > 65535)
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	3f ef       	ldi	r19, 0xFF	; 255
    1030:	4f e7       	ldi	r20, 0x7F	; 127
    1032:	57 e4       	ldi	r21, 0x47	; 71
    1034:	6d 89       	ldd	r22, Y+21	; 0x15
    1036:	7e 89       	ldd	r23, Y+22	; 0x16
    1038:	8f 89       	ldd	r24, Y+23	; 0x17
    103a:	98 8d       	ldd	r25, Y+24	; 0x18
    103c:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
    1040:	18 16       	cp	r1, r24
    1042:	4c f5       	brge	.+82     	; 0x1096 <LCD_displayCharacter+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e2       	ldi	r20, 0x20	; 32
    104a:	51 e4       	ldi	r21, 0x41	; 65
    104c:	69 89       	ldd	r22, Y+17	; 0x11
    104e:	7a 89       	ldd	r23, Y+18	; 0x12
    1050:	8b 89       	ldd	r24, Y+19	; 0x13
    1052:	9c 89       	ldd	r25, Y+20	; 0x14
    1054:	0e 94 94 10 	call	0x2128	; 0x2128 <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	9a 8f       	std	Y+26, r25	; 0x1a
    106a:	89 8f       	std	Y+25, r24	; 0x19
    106c:	0f c0       	rjmp	.+30     	; 0x108c <LCD_displayCharacter+0x8b8>
    106e:	88 ec       	ldi	r24, 0xC8	; 200
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9c 8f       	std	Y+28, r25	; 0x1c
    1074:	8b 8f       	std	Y+27, r24	; 0x1b
    1076:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1078:	9c 8d       	ldd	r25, Y+28	; 0x1c
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <LCD_displayCharacter+0x8a6>
    107e:	9c 8f       	std	Y+28, r25	; 0x1c
    1080:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1082:	89 8d       	ldd	r24, Y+25	; 0x19
    1084:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	9a 8f       	std	Y+26, r25	; 0x1a
    108a:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108c:	89 8d       	ldd	r24, Y+25	; 0x19
    108e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1090:	89 2b       	or	r24, r25
    1092:	69 f7       	brne	.-38     	; 0x106e <LCD_displayCharacter+0x89a>
	_delay_ms(1); /* delay for processing hold time th =10ns*/
}
    1094:	14 c0       	rjmp	.+40     	; 0x10be <LCD_displayCharacter+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1096:	6d 89       	ldd	r22, Y+21	; 0x15
    1098:	7e 89       	ldd	r23, Y+22	; 0x16
    109a:	8f 89       	ldd	r24, Y+23	; 0x17
    109c:	98 8d       	ldd	r25, Y+24	; 0x18
    109e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fixunssfsi>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	9a 8f       	std	Y+26, r25	; 0x1a
    10a8:	89 8f       	std	Y+25, r24	; 0x19
    10aa:	89 8d       	ldd	r24, Y+25	; 0x19
    10ac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    10ae:	9e 8f       	std	Y+30, r25	; 0x1e
    10b0:	8d 8f       	std	Y+29, r24	; 0x1d
    10b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	f1 f7       	brne	.-4      	; 0x10b6 <LCD_displayCharacter+0x8e2>
    10ba:	9e 8f       	std	Y+30, r25	; 0x1e
    10bc:	8d 8f       	std	Y+29, r24	; 0x1d
    10be:	00 00       	nop
    10c0:	c5 59       	subi	r28, 0x95	; 149
    10c2:	df 4f       	sbci	r29, 0xFF	; 255
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	08 95       	ret

000010d8 <LCD_displayString>:
void LCD_displayString(uint8 *str)
{
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	00 d0       	rcall	.+0      	; 0x10de <LCD_displayString+0x6>
    10de:	1f 92       	push	r1
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	9b 83       	std	Y+3, r25	; 0x03
    10e6:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0 ;str[i]!='\0';i++)
    10e8:	19 82       	std	Y+1, r1	; 0x01
    10ea:	0e c0       	rjmp	.+28     	; 0x1108 <LCD_displayString+0x30>
	LCD_displayCharacter( str[i]);
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	2a 81       	ldd	r18, Y+2	; 0x02
    10f4:	3b 81       	ldd	r19, Y+3	; 0x03
    10f6:	82 0f       	add	r24, r18
    10f8:	93 1f       	adc	r25, r19
    10fa:	fc 01       	movw	r30, r24
    10fc:	80 81       	ld	r24, Z
    10fe:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <LCD_displayCharacter>
	CLEAR_BIT(LCD_CTRL_PORT,6); /* disable LCD so enable pin =0*/
	_delay_ms(1); /* delay for processing hold time th =10ns*/
}
void LCD_displayString(uint8 *str)
{
	for(uint8 i=0 ;str[i]!='\0';i++)
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	8f 5f       	subi	r24, 0xFF	; 255
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	2a 81       	ldd	r18, Y+2	; 0x02
    1110:	3b 81       	ldd	r19, Y+3	; 0x03
    1112:	82 0f       	add	r24, r18
    1114:	93 1f       	adc	r25, r19
    1116:	fc 01       	movw	r30, r24
    1118:	80 81       	ld	r24, Z
    111a:	88 23       	and	r24, r24
    111c:	39 f7       	brne	.-50     	; 0x10ec <LCD_displayString+0x14>
	LCD_displayCharacter( str[i]);
}
    111e:	00 00       	nop
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	08 95       	ret

0000112c <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{	/* first of all calculate the required address */
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	00 d0       	rcall	.+0      	; 0x1132 <LCD_goToRowColumn+0x6>
    1132:	1f 92       	push	r1
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	8a 83       	std	Y+2, r24	; 0x02
    113a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	88 2f       	mov	r24, r24
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	91 05       	cpc	r25, r1
    1146:	79 f0       	breq	.+30     	; 0x1166 <LCD_goToRowColumn+0x3a>
    1148:	82 30       	cpi	r24, 0x02	; 2
    114a:	91 05       	cpc	r25, r1
    114c:	1c f4       	brge	.+6      	; 0x1154 <LCD_goToRowColumn+0x28>
    114e:	89 2b       	or	r24, r25
    1150:	39 f0       	breq	.+14     	; 0x1160 <LCD_goToRowColumn+0x34>
    1152:	15 c0       	rjmp	.+42     	; 0x117e <LCD_goToRowColumn+0x52>
    1154:	82 30       	cpi	r24, 0x02	; 2
    1156:	91 05       	cpc	r25, r1
    1158:	51 f0       	breq	.+20     	; 0x116e <LCD_goToRowColumn+0x42>
    115a:	03 97       	sbiw	r24, 0x03	; 3
    115c:	61 f0       	breq	.+24     	; 0x1176 <LCD_goToRowColumn+0x4a>
    115e:	0f c0       	rjmp	.+30     	; 0x117e <LCD_goToRowColumn+0x52>
	{
	case 0:
		address=col;
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	89 83       	std	Y+1, r24	; 0x01
		break;
    1164:	0c c0       	rjmp	.+24     	; 0x117e <LCD_goToRowColumn+0x52>
	case 1:
		address=0x40+col;
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	80 5c       	subi	r24, 0xC0	; 192
    116a:	89 83       	std	Y+1, r24	; 0x01
		break;
    116c:	08 c0       	rjmp	.+16     	; 0x117e <LCD_goToRowColumn+0x52>
	case 2:
		address=0x10+col;
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	80 5f       	subi	r24, 0xF0	; 240
    1172:	89 83       	std	Y+1, r24	; 0x01
		break;
    1174:	04 c0       	rjmp	.+8      	; 0x117e <LCD_goToRowColumn+0x52>
	case 3:
		address=0x50+col;
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	80 5b       	subi	r24, 0xB0	; 176
    117a:	89 83       	std	Y+1, r24	; 0x01
		break;
    117c:	00 00       	nop
		}
	/* pass the specific address to the LCD
	 * to change the address you should add 0x80 to address
	 */
	LCD_sendCommand(address|0x80);
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	80 68       	ori	r24, 0x80	; 128
    1182:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_sendCommand>
}
    1186:	00 00       	nop
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	08 95       	ret

00001194 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row, uint8 col ,uint8 *str)
{
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	00 d0       	rcall	.+0      	; 0x119a <LCD_displayStringRowColumn+0x6>
    119a:	00 d0       	rcall	.+0      	; 0x119c <LCD_displayStringRowColumn+0x8>
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	6a 83       	std	Y+2, r22	; 0x02
    11a4:	5c 83       	std	Y+4, r21	; 0x04
    11a6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn( row, col);/* go to the required position*/
    11a8:	6a 81       	ldd	r22, Y+2	; 0x02
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	0e 94 96 08 	call	0x112c	; 0x112c <LCD_goToRowColumn>
	LCD_displayString(str);/* display the string*/
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <LCD_displayString>
}
    11b8:	00 00       	nop
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	08 95       	ret

000011c8 <LCD_clearScreen>:
void LCD_clearScreen()
{
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);/* clear display*/
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_sendCommand>
}
    11d6:	00 00       	nop
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	08 95       	ret

000011de <LCD_intgerToString>:
void LCD_intgerToString(int data)
{
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	62 97       	sbiw	r28, 0x12	; 18
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	9a 8b       	std	Y+18, r25	; 0x12
    11f4:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];/* buffer to hold acii result */
	itoa(data,buff,10); /* 10 for decimal base */
    11f6:	89 89       	ldd	r24, Y+17	; 0x11
    11f8:	9a 89       	ldd	r25, Y+18	; 0x12
    11fa:	4a e0       	ldi	r20, 0x0A	; 10
    11fc:	50 e0       	ldi	r21, 0x00	; 0
    11fe:	9e 01       	movw	r18, r28
    1200:	2f 5f       	subi	r18, 0xFF	; 255
    1202:	3f 4f       	sbci	r19, 0xFF	; 255
    1204:	b9 01       	movw	r22, r18
    1206:	0e 94 15 11 	call	0x222a	; 0x222a <itoa>
	LCD_displayString(buff);
    120a:	ce 01       	movw	r24, r28
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <LCD_displayString>
}
    1212:	00 00       	nop
    1214:	62 96       	adiw	r28, 0x12	; 18
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	08 95       	ret

00001226 <__vector_19>:

#include"timer.h"
static volatile  void(*g_callBackPtr)(void)= NULL_PTR;
static volatile TIMER_configurationType * configPtr;
ISR(TIMER0_COMP_vect)
{
    1226:	1f 92       	push	r1
    1228:	0f 92       	push	r0
    122a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	2f 93       	push	r18
    1234:	3f 93       	push	r19
    1236:	4f 93       	push	r20
    1238:	5f 93       	push	r21
    123a:	6f 93       	push	r22
    123c:	7f 93       	push	r23
    123e:	8f 93       	push	r24
    1240:	9f 93       	push	r25
    1242:	af 93       	push	r26
    1244:	bf 93       	push	r27
    1246:	ef 93       	push	r30
    1248:	ff 93       	push	r31
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    1252:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_callBackPtr>
    1256:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <g_callBackPtr+0x1>
    125a:	89 2b       	or	r24, r25
    125c:	31 f0       	breq	.+12     	; 0x126a <__vector_19+0x44>
		g_callBackPtr();
    125e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_callBackPtr>
    1262:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <g_callBackPtr+0x1>
    1266:	fc 01       	movw	r30, r24
    1268:	09 95       	icall

}
    126a:	00 00       	nop
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    128e:	0f 90       	pop	r0
    1290:	1f 90       	pop	r1
    1292:	18 95       	reti

00001294 <__vector_9>:
ISR(TIMER0_OVF_vect)
{
    1294:	1f 92       	push	r1
    1296:	0f 92       	push	r0
    1298:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    129c:	0f 92       	push	r0
    129e:	11 24       	eor	r1, r1
    12a0:	2f 93       	push	r18
    12a2:	3f 93       	push	r19
    12a4:	4f 93       	push	r20
    12a6:	5f 93       	push	r21
    12a8:	6f 93       	push	r22
    12aa:	7f 93       	push	r23
    12ac:	8f 93       	push	r24
    12ae:	9f 93       	push	r25
    12b0:	af 93       	push	r26
    12b2:	bf 93       	push	r27
    12b4:	ef 93       	push	r30
    12b6:	ff 93       	push	r31
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    12c0:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_callBackPtr>
    12c4:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <g_callBackPtr+0x1>
    12c8:	89 2b       	or	r24, r25
    12ca:	31 f0       	breq	.+12     	; 0x12d8 <__vector_9+0x44>
		g_callBackPtr();
    12cc:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_callBackPtr>
    12d0:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <g_callBackPtr+0x1>
    12d4:	fc 01       	movw	r30, r24
    12d6:	09 95       	icall

}
    12d8:	00 00       	nop
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	ff 91       	pop	r31
    12e0:	ef 91       	pop	r30
    12e2:	bf 91       	pop	r27
    12e4:	af 91       	pop	r26
    12e6:	9f 91       	pop	r25
    12e8:	8f 91       	pop	r24
    12ea:	7f 91       	pop	r23
    12ec:	6f 91       	pop	r22
    12ee:	5f 91       	pop	r21
    12f0:	4f 91       	pop	r20
    12f2:	3f 91       	pop	r19
    12f4:	2f 91       	pop	r18
    12f6:	0f 90       	pop	r0
    12f8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    12fc:	0f 90       	pop	r0
    12fe:	1f 90       	pop	r1
    1300:	18 95       	reti

00001302 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    1302:	1f 92       	push	r1
    1304:	0f 92       	push	r0
    1306:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    130a:	0f 92       	push	r0
    130c:	11 24       	eor	r1, r1
    130e:	2f 93       	push	r18
    1310:	3f 93       	push	r19
    1312:	4f 93       	push	r20
    1314:	5f 93       	push	r21
    1316:	6f 93       	push	r22
    1318:	7f 93       	push	r23
    131a:	8f 93       	push	r24
    131c:	9f 93       	push	r25
    131e:	af 93       	push	r26
    1320:	bf 93       	push	r27
    1322:	ef 93       	push	r30
    1324:	ff 93       	push	r31
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    132e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_callBackPtr>
    1332:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <g_callBackPtr+0x1>
    1336:	89 2b       	or	r24, r25
    1338:	31 f0       	breq	.+12     	; 0x1346 <__vector_6+0x44>
			g_callBackPtr();
    133a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_callBackPtr>
    133e:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <g_callBackPtr+0x1>
    1342:	fc 01       	movw	r30, r24
    1344:	09 95       	icall
}
    1346:	00 00       	nop
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	ff 91       	pop	r31
    134e:	ef 91       	pop	r30
    1350:	bf 91       	pop	r27
    1352:	af 91       	pop	r26
    1354:	9f 91       	pop	r25
    1356:	8f 91       	pop	r24
    1358:	7f 91       	pop	r23
    135a:	6f 91       	pop	r22
    135c:	5f 91       	pop	r21
    135e:	4f 91       	pop	r20
    1360:	3f 91       	pop	r19
    1362:	2f 91       	pop	r18
    1364:	0f 90       	pop	r0
    1366:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    136a:	0f 90       	pop	r0
    136c:	1f 90       	pop	r1
    136e:	18 95       	reti

00001370 <TIMER_init>:
void TIMER_init( TIMER_configurationType * config)
{configPtr=config;
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	00 d0       	rcall	.+0      	; 0x1376 <TIMER_init+0x6>
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	9a 83       	std	Y+2, r25	; 0x02
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	9a 81       	ldd	r25, Y+2	; 0x02
    1382:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <configPtr+0x1>
    1386:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <configPtr>
	if(config->timerNumber==0)
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	9a 81       	ldd	r25, Y+2	; 0x02
    138e:	fc 01       	movw	r30, r24
    1390:	80 81       	ld	r24, Z
    1392:	88 23       	and	r24, r24
    1394:	09 f0       	breq	.+2      	; 0x1398 <TIMER_init+0x28>
    1396:	22 c1       	rjmp	.+580    	; 0x15dc <TIMER_init+0x26c>
	{
		TCCR0=0;
    1398:	83 e5       	ldi	r24, 0x53	; 83
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	fc 01       	movw	r30, r24
    139e:	10 82       	st	Z, r1
	switch(config->prescaler)
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	9a 81       	ldd	r25, Y+2	; 0x02
    13a4:	fc 01       	movw	r30, r24
    13a6:	85 89       	ldd	r24, Z+21	; 0x15
    13a8:	96 89       	ldd	r25, Z+22	; 0x16
    13aa:	80 34       	cpi	r24, 0x40	; 64
    13ac:	91 05       	cpc	r25, r1
    13ae:	c1 f0       	breq	.+48     	; 0x13e0 <TIMER_init+0x70>
    13b0:	81 34       	cpi	r24, 0x41	; 65
    13b2:	91 05       	cpc	r25, r1
    13b4:	18 f4       	brcc	.+6      	; 0x13bc <TIMER_init+0x4c>
    13b6:	08 97       	sbiw	r24, 0x08	; 8
    13b8:	49 f0       	breq	.+18     	; 0x13cc <TIMER_init+0x5c>
    13ba:	30 c0       	rjmp	.+96     	; 0x141c <TIMER_init+0xac>
    13bc:	81 15       	cp	r24, r1
    13be:	f1 e0       	ldi	r31, 0x01	; 1
    13c0:	9f 07       	cpc	r25, r31
    13c2:	c1 f0       	breq	.+48     	; 0x13f4 <TIMER_init+0x84>
    13c4:	81 15       	cp	r24, r1
    13c6:	94 40       	sbci	r25, 0x04	; 4
    13c8:	f9 f0       	breq	.+62     	; 0x1408 <TIMER_init+0x98>
    13ca:	28 c0       	rjmp	.+80     	; 0x141c <TIMER_init+0xac>
	{
	case 8:
		TCCR0|=(1<<CS01);
    13cc:	83 e5       	ldi	r24, 0x53	; 83
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	23 e5       	ldi	r18, 0x53	; 83
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	f9 01       	movw	r30, r18
    13d6:	20 81       	ld	r18, Z
    13d8:	22 60       	ori	r18, 0x02	; 2
    13da:	fc 01       	movw	r30, r24
    13dc:	20 83       	st	Z, r18
		break;
    13de:	27 c0       	rjmp	.+78     	; 0x142e <TIMER_init+0xbe>
	case 64:
			TCCR0|=(1<<CS00)|(1<<CS01);
    13e0:	83 e5       	ldi	r24, 0x53	; 83
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	23 e5       	ldi	r18, 0x53	; 83
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	f9 01       	movw	r30, r18
    13ea:	20 81       	ld	r18, Z
    13ec:	23 60       	ori	r18, 0x03	; 3
    13ee:	fc 01       	movw	r30, r24
    13f0:	20 83       	st	Z, r18
			break;
    13f2:	1d c0       	rjmp	.+58     	; 0x142e <TIMER_init+0xbe>
	case 256:
			TCCR0|=(1<<CS02);
    13f4:	83 e5       	ldi	r24, 0x53	; 83
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	23 e5       	ldi	r18, 0x53	; 83
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	f9 01       	movw	r30, r18
    13fe:	20 81       	ld	r18, Z
    1400:	24 60       	ori	r18, 0x04	; 4
    1402:	fc 01       	movw	r30, r24
    1404:	20 83       	st	Z, r18
			break;
    1406:	13 c0       	rjmp	.+38     	; 0x142e <TIMER_init+0xbe>
	case 1024:
			TCCR0|=(1<<CS00)|(1<<CS02);
    1408:	83 e5       	ldi	r24, 0x53	; 83
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	23 e5       	ldi	r18, 0x53	; 83
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	f9 01       	movw	r30, r18
    1412:	20 81       	ld	r18, Z
    1414:	25 60       	ori	r18, 0x05	; 5
    1416:	fc 01       	movw	r30, r24
    1418:	20 83       	st	Z, r18
			break;
    141a:	09 c0       	rjmp	.+18     	; 0x142e <TIMER_init+0xbe>
	default:
			TCCR0|=(1<<CS00);
    141c:	83 e5       	ldi	r24, 0x53	; 83
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	23 e5       	ldi	r18, 0x53	; 83
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	f9 01       	movw	r30, r18
    1426:	20 81       	ld	r18, Z
    1428:	21 60       	ori	r18, 0x01	; 1
    142a:	fc 01       	movw	r30, r24
    142c:	20 83       	st	Z, r18

		}

	if(!strcmp(config->mode,"compare"))
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	6e e7       	ldi	r22, 0x7E	; 126
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	0e 94 0c 11 	call	0x2218	; 0x2218 <strcmp>
    143c:	89 2b       	or	r24, r25
    143e:	09 f0       	breq	.+2      	; 0x1442 <TIMER_init+0xd2>
    1440:	62 c0       	rjmp	.+196    	; 0x1506 <TIMER_init+0x196>
	{	TCCR0|=(1<<FOC0)|(1<<WGM01);
    1442:	83 e5       	ldi	r24, 0x53	; 83
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	23 e5       	ldi	r18, 0x53	; 83
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	f9 01       	movw	r30, r18
    144c:	20 81       	ld	r18, Z
    144e:	28 68       	ori	r18, 0x88	; 136
    1450:	fc 01       	movw	r30, r24
    1452:	20 83       	st	Z, r18

		if(!strcmp(config->compareMatchMode,"toggle"))
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	9a 81       	ldd	r25, Y+2	; 0x02
    1458:	47 96       	adiw	r24, 0x17	; 23
    145a:	66 e8       	ldi	r22, 0x86	; 134
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	0e 94 0c 11 	call	0x2218	; 0x2218 <strcmp>
    1462:	89 2b       	or	r24, r25
    1464:	99 f4       	brne	.+38     	; 0x148c <TIMER_init+0x11c>
		{
		TCCR0|=(1<<COM00);
    1466:	83 e5       	ldi	r24, 0x53	; 83
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	23 e5       	ldi	r18, 0x53	; 83
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	f9 01       	movw	r30, r18
    1470:	20 81       	ld	r18, Z
    1472:	20 61       	ori	r18, 0x10	; 16
    1474:	fc 01       	movw	r30, r24
    1476:	20 83       	st	Z, r18
		SET_BIT(DDRB,3);
    1478:	87 e3       	ldi	r24, 0x37	; 55
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	27 e3       	ldi	r18, 0x37	; 55
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	f9 01       	movw	r30, r18
    1482:	20 81       	ld	r18, Z
    1484:	28 60       	ori	r18, 0x08	; 8
    1486:	fc 01       	movw	r30, r24
    1488:	20 83       	st	Z, r18
    148a:	37 c0       	rjmp	.+110    	; 0x14fa <TIMER_init+0x18a>
		}
		else if(!strcmp(config->compareMatchMode,"clear"))
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	9a 81       	ldd	r25, Y+2	; 0x02
    1490:	47 96       	adiw	r24, 0x17	; 23
    1492:	6d e8       	ldi	r22, 0x8D	; 141
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	0e 94 0c 11 	call	0x2218	; 0x2218 <strcmp>
    149a:	89 2b       	or	r24, r25
    149c:	99 f4       	brne	.+38     	; 0x14c4 <TIMER_init+0x154>
			{
			TCCR0|=(1<<COM01);
    149e:	83 e5       	ldi	r24, 0x53	; 83
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	23 e5       	ldi	r18, 0x53	; 83
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	f9 01       	movw	r30, r18
    14a8:	20 81       	ld	r18, Z
    14aa:	20 62       	ori	r18, 0x20	; 32
    14ac:	fc 01       	movw	r30, r24
    14ae:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    14b0:	87 e3       	ldi	r24, 0x37	; 55
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	27 e3       	ldi	r18, 0x37	; 55
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	f9 01       	movw	r30, r18
    14ba:	20 81       	ld	r18, Z
    14bc:	28 60       	ori	r18, 0x08	; 8
    14be:	fc 01       	movw	r30, r24
    14c0:	20 83       	st	Z, r18
    14c2:	1b c0       	rjmp	.+54     	; 0x14fa <TIMER_init+0x18a>

			}
		else if(!strcmp(config->compareMatchMode,"set"))
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	47 96       	adiw	r24, 0x17	; 23
    14ca:	63 e9       	ldi	r22, 0x93	; 147
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	0e 94 0c 11 	call	0x2218	; 0x2218 <strcmp>
    14d2:	89 2b       	or	r24, r25
    14d4:	91 f4       	brne	.+36     	; 0x14fa <TIMER_init+0x18a>
			{
			TCCR0|=(1<<COM01)|(1<<COM00);
    14d6:	83 e5       	ldi	r24, 0x53	; 83
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	23 e5       	ldi	r18, 0x53	; 83
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	f9 01       	movw	r30, r18
    14e0:	20 81       	ld	r18, Z
    14e2:	20 63       	ori	r18, 0x30	; 48
    14e4:	fc 01       	movw	r30, r24
    14e6:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    14e8:	87 e3       	ldi	r24, 0x37	; 55
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	27 e3       	ldi	r18, 0x37	; 55
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	f9 01       	movw	r30, r18
    14f2:	20 81       	ld	r18, Z
    14f4:	28 60       	ori	r18, 0x08	; 8
    14f6:	fc 01       	movw	r30, r24
    14f8:	20 83       	st	Z, r18

			}
		//enable interrupt
		TIMSK=(1<<OCIE0);
    14fa:	89 e5       	ldi	r24, 0x59	; 89
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	22 e0       	ldi	r18, 0x02	; 2
    1500:	fc 01       	movw	r30, r24
    1502:	20 83       	st	Z, r18
    1504:	6b c0       	rjmp	.+214    	; 0x15dc <TIMER_init+0x26c>

	}
	else if(!strcmp(config->mode,"normal"))
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	9a 81       	ldd	r25, Y+2	; 0x02
    150a:	01 96       	adiw	r24, 0x01	; 1
    150c:	67 e9       	ldi	r22, 0x97	; 151
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	0e 94 0c 11 	call	0x2218	; 0x2218 <strcmp>
    1514:	89 2b       	or	r24, r25
    1516:	79 f4       	brne	.+30     	; 0x1536 <TIMER_init+0x1c6>
	{
		TCCR0|=(1<<FOC0);
    1518:	83 e5       	ldi	r24, 0x53	; 83
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	23 e5       	ldi	r18, 0x53	; 83
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	f9 01       	movw	r30, r18
    1522:	20 81       	ld	r18, Z
    1524:	20 68       	ori	r18, 0x80	; 128
    1526:	fc 01       	movw	r30, r24
    1528:	20 83       	st	Z, r18
		TIMSK=(1<<TOIE0);
    152a:	89 e5       	ldi	r24, 0x59	; 89
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	21 e0       	ldi	r18, 0x01	; 1
    1530:	fc 01       	movw	r30, r24
    1532:	20 83       	st	Z, r18
    1534:	53 c0       	rjmp	.+166    	; 0x15dc <TIMER_init+0x26c>
	}
	else if(!strcmp(config->mode,"pwm"))
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	9a 81       	ldd	r25, Y+2	; 0x02
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	6e e9       	ldi	r22, 0x9E	; 158
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	0e 94 0c 11 	call	0x2218	; 0x2218 <strcmp>
    1544:	89 2b       	or	r24, r25
    1546:	09 f0       	breq	.+2      	; 0x154a <TIMER_init+0x1da>
    1548:	49 c0       	rjmp	.+146    	; 0x15dc <TIMER_init+0x26c>
	{
		TCCR0 |=(1<<WGM00)|(1<<WGM01);
    154a:	83 e5       	ldi	r24, 0x53	; 83
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	23 e5       	ldi	r18, 0x53	; 83
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	f9 01       	movw	r30, r18
    1554:	20 81       	ld	r18, Z
    1556:	28 64       	ori	r18, 0x48	; 72
    1558:	fc 01       	movw	r30, r24
    155a:	20 83       	st	Z, r18
		if(!strcmp(config->pwmMode,"inverting"))
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	9a 81       	ldd	r25, Y+2	; 0x02
    1560:	8b 96       	adiw	r24, 0x2b	; 43
    1562:	62 ea       	ldi	r22, 0xA2	; 162
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	0e 94 0c 11 	call	0x2218	; 0x2218 <strcmp>
    156a:	89 2b       	or	r24, r25
    156c:	e1 f4       	brne	.+56     	; 0x15a6 <TIMER_init+0x236>
				{
				TCCR0|=(1<<COM00);
    156e:	83 e5       	ldi	r24, 0x53	; 83
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	23 e5       	ldi	r18, 0x53	; 83
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	f9 01       	movw	r30, r18
    1578:	20 81       	ld	r18, Z
    157a:	20 61       	ori	r18, 0x10	; 16
    157c:	fc 01       	movw	r30, r24
    157e:	20 83       	st	Z, r18
				TCCR0|=(1<<COM01);
    1580:	83 e5       	ldi	r24, 0x53	; 83
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	23 e5       	ldi	r18, 0x53	; 83
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	f9 01       	movw	r30, r18
    158a:	20 81       	ld	r18, Z
    158c:	20 62       	ori	r18, 0x20	; 32
    158e:	fc 01       	movw	r30, r24
    1590:	20 83       	st	Z, r18
				SET_BIT(DDRB,3);
    1592:	87 e3       	ldi	r24, 0x37	; 55
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	27 e3       	ldi	r18, 0x37	; 55
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	f9 01       	movw	r30, r18
    159c:	20 81       	ld	r18, Z
    159e:	28 60       	ori	r18, 0x08	; 8
    15a0:	fc 01       	movw	r30, r24
    15a2:	20 83       	st	Z, r18
    15a4:	1b c0       	rjmp	.+54     	; 0x15dc <TIMER_init+0x26c>
				}
				else if(!strcmp(config->pwmMode,"non-inverting"))
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	9a 81       	ldd	r25, Y+2	; 0x02
    15aa:	8b 96       	adiw	r24, 0x2b	; 43
    15ac:	6c ea       	ldi	r22, 0xAC	; 172
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	0e 94 0c 11 	call	0x2218	; 0x2218 <strcmp>
    15b4:	89 2b       	or	r24, r25
    15b6:	91 f4       	brne	.+36     	; 0x15dc <TIMER_init+0x26c>
					{
					TCCR0|=(1<<COM01);
    15b8:	83 e5       	ldi	r24, 0x53	; 83
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	23 e5       	ldi	r18, 0x53	; 83
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	f9 01       	movw	r30, r18
    15c2:	20 81       	ld	r18, Z
    15c4:	20 62       	ori	r18, 0x20	; 32
    15c6:	fc 01       	movw	r30, r24
    15c8:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    15ca:	87 e3       	ldi	r24, 0x37	; 55
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	27 e3       	ldi	r18, 0x37	; 55
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	f9 01       	movw	r30, r18
    15d4:	20 81       	ld	r18, Z
    15d6:	28 60       	ori	r18, 0x08	; 8
    15d8:	fc 01       	movw	r30, r24
    15da:	20 83       	st	Z, r18

	}

	}
	///
	if(config->timerNumber==1)
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	9a 81       	ldd	r25, Y+2	; 0x02
    15e0:	fc 01       	movw	r30, r24
    15e2:	80 81       	ld	r24, Z
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	09 f0       	breq	.+2      	; 0x15ea <TIMER_init+0x27a>
    15e8:	30 c1       	rjmp	.+608    	; 0x184a <TIMER_init+0x4da>
		{
			TCCR1A=0;
    15ea:	8f e4       	ldi	r24, 0x4F	; 79
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	fc 01       	movw	r30, r24
    15f0:	10 82       	st	Z, r1
			TCCR1B=0;
    15f2:	8e e4       	ldi	r24, 0x4E	; 78
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	fc 01       	movw	r30, r24
    15f8:	10 82       	st	Z, r1

		switch(config->prescaler)
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	9a 81       	ldd	r25, Y+2	; 0x02
    15fe:	fc 01       	movw	r30, r24
    1600:	85 89       	ldd	r24, Z+21	; 0x15
    1602:	96 89       	ldd	r25, Z+22	; 0x16
    1604:	80 34       	cpi	r24, 0x40	; 64
    1606:	91 05       	cpc	r25, r1
    1608:	c1 f0       	breq	.+48     	; 0x163a <TIMER_init+0x2ca>
    160a:	81 34       	cpi	r24, 0x41	; 65
    160c:	91 05       	cpc	r25, r1
    160e:	18 f4       	brcc	.+6      	; 0x1616 <TIMER_init+0x2a6>
    1610:	08 97       	sbiw	r24, 0x08	; 8
    1612:	49 f0       	breq	.+18     	; 0x1626 <TIMER_init+0x2b6>
    1614:	30 c0       	rjmp	.+96     	; 0x1676 <TIMER_init+0x306>
    1616:	81 15       	cp	r24, r1
    1618:	f1 e0       	ldi	r31, 0x01	; 1
    161a:	9f 07       	cpc	r25, r31
    161c:	c1 f0       	breq	.+48     	; 0x164e <TIMER_init+0x2de>
    161e:	81 15       	cp	r24, r1
    1620:	94 40       	sbci	r25, 0x04	; 4
    1622:	f9 f0       	breq	.+62     	; 0x1662 <TIMER_init+0x2f2>
    1624:	28 c0       	rjmp	.+80     	; 0x1676 <TIMER_init+0x306>
		{
		case 8:
			TCCR1B|=(1<<CS11);
    1626:	8e e4       	ldi	r24, 0x4E	; 78
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	2e e4       	ldi	r18, 0x4E	; 78
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	f9 01       	movw	r30, r18
    1630:	20 81       	ld	r18, Z
    1632:	22 60       	ori	r18, 0x02	; 2
    1634:	fc 01       	movw	r30, r24
    1636:	20 83       	st	Z, r18
			break;
    1638:	27 c0       	rjmp	.+78     	; 0x1688 <TIMER_init+0x318>
		case 64:
				TCCR1B|=(1<<CS10)|(1<<CS11);
    163a:	8e e4       	ldi	r24, 0x4E	; 78
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	2e e4       	ldi	r18, 0x4E	; 78
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	f9 01       	movw	r30, r18
    1644:	20 81       	ld	r18, Z
    1646:	23 60       	ori	r18, 0x03	; 3
    1648:	fc 01       	movw	r30, r24
    164a:	20 83       	st	Z, r18
				break;
    164c:	1d c0       	rjmp	.+58     	; 0x1688 <TIMER_init+0x318>
		case 256:
				TCCR1B|=(1<<CS12);
    164e:	8e e4       	ldi	r24, 0x4E	; 78
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	2e e4       	ldi	r18, 0x4E	; 78
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	f9 01       	movw	r30, r18
    1658:	20 81       	ld	r18, Z
    165a:	24 60       	ori	r18, 0x04	; 4
    165c:	fc 01       	movw	r30, r24
    165e:	20 83       	st	Z, r18
				break;
    1660:	13 c0       	rjmp	.+38     	; 0x1688 <TIMER_init+0x318>
		case 1024:
				TCCR1B|=(1<<CS10)|(1<<CS12);
    1662:	8e e4       	ldi	r24, 0x4E	; 78
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	2e e4       	ldi	r18, 0x4E	; 78
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	f9 01       	movw	r30, r18
    166c:	20 81       	ld	r18, Z
    166e:	25 60       	ori	r18, 0x05	; 5
    1670:	fc 01       	movw	r30, r24
    1672:	20 83       	st	Z, r18
				break;
    1674:	09 c0       	rjmp	.+18     	; 0x1688 <TIMER_init+0x318>
		default:
				TCCR1B|=(1<<CS10);
    1676:	8e e4       	ldi	r24, 0x4E	; 78
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	2e e4       	ldi	r18, 0x4E	; 78
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	f9 01       	movw	r30, r18
    1680:	20 81       	ld	r18, Z
    1682:	21 60       	ori	r18, 0x01	; 1
    1684:	fc 01       	movw	r30, r24
    1686:	20 83       	st	Z, r18

			}
//FOR A
		if(!strcmp(config->mode,"compare"))
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	9a 81       	ldd	r25, Y+2	; 0x02
    168c:	01 96       	adiw	r24, 0x01	; 1
    168e:	6e e7       	ldi	r22, 0x7E	; 126
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	0e 94 0c 11 	call	0x2218	; 0x2218 <strcmp>
    1696:	89 2b       	or	r24, r25
    1698:	09 f0       	breq	.+2      	; 0x169c <TIMER_init+0x32c>
    169a:	6b c0       	rjmp	.+214    	; 0x1772 <TIMER_init+0x402>
		{	TCCR1A|=(1<<FOC1A);
    169c:	8f e4       	ldi	r24, 0x4F	; 79
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	2f e4       	ldi	r18, 0x4F	; 79
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	f9 01       	movw	r30, r18
    16a6:	20 81       	ld	r18, Z
    16a8:	28 60       	ori	r18, 0x08	; 8
    16aa:	fc 01       	movw	r30, r24
    16ac:	20 83       	st	Z, r18
			TCCR1B|=(1<<WGM12);
    16ae:	8e e4       	ldi	r24, 0x4E	; 78
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	2e e4       	ldi	r18, 0x4E	; 78
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	f9 01       	movw	r30, r18
    16b8:	20 81       	ld	r18, Z
    16ba:	28 60       	ori	r18, 0x08	; 8
    16bc:	fc 01       	movw	r30, r24
    16be:	20 83       	st	Z, r18
			if(!strcmp(config->compareMatchMode,"toggle"))
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	9a 81       	ldd	r25, Y+2	; 0x02
    16c4:	47 96       	adiw	r24, 0x17	; 23
    16c6:	66 e8       	ldi	r22, 0x86	; 134
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	0e 94 0c 11 	call	0x2218	; 0x2218 <strcmp>
    16ce:	89 2b       	or	r24, r25
    16d0:	99 f4       	brne	.+38     	; 0x16f8 <TIMER_init+0x388>
			{
			TCCR1A|=(1<<COM1A0);
    16d2:	8f e4       	ldi	r24, 0x4F	; 79
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	2f e4       	ldi	r18, 0x4F	; 79
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	f9 01       	movw	r30, r18
    16dc:	20 81       	ld	r18, Z
    16de:	20 64       	ori	r18, 0x40	; 64
    16e0:	fc 01       	movw	r30, r24
    16e2:	20 83       	st	Z, r18
			SET_BIT(DDRD,5);
    16e4:	81 e3       	ldi	r24, 0x31	; 49
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	21 e3       	ldi	r18, 0x31	; 49
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	f9 01       	movw	r30, r18
    16ee:	20 81       	ld	r18, Z
    16f0:	20 62       	ori	r18, 0x20	; 32
    16f2:	fc 01       	movw	r30, r24
    16f4:	20 83       	st	Z, r18
    16f6:	37 c0       	rjmp	.+110    	; 0x1766 <TIMER_init+0x3f6>
			}
			else if(!strcmp(config->compareMatchMode,"clear"))
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	9a 81       	ldd	r25, Y+2	; 0x02
    16fc:	47 96       	adiw	r24, 0x17	; 23
    16fe:	6d e8       	ldi	r22, 0x8D	; 141
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	0e 94 0c 11 	call	0x2218	; 0x2218 <strcmp>
    1706:	89 2b       	or	r24, r25
    1708:	99 f4       	brne	.+38     	; 0x1730 <TIMER_init+0x3c0>
				{
				TCCR1A|=(1<<COM1A1);
    170a:	8f e4       	ldi	r24, 0x4F	; 79
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	2f e4       	ldi	r18, 0x4F	; 79
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	f9 01       	movw	r30, r18
    1714:	20 81       	ld	r18, Z
    1716:	20 68       	ori	r18, 0x80	; 128
    1718:	fc 01       	movw	r30, r24
    171a:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    171c:	81 e3       	ldi	r24, 0x31	; 49
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	21 e3       	ldi	r18, 0x31	; 49
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	f9 01       	movw	r30, r18
    1726:	20 81       	ld	r18, Z
    1728:	20 62       	ori	r18, 0x20	; 32
    172a:	fc 01       	movw	r30, r24
    172c:	20 83       	st	Z, r18
    172e:	1b c0       	rjmp	.+54     	; 0x1766 <TIMER_init+0x3f6>

				}
			else if(!strcmp(config->compareMatchMode,"set"))
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	9a 81       	ldd	r25, Y+2	; 0x02
    1734:	47 96       	adiw	r24, 0x17	; 23
    1736:	63 e9       	ldi	r22, 0x93	; 147
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	0e 94 0c 11 	call	0x2218	; 0x2218 <strcmp>
    173e:	89 2b       	or	r24, r25
    1740:	91 f4       	brne	.+36     	; 0x1766 <TIMER_init+0x3f6>
				{
				TCCR1A|=(1<<COM1A1)|(1<<COM1A0);
    1742:	8f e4       	ldi	r24, 0x4F	; 79
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	2f e4       	ldi	r18, 0x4F	; 79
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	f9 01       	movw	r30, r18
    174c:	20 81       	ld	r18, Z
    174e:	20 6c       	ori	r18, 0xC0	; 192
    1750:	fc 01       	movw	r30, r24
    1752:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    1754:	81 e3       	ldi	r24, 0x31	; 49
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	21 e3       	ldi	r18, 0x31	; 49
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	f9 01       	movw	r30, r18
    175e:	20 81       	ld	r18, Z
    1760:	20 62       	ori	r18, 0x20	; 32
    1762:	fc 01       	movw	r30, r24
    1764:	20 83       	st	Z, r18

				}
			//enable interrupt
			TIMSK=(1<<OCIE1A);
    1766:	89 e5       	ldi	r24, 0x59	; 89
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	20 e1       	ldi	r18, 0x10	; 16
    176c:	fc 01       	movw	r30, r24
    176e:	20 83       	st	Z, r18
    1770:	6b c0       	rjmp	.+214    	; 0x1848 <TIMER_init+0x4d8>

		}
		else if(!strcmp(config->mode,"normal"))
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	9a 81       	ldd	r25, Y+2	; 0x02
    1776:	01 96       	adiw	r24, 0x01	; 1
    1778:	67 e9       	ldi	r22, 0x97	; 151
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	0e 94 0c 11 	call	0x2218	; 0x2218 <strcmp>
    1780:	89 2b       	or	r24, r25
    1782:	79 f4       	brne	.+30     	; 0x17a2 <TIMER_init+0x432>
		{
			TCCR0|=(1<<FOC0);
    1784:	83 e5       	ldi	r24, 0x53	; 83
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	23 e5       	ldi	r18, 0x53	; 83
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	f9 01       	movw	r30, r18
    178e:	20 81       	ld	r18, Z
    1790:	20 68       	ori	r18, 0x80	; 128
    1792:	fc 01       	movw	r30, r24
    1794:	20 83       	st	Z, r18
			TIMSK=(1<<TOIE0);
    1796:	89 e5       	ldi	r24, 0x59	; 89
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	21 e0       	ldi	r18, 0x01	; 1
    179c:	fc 01       	movw	r30, r24
    179e:	20 83       	st	Z, r18
    17a0:	53 c0       	rjmp	.+166    	; 0x1848 <TIMER_init+0x4d8>
		}
		else if(!strcmp(config->mode,"pwm"))
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	9a 81       	ldd	r25, Y+2	; 0x02
    17a6:	01 96       	adiw	r24, 0x01	; 1
    17a8:	6e e9       	ldi	r22, 0x9E	; 158
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	0e 94 0c 11 	call	0x2218	; 0x2218 <strcmp>
    17b0:	89 2b       	or	r24, r25
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <TIMER_init+0x446>
    17b4:	49 c0       	rjmp	.+146    	; 0x1848 <TIMER_init+0x4d8>
		{
			TCCR0 |=(1<<WGM00)|(1<<WGM01);
    17b6:	83 e5       	ldi	r24, 0x53	; 83
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	23 e5       	ldi	r18, 0x53	; 83
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	f9 01       	movw	r30, r18
    17c0:	20 81       	ld	r18, Z
    17c2:	28 64       	ori	r18, 0x48	; 72
    17c4:	fc 01       	movw	r30, r24
    17c6:	20 83       	st	Z, r18
			if(!strcmp(config->pwmMode,"inverting"))
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	9a 81       	ldd	r25, Y+2	; 0x02
    17cc:	8b 96       	adiw	r24, 0x2b	; 43
    17ce:	62 ea       	ldi	r22, 0xA2	; 162
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	0e 94 0c 11 	call	0x2218	; 0x2218 <strcmp>
    17d6:	89 2b       	or	r24, r25
    17d8:	e1 f4       	brne	.+56     	; 0x1812 <TIMER_init+0x4a2>
					{
					TCCR0|=(1<<COM00);
    17da:	83 e5       	ldi	r24, 0x53	; 83
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	23 e5       	ldi	r18, 0x53	; 83
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	f9 01       	movw	r30, r18
    17e4:	20 81       	ld	r18, Z
    17e6:	20 61       	ori	r18, 0x10	; 16
    17e8:	fc 01       	movw	r30, r24
    17ea:	20 83       	st	Z, r18
					TCCR0|=(1<<COM01);
    17ec:	83 e5       	ldi	r24, 0x53	; 83
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	23 e5       	ldi	r18, 0x53	; 83
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	f9 01       	movw	r30, r18
    17f6:	20 81       	ld	r18, Z
    17f8:	20 62       	ori	r18, 0x20	; 32
    17fa:	fc 01       	movw	r30, r24
    17fc:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    17fe:	87 e3       	ldi	r24, 0x37	; 55
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	27 e3       	ldi	r18, 0x37	; 55
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	f9 01       	movw	r30, r18
    1808:	20 81       	ld	r18, Z
    180a:	28 60       	ori	r18, 0x08	; 8
    180c:	fc 01       	movw	r30, r24
    180e:	20 83       	st	Z, r18
    1810:	1b c0       	rjmp	.+54     	; 0x1848 <TIMER_init+0x4d8>
					}
					else if(!strcmp(config->pwmMode,"non-inverting"))
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	9a 81       	ldd	r25, Y+2	; 0x02
    1816:	8b 96       	adiw	r24, 0x2b	; 43
    1818:	6c ea       	ldi	r22, 0xAC	; 172
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	0e 94 0c 11 	call	0x2218	; 0x2218 <strcmp>
    1820:	89 2b       	or	r24, r25
    1822:	91 f4       	brne	.+36     	; 0x1848 <TIMER_init+0x4d8>
						{
						TCCR0|=(1<<COM01);
    1824:	83 e5       	ldi	r24, 0x53	; 83
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	23 e5       	ldi	r18, 0x53	; 83
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	f9 01       	movw	r30, r18
    182e:	20 81       	ld	r18, Z
    1830:	20 62       	ori	r18, 0x20	; 32
    1832:	fc 01       	movw	r30, r24
    1834:	20 83       	st	Z, r18
						SET_BIT(DDRB,3);
    1836:	87 e3       	ldi	r24, 0x37	; 55
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	27 e3       	ldi	r18, 0x37	; 55
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	f9 01       	movw	r30, r18
    1840:	20 81       	ld	r18, Z
    1842:	28 60       	ori	r18, 0x08	; 8
    1844:	fc 01       	movw	r30, r24
    1846:	20 83       	st	Z, r18
	//TCCR0=(1<<FOC0)|(1<<COM00)|(1<<CS00)|(1<<CS02);


	//enable

	sei();
    1848:	78 94       	sei
}
}
    184a:	00 00       	nop
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	08 95       	ret

00001856 <TIMER_setCompare>:

void TIMER_setCompare(uint16 compareValue)
{
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	00 d0       	rcall	.+0      	; 0x185c <TIMER_setCompare+0x6>
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	9a 83       	std	Y+2, r25	; 0x02
    1862:	89 83       	std	Y+1, r24	; 0x01
	switch (configPtr->timerNumber)
    1864:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <configPtr>
    1868:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <configPtr+0x1>
    186c:	fc 01       	movw	r30, r24
    186e:	80 81       	ld	r24, Z
    1870:	88 2f       	mov	r24, r24
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	19 f0       	breq	.+6      	; 0x187e <TIMER_setCompare+0x28>
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	59 f0       	breq	.+22     	; 0x1892 <TIMER_setCompare+0x3c>
	case 1:
		TCNT1=0;
		OCR1A=compareValue;
		break;
	}
}
    187c:	17 c0       	rjmp	.+46     	; 0x18ac <TIMER_setCompare+0x56>
void TIMER_setCompare(uint16 compareValue)
{
	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=0;
    187e:	82 e5       	ldi	r24, 0x52	; 82
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	fc 01       	movw	r30, r24
    1884:	10 82       	st	Z, r1
		OCR0=compareValue;
    1886:	8c e5       	ldi	r24, 0x5C	; 92
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	29 81       	ldd	r18, Y+1	; 0x01
    188c:	fc 01       	movw	r30, r24
    188e:	20 83       	st	Z, r18
		break;
    1890:	0d c0       	rjmp	.+26     	; 0x18ac <TIMER_setCompare+0x56>
	case 1:
		TCNT1=0;
    1892:	8c e4       	ldi	r24, 0x4C	; 76
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	fc 01       	movw	r30, r24
    1898:	11 82       	std	Z+1, r1	; 0x01
    189a:	10 82       	st	Z, r1
		OCR1A=compareValue;
    189c:	8a e4       	ldi	r24, 0x4A	; 74
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	29 81       	ldd	r18, Y+1	; 0x01
    18a2:	3a 81       	ldd	r19, Y+2	; 0x02
    18a4:	fc 01       	movw	r30, r24
    18a6:	31 83       	std	Z+1, r19	; 0x01
    18a8:	20 83       	st	Z, r18
		break;
    18aa:	00 00       	nop
	}
}
    18ac:	00 00       	nop
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <TIMER_setNormal>:
void TIMER_setNormal(uint8 initValue)

{
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	1f 92       	push	r1
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	89 83       	std	Y+1, r24	; 0x01

	switch (configPtr->timerNumber)
    18c4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <configPtr>
    18c8:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <configPtr+0x1>
    18cc:	fc 01       	movw	r30, r24
    18ce:	80 81       	ld	r24, Z
    18d0:	88 2f       	mov	r24, r24
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	19 f0       	breq	.+6      	; 0x18de <TIMER_setNormal+0x26>
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	39 f0       	breq	.+14     	; 0x18ea <TIMER_setNormal+0x32>
		TCNT1=initValue;
		break;


}
}
    18dc:	0f c0       	rjmp	.+30     	; 0x18fc <TIMER_setNormal+0x44>
{

	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=initValue;
    18de:	82 e5       	ldi	r24, 0x52	; 82
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	29 81       	ldd	r18, Y+1	; 0x01
    18e4:	fc 01       	movw	r30, r24
    18e6:	20 83       	st	Z, r18
		break;
    18e8:	09 c0       	rjmp	.+18     	; 0x18fc <TIMER_setNormal+0x44>
	case 1:
		TCNT1=initValue;
    18ea:	8c e4       	ldi	r24, 0x4C	; 76
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	29 81       	ldd	r18, Y+1	; 0x01
    18f0:	22 2f       	mov	r18, r18
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	fc 01       	movw	r30, r24
    18f6:	31 83       	std	Z+1, r19	; 0x01
    18f8:	20 83       	st	Z, r18
		break;
    18fa:	00 00       	nop


}
}
    18fc:	00 00       	nop
    18fe:	0f 90       	pop	r0
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	08 95       	ret

00001906 <TIMER_setpwm>:
void TIMER_setpwm(uint8 dutyCycle)
{
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
    190a:	1f 92       	push	r1
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
    1912:	82 e5       	ldi	r24, 0x52	; 82
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	fc 01       	movw	r30, r24
    1918:	10 82       	st	Z, r1
	OCR0=dutyCycle;
    191a:	8c e5       	ldi	r24, 0x5C	; 92
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	29 81       	ldd	r18, Y+1	; 0x01
    1920:	fc 01       	movw	r30, r24
    1922:	20 83       	st	Z, r18
}
    1924:	00 00       	nop
    1926:	0f 90       	pop	r0
    1928:	df 91       	pop	r29
    192a:	cf 91       	pop	r28
    192c:	08 95       	ret

0000192e <TIMER_setCallBackPtr>:
void TIMER_setCallBackPtr(void(*a_ptr)(void))
{
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	00 d0       	rcall	.+0      	; 0x1934 <TIMER_setCallBackPtr+0x6>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	89 83       	std	Y+1, r24	; 0x01
g_callBackPtr=a_ptr;
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	9a 81       	ldd	r25, Y+2	; 0x02
    1940:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <g_callBackPtr+0x1>
    1944:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <g_callBackPtr>
}
    1948:	00 00       	nop
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	08 95       	ret

00001954 <TIMER_stop>:
void TIMER_stop()
{
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
	switch (configPtr->timerNumber)
    195c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <configPtr>
    1960:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <configPtr+0x1>
    1964:	fc 01       	movw	r30, r24
    1966:	80 81       	ld	r24, Z
    1968:	88 2f       	mov	r24, r24
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	89 2b       	or	r24, r25
    196e:	51 f4       	brne	.+20     	; 0x1984 <TIMER_stop+0x30>

{
case 0:
	TCCR0&=~(1<<CS00)&~(1<<CS01)&~(1<<CS02);
    1970:	83 e5       	ldi	r24, 0x53	; 83
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	23 e5       	ldi	r18, 0x53	; 83
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	f9 01       	movw	r30, r18
    197a:	20 81       	ld	r18, Z
    197c:	28 7f       	andi	r18, 0xF8	; 248
    197e:	fc 01       	movw	r30, r24
    1980:	20 83       	st	Z, r18
	break;
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <TIMER_stop+0x32>
case 1:
	break;
    1984:	00 00       	nop

}
}
    1986:	00 00       	nop
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	08 95       	ret

0000198e <UART_init>:
 *      Author: hesham
 */
#include"uart.h"

void UART_init(UART_configurationType * config)
{UCSRA=0;
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	00 d0       	rcall	.+0      	; 0x1998 <UART_init+0xa>
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	8b e2       	ldi	r24, 0x2B	; 43
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	fc 01       	movw	r30, r24
    19a6:	10 82       	st	Z, r1
UCSRB=0;
    19a8:	8a e2       	ldi	r24, 0x2A	; 42
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	fc 01       	movw	r30, r24
    19ae:	10 82       	st	Z, r1
UCSRC=0;
    19b0:	80 e4       	ldi	r24, 0x40	; 64
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	fc 01       	movw	r30, r24
    19b6:	10 82       	st	Z, r1
/* enables */
	if(config->mode=="normal")
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	9a 81       	ldd	r25, Y+2	; 0x02
    19bc:	05 96       	adiw	r24, 0x05	; 5
    19be:	8a 5b       	subi	r24, 0xBA	; 186
    19c0:	90 40       	sbci	r25, 0x00	; 0
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <UART_init+0x38>
    19c4:	60 c0       	rjmp	.+192    	; 0x1a86 <UART_init+0xf8>
	{
CLEAR_BIT(UCSRA,U2X);
    19c6:	8b e2       	ldi	r24, 0x2B	; 43
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	2b e2       	ldi	r18, 0x2B	; 43
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	f9 01       	movw	r30, r18
    19d0:	20 81       	ld	r18, Z
    19d2:	2d 7f       	andi	r18, 0xFD	; 253
    19d4:	fc 01       	movw	r30, r24
    19d6:	20 83       	st	Z, r18
UBRRL=((F_CPU /(16*config->buadRate))-1);
    19d8:	09 e2       	ldi	r16, 0x29	; 41
    19da:	10 e0       	ldi	r17, 0x00	; 0
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	9a 81       	ldd	r25, Y+2	; 0x02
    19e0:	fc 01       	movw	r30, r24
    19e2:	81 81       	ldd	r24, Z+1	; 0x01
    19e4:	92 81       	ldd	r25, Z+2	; 0x02
    19e6:	a3 81       	ldd	r26, Z+3	; 0x03
    19e8:	b4 81       	ldd	r27, Z+4	; 0x04
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	aa 1f       	adc	r26, r26
    19f0:	bb 1f       	adc	r27, r27
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	aa 1f       	adc	r26, r26
    19f8:	bb 1f       	adc	r27, r27
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	aa 1f       	adc	r26, r26
    1a00:	bb 1f       	adc	r27, r27
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	aa 1f       	adc	r26, r26
    1a08:	bb 1f       	adc	r27, r27
    1a0a:	9c 01       	movw	r18, r24
    1a0c:	ad 01       	movw	r20, r26
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	92 e1       	ldi	r25, 0x12	; 18
    1a12:	aa e7       	ldi	r26, 0x7A	; 122
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	bc 01       	movw	r22, r24
    1a18:	cd 01       	movw	r24, r26
    1a1a:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__udivmodsi4>
    1a1e:	da 01       	movw	r26, r20
    1a20:	c9 01       	movw	r24, r18
    1a22:	81 50       	subi	r24, 0x01	; 1
    1a24:	f8 01       	movw	r30, r16
    1a26:	80 83       	st	Z, r24
UBRRH=((F_CPU /(16*config->buadRate))-1)>>8;
    1a28:	00 e4       	ldi	r16, 0x40	; 64
    1a2a:	10 e0       	ldi	r17, 0x00	; 0
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a30:	fc 01       	movw	r30, r24
    1a32:	81 81       	ldd	r24, Z+1	; 0x01
    1a34:	92 81       	ldd	r25, Z+2	; 0x02
    1a36:	a3 81       	ldd	r26, Z+3	; 0x03
    1a38:	b4 81       	ldd	r27, Z+4	; 0x04
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	aa 1f       	adc	r26, r26
    1a40:	bb 1f       	adc	r27, r27
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	aa 1f       	adc	r26, r26
    1a48:	bb 1f       	adc	r27, r27
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	aa 1f       	adc	r26, r26
    1a50:	bb 1f       	adc	r27, r27
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	aa 1f       	adc	r26, r26
    1a58:	bb 1f       	adc	r27, r27
    1a5a:	9c 01       	movw	r18, r24
    1a5c:	ad 01       	movw	r20, r26
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	92 e1       	ldi	r25, 0x12	; 18
    1a62:	aa e7       	ldi	r26, 0x7A	; 122
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__udivmodsi4>
    1a6e:	da 01       	movw	r26, r20
    1a70:	c9 01       	movw	r24, r18
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	a1 09       	sbc	r26, r1
    1a76:	b1 09       	sbc	r27, r1
    1a78:	89 2f       	mov	r24, r25
    1a7a:	9a 2f       	mov	r25, r26
    1a7c:	ab 2f       	mov	r26, r27
    1a7e:	bb 27       	eor	r27, r27
    1a80:	f8 01       	movw	r30, r16
    1a82:	80 83       	st	Z, r24
    1a84:	61 c0       	rjmp	.+194    	; 0x1b48 <UART_init+0x1ba>


	}
	else if(!strcmp(config->mode,"double speed"))
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8a:	05 96       	adiw	r24, 0x05	; 5
    1a8c:	61 ec       	ldi	r22, 0xC1	; 193
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	0e 94 0c 11 	call	0x2218	; 0x2218 <strcmp>
    1a94:	89 2b       	or	r24, r25
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <UART_init+0x10c>
    1a98:	57 c0       	rjmp	.+174    	; 0x1b48 <UART_init+0x1ba>
	{
		SET_BIT(UCSRA,U2X);
    1a9a:	8b e2       	ldi	r24, 0x2B	; 43
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	2b e2       	ldi	r18, 0x2B	; 43
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	f9 01       	movw	r30, r18
    1aa4:	20 81       	ld	r18, Z
    1aa6:	22 60       	ori	r18, 0x02	; 2
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	20 83       	st	Z, r18
		UBRRL=((F_CPU /(8*config->buadRate))-1);
    1aac:	09 e2       	ldi	r16, 0x29	; 41
    1aae:	10 e0       	ldi	r17, 0x00	; 0
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	81 81       	ldd	r24, Z+1	; 0x01
    1ab8:	92 81       	ldd	r25, Z+2	; 0x02
    1aba:	a3 81       	ldd	r26, Z+3	; 0x03
    1abc:	b4 81       	ldd	r27, Z+4	; 0x04
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	aa 1f       	adc	r26, r26
    1ac4:	bb 1f       	adc	r27, r27
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	aa 1f       	adc	r26, r26
    1acc:	bb 1f       	adc	r27, r27
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	aa 1f       	adc	r26, r26
    1ad4:	bb 1f       	adc	r27, r27
    1ad6:	9c 01       	movw	r18, r24
    1ad8:	ad 01       	movw	r20, r26
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	92 e1       	ldi	r25, 0x12	; 18
    1ade:	aa e7       	ldi	r26, 0x7A	; 122
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	bc 01       	movw	r22, r24
    1ae4:	cd 01       	movw	r24, r26
    1ae6:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__udivmodsi4>
    1aea:	da 01       	movw	r26, r20
    1aec:	c9 01       	movw	r24, r18
    1aee:	81 50       	subi	r24, 0x01	; 1
    1af0:	f8 01       	movw	r30, r16
    1af2:	80 83       	st	Z, r24
		UBRRH=((F_CPU /(8*config->buadRate))-1)>>8;
    1af4:	00 e4       	ldi	r16, 0x40	; 64
    1af6:	10 e0       	ldi	r17, 0x00	; 0
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	9a 81       	ldd	r25, Y+2	; 0x02
    1afc:	fc 01       	movw	r30, r24
    1afe:	81 81       	ldd	r24, Z+1	; 0x01
    1b00:	92 81       	ldd	r25, Z+2	; 0x02
    1b02:	a3 81       	ldd	r26, Z+3	; 0x03
    1b04:	b4 81       	ldd	r27, Z+4	; 0x04
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	aa 1f       	adc	r26, r26
    1b0c:	bb 1f       	adc	r27, r27
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	aa 1f       	adc	r26, r26
    1b14:	bb 1f       	adc	r27, r27
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	aa 1f       	adc	r26, r26
    1b1c:	bb 1f       	adc	r27, r27
    1b1e:	9c 01       	movw	r18, r24
    1b20:	ad 01       	movw	r20, r26
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	92 e1       	ldi	r25, 0x12	; 18
    1b26:	aa e7       	ldi	r26, 0x7A	; 122
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	bc 01       	movw	r22, r24
    1b2c:	cd 01       	movw	r24, r26
    1b2e:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <__udivmodsi4>
    1b32:	da 01       	movw	r26, r20
    1b34:	c9 01       	movw	r24, r18
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	a1 09       	sbc	r26, r1
    1b3a:	b1 09       	sbc	r27, r1
    1b3c:	89 2f       	mov	r24, r25
    1b3e:	9a 2f       	mov	r25, r26
    1b40:	ab 2f       	mov	r26, r27
    1b42:	bb 27       	eor	r27, r27
    1b44:	f8 01       	movw	r30, r16
    1b46:	80 83       	st	Z, r24

	}


/* TO enable writing on Register UCSRC (used for define the frame )as it has the same address with UBRR register */
SET_BIT(UCSRC,URSEL);
    1b48:	80 e4       	ldi	r24, 0x40	; 64
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	20 e4       	ldi	r18, 0x40	; 64
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	f9 01       	movw	r30, r18
    1b52:	20 81       	ld	r18, Z
    1b54:	20 68       	ori	r18, 0x80	; 128
    1b56:	fc 01       	movw	r30, r24
    1b58:	20 83       	st	Z, r18
/* the UART frame parameters*/
/* character size */
//SET_BIT(UCSRC,UCSZ0);
//SET_BIT(UCSRC,UCSZ1);
switch(config->character_size)
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	fc 01       	movw	r30, r24
    1b60:	80 81       	ld	r24, Z
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	86 30       	cpi	r24, 0x06	; 6
    1b68:	91 05       	cpc	r25, r1
    1b6a:	f9 f0       	breq	.+62     	; 0x1baa <UART_init+0x21c>
    1b6c:	87 30       	cpi	r24, 0x07	; 7
    1b6e:	91 05       	cpc	r25, r1
    1b70:	1c f4       	brge	.+6      	; 0x1b78 <UART_init+0x1ea>
    1b72:	05 97       	sbiw	r24, 0x05	; 5
    1b74:	39 f0       	breq	.+14     	; 0x1b84 <UART_init+0x1f6>
    1b76:	5b c0       	rjmp	.+182    	; 0x1c2e <UART_init+0x2a0>
    1b78:	87 30       	cpi	r24, 0x07	; 7
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	49 f1       	breq	.+82     	; 0x1bd0 <UART_init+0x242>
    1b7e:	09 97       	sbiw	r24, 0x09	; 9
    1b80:	d1 f1       	breq	.+116    	; 0x1bf6 <UART_init+0x268>
    1b82:	55 c0       	rjmp	.+170    	; 0x1c2e <UART_init+0x2a0>
{
case 5:
	CLEAR_BIT(UCSRC,UCSZ0);
    1b84:	80 e4       	ldi	r24, 0x40	; 64
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	20 e4       	ldi	r18, 0x40	; 64
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	f9 01       	movw	r30, r18
    1b8e:	20 81       	ld	r18, Z
    1b90:	2d 7f       	andi	r18, 0xFD	; 253
    1b92:	fc 01       	movw	r30, r24
    1b94:	20 83       	st	Z, r18
	CLEAR_BIT(UCSRC,UCSZ1);
    1b96:	80 e4       	ldi	r24, 0x40	; 64
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	20 e4       	ldi	r18, 0x40	; 64
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	f9 01       	movw	r30, r18
    1ba0:	20 81       	ld	r18, Z
    1ba2:	2b 7f       	andi	r18, 0xFB	; 251
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	20 83       	st	Z, r18
	break;
    1ba8:	54 c0       	rjmp	.+168    	; 0x1c52 <UART_init+0x2c4>

case 6:
	CLEAR_BIT(UCSRC,UCSZ0);
    1baa:	80 e4       	ldi	r24, 0x40	; 64
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	20 e4       	ldi	r18, 0x40	; 64
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	f9 01       	movw	r30, r18
    1bb4:	20 81       	ld	r18, Z
    1bb6:	2d 7f       	andi	r18, 0xFD	; 253
    1bb8:	fc 01       	movw	r30, r24
    1bba:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    1bbc:	80 e4       	ldi	r24, 0x40	; 64
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	20 e4       	ldi	r18, 0x40	; 64
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	f9 01       	movw	r30, r18
    1bc6:	20 81       	ld	r18, Z
    1bc8:	24 60       	ori	r18, 0x04	; 4
    1bca:	fc 01       	movw	r30, r24
    1bcc:	20 83       	st	Z, r18
	break;
    1bce:	41 c0       	rjmp	.+130    	; 0x1c52 <UART_init+0x2c4>
case 7:
	CLEAR_BIT(UCSRC,UCSZ1);
    1bd0:	80 e4       	ldi	r24, 0x40	; 64
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	20 e4       	ldi	r18, 0x40	; 64
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	f9 01       	movw	r30, r18
    1bda:	20 81       	ld	r18, Z
    1bdc:	2b 7f       	andi	r18, 0xFB	; 251
    1bde:	fc 01       	movw	r30, r24
    1be0:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ0);
    1be2:	80 e4       	ldi	r24, 0x40	; 64
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	20 e4       	ldi	r18, 0x40	; 64
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	f9 01       	movw	r30, r18
    1bec:	20 81       	ld	r18, Z
    1bee:	22 60       	ori	r18, 0x02	; 2
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	20 83       	st	Z, r18
		break;
    1bf4:	2e c0       	rjmp	.+92     	; 0x1c52 <UART_init+0x2c4>
case 9:
	SET_BIT(UCSRC,UCSZ0);
    1bf6:	80 e4       	ldi	r24, 0x40	; 64
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	20 e4       	ldi	r18, 0x40	; 64
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	f9 01       	movw	r30, r18
    1c00:	20 81       	ld	r18, Z
    1c02:	22 60       	ori	r18, 0x02	; 2
    1c04:	fc 01       	movw	r30, r24
    1c06:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    1c08:	80 e4       	ldi	r24, 0x40	; 64
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	20 e4       	ldi	r18, 0x40	; 64
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	f9 01       	movw	r30, r18
    1c12:	20 81       	ld	r18, Z
    1c14:	24 60       	ori	r18, 0x04	; 4
    1c16:	fc 01       	movw	r30, r24
    1c18:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ2);
    1c1a:	80 e4       	ldi	r24, 0x40	; 64
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	20 e4       	ldi	r18, 0x40	; 64
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	f9 01       	movw	r30, r18
    1c24:	20 81       	ld	r18, Z
    1c26:	24 60       	ori	r18, 0x04	; 4
    1c28:	fc 01       	movw	r30, r24
    1c2a:	20 83       	st	Z, r18


	break;
    1c2c:	12 c0       	rjmp	.+36     	; 0x1c52 <UART_init+0x2c4>

default :
	//SET_BIT(UCSRC,URSEL);
	SET_BIT(UCSRC,UCSZ0);
    1c2e:	80 e4       	ldi	r24, 0x40	; 64
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	20 e4       	ldi	r18, 0x40	; 64
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	f9 01       	movw	r30, r18
    1c38:	20 81       	ld	r18, Z
    1c3a:	22 60       	ori	r18, 0x02	; 2
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    1c40:	80 e4       	ldi	r24, 0x40	; 64
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	20 e4       	ldi	r18, 0x40	; 64
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	f9 01       	movw	r30, r18
    1c4a:	20 81       	ld	r18, Z
    1c4c:	24 60       	ori	r18, 0x04	; 4
    1c4e:	fc 01       	movw	r30, r24
    1c50:	20 83       	st	Z, r18
/* write on UBRR instead of ucsrc register */
//CLEAR_BIT(UCSRC,URSEL);//---------------------------------------<<<<
/* writing the baud rate prescaler */
//UBRRL=12;
//UBRRH=12>>8;
SET_BIT(UCSRB,RXEN);
    1c52:	8a e2       	ldi	r24, 0x2A	; 42
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	2a e2       	ldi	r18, 0x2A	; 42
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	f9 01       	movw	r30, r18
    1c5c:	20 81       	ld	r18, Z
    1c5e:	20 61       	ori	r18, 0x10	; 16
    1c60:	fc 01       	movw	r30, r24
    1c62:	20 83       	st	Z, r18
SET_BIT(UCSRB,TXEN);
    1c64:	8a e2       	ldi	r24, 0x2A	; 42
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	2a e2       	ldi	r18, 0x2A	; 42
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	f9 01       	movw	r30, r18
    1c6e:	20 81       	ld	r18, Z
    1c70:	28 60       	ori	r18, 0x08	; 8
    1c72:	fc 01       	movw	r30, r24
    1c74:	20 83       	st	Z, r18
}
    1c76:	00 00       	nop
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	08 95       	ret

00001c86 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)); /* wait until RXC  flag be 1 it means that there is data not read */
    1c8e:	00 00       	nop
    1c90:	8b e2       	ldi	r24, 0x2B	; 43
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	fc 01       	movw	r30, r24
    1c96:	80 81       	ld	r24, Z
    1c98:	88 23       	and	r24, r24
    1c9a:	d4 f7       	brge	.-12     	; 0x1c90 <UART_recieveByte+0xa>

	return UDR;/* read and return RXC flag to zero */
    1c9c:	8c e2       	ldi	r24, 0x2C	; 44
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	80 81       	ld	r24, Z
}
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	08 95       	ret

00001caa <UART_sendByte>:
void UART_sendByte(const uint8 data)
{
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	1f 92       	push	r1
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
    1cb6:	8c e2       	ldi	r24, 0x2C	; 44
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	29 81       	ldd	r18, Y+1	; 0x01
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(UCSRA,TXC));//wait until send data txc =1;
    1cc0:	00 00       	nop
    1cc2:	8b e2       	ldi	r24, 0x2B	; 43
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	80 81       	ld	r24, Z
    1cca:	88 2f       	mov	r24, r24
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	80 74       	andi	r24, 0x40	; 64
    1cd0:	99 27       	eor	r25, r25
    1cd2:	89 2b       	or	r24, r25
    1cd4:	b1 f3       	breq	.-20     	; 0x1cc2 <UART_sendByte+0x18>
	SET_BIT(UCSRA,TXC); //clear the flag as it doesnt clear automatically as ISR
    1cd6:	8b e2       	ldi	r24, 0x2B	; 43
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	2b e2       	ldi	r18, 0x2B	; 43
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	f9 01       	movw	r30, r18
    1ce0:	20 81       	ld	r18, Z
    1ce2:	20 64       	ori	r18, 0x40	; 64
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	20 83       	st	Z, r18
	//while(BIT_IS_CLEAR(UCSRA,UDRE)){}
		/* Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now */
	//	UDR = data;
}
    1ce8:	00 00       	nop
    1cea:	0f 90       	pop	r0
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	08 95       	ret

00001cf2 <UART_sendString>:
void UART_sendString(const uint8 *str)
{
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <UART_sendString+0x6>
    1cf8:	1f 92       	push	r1
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	9b 83       	std	Y+3, r25	; 0x03
    1d00:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0;str[i]!='\0';i++)
    1d02:	19 82       	std	Y+1, r1	; 0x01
    1d04:	0e c0       	rjmp	.+28     	; 0x1d22 <UART_sendString+0x30>
	{
	UART_sendByte(str[i]);
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	88 2f       	mov	r24, r24
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d0e:	3b 81       	ldd	r19, Y+3	; 0x03
    1d10:	82 0f       	add	r24, r18
    1d12:	93 1f       	adc	r25, r19
    1d14:	fc 01       	movw	r30, r24
    1d16:	80 81       	ld	r24, Z
    1d18:	0e 94 55 0e 	call	0x1caa	; 0x1caa <UART_sendByte>
		 * the UDR register is not empty now */
	//	UDR = data;
}
void UART_sendString(const uint8 *str)
{
	for(uint8 i=0;str[i]!='\0';i++)
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	8f 5f       	subi	r24, 0xFF	; 255
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	88 2f       	mov	r24, r24
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	2a 81       	ldd	r18, Y+2	; 0x02
    1d2a:	3b 81       	ldd	r19, Y+3	; 0x03
    1d2c:	82 0f       	add	r24, r18
    1d2e:	93 1f       	adc	r25, r19
    1d30:	fc 01       	movw	r30, r24
    1d32:	80 81       	ld	r24, Z
    1d34:	88 23       	and	r24, r24
    1d36:	39 f7       	brne	.-50     	; 0x1d06 <UART_sendString+0x14>
	{
	UART_sendByte(str[i]);
	}
	UART_sendByte('#');
    1d38:	83 e2       	ldi	r24, 0x23	; 35
    1d3a:	0e 94 55 0e 	call	0x1caa	; 0x1caa <UART_sendByte>
}
    1d3e:	00 00       	nop
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	08 95       	ret

00001d4c <UART_receiveString>:

void UART_receiveString(uint8 *str)
{
    1d4c:	0f 93       	push	r16
    1d4e:	1f 93       	push	r17
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	00 d0       	rcall	.+0      	; 0x1d56 <UART_receiveString+0xa>
    1d56:	1f 92       	push	r1
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	9b 83       	std	Y+3, r25	; 0x03
    1d5e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    1d60:	19 82       	std	Y+1, r1	; 0x01
	for( i=0;str[i]!='#';i++)
    1d62:	19 82       	std	Y+1, r1	; 0x01
    1d64:	0f c0       	rjmp	.+30     	; 0x1d84 <UART_receiveString+0x38>
	{
		str[i]=UART_recieveByte();
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	88 2f       	mov	r24, r24
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d6e:	3b 81       	ldd	r19, Y+3	; 0x03
    1d70:	89 01       	movw	r16, r18
    1d72:	08 0f       	add	r16, r24
    1d74:	19 1f       	adc	r17, r25
    1d76:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <UART_recieveByte>
    1d7a:	f8 01       	movw	r30, r16
    1d7c:	80 83       	st	Z, r24
}

void UART_receiveString(uint8 *str)
{
	uint8 i=0;
	for( i=0;str[i]!='#';i++)
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	8f 5f       	subi	r24, 0xFF	; 255
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d8c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d8e:	82 0f       	add	r24, r18
    1d90:	93 1f       	adc	r25, r19
    1d92:	fc 01       	movw	r30, r24
    1d94:	80 81       	ld	r24, Z
    1d96:	83 32       	cpi	r24, 0x23	; 35
    1d98:	31 f7       	brne	.-52     	; 0x1d66 <UART_receiveString+0x1a>
	{
		str[i]=UART_recieveByte();
	}
	str[i]='\0';
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	88 2f       	mov	r24, r24
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	2a 81       	ldd	r18, Y+2	; 0x02
    1da2:	3b 81       	ldd	r19, Y+3	; 0x03
    1da4:	82 0f       	add	r24, r18
    1da6:	93 1f       	adc	r25, r19
    1da8:	fc 01       	movw	r30, r24
    1daa:	10 82       	st	Z, r1
}
    1dac:	00 00       	nop
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	08 95       	ret

00001dbe <__udivmodsi4>:
    1dbe:	a1 e2       	ldi	r26, 0x21	; 33
    1dc0:	1a 2e       	mov	r1, r26
    1dc2:	aa 1b       	sub	r26, r26
    1dc4:	bb 1b       	sub	r27, r27
    1dc6:	fd 01       	movw	r30, r26
    1dc8:	0d c0       	rjmp	.+26     	; 0x1de4 <__udivmodsi4_ep>

00001dca <__udivmodsi4_loop>:
    1dca:	aa 1f       	adc	r26, r26
    1dcc:	bb 1f       	adc	r27, r27
    1dce:	ee 1f       	adc	r30, r30
    1dd0:	ff 1f       	adc	r31, r31
    1dd2:	a2 17       	cp	r26, r18
    1dd4:	b3 07       	cpc	r27, r19
    1dd6:	e4 07       	cpc	r30, r20
    1dd8:	f5 07       	cpc	r31, r21
    1dda:	20 f0       	brcs	.+8      	; 0x1de4 <__udivmodsi4_ep>
    1ddc:	a2 1b       	sub	r26, r18
    1dde:	b3 0b       	sbc	r27, r19
    1de0:	e4 0b       	sbc	r30, r20
    1de2:	f5 0b       	sbc	r31, r21

00001de4 <__udivmodsi4_ep>:
    1de4:	66 1f       	adc	r22, r22
    1de6:	77 1f       	adc	r23, r23
    1de8:	88 1f       	adc	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	1a 94       	dec	r1
    1dee:	69 f7       	brne	.-38     	; 0x1dca <__udivmodsi4_loop>
    1df0:	60 95       	com	r22
    1df2:	70 95       	com	r23
    1df4:	80 95       	com	r24
    1df6:	90 95       	com	r25
    1df8:	9b 01       	movw	r18, r22
    1dfa:	ac 01       	movw	r20, r24
    1dfc:	bd 01       	movw	r22, r26
    1dfe:	cf 01       	movw	r24, r30
    1e00:	08 95       	ret

00001e02 <__tablejump2__>:
    1e02:	ee 0f       	add	r30, r30
    1e04:	ff 1f       	adc	r31, r31
    1e06:	05 90       	lpm	r0, Z+
    1e08:	f4 91       	lpm	r31, Z
    1e0a:	e0 2d       	mov	r30, r0
    1e0c:	09 94       	ijmp

00001e0e <__subsf3>:
    1e0e:	50 58       	subi	r21, 0x80	; 128

00001e10 <__addsf3>:
    1e10:	bb 27       	eor	r27, r27
    1e12:	aa 27       	eor	r26, r26
    1e14:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <__addsf3x>
    1e18:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_round>
    1e1c:	0e 94 47 10 	call	0x208e	; 0x208e <__fp_pscA>
    1e20:	38 f0       	brcs	.+14     	; 0x1e30 <__addsf3+0x20>
    1e22:	0e 94 4e 10 	call	0x209c	; 0x209c <__fp_pscB>
    1e26:	20 f0       	brcs	.+8      	; 0x1e30 <__addsf3+0x20>
    1e28:	39 f4       	brne	.+14     	; 0x1e38 <__addsf3+0x28>
    1e2a:	9f 3f       	cpi	r25, 0xFF	; 255
    1e2c:	19 f4       	brne	.+6      	; 0x1e34 <__addsf3+0x24>
    1e2e:	26 f4       	brtc	.+8      	; 0x1e38 <__addsf3+0x28>
    1e30:	0c 94 44 10 	jmp	0x2088	; 0x2088 <__fp_nan>
    1e34:	0e f4       	brtc	.+2      	; 0x1e38 <__addsf3+0x28>
    1e36:	e0 95       	com	r30
    1e38:	e7 fb       	bst	r30, 7
    1e3a:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_inf>

00001e3e <__addsf3x>:
    1e3e:	e9 2f       	mov	r30, r25
    1e40:	0e 94 66 10 	call	0x20cc	; 0x20cc <__fp_split3>
    1e44:	58 f3       	brcs	.-42     	; 0x1e1c <__addsf3+0xc>
    1e46:	ba 17       	cp	r27, r26
    1e48:	62 07       	cpc	r22, r18
    1e4a:	73 07       	cpc	r23, r19
    1e4c:	84 07       	cpc	r24, r20
    1e4e:	95 07       	cpc	r25, r21
    1e50:	20 f0       	brcs	.+8      	; 0x1e5a <__addsf3x+0x1c>
    1e52:	79 f4       	brne	.+30     	; 0x1e72 <__addsf3x+0x34>
    1e54:	a6 f5       	brtc	.+104    	; 0x1ebe <__addsf3x+0x80>
    1e56:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__fp_zero>
    1e5a:	0e f4       	brtc	.+2      	; 0x1e5e <__addsf3x+0x20>
    1e5c:	e0 95       	com	r30
    1e5e:	0b 2e       	mov	r0, r27
    1e60:	ba 2f       	mov	r27, r26
    1e62:	a0 2d       	mov	r26, r0
    1e64:	0b 01       	movw	r0, r22
    1e66:	b9 01       	movw	r22, r18
    1e68:	90 01       	movw	r18, r0
    1e6a:	0c 01       	movw	r0, r24
    1e6c:	ca 01       	movw	r24, r20
    1e6e:	a0 01       	movw	r20, r0
    1e70:	11 24       	eor	r1, r1
    1e72:	ff 27       	eor	r31, r31
    1e74:	59 1b       	sub	r21, r25
    1e76:	99 f0       	breq	.+38     	; 0x1e9e <__addsf3x+0x60>
    1e78:	59 3f       	cpi	r21, 0xF9	; 249
    1e7a:	50 f4       	brcc	.+20     	; 0x1e90 <__addsf3x+0x52>
    1e7c:	50 3e       	cpi	r21, 0xE0	; 224
    1e7e:	68 f1       	brcs	.+90     	; 0x1eda <__addsf3x+0x9c>
    1e80:	1a 16       	cp	r1, r26
    1e82:	f0 40       	sbci	r31, 0x00	; 0
    1e84:	a2 2f       	mov	r26, r18
    1e86:	23 2f       	mov	r18, r19
    1e88:	34 2f       	mov	r19, r20
    1e8a:	44 27       	eor	r20, r20
    1e8c:	58 5f       	subi	r21, 0xF8	; 248
    1e8e:	f3 cf       	rjmp	.-26     	; 0x1e76 <__addsf3x+0x38>
    1e90:	46 95       	lsr	r20
    1e92:	37 95       	ror	r19
    1e94:	27 95       	ror	r18
    1e96:	a7 95       	ror	r26
    1e98:	f0 40       	sbci	r31, 0x00	; 0
    1e9a:	53 95       	inc	r21
    1e9c:	c9 f7       	brne	.-14     	; 0x1e90 <__addsf3x+0x52>
    1e9e:	7e f4       	brtc	.+30     	; 0x1ebe <__addsf3x+0x80>
    1ea0:	1f 16       	cp	r1, r31
    1ea2:	ba 0b       	sbc	r27, r26
    1ea4:	62 0b       	sbc	r22, r18
    1ea6:	73 0b       	sbc	r23, r19
    1ea8:	84 0b       	sbc	r24, r20
    1eaa:	ba f0       	brmi	.+46     	; 0x1eda <__addsf3x+0x9c>
    1eac:	91 50       	subi	r25, 0x01	; 1
    1eae:	a1 f0       	breq	.+40     	; 0x1ed8 <__addsf3x+0x9a>
    1eb0:	ff 0f       	add	r31, r31
    1eb2:	bb 1f       	adc	r27, r27
    1eb4:	66 1f       	adc	r22, r22
    1eb6:	77 1f       	adc	r23, r23
    1eb8:	88 1f       	adc	r24, r24
    1eba:	c2 f7       	brpl	.-16     	; 0x1eac <__addsf3x+0x6e>
    1ebc:	0e c0       	rjmp	.+28     	; 0x1eda <__addsf3x+0x9c>
    1ebe:	ba 0f       	add	r27, r26
    1ec0:	62 1f       	adc	r22, r18
    1ec2:	73 1f       	adc	r23, r19
    1ec4:	84 1f       	adc	r24, r20
    1ec6:	48 f4       	brcc	.+18     	; 0x1eda <__addsf3x+0x9c>
    1ec8:	87 95       	ror	r24
    1eca:	77 95       	ror	r23
    1ecc:	67 95       	ror	r22
    1ece:	b7 95       	ror	r27
    1ed0:	f7 95       	ror	r31
    1ed2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ed4:	08 f0       	brcs	.+2      	; 0x1ed8 <__addsf3x+0x9a>
    1ed6:	b0 cf       	rjmp	.-160    	; 0x1e38 <__addsf3+0x28>
    1ed8:	93 95       	inc	r25
    1eda:	88 0f       	add	r24, r24
    1edc:	08 f0       	brcs	.+2      	; 0x1ee0 <__addsf3x+0xa2>
    1ede:	99 27       	eor	r25, r25
    1ee0:	ee 0f       	add	r30, r30
    1ee2:	97 95       	ror	r25
    1ee4:	87 95       	ror	r24
    1ee6:	08 95       	ret

00001ee8 <__cmpsf2>:
    1ee8:	0e 94 1a 10 	call	0x2034	; 0x2034 <__fp_cmp>
    1eec:	08 f4       	brcc	.+2      	; 0x1ef0 <__cmpsf2+0x8>
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	08 95       	ret

00001ef2 <__divsf3>:
    1ef2:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__divsf3x>
    1ef6:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_round>
    1efa:	0e 94 4e 10 	call	0x209c	; 0x209c <__fp_pscB>
    1efe:	58 f0       	brcs	.+22     	; 0x1f16 <__divsf3+0x24>
    1f00:	0e 94 47 10 	call	0x208e	; 0x208e <__fp_pscA>
    1f04:	40 f0       	brcs	.+16     	; 0x1f16 <__divsf3+0x24>
    1f06:	29 f4       	brne	.+10     	; 0x1f12 <__divsf3+0x20>
    1f08:	5f 3f       	cpi	r21, 0xFF	; 255
    1f0a:	29 f0       	breq	.+10     	; 0x1f16 <__divsf3+0x24>
    1f0c:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_inf>
    1f10:	51 11       	cpse	r21, r1
    1f12:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__fp_szero>
    1f16:	0c 94 44 10 	jmp	0x2088	; 0x2088 <__fp_nan>

00001f1a <__divsf3x>:
    1f1a:	0e 94 66 10 	call	0x20cc	; 0x20cc <__fp_split3>
    1f1e:	68 f3       	brcs	.-38     	; 0x1efa <__divsf3+0x8>

00001f20 <__divsf3_pse>:
    1f20:	99 23       	and	r25, r25
    1f22:	b1 f3       	breq	.-20     	; 0x1f10 <__divsf3+0x1e>
    1f24:	55 23       	and	r21, r21
    1f26:	91 f3       	breq	.-28     	; 0x1f0c <__divsf3+0x1a>
    1f28:	95 1b       	sub	r25, r21
    1f2a:	55 0b       	sbc	r21, r21
    1f2c:	bb 27       	eor	r27, r27
    1f2e:	aa 27       	eor	r26, r26
    1f30:	62 17       	cp	r22, r18
    1f32:	73 07       	cpc	r23, r19
    1f34:	84 07       	cpc	r24, r20
    1f36:	38 f0       	brcs	.+14     	; 0x1f46 <__divsf3_pse+0x26>
    1f38:	9f 5f       	subi	r25, 0xFF	; 255
    1f3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f3c:	22 0f       	add	r18, r18
    1f3e:	33 1f       	adc	r19, r19
    1f40:	44 1f       	adc	r20, r20
    1f42:	aa 1f       	adc	r26, r26
    1f44:	a9 f3       	breq	.-22     	; 0x1f30 <__divsf3_pse+0x10>
    1f46:	35 d0       	rcall	.+106    	; 0x1fb2 <__divsf3_pse+0x92>
    1f48:	0e 2e       	mov	r0, r30
    1f4a:	3a f0       	brmi	.+14     	; 0x1f5a <__divsf3_pse+0x3a>
    1f4c:	e0 e8       	ldi	r30, 0x80	; 128
    1f4e:	32 d0       	rcall	.+100    	; 0x1fb4 <__divsf3_pse+0x94>
    1f50:	91 50       	subi	r25, 0x01	; 1
    1f52:	50 40       	sbci	r21, 0x00	; 0
    1f54:	e6 95       	lsr	r30
    1f56:	00 1c       	adc	r0, r0
    1f58:	ca f7       	brpl	.-14     	; 0x1f4c <__divsf3_pse+0x2c>
    1f5a:	2b d0       	rcall	.+86     	; 0x1fb2 <__divsf3_pse+0x92>
    1f5c:	fe 2f       	mov	r31, r30
    1f5e:	29 d0       	rcall	.+82     	; 0x1fb2 <__divsf3_pse+0x92>
    1f60:	66 0f       	add	r22, r22
    1f62:	77 1f       	adc	r23, r23
    1f64:	88 1f       	adc	r24, r24
    1f66:	bb 1f       	adc	r27, r27
    1f68:	26 17       	cp	r18, r22
    1f6a:	37 07       	cpc	r19, r23
    1f6c:	48 07       	cpc	r20, r24
    1f6e:	ab 07       	cpc	r26, r27
    1f70:	b0 e8       	ldi	r27, 0x80	; 128
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <__divsf3_pse+0x56>
    1f74:	bb 0b       	sbc	r27, r27
    1f76:	80 2d       	mov	r24, r0
    1f78:	bf 01       	movw	r22, r30
    1f7a:	ff 27       	eor	r31, r31
    1f7c:	93 58       	subi	r25, 0x83	; 131
    1f7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f80:	3a f0       	brmi	.+14     	; 0x1f90 <__divsf3_pse+0x70>
    1f82:	9e 3f       	cpi	r25, 0xFE	; 254
    1f84:	51 05       	cpc	r21, r1
    1f86:	78 f0       	brcs	.+30     	; 0x1fa6 <__divsf3_pse+0x86>
    1f88:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_inf>
    1f8c:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__fp_szero>
    1f90:	5f 3f       	cpi	r21, 0xFF	; 255
    1f92:	e4 f3       	brlt	.-8      	; 0x1f8c <__divsf3_pse+0x6c>
    1f94:	98 3e       	cpi	r25, 0xE8	; 232
    1f96:	d4 f3       	brlt	.-12     	; 0x1f8c <__divsf3_pse+0x6c>
    1f98:	86 95       	lsr	r24
    1f9a:	77 95       	ror	r23
    1f9c:	67 95       	ror	r22
    1f9e:	b7 95       	ror	r27
    1fa0:	f7 95       	ror	r31
    1fa2:	9f 5f       	subi	r25, 0xFF	; 255
    1fa4:	c9 f7       	brne	.-14     	; 0x1f98 <__divsf3_pse+0x78>
    1fa6:	88 0f       	add	r24, r24
    1fa8:	91 1d       	adc	r25, r1
    1faa:	96 95       	lsr	r25
    1fac:	87 95       	ror	r24
    1fae:	97 f9       	bld	r25, 7
    1fb0:	08 95       	ret
    1fb2:	e1 e0       	ldi	r30, 0x01	; 1
    1fb4:	66 0f       	add	r22, r22
    1fb6:	77 1f       	adc	r23, r23
    1fb8:	88 1f       	adc	r24, r24
    1fba:	bb 1f       	adc	r27, r27
    1fbc:	62 17       	cp	r22, r18
    1fbe:	73 07       	cpc	r23, r19
    1fc0:	84 07       	cpc	r24, r20
    1fc2:	ba 07       	cpc	r27, r26
    1fc4:	20 f0       	brcs	.+8      	; 0x1fce <__divsf3_pse+0xae>
    1fc6:	62 1b       	sub	r22, r18
    1fc8:	73 0b       	sbc	r23, r19
    1fca:	84 0b       	sbc	r24, r20
    1fcc:	ba 0b       	sbc	r27, r26
    1fce:	ee 1f       	adc	r30, r30
    1fd0:	88 f7       	brcc	.-30     	; 0x1fb4 <__divsf3_pse+0x94>
    1fd2:	e0 95       	com	r30
    1fd4:	08 95       	ret

00001fd6 <__fixunssfsi>:
    1fd6:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__fp_splitA>
    1fda:	88 f0       	brcs	.+34     	; 0x1ffe <__fixunssfsi+0x28>
    1fdc:	9f 57       	subi	r25, 0x7F	; 127
    1fde:	98 f0       	brcs	.+38     	; 0x2006 <__fixunssfsi+0x30>
    1fe0:	b9 2f       	mov	r27, r25
    1fe2:	99 27       	eor	r25, r25
    1fe4:	b7 51       	subi	r27, 0x17	; 23
    1fe6:	b0 f0       	brcs	.+44     	; 0x2014 <__fixunssfsi+0x3e>
    1fe8:	e1 f0       	breq	.+56     	; 0x2022 <__fixunssfsi+0x4c>
    1fea:	66 0f       	add	r22, r22
    1fec:	77 1f       	adc	r23, r23
    1fee:	88 1f       	adc	r24, r24
    1ff0:	99 1f       	adc	r25, r25
    1ff2:	1a f0       	brmi	.+6      	; 0x1ffa <__fixunssfsi+0x24>
    1ff4:	ba 95       	dec	r27
    1ff6:	c9 f7       	brne	.-14     	; 0x1fea <__fixunssfsi+0x14>
    1ff8:	14 c0       	rjmp	.+40     	; 0x2022 <__fixunssfsi+0x4c>
    1ffa:	b1 30       	cpi	r27, 0x01	; 1
    1ffc:	91 f0       	breq	.+36     	; 0x2022 <__fixunssfsi+0x4c>
    1ffe:	0e 94 88 10 	call	0x2110	; 0x2110 <__fp_zero>
    2002:	b1 e0       	ldi	r27, 0x01	; 1
    2004:	08 95       	ret
    2006:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__fp_zero>
    200a:	67 2f       	mov	r22, r23
    200c:	78 2f       	mov	r23, r24
    200e:	88 27       	eor	r24, r24
    2010:	b8 5f       	subi	r27, 0xF8	; 248
    2012:	39 f0       	breq	.+14     	; 0x2022 <__fixunssfsi+0x4c>
    2014:	b9 3f       	cpi	r27, 0xF9	; 249
    2016:	cc f3       	brlt	.-14     	; 0x200a <__fixunssfsi+0x34>
    2018:	86 95       	lsr	r24
    201a:	77 95       	ror	r23
    201c:	67 95       	ror	r22
    201e:	b3 95       	inc	r27
    2020:	d9 f7       	brne	.-10     	; 0x2018 <__fixunssfsi+0x42>
    2022:	3e f4       	brtc	.+14     	; 0x2032 <__fixunssfsi+0x5c>
    2024:	90 95       	com	r25
    2026:	80 95       	com	r24
    2028:	70 95       	com	r23
    202a:	61 95       	neg	r22
    202c:	7f 4f       	sbci	r23, 0xFF	; 255
    202e:	8f 4f       	sbci	r24, 0xFF	; 255
    2030:	9f 4f       	sbci	r25, 0xFF	; 255
    2032:	08 95       	ret

00002034 <__fp_cmp>:
    2034:	99 0f       	add	r25, r25
    2036:	00 08       	sbc	r0, r0
    2038:	55 0f       	add	r21, r21
    203a:	aa 0b       	sbc	r26, r26
    203c:	e0 e8       	ldi	r30, 0x80	; 128
    203e:	fe ef       	ldi	r31, 0xFE	; 254
    2040:	16 16       	cp	r1, r22
    2042:	17 06       	cpc	r1, r23
    2044:	e8 07       	cpc	r30, r24
    2046:	f9 07       	cpc	r31, r25
    2048:	c0 f0       	brcs	.+48     	; 0x207a <__fp_cmp+0x46>
    204a:	12 16       	cp	r1, r18
    204c:	13 06       	cpc	r1, r19
    204e:	e4 07       	cpc	r30, r20
    2050:	f5 07       	cpc	r31, r21
    2052:	98 f0       	brcs	.+38     	; 0x207a <__fp_cmp+0x46>
    2054:	62 1b       	sub	r22, r18
    2056:	73 0b       	sbc	r23, r19
    2058:	84 0b       	sbc	r24, r20
    205a:	95 0b       	sbc	r25, r21
    205c:	39 f4       	brne	.+14     	; 0x206c <__fp_cmp+0x38>
    205e:	0a 26       	eor	r0, r26
    2060:	61 f0       	breq	.+24     	; 0x207a <__fp_cmp+0x46>
    2062:	23 2b       	or	r18, r19
    2064:	24 2b       	or	r18, r20
    2066:	25 2b       	or	r18, r21
    2068:	21 f4       	brne	.+8      	; 0x2072 <__fp_cmp+0x3e>
    206a:	08 95       	ret
    206c:	0a 26       	eor	r0, r26
    206e:	09 f4       	brne	.+2      	; 0x2072 <__fp_cmp+0x3e>
    2070:	a1 40       	sbci	r26, 0x01	; 1
    2072:	a6 95       	lsr	r26
    2074:	8f ef       	ldi	r24, 0xFF	; 255
    2076:	81 1d       	adc	r24, r1
    2078:	81 1d       	adc	r24, r1
    207a:	08 95       	ret

0000207c <__fp_inf>:
    207c:	97 f9       	bld	r25, 7
    207e:	9f 67       	ori	r25, 0x7F	; 127
    2080:	80 e8       	ldi	r24, 0x80	; 128
    2082:	70 e0       	ldi	r23, 0x00	; 0
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	08 95       	ret

00002088 <__fp_nan>:
    2088:	9f ef       	ldi	r25, 0xFF	; 255
    208a:	80 ec       	ldi	r24, 0xC0	; 192
    208c:	08 95       	ret

0000208e <__fp_pscA>:
    208e:	00 24       	eor	r0, r0
    2090:	0a 94       	dec	r0
    2092:	16 16       	cp	r1, r22
    2094:	17 06       	cpc	r1, r23
    2096:	18 06       	cpc	r1, r24
    2098:	09 06       	cpc	r0, r25
    209a:	08 95       	ret

0000209c <__fp_pscB>:
    209c:	00 24       	eor	r0, r0
    209e:	0a 94       	dec	r0
    20a0:	12 16       	cp	r1, r18
    20a2:	13 06       	cpc	r1, r19
    20a4:	14 06       	cpc	r1, r20
    20a6:	05 06       	cpc	r0, r21
    20a8:	08 95       	ret

000020aa <__fp_round>:
    20aa:	09 2e       	mov	r0, r25
    20ac:	03 94       	inc	r0
    20ae:	00 0c       	add	r0, r0
    20b0:	11 f4       	brne	.+4      	; 0x20b6 <__fp_round+0xc>
    20b2:	88 23       	and	r24, r24
    20b4:	52 f0       	brmi	.+20     	; 0x20ca <__fp_round+0x20>
    20b6:	bb 0f       	add	r27, r27
    20b8:	40 f4       	brcc	.+16     	; 0x20ca <__fp_round+0x20>
    20ba:	bf 2b       	or	r27, r31
    20bc:	11 f4       	brne	.+4      	; 0x20c2 <__fp_round+0x18>
    20be:	60 ff       	sbrs	r22, 0
    20c0:	04 c0       	rjmp	.+8      	; 0x20ca <__fp_round+0x20>
    20c2:	6f 5f       	subi	r22, 0xFF	; 255
    20c4:	7f 4f       	sbci	r23, 0xFF	; 255
    20c6:	8f 4f       	sbci	r24, 0xFF	; 255
    20c8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ca:	08 95       	ret

000020cc <__fp_split3>:
    20cc:	57 fd       	sbrc	r21, 7
    20ce:	90 58       	subi	r25, 0x80	; 128
    20d0:	44 0f       	add	r20, r20
    20d2:	55 1f       	adc	r21, r21
    20d4:	59 f0       	breq	.+22     	; 0x20ec <__fp_splitA+0x10>
    20d6:	5f 3f       	cpi	r21, 0xFF	; 255
    20d8:	71 f0       	breq	.+28     	; 0x20f6 <__fp_splitA+0x1a>
    20da:	47 95       	ror	r20

000020dc <__fp_splitA>:
    20dc:	88 0f       	add	r24, r24
    20de:	97 fb       	bst	r25, 7
    20e0:	99 1f       	adc	r25, r25
    20e2:	61 f0       	breq	.+24     	; 0x20fc <__fp_splitA+0x20>
    20e4:	9f 3f       	cpi	r25, 0xFF	; 255
    20e6:	79 f0       	breq	.+30     	; 0x2106 <__fp_splitA+0x2a>
    20e8:	87 95       	ror	r24
    20ea:	08 95       	ret
    20ec:	12 16       	cp	r1, r18
    20ee:	13 06       	cpc	r1, r19
    20f0:	14 06       	cpc	r1, r20
    20f2:	55 1f       	adc	r21, r21
    20f4:	f2 cf       	rjmp	.-28     	; 0x20da <__fp_split3+0xe>
    20f6:	46 95       	lsr	r20
    20f8:	f1 df       	rcall	.-30     	; 0x20dc <__fp_splitA>
    20fa:	08 c0       	rjmp	.+16     	; 0x210c <__fp_splitA+0x30>
    20fc:	16 16       	cp	r1, r22
    20fe:	17 06       	cpc	r1, r23
    2100:	18 06       	cpc	r1, r24
    2102:	99 1f       	adc	r25, r25
    2104:	f1 cf       	rjmp	.-30     	; 0x20e8 <__fp_splitA+0xc>
    2106:	86 95       	lsr	r24
    2108:	71 05       	cpc	r23, r1
    210a:	61 05       	cpc	r22, r1
    210c:	08 94       	sec
    210e:	08 95       	ret

00002110 <__fp_zero>:
    2110:	e8 94       	clt

00002112 <__fp_szero>:
    2112:	bb 27       	eor	r27, r27
    2114:	66 27       	eor	r22, r22
    2116:	77 27       	eor	r23, r23
    2118:	cb 01       	movw	r24, r22
    211a:	97 f9       	bld	r25, 7
    211c:	08 95       	ret

0000211e <__gesf2>:
    211e:	0e 94 1a 10 	call	0x2034	; 0x2034 <__fp_cmp>
    2122:	08 f4       	brcc	.+2      	; 0x2126 <__gesf2+0x8>
    2124:	8f ef       	ldi	r24, 0xFF	; 255
    2126:	08 95       	ret

00002128 <__mulsf3>:
    2128:	0e 94 a7 10 	call	0x214e	; 0x214e <__mulsf3x>
    212c:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_round>
    2130:	0e 94 47 10 	call	0x208e	; 0x208e <__fp_pscA>
    2134:	38 f0       	brcs	.+14     	; 0x2144 <__mulsf3+0x1c>
    2136:	0e 94 4e 10 	call	0x209c	; 0x209c <__fp_pscB>
    213a:	20 f0       	brcs	.+8      	; 0x2144 <__mulsf3+0x1c>
    213c:	95 23       	and	r25, r21
    213e:	11 f0       	breq	.+4      	; 0x2144 <__mulsf3+0x1c>
    2140:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_inf>
    2144:	0c 94 44 10 	jmp	0x2088	; 0x2088 <__fp_nan>
    2148:	11 24       	eor	r1, r1
    214a:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__fp_szero>

0000214e <__mulsf3x>:
    214e:	0e 94 66 10 	call	0x20cc	; 0x20cc <__fp_split3>
    2152:	70 f3       	brcs	.-36     	; 0x2130 <__mulsf3+0x8>

00002154 <__mulsf3_pse>:
    2154:	95 9f       	mul	r25, r21
    2156:	c1 f3       	breq	.-16     	; 0x2148 <__mulsf3+0x20>
    2158:	95 0f       	add	r25, r21
    215a:	50 e0       	ldi	r21, 0x00	; 0
    215c:	55 1f       	adc	r21, r21
    215e:	62 9f       	mul	r22, r18
    2160:	f0 01       	movw	r30, r0
    2162:	72 9f       	mul	r23, r18
    2164:	bb 27       	eor	r27, r27
    2166:	f0 0d       	add	r31, r0
    2168:	b1 1d       	adc	r27, r1
    216a:	63 9f       	mul	r22, r19
    216c:	aa 27       	eor	r26, r26
    216e:	f0 0d       	add	r31, r0
    2170:	b1 1d       	adc	r27, r1
    2172:	aa 1f       	adc	r26, r26
    2174:	64 9f       	mul	r22, r20
    2176:	66 27       	eor	r22, r22
    2178:	b0 0d       	add	r27, r0
    217a:	a1 1d       	adc	r26, r1
    217c:	66 1f       	adc	r22, r22
    217e:	82 9f       	mul	r24, r18
    2180:	22 27       	eor	r18, r18
    2182:	b0 0d       	add	r27, r0
    2184:	a1 1d       	adc	r26, r1
    2186:	62 1f       	adc	r22, r18
    2188:	73 9f       	mul	r23, r19
    218a:	b0 0d       	add	r27, r0
    218c:	a1 1d       	adc	r26, r1
    218e:	62 1f       	adc	r22, r18
    2190:	83 9f       	mul	r24, r19
    2192:	a0 0d       	add	r26, r0
    2194:	61 1d       	adc	r22, r1
    2196:	22 1f       	adc	r18, r18
    2198:	74 9f       	mul	r23, r20
    219a:	33 27       	eor	r19, r19
    219c:	a0 0d       	add	r26, r0
    219e:	61 1d       	adc	r22, r1
    21a0:	23 1f       	adc	r18, r19
    21a2:	84 9f       	mul	r24, r20
    21a4:	60 0d       	add	r22, r0
    21a6:	21 1d       	adc	r18, r1
    21a8:	82 2f       	mov	r24, r18
    21aa:	76 2f       	mov	r23, r22
    21ac:	6a 2f       	mov	r22, r26
    21ae:	11 24       	eor	r1, r1
    21b0:	9f 57       	subi	r25, 0x7F	; 127
    21b2:	50 40       	sbci	r21, 0x00	; 0
    21b4:	9a f0       	brmi	.+38     	; 0x21dc <__mulsf3_pse+0x88>
    21b6:	f1 f0       	breq	.+60     	; 0x21f4 <__mulsf3_pse+0xa0>
    21b8:	88 23       	and	r24, r24
    21ba:	4a f0       	brmi	.+18     	; 0x21ce <__mulsf3_pse+0x7a>
    21bc:	ee 0f       	add	r30, r30
    21be:	ff 1f       	adc	r31, r31
    21c0:	bb 1f       	adc	r27, r27
    21c2:	66 1f       	adc	r22, r22
    21c4:	77 1f       	adc	r23, r23
    21c6:	88 1f       	adc	r24, r24
    21c8:	91 50       	subi	r25, 0x01	; 1
    21ca:	50 40       	sbci	r21, 0x00	; 0
    21cc:	a9 f7       	brne	.-22     	; 0x21b8 <__mulsf3_pse+0x64>
    21ce:	9e 3f       	cpi	r25, 0xFE	; 254
    21d0:	51 05       	cpc	r21, r1
    21d2:	80 f0       	brcs	.+32     	; 0x21f4 <__mulsf3_pse+0xa0>
    21d4:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__fp_inf>
    21d8:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__fp_szero>
    21dc:	5f 3f       	cpi	r21, 0xFF	; 255
    21de:	e4 f3       	brlt	.-8      	; 0x21d8 <__mulsf3_pse+0x84>
    21e0:	98 3e       	cpi	r25, 0xE8	; 232
    21e2:	d4 f3       	brlt	.-12     	; 0x21d8 <__mulsf3_pse+0x84>
    21e4:	86 95       	lsr	r24
    21e6:	77 95       	ror	r23
    21e8:	67 95       	ror	r22
    21ea:	b7 95       	ror	r27
    21ec:	f7 95       	ror	r31
    21ee:	e7 95       	ror	r30
    21f0:	9f 5f       	subi	r25, 0xFF	; 255
    21f2:	c1 f7       	brne	.-16     	; 0x21e4 <__mulsf3_pse+0x90>
    21f4:	fe 2b       	or	r31, r30
    21f6:	88 0f       	add	r24, r24
    21f8:	91 1d       	adc	r25, r1
    21fa:	96 95       	lsr	r25
    21fc:	87 95       	ror	r24
    21fe:	97 f9       	bld	r25, 7
    2200:	08 95       	ret

00002202 <strcat>:
    2202:	fb 01       	movw	r30, r22
    2204:	dc 01       	movw	r26, r24
    2206:	0d 90       	ld	r0, X+
    2208:	00 20       	and	r0, r0
    220a:	e9 f7       	brne	.-6      	; 0x2206 <strcat+0x4>
    220c:	11 97       	sbiw	r26, 0x01	; 1
    220e:	01 90       	ld	r0, Z+
    2210:	0d 92       	st	X+, r0
    2212:	00 20       	and	r0, r0
    2214:	e1 f7       	brne	.-8      	; 0x220e <strcat+0xc>
    2216:	08 95       	ret

00002218 <strcmp>:
    2218:	fb 01       	movw	r30, r22
    221a:	dc 01       	movw	r26, r24
    221c:	8d 91       	ld	r24, X+
    221e:	01 90       	ld	r0, Z+
    2220:	80 19       	sub	r24, r0
    2222:	01 10       	cpse	r0, r1
    2224:	d9 f3       	breq	.-10     	; 0x221c <strcmp+0x4>
    2226:	99 0b       	sbc	r25, r25
    2228:	08 95       	ret

0000222a <itoa>:
    222a:	45 32       	cpi	r20, 0x25	; 37
    222c:	51 05       	cpc	r21, r1
    222e:	20 f4       	brcc	.+8      	; 0x2238 <itoa+0xe>
    2230:	42 30       	cpi	r20, 0x02	; 2
    2232:	10 f0       	brcs	.+4      	; 0x2238 <itoa+0xe>
    2234:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__itoa_ncheck>
    2238:	fb 01       	movw	r30, r22
    223a:	10 82       	st	Z, r1
    223c:	cb 01       	movw	r24, r22
    223e:	08 95       	ret

00002240 <__itoa_ncheck>:
    2240:	bb 27       	eor	r27, r27
    2242:	4a 30       	cpi	r20, 0x0A	; 10
    2244:	31 f4       	brne	.+12     	; 0x2252 <__itoa_ncheck+0x12>
    2246:	99 23       	and	r25, r25
    2248:	22 f4       	brpl	.+8      	; 0x2252 <__itoa_ncheck+0x12>
    224a:	bd e2       	ldi	r27, 0x2D	; 45
    224c:	90 95       	com	r25
    224e:	81 95       	neg	r24
    2250:	9f 4f       	sbci	r25, 0xFF	; 255
    2252:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <__utoa_common>

00002256 <__utoa_ncheck>:
    2256:	bb 27       	eor	r27, r27

00002258 <__utoa_common>:
    2258:	fb 01       	movw	r30, r22
    225a:	55 27       	eor	r21, r21
    225c:	aa 27       	eor	r26, r26
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	aa 1f       	adc	r26, r26
    2264:	a4 17       	cp	r26, r20
    2266:	10 f0       	brcs	.+4      	; 0x226c <__utoa_common+0x14>
    2268:	a4 1b       	sub	r26, r20
    226a:	83 95       	inc	r24
    226c:	50 51       	subi	r21, 0x10	; 16
    226e:	b9 f7       	brne	.-18     	; 0x225e <__utoa_common+0x6>
    2270:	a0 5d       	subi	r26, 0xD0	; 208
    2272:	aa 33       	cpi	r26, 0x3A	; 58
    2274:	08 f0       	brcs	.+2      	; 0x2278 <__utoa_common+0x20>
    2276:	a9 5d       	subi	r26, 0xD9	; 217
    2278:	a1 93       	st	Z+, r26
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	79 f7       	brne	.-34     	; 0x225c <__utoa_common+0x4>
    227e:	b1 11       	cpse	r27, r1
    2280:	b1 93       	st	Z+, r27
    2282:	11 92       	st	Z+, r1
    2284:	cb 01       	movw	r24, r22
    2286:	0c 94 45 11 	jmp	0x228a	; 0x228a <strrev>

0000228a <strrev>:
    228a:	dc 01       	movw	r26, r24
    228c:	fc 01       	movw	r30, r24
    228e:	67 2f       	mov	r22, r23
    2290:	71 91       	ld	r23, Z+
    2292:	77 23       	and	r23, r23
    2294:	e1 f7       	brne	.-8      	; 0x228e <strrev+0x4>
    2296:	32 97       	sbiw	r30, 0x02	; 2
    2298:	04 c0       	rjmp	.+8      	; 0x22a2 <strrev+0x18>
    229a:	7c 91       	ld	r23, X
    229c:	6d 93       	st	X+, r22
    229e:	70 83       	st	Z, r23
    22a0:	62 91       	ld	r22, -Z
    22a2:	ae 17       	cp	r26, r30
    22a4:	bf 07       	cpc	r27, r31
    22a6:	c8 f3       	brcs	.-14     	; 0x229a <strrev+0x10>
    22a8:	08 95       	ret

000022aa <_exit>:
    22aa:	f8 94       	cli

000022ac <__stop_program>:
    22ac:	ff cf       	rjmp	.-2      	; 0x22ac <__stop_program>
