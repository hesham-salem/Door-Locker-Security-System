
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000059e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  0000059e  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c6c  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e27  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000020cb  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020dc  2**2
                  CONTENTS, READONLY
  6 .debug_info   0000052e  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e7  00000000  00000000  00002646  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00002b47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 cd 02 	jmp	0x59a	; 0x59a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
 */ 

#include "uart.h"

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	cb 54       	subi	r28, 0x4B	; 75
  8c:	d1 09       	sbc	r29, r1
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	de bf       	out	0x3e, r29	; 62
  94:	0f be       	out	0x3f, r0	; 63
  96:	cd bf       	out	0x3d, r28	; 61
	uint8 str[20];
	uint8 data;
	UART_configurationType UART_config ;
			UART_config.buadRate=9600;
  98:	80 e8       	ldi	r24, 0x80	; 128
  9a:	95 e2       	ldi	r25, 0x25	; 37
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	8e 8b       	std	Y+22, r24	; 0x16
  a2:	9f 8b       	std	Y+23, r25	; 0x17
  a4:	a8 8f       	std	Y+24, r26	; 0x18
  a6:	b9 8f       	std	Y+25, r27	; 0x19
		UART_config.character_size=8;
  a8:	88 e0       	ldi	r24, 0x08	; 8
  aa:	8d 8b       	std	Y+21, r24	; 0x15
		strcpy(UART_config.mode,"double speed");
  ac:	ce 01       	movw	r24, r28
  ae:	45 96       	adiw	r24, 0x15	; 21
  b0:	05 96       	adiw	r24, 0x05	; 5
  b2:	2d e0       	ldi	r18, 0x0D	; 13
  b4:	e0 e6       	ldi	r30, 0x60	; 96
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	dc 01       	movw	r26, r24
  ba:	01 90       	ld	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	2a 95       	dec	r18
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x38>
		UART_init(&UART_config);
  c2:	ce 01       	movw	r24, r28
  c4:	45 96       	adiw	r24, 0x15	; 21
  c6:	0e 94 7f 00 	call	0xfe	; 0xfe <UART_init>

    while(1)
    { 
	//	data = UART_recieveByte(); //Receive Byte from Terminal1
		//UART_sendByte(data); //Resend the received byte to Terminal2
		UART_receiveString(str); //Receive String from Terminal
  ca:	ce 01       	movw	r24, r28
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	0e 94 5e 02 	call	0x4bc	; 0x4bc <UART_receiveString>
		if(!strcmp(str,"123"))
  d2:	6d e6       	ldi	r22, 0x6D	; 109
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	ce 01       	movw	r24, r28
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	0e 94 c4 02 	call	0x588	; 0x588 <strcmp>
  de:	89 2b       	or	r24, r25
  e0:	49 f4       	brne	.+18     	; 0xf4 <main+0x72>
			SET_BIT(DDRB,0);
  e2:	87 e3       	ldi	r24, 0x37	; 55
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	27 e3       	ldi	r18, 0x37	; 55
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	20 81       	ld	r18, Z
  ee:	21 60       	ori	r18, 0x01	; 1
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
	  //  _delay_ms(1000);
	    UART_sendString(str);
  f4:	ce 01       	movw	r24, r28
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	0e 94 31 02 	call	0x462	; 0x462 <UART_sendString>

    }
  fc:	e6 cf       	rjmp	.-52     	; 0xca <main+0x48>

000000fe <UART_init>:
 *      Author: hesham
 */
#include"uart.h"

void UART_init(UART_configurationType * config)
{UCSRA=0;
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	00 d0       	rcall	.+0      	; 0x108 <UART_init+0xa>
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
 10c:	9a 83       	std	Y+2, r25	; 0x02
 10e:	89 83       	std	Y+1, r24	; 0x01
 110:	8b e2       	ldi	r24, 0x2B	; 43
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	10 82       	st	Z, r1
UCSRB=0;
 118:	8a e2       	ldi	r24, 0x2A	; 42
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	fc 01       	movw	r30, r24
 11e:	10 82       	st	Z, r1
UCSRC=0;
 120:	80 e4       	ldi	r24, 0x40	; 64
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	fc 01       	movw	r30, r24
 126:	10 82       	st	Z, r1
/* enables */
	if(config->mode=="normal")
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	9a 81       	ldd	r25, Y+2	; 0x02
 12c:	05 96       	adiw	r24, 0x05	; 5
 12e:	81 57       	subi	r24, 0x71	; 113
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	09 f0       	breq	.+2      	; 0x136 <UART_init+0x38>
 134:	60 c0       	rjmp	.+192    	; 0x1f6 <UART_init+0xf8>
	{
CLEAR_BIT(UCSRA,U2X);
 136:	8b e2       	ldi	r24, 0x2B	; 43
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	2b e2       	ldi	r18, 0x2B	; 43
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	f9 01       	movw	r30, r18
 140:	20 81       	ld	r18, Z
 142:	2d 7f       	andi	r18, 0xFD	; 253
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18
UBRRL=((F_CPU /(16*config->buadRate))-1);
 148:	09 e2       	ldi	r16, 0x29	; 41
 14a:	10 e0       	ldi	r17, 0x00	; 0
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	9a 81       	ldd	r25, Y+2	; 0x02
 150:	fc 01       	movw	r30, r24
 152:	81 81       	ldd	r24, Z+1	; 0x01
 154:	92 81       	ldd	r25, Z+2	; 0x02
 156:	a3 81       	ldd	r26, Z+3	; 0x03
 158:	b4 81       	ldd	r27, Z+4	; 0x04
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	aa 1f       	adc	r26, r26
 160:	bb 1f       	adc	r27, r27
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	aa 1f       	adc	r26, r26
 168:	bb 1f       	adc	r27, r27
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	aa 1f       	adc	r26, r26
 170:	bb 1f       	adc	r27, r27
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	aa 1f       	adc	r26, r26
 178:	bb 1f       	adc	r27, r27
 17a:	9c 01       	movw	r18, r24
 17c:	ad 01       	movw	r20, r26
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	92 e1       	ldi	r25, 0x12	; 18
 182:	aa e7       	ldi	r26, 0x7A	; 122
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	bc 01       	movw	r22, r24
 188:	cd 01       	movw	r24, r26
 18a:	0e 94 a2 02 	call	0x544	; 0x544 <__udivmodsi4>
 18e:	da 01       	movw	r26, r20
 190:	c9 01       	movw	r24, r18
 192:	81 50       	subi	r24, 0x01	; 1
 194:	f8 01       	movw	r30, r16
 196:	80 83       	st	Z, r24
UBRRH=((F_CPU /(16*config->buadRate))-1)>>8;
 198:	00 e4       	ldi	r16, 0x40	; 64
 19a:	10 e0       	ldi	r17, 0x00	; 0
 19c:	89 81       	ldd	r24, Y+1	; 0x01
 19e:	9a 81       	ldd	r25, Y+2	; 0x02
 1a0:	fc 01       	movw	r30, r24
 1a2:	81 81       	ldd	r24, Z+1	; 0x01
 1a4:	92 81       	ldd	r25, Z+2	; 0x02
 1a6:	a3 81       	ldd	r26, Z+3	; 0x03
 1a8:	b4 81       	ldd	r27, Z+4	; 0x04
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	aa 1f       	adc	r26, r26
 1b0:	bb 1f       	adc	r27, r27
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	aa 1f       	adc	r26, r26
 1b8:	bb 1f       	adc	r27, r27
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	aa 1f       	adc	r26, r26
 1c0:	bb 1f       	adc	r27, r27
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	aa 1f       	adc	r26, r26
 1c8:	bb 1f       	adc	r27, r27
 1ca:	9c 01       	movw	r18, r24
 1cc:	ad 01       	movw	r20, r26
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	92 e1       	ldi	r25, 0x12	; 18
 1d2:	aa e7       	ldi	r26, 0x7A	; 122
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	bc 01       	movw	r22, r24
 1d8:	cd 01       	movw	r24, r26
 1da:	0e 94 a2 02 	call	0x544	; 0x544 <__udivmodsi4>
 1de:	da 01       	movw	r26, r20
 1e0:	c9 01       	movw	r24, r18
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	a1 09       	sbc	r26, r1
 1e6:	b1 09       	sbc	r27, r1
 1e8:	89 2f       	mov	r24, r25
 1ea:	9a 2f       	mov	r25, r26
 1ec:	ab 2f       	mov	r26, r27
 1ee:	bb 27       	eor	r27, r27
 1f0:	f8 01       	movw	r30, r16
 1f2:	80 83       	st	Z, r24
 1f4:	61 c0       	rjmp	.+194    	; 0x2b8 <UART_init+0x1ba>


	}
	else if(!strcmp(config->mode,"double speed"))
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	9a 81       	ldd	r25, Y+2	; 0x02
 1fa:	05 96       	adiw	r24, 0x05	; 5
 1fc:	68 e7       	ldi	r22, 0x78	; 120
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	0e 94 c4 02 	call	0x588	; 0x588 <strcmp>
 204:	89 2b       	or	r24, r25
 206:	09 f0       	breq	.+2      	; 0x20a <UART_init+0x10c>
 208:	57 c0       	rjmp	.+174    	; 0x2b8 <UART_init+0x1ba>
	{
		SET_BIT(UCSRA,U2X);
 20a:	8b e2       	ldi	r24, 0x2B	; 43
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	2b e2       	ldi	r18, 0x2B	; 43
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	f9 01       	movw	r30, r18
 214:	20 81       	ld	r18, Z
 216:	22 60       	ori	r18, 0x02	; 2
 218:	fc 01       	movw	r30, r24
 21a:	20 83       	st	Z, r18
		UBRRL=((F_CPU /(8*config->buadRate))-1);
 21c:	09 e2       	ldi	r16, 0x29	; 41
 21e:	10 e0       	ldi	r17, 0x00	; 0
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	9a 81       	ldd	r25, Y+2	; 0x02
 224:	fc 01       	movw	r30, r24
 226:	81 81       	ldd	r24, Z+1	; 0x01
 228:	92 81       	ldd	r25, Z+2	; 0x02
 22a:	a3 81       	ldd	r26, Z+3	; 0x03
 22c:	b4 81       	ldd	r27, Z+4	; 0x04
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	aa 1f       	adc	r26, r26
 234:	bb 1f       	adc	r27, r27
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	aa 1f       	adc	r26, r26
 23c:	bb 1f       	adc	r27, r27
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	aa 1f       	adc	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	9c 01       	movw	r18, r24
 248:	ad 01       	movw	r20, r26
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	92 e1       	ldi	r25, 0x12	; 18
 24e:	aa e7       	ldi	r26, 0x7A	; 122
 250:	b0 e0       	ldi	r27, 0x00	; 0
 252:	bc 01       	movw	r22, r24
 254:	cd 01       	movw	r24, r26
 256:	0e 94 a2 02 	call	0x544	; 0x544 <__udivmodsi4>
 25a:	da 01       	movw	r26, r20
 25c:	c9 01       	movw	r24, r18
 25e:	81 50       	subi	r24, 0x01	; 1
 260:	f8 01       	movw	r30, r16
 262:	80 83       	st	Z, r24
		UBRRH=((F_CPU /(8*config->buadRate))-1)>>8;
 264:	00 e4       	ldi	r16, 0x40	; 64
 266:	10 e0       	ldi	r17, 0x00	; 0
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	9a 81       	ldd	r25, Y+2	; 0x02
 26c:	fc 01       	movw	r30, r24
 26e:	81 81       	ldd	r24, Z+1	; 0x01
 270:	92 81       	ldd	r25, Z+2	; 0x02
 272:	a3 81       	ldd	r26, Z+3	; 0x03
 274:	b4 81       	ldd	r27, Z+4	; 0x04
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	aa 1f       	adc	r26, r26
 27c:	bb 1f       	adc	r27, r27
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	aa 1f       	adc	r26, r26
 284:	bb 1f       	adc	r27, r27
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	aa 1f       	adc	r26, r26
 28c:	bb 1f       	adc	r27, r27
 28e:	9c 01       	movw	r18, r24
 290:	ad 01       	movw	r20, r26
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	92 e1       	ldi	r25, 0x12	; 18
 296:	aa e7       	ldi	r26, 0x7A	; 122
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	bc 01       	movw	r22, r24
 29c:	cd 01       	movw	r24, r26
 29e:	0e 94 a2 02 	call	0x544	; 0x544 <__udivmodsi4>
 2a2:	da 01       	movw	r26, r20
 2a4:	c9 01       	movw	r24, r18
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	a1 09       	sbc	r26, r1
 2aa:	b1 09       	sbc	r27, r1
 2ac:	89 2f       	mov	r24, r25
 2ae:	9a 2f       	mov	r25, r26
 2b0:	ab 2f       	mov	r26, r27
 2b2:	bb 27       	eor	r27, r27
 2b4:	f8 01       	movw	r30, r16
 2b6:	80 83       	st	Z, r24

	}


/* TO enable writing on Register UCSRC (used for define the frame )as it has the same address with UBRR register */
SET_BIT(UCSRC,URSEL);
 2b8:	80 e4       	ldi	r24, 0x40	; 64
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	20 e4       	ldi	r18, 0x40	; 64
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	f9 01       	movw	r30, r18
 2c2:	20 81       	ld	r18, Z
 2c4:	20 68       	ori	r18, 0x80	; 128
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 83       	st	Z, r18
/* the UART frame parameters*/
/* character size */
//SET_BIT(UCSRC,UCSZ0);
//SET_BIT(UCSRC,UCSZ1);
switch(config->character_size)
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	9a 81       	ldd	r25, Y+2	; 0x02
 2ce:	fc 01       	movw	r30, r24
 2d0:	80 81       	ld	r24, Z
 2d2:	88 2f       	mov	r24, r24
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	86 30       	cpi	r24, 0x06	; 6
 2d8:	91 05       	cpc	r25, r1
 2da:	f9 f0       	breq	.+62     	; 0x31a <UART_init+0x21c>
 2dc:	87 30       	cpi	r24, 0x07	; 7
 2de:	91 05       	cpc	r25, r1
 2e0:	1c f4       	brge	.+6      	; 0x2e8 <UART_init+0x1ea>
 2e2:	05 97       	sbiw	r24, 0x05	; 5
 2e4:	39 f0       	breq	.+14     	; 0x2f4 <UART_init+0x1f6>
 2e6:	5b c0       	rjmp	.+182    	; 0x39e <UART_init+0x2a0>
 2e8:	87 30       	cpi	r24, 0x07	; 7
 2ea:	91 05       	cpc	r25, r1
 2ec:	49 f1       	breq	.+82     	; 0x340 <UART_init+0x242>
 2ee:	09 97       	sbiw	r24, 0x09	; 9
 2f0:	d1 f1       	breq	.+116    	; 0x366 <UART_init+0x268>
 2f2:	55 c0       	rjmp	.+170    	; 0x39e <UART_init+0x2a0>
{
case 5:
	CLEAR_BIT(UCSRC,UCSZ0);
 2f4:	80 e4       	ldi	r24, 0x40	; 64
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	20 e4       	ldi	r18, 0x40	; 64
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	f9 01       	movw	r30, r18
 2fe:	20 81       	ld	r18, Z
 300:	2d 7f       	andi	r18, 0xFD	; 253
 302:	fc 01       	movw	r30, r24
 304:	20 83       	st	Z, r18
	CLEAR_BIT(UCSRC,UCSZ1);
 306:	80 e4       	ldi	r24, 0x40	; 64
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	20 e4       	ldi	r18, 0x40	; 64
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	f9 01       	movw	r30, r18
 310:	20 81       	ld	r18, Z
 312:	2b 7f       	andi	r18, 0xFB	; 251
 314:	fc 01       	movw	r30, r24
 316:	20 83       	st	Z, r18
	break;
 318:	54 c0       	rjmp	.+168    	; 0x3c2 <UART_init+0x2c4>

case 6:
	CLEAR_BIT(UCSRC,UCSZ0);
 31a:	80 e4       	ldi	r24, 0x40	; 64
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	20 e4       	ldi	r18, 0x40	; 64
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	f9 01       	movw	r30, r18
 324:	20 81       	ld	r18, Z
 326:	2d 7f       	andi	r18, 0xFD	; 253
 328:	fc 01       	movw	r30, r24
 32a:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
 32c:	80 e4       	ldi	r24, 0x40	; 64
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	20 e4       	ldi	r18, 0x40	; 64
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	f9 01       	movw	r30, r18
 336:	20 81       	ld	r18, Z
 338:	24 60       	ori	r18, 0x04	; 4
 33a:	fc 01       	movw	r30, r24
 33c:	20 83       	st	Z, r18
	break;
 33e:	41 c0       	rjmp	.+130    	; 0x3c2 <UART_init+0x2c4>
case 7:
	CLEAR_BIT(UCSRC,UCSZ1);
 340:	80 e4       	ldi	r24, 0x40	; 64
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	20 e4       	ldi	r18, 0x40	; 64
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	f9 01       	movw	r30, r18
 34a:	20 81       	ld	r18, Z
 34c:	2b 7f       	andi	r18, 0xFB	; 251
 34e:	fc 01       	movw	r30, r24
 350:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ0);
 352:	80 e4       	ldi	r24, 0x40	; 64
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	20 e4       	ldi	r18, 0x40	; 64
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	f9 01       	movw	r30, r18
 35c:	20 81       	ld	r18, Z
 35e:	22 60       	ori	r18, 0x02	; 2
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
		break;
 364:	2e c0       	rjmp	.+92     	; 0x3c2 <UART_init+0x2c4>
case 9:
	SET_BIT(UCSRC,UCSZ0);
 366:	80 e4       	ldi	r24, 0x40	; 64
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	20 e4       	ldi	r18, 0x40	; 64
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	f9 01       	movw	r30, r18
 370:	20 81       	ld	r18, Z
 372:	22 60       	ori	r18, 0x02	; 2
 374:	fc 01       	movw	r30, r24
 376:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
 378:	80 e4       	ldi	r24, 0x40	; 64
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	20 e4       	ldi	r18, 0x40	; 64
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	f9 01       	movw	r30, r18
 382:	20 81       	ld	r18, Z
 384:	24 60       	ori	r18, 0x04	; 4
 386:	fc 01       	movw	r30, r24
 388:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ2);
 38a:	80 e4       	ldi	r24, 0x40	; 64
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	20 e4       	ldi	r18, 0x40	; 64
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	f9 01       	movw	r30, r18
 394:	20 81       	ld	r18, Z
 396:	24 60       	ori	r18, 0x04	; 4
 398:	fc 01       	movw	r30, r24
 39a:	20 83       	st	Z, r18


	break;
 39c:	12 c0       	rjmp	.+36     	; 0x3c2 <UART_init+0x2c4>

default :
	//SET_BIT(UCSRC,URSEL);
	SET_BIT(UCSRC,UCSZ0);
 39e:	80 e4       	ldi	r24, 0x40	; 64
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	20 e4       	ldi	r18, 0x40	; 64
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	f9 01       	movw	r30, r18
 3a8:	20 81       	ld	r18, Z
 3aa:	22 60       	ori	r18, 0x02	; 2
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
 3b0:	80 e4       	ldi	r24, 0x40	; 64
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	20 e4       	ldi	r18, 0x40	; 64
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	f9 01       	movw	r30, r18
 3ba:	20 81       	ld	r18, Z
 3bc:	24 60       	ori	r18, 0x04	; 4
 3be:	fc 01       	movw	r30, r24
 3c0:	20 83       	st	Z, r18
/* write on UBRR instead of ucsrc register */
//CLEAR_BIT(UCSRC,URSEL);//---------------------------------------<<<<
/* writing the baud rate prescaler */
//UBRRL=12;
//UBRRH=12>>8;
SET_BIT(UCSRB,RXEN);
 3c2:	8a e2       	ldi	r24, 0x2A	; 42
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	2a e2       	ldi	r18, 0x2A	; 42
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	f9 01       	movw	r30, r18
 3cc:	20 81       	ld	r18, Z
 3ce:	20 61       	ori	r18, 0x10	; 16
 3d0:	fc 01       	movw	r30, r24
 3d2:	20 83       	st	Z, r18
SET_BIT(UCSRB,TXEN);
 3d4:	8a e2       	ldi	r24, 0x2A	; 42
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	2a e2       	ldi	r18, 0x2A	; 42
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	f9 01       	movw	r30, r18
 3de:	20 81       	ld	r18, Z
 3e0:	28 60       	ori	r18, 0x08	; 8
 3e2:	fc 01       	movw	r30, r24
 3e4:	20 83       	st	Z, r18
}
 3e6:	00 00       	nop
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	08 95       	ret

000003f6 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)); /* wait until RXC  flag be 1 it means that there is data not read */
 3fe:	00 00       	nop
 400:	8b e2       	ldi	r24, 0x2B	; 43
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	fc 01       	movw	r30, r24
 406:	80 81       	ld	r24, Z
 408:	88 23       	and	r24, r24
 40a:	d4 f7       	brge	.-12     	; 0x400 <__LOCK_REGION_LENGTH__>

	return UDR;/* read and return RXC flag to zero */
 40c:	8c e2       	ldi	r24, 0x2C	; 44
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	fc 01       	movw	r30, r24
 412:	80 81       	ld	r24, Z
}
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <UART_sendByte>:
void UART_sendByte(const uint8 data)
{
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	1f 92       	push	r1
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
 424:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
 426:	8c e2       	ldi	r24, 0x2C	; 44
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	29 81       	ldd	r18, Y+1	; 0x01
 42c:	fc 01       	movw	r30, r24
 42e:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(UCSRA,TXC));//wait until send data txc =1;
 430:	00 00       	nop
 432:	8b e2       	ldi	r24, 0x2B	; 43
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	fc 01       	movw	r30, r24
 438:	80 81       	ld	r24, Z
 43a:	88 2f       	mov	r24, r24
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	80 74       	andi	r24, 0x40	; 64
 440:	99 27       	eor	r25, r25
 442:	89 2b       	or	r24, r25
 444:	b1 f3       	breq	.-20     	; 0x432 <UART_sendByte+0x18>
	SET_BIT(UCSRA,TXC); //clear the flag as it doesnt clear automatically as ISR
 446:	8b e2       	ldi	r24, 0x2B	; 43
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	2b e2       	ldi	r18, 0x2B	; 43
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	f9 01       	movw	r30, r18
 450:	20 81       	ld	r18, Z
 452:	20 64       	ori	r18, 0x40	; 64
 454:	fc 01       	movw	r30, r24
 456:	20 83       	st	Z, r18
	//while(BIT_IS_CLEAR(UCSRA,UDRE)){}
		/* Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now */
	//	UDR = data;
}
 458:	00 00       	nop
 45a:	0f 90       	pop	r0
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <UART_sendString>:
void UART_sendString(const uint8 *str)
{
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	00 d0       	rcall	.+0      	; 0x468 <UART_sendString+0x6>
 468:	1f 92       	push	r1
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	9b 83       	std	Y+3, r25	; 0x03
 470:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0;str[i]!='\0';i++)
 472:	19 82       	std	Y+1, r1	; 0x01
 474:	0e c0       	rjmp	.+28     	; 0x492 <UART_sendString+0x30>
	{
	UART_sendByte(str[i]);
 476:	89 81       	ldd	r24, Y+1	; 0x01
 478:	88 2f       	mov	r24, r24
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	2a 81       	ldd	r18, Y+2	; 0x02
 47e:	3b 81       	ldd	r19, Y+3	; 0x03
 480:	82 0f       	add	r24, r18
 482:	93 1f       	adc	r25, r19
 484:	fc 01       	movw	r30, r24
 486:	80 81       	ld	r24, Z
 488:	0e 94 0d 02 	call	0x41a	; 0x41a <UART_sendByte>
		 * the UDR register is not empty now */
	//	UDR = data;
}
void UART_sendString(const uint8 *str)
{
	for(uint8 i=0;str[i]!='\0';i++)
 48c:	89 81       	ldd	r24, Y+1	; 0x01
 48e:	8f 5f       	subi	r24, 0xFF	; 255
 490:	89 83       	std	Y+1, r24	; 0x01
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	88 2f       	mov	r24, r24
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	2a 81       	ldd	r18, Y+2	; 0x02
 49a:	3b 81       	ldd	r19, Y+3	; 0x03
 49c:	82 0f       	add	r24, r18
 49e:	93 1f       	adc	r25, r19
 4a0:	fc 01       	movw	r30, r24
 4a2:	80 81       	ld	r24, Z
 4a4:	88 23       	and	r24, r24
 4a6:	39 f7       	brne	.-50     	; 0x476 <UART_sendString+0x14>
	{
	UART_sendByte(str[i]);
	}
	UART_sendByte('#');
 4a8:	83 e2       	ldi	r24, 0x23	; 35
 4aa:	0e 94 0d 02 	call	0x41a	; 0x41a <UART_sendByte>
}
 4ae:	00 00       	nop
 4b0:	0f 90       	pop	r0
 4b2:	0f 90       	pop	r0
 4b4:	0f 90       	pop	r0
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <UART_receiveString>:

void UART_receiveString(uint8 *str)
{
 4bc:	0f 93       	push	r16
 4be:	1f 93       	push	r17
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	00 d0       	rcall	.+0      	; 0x4c6 <UART_receiveString+0xa>
 4c6:	1f 92       	push	r1
 4c8:	cd b7       	in	r28, 0x3d	; 61
 4ca:	de b7       	in	r29, 0x3e	; 62
 4cc:	9b 83       	std	Y+3, r25	; 0x03
 4ce:	8a 83       	std	Y+2, r24	; 0x02
//	{
//		str[i]=UART_recieveByte();
//	}
//	str[i]='\0';

	uint8 i = 0;
 4d0:	19 82       	std	Y+1, r1	; 0x01
	str[i]=UART_recieveByte();
 4d2:	89 81       	ldd	r24, Y+1	; 0x01
 4d4:	88 2f       	mov	r24, r24
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	2a 81       	ldd	r18, Y+2	; 0x02
 4da:	3b 81       	ldd	r19, Y+3	; 0x03
 4dc:	89 01       	movw	r16, r18
 4de:	08 0f       	add	r16, r24
 4e0:	19 1f       	adc	r17, r25
 4e2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <UART_recieveByte>
 4e6:	f8 01       	movw	r30, r16
 4e8:	80 83       	st	Z, r24
	while(str[i]!='#')
 4ea:	0f c0       	rjmp	.+30     	; 0x50a <UART_receiveString+0x4e>
	{
		i++;
 4ec:	89 81       	ldd	r24, Y+1	; 0x01
 4ee:	8f 5f       	subi	r24, 0xFF	; 255
 4f0:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_recieveByte();
 4f2:	89 81       	ldd	r24, Y+1	; 0x01
 4f4:	88 2f       	mov	r24, r24
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	2a 81       	ldd	r18, Y+2	; 0x02
 4fa:	3b 81       	ldd	r19, Y+3	; 0x03
 4fc:	89 01       	movw	r16, r18
 4fe:	08 0f       	add	r16, r24
 500:	19 1f       	adc	r17, r25
 502:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <UART_recieveByte>
 506:	f8 01       	movw	r30, r16
 508:	80 83       	st	Z, r24
//	}
//	str[i]='\0';

	uint8 i = 0;
	str[i]=UART_recieveByte();
	while(str[i]!='#')
 50a:	89 81       	ldd	r24, Y+1	; 0x01
 50c:	88 2f       	mov	r24, r24
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	2a 81       	ldd	r18, Y+2	; 0x02
 512:	3b 81       	ldd	r19, Y+3	; 0x03
 514:	82 0f       	add	r24, r18
 516:	93 1f       	adc	r25, r19
 518:	fc 01       	movw	r30, r24
 51a:	80 81       	ld	r24, Z
 51c:	83 32       	cpi	r24, 0x23	; 35
 51e:	31 f7       	brne	.-52     	; 0x4ec <UART_receiveString+0x30>
	{
		i++;
		str[i]=UART_recieveByte();
	}
	str[i]='\0';
 520:	89 81       	ldd	r24, Y+1	; 0x01
 522:	88 2f       	mov	r24, r24
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	2a 81       	ldd	r18, Y+2	; 0x02
 528:	3b 81       	ldd	r19, Y+3	; 0x03
 52a:	82 0f       	add	r24, r18
 52c:	93 1f       	adc	r25, r19
 52e:	fc 01       	movw	r30, r24
 530:	10 82       	st	Z, r1
}
 532:	00 00       	nop
 534:	0f 90       	pop	r0
 536:	0f 90       	pop	r0
 538:	0f 90       	pop	r0
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	1f 91       	pop	r17
 540:	0f 91       	pop	r16
 542:	08 95       	ret

00000544 <__udivmodsi4>:
 544:	a1 e2       	ldi	r26, 0x21	; 33
 546:	1a 2e       	mov	r1, r26
 548:	aa 1b       	sub	r26, r26
 54a:	bb 1b       	sub	r27, r27
 54c:	fd 01       	movw	r30, r26
 54e:	0d c0       	rjmp	.+26     	; 0x56a <__udivmodsi4_ep>

00000550 <__udivmodsi4_loop>:
 550:	aa 1f       	adc	r26, r26
 552:	bb 1f       	adc	r27, r27
 554:	ee 1f       	adc	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	a2 17       	cp	r26, r18
 55a:	b3 07       	cpc	r27, r19
 55c:	e4 07       	cpc	r30, r20
 55e:	f5 07       	cpc	r31, r21
 560:	20 f0       	brcs	.+8      	; 0x56a <__udivmodsi4_ep>
 562:	a2 1b       	sub	r26, r18
 564:	b3 0b       	sbc	r27, r19
 566:	e4 0b       	sbc	r30, r20
 568:	f5 0b       	sbc	r31, r21

0000056a <__udivmodsi4_ep>:
 56a:	66 1f       	adc	r22, r22
 56c:	77 1f       	adc	r23, r23
 56e:	88 1f       	adc	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	1a 94       	dec	r1
 574:	69 f7       	brne	.-38     	; 0x550 <__udivmodsi4_loop>
 576:	60 95       	com	r22
 578:	70 95       	com	r23
 57a:	80 95       	com	r24
 57c:	90 95       	com	r25
 57e:	9b 01       	movw	r18, r22
 580:	ac 01       	movw	r20, r24
 582:	bd 01       	movw	r22, r26
 584:	cf 01       	movw	r24, r30
 586:	08 95       	ret

00000588 <strcmp>:
 588:	fb 01       	movw	r30, r22
 58a:	dc 01       	movw	r26, r24
 58c:	8d 91       	ld	r24, X+
 58e:	01 90       	ld	r0, Z+
 590:	80 19       	sub	r24, r0
 592:	01 10       	cpse	r0, r1
 594:	d9 f3       	breq	.-10     	; 0x58c <strcmp+0x4>
 596:	99 0b       	sbc	r25, r25
 598:	08 95       	ret

0000059a <_exit>:
 59a:	f8 94       	cli

0000059c <__stop_program>:
 59c:	ff cf       	rjmp	.-2      	; 0x59c <__stop_program>
