
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002656  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00002656  000026ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  00800178  00800178  00002802  2**0
                  ALLOC
  3 .stab         00002ebc  00000000  00000000  00002804  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001444  00000000  00000000  000056c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006b04  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006b18  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00006b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  00007082  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00007569  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  00007583  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__vector_6>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__vector_9>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__vector_19>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	67 03       	mulsu	r22, r23
      56:	69 03       	fmul	r22, r17
      58:	6b 03       	fmul	r22, r19
      5a:	6d 03       	fmul	r22, r21
      5c:	6f 03       	fmul	r22, r23
      5e:	71 03       	mulsu	r23, r17
      60:	73 03       	mulsu	r23, r19
      62:	75 03       	mulsu	r23, r21
      64:	77 03       	mulsu	r23, r23
      66:	79 03       	fmul	r23, r17
      68:	7b 03       	fmul	r23, r19
      6a:	7d 03       	fmul	r23, r21
      6c:	7f 03       	fmul	r23, r23
      6e:	81 03       	fmuls	r16, r17
      70:	83 03       	fmuls	r16, r19
      72:	85 03       	fmuls	r16, r21

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf e5       	ldi	r28, 0x5F	; 95
      7a:	d4 e0       	ldi	r29, 0x04	; 4
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	11 e0       	ldi	r17, 0x01	; 1
      82:	a0 e6       	ldi	r26, 0x60	; 96
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	e6 e5       	ldi	r30, 0x56	; 86
      88:	f6 e2       	ldi	r31, 0x26	; 38
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a8 37       	cpi	r26, 0x78	; 120
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	21 e0       	ldi	r18, 0x01	; 1
      98:	a8 e7       	ldi	r26, 0x78	; 120
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	a8 3c       	cpi	r26, 0xC8	; 200
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
      aa:	0c 94 29 13 	jmp	0x2652	; 0x2652 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:
void intgerToString(int data);
void readPassword(uint8 *data);

UART_configurationType UART_config ;
int main()
{
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
      ba:	aa 97       	sbiw	r28, 0x2a	; 42
      bc:	0f b6       	in	r0, 0x3f	; 63
      be:	f8 94       	cli
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	0f be       	out	0x3f, r0	; 63
      c4:	cd bf       	out	0x3d, r28	; 61
	UART_config.buadRate=9600;
      c6:	80 e8       	ldi	r24, 0x80	; 128
      c8:	95 e2       	ldi	r25, 0x25	; 37
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <UART_config+0x1>
      d2:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <UART_config+0x2>
      d6:	a0 93 b1 01 	sts	0x01B1, r26	; 0x8001b1 <UART_config+0x3>
      da:	b0 93 b2 01 	sts	0x01B2, r27	; 0x8001b2 <UART_config+0x4>
	UART_config.character_size=8;
      de:	88 e0       	ldi	r24, 0x08	; 8
      e0:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <UART_config>
	strcpy(UART_config.mode,"double speed");
      e4:	8d e0       	ldi	r24, 0x0D	; 13
      e6:	e5 ec       	ldi	r30, 0xC5	; 197
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	a3 eb       	ldi	r26, 0xB3	; 179
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 90       	ld	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	8a 95       	dec	r24
      f4:	e1 f7       	brne	.-8      	; 0xee <main+0x3c>


LCD_init();
      f6:	0e 94 8b 03 	call	0x716	; 0x716 <LCD_init>
UART_init(&UART_config);
      fa:	8e ea       	ldi	r24, 0xAE	; 174
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <UART_init>
//UART_sendByte('q');
//UART_sendString("hesham");

while(1)
{
data=UART_receiveByte();
     102:	0e 94 0c 10 	call	0x2018	; 0x2018 <UART_receiveByte>
     106:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <data>

LCD_displayCharacter('loop');
     10a:	80 e7       	ldi	r24, 0x70	; 112
     10c:	0e 94 b0 05 	call	0xb60	; 0xb60 <LCD_displayCharacter>

	if(data=='s')
     110:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <data>
     114:	83 37       	cpi	r24, 0x73	; 115
     116:	09 f0       	breq	.+2      	; 0x11a <main+0x68>
     118:	94 c1       	rjmp	.+808    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	{

		while(1)
				{
				LCD_clearScreen();
     11a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <LCD_clearScreen>
				LCD_displayString("set password");
     11e:	82 ed       	ldi	r24, 0xD2	; 210
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_displayString>
				readPassword(password1);
     126:	89 e7       	ldi	r24, 0x79	; 121
     128:	91 e0       	ldi	r25, 0x01	; 1
     12a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <readPassword>
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	aa ef       	ldi	r26, 0xFA	; 250
     134:	b3 e4       	ldi	r27, 0x43	; 67
     136:	8d 83       	std	Y+5, r24	; 0x05
     138:	9e 83       	std	Y+6, r25	; 0x06
     13a:	af 83       	std	Y+7, r26	; 0x07
     13c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	4a ef       	ldi	r20, 0xFA	; 250
     144:	54 e4       	ldi	r21, 0x44	; 68
     146:	6d 81       	ldd	r22, Y+5	; 0x05
     148:	7e 81       	ldd	r23, Y+6	; 0x06
     14a:	8f 81       	ldd	r24, Y+7	; 0x07
     14c:	98 85       	ldd	r25, Y+8	; 0x08
     14e:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     152:	dc 01       	movw	r26, r24
     154:	cb 01       	movw	r24, r22
     156:	8f 8b       	std	Y+23, r24	; 0x17
     158:	98 8f       	std	Y+24, r25	; 0x18
     15a:	a9 8f       	std	Y+25, r26	; 0x19
     15c:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     15e:	20 e0       	ldi	r18, 0x00	; 0
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	40 e8       	ldi	r20, 0x80	; 128
     164:	5f e3       	ldi	r21, 0x3F	; 63
     166:	6f 89       	ldd	r22, Y+23	; 0x17
     168:	78 8d       	ldd	r23, Y+24	; 0x18
     16a:	89 8d       	ldd	r24, Y+25	; 0x19
     16c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     16e:	0e 94 48 11 	call	0x2290	; 0x2290 <__cmpsf2>
     172:	88 23       	and	r24, r24
     174:	2c f4       	brge	.+10     	; 0x180 <main+0xce>
		__ticks = 1;
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	9c 8f       	std	Y+28, r25	; 0x1c
     17c:	8b 8f       	std	Y+27, r24	; 0x1b
     17e:	3f c0       	rjmp	.+126    	; 0x1fe <main+0x14c>
	else if (__tmp > 65535)
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	3f ef       	ldi	r19, 0xFF	; 255
     184:	4f e7       	ldi	r20, 0x7F	; 127
     186:	57 e4       	ldi	r21, 0x47	; 71
     188:	6f 89       	ldd	r22, Y+23	; 0x17
     18a:	78 8d       	ldd	r23, Y+24	; 0x18
     18c:	89 8d       	ldd	r24, Y+25	; 0x19
     18e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     190:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__gesf2>
     194:	18 16       	cp	r1, r24
     196:	4c f5       	brge	.+82     	; 0x1ea <main+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e2       	ldi	r20, 0x20	; 32
     19e:	51 e4       	ldi	r21, 0x41	; 65
     1a0:	6d 81       	ldd	r22, Y+5	; 0x05
     1a2:	7e 81       	ldd	r23, Y+6	; 0x06
     1a4:	8f 81       	ldd	r24, Y+7	; 0x07
     1a6:	98 85       	ldd	r25, Y+8	; 0x08
     1a8:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     1ac:	dc 01       	movw	r26, r24
     1ae:	cb 01       	movw	r24, r22
     1b0:	bc 01       	movw	r22, r24
     1b2:	cd 01       	movw	r24, r26
     1b4:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     1b8:	dc 01       	movw	r26, r24
     1ba:	cb 01       	movw	r24, r22
     1bc:	9c 8f       	std	Y+28, r25	; 0x1c
     1be:	8b 8f       	std	Y+27, r24	; 0x1b
     1c0:	0f c0       	rjmp	.+30     	; 0x1e0 <main+0x12e>
     1c2:	88 ec       	ldi	r24, 0xC8	; 200
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	9e 8f       	std	Y+30, r25	; 0x1e
     1c8:	8d 8f       	std	Y+29, r24	; 0x1d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
     1cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     1ce:	01 97       	sbiw	r24, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x11c>
     1d2:	9e 8f       	std	Y+30, r25	; 0x1e
     1d4:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	9c 8f       	std	Y+28, r25	; 0x1c
     1de:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e4:	89 2b       	or	r24, r25
     1e6:	69 f7       	brne	.-38     	; 0x1c2 <main+0x110>
     1e8:	14 c0       	rjmp	.+40     	; 0x212 <main+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1ea:	6f 89       	ldd	r22, Y+23	; 0x17
     1ec:	78 8d       	ldd	r23, Y+24	; 0x18
     1ee:	89 8d       	ldd	r24, Y+25	; 0x19
     1f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     1f2:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     1f6:	dc 01       	movw	r26, r24
     1f8:	cb 01       	movw	r24, r22
     1fa:	9c 8f       	std	Y+28, r25	; 0x1c
     1fc:	8b 8f       	std	Y+27, r24	; 0x1b
     1fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     200:	9c 8d       	ldd	r25, Y+28	; 0x1c
     202:	98 a3       	std	Y+32, r25	; 0x20
     204:	8f 8f       	std	Y+31, r24	; 0x1f
     206:	8f 8d       	ldd	r24, Y+31	; 0x1f
     208:	98 a1       	ldd	r25, Y+32	; 0x20
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <main+0x158>
     20e:	98 a3       	std	Y+32, r25	; 0x20
     210:	8f 8f       	std	Y+31, r24	; 0x1f
				_delay_ms(500);
				LCD_clearScreen();
     212:	0e 94 aa 0a 	call	0x1554	; 0x1554 <LCD_clearScreen>
				LCD_displayString("confirm password");
     216:	8f ed       	ldi	r24, 0xDF	; 223
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_displayString>
				readPassword(password2);
     21e:	89 e8       	ldi	r24, 0x89	; 137
     220:	91 e0       	ldi	r25, 0x01	; 1
     222:	0e 94 53 02 	call	0x4a6	; 0x4a6 <readPassword>
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	aa ef       	ldi	r26, 0xFA	; 250
     22c:	b3 e4       	ldi	r27, 0x43	; 67
     22e:	89 87       	std	Y+9, r24	; 0x09
     230:	9a 87       	std	Y+10, r25	; 0x0a
     232:	ab 87       	std	Y+11, r26	; 0x0b
     234:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     236:	20 e0       	ldi	r18, 0x00	; 0
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	4a ef       	ldi	r20, 0xFA	; 250
     23c:	54 e4       	ldi	r21, 0x44	; 68
     23e:	69 85       	ldd	r22, Y+9	; 0x09
     240:	7a 85       	ldd	r23, Y+10	; 0x0a
     242:	8b 85       	ldd	r24, Y+11	; 0x0b
     244:	9c 85       	ldd	r25, Y+12	; 0x0c
     246:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     24a:	dc 01       	movw	r26, r24
     24c:	cb 01       	movw	r24, r22
     24e:	8d 87       	std	Y+13, r24	; 0x0d
     250:	9e 87       	std	Y+14, r25	; 0x0e
     252:	af 87       	std	Y+15, r26	; 0x0f
     254:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	40 e8       	ldi	r20, 0x80	; 128
     25c:	5f e3       	ldi	r21, 0x3F	; 63
     25e:	6d 85       	ldd	r22, Y+13	; 0x0d
     260:	7e 85       	ldd	r23, Y+14	; 0x0e
     262:	8f 85       	ldd	r24, Y+15	; 0x0f
     264:	98 89       	ldd	r25, Y+16	; 0x10
     266:	0e 94 48 11 	call	0x2290	; 0x2290 <__cmpsf2>
     26a:	88 23       	and	r24, r24
     26c:	2c f4       	brge	.+10     	; 0x278 <main+0x1c6>
		__ticks = 1;
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	9a 8b       	std	Y+18, r25	; 0x12
     274:	89 8b       	std	Y+17, r24	; 0x11
     276:	3f c0       	rjmp	.+126    	; 0x2f6 <main+0x244>
	else if (__tmp > 65535)
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	3f ef       	ldi	r19, 0xFF	; 255
     27c:	4f e7       	ldi	r20, 0x7F	; 127
     27e:	57 e4       	ldi	r21, 0x47	; 71
     280:	6d 85       	ldd	r22, Y+13	; 0x0d
     282:	7e 85       	ldd	r23, Y+14	; 0x0e
     284:	8f 85       	ldd	r24, Y+15	; 0x0f
     286:	98 89       	ldd	r25, Y+16	; 0x10
     288:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__gesf2>
     28c:	18 16       	cp	r1, r24
     28e:	4c f5       	brge	.+82     	; 0x2e2 <main+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	40 e2       	ldi	r20, 0x20	; 32
     296:	51 e4       	ldi	r21, 0x41	; 65
     298:	69 85       	ldd	r22, Y+9	; 0x09
     29a:	7a 85       	ldd	r23, Y+10	; 0x0a
     29c:	8b 85       	ldd	r24, Y+11	; 0x0b
     29e:	9c 85       	ldd	r25, Y+12	; 0x0c
     2a0:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     2a4:	dc 01       	movw	r26, r24
     2a6:	cb 01       	movw	r24, r22
     2a8:	bc 01       	movw	r22, r24
     2aa:	cd 01       	movw	r24, r26
     2ac:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     2b0:	dc 01       	movw	r26, r24
     2b2:	cb 01       	movw	r24, r22
     2b4:	9a 8b       	std	Y+18, r25	; 0x12
     2b6:	89 8b       	std	Y+17, r24	; 0x11
     2b8:	0f c0       	rjmp	.+30     	; 0x2d8 <main+0x226>
     2ba:	88 ec       	ldi	r24, 0xC8	; 200
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	9c 8b       	std	Y+20, r25	; 0x14
     2c0:	8b 8b       	std	Y+19, r24	; 0x13
     2c2:	8b 89       	ldd	r24, Y+19	; 0x13
     2c4:	9c 89       	ldd	r25, Y+20	; 0x14
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <main+0x214>
     2ca:	9c 8b       	std	Y+20, r25	; 0x14
     2cc:	8b 8b       	std	Y+19, r24	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2ce:	89 89       	ldd	r24, Y+17	; 0x11
     2d0:	9a 89       	ldd	r25, Y+18	; 0x12
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	9a 8b       	std	Y+18, r25	; 0x12
     2d6:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2d8:	89 89       	ldd	r24, Y+17	; 0x11
     2da:	9a 89       	ldd	r25, Y+18	; 0x12
     2dc:	89 2b       	or	r24, r25
     2de:	69 f7       	brne	.-38     	; 0x2ba <main+0x208>
     2e0:	14 c0       	rjmp	.+40     	; 0x30a <main+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2e2:	6d 85       	ldd	r22, Y+13	; 0x0d
     2e4:	7e 85       	ldd	r23, Y+14	; 0x0e
     2e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2e8:	98 89       	ldd	r25, Y+16	; 0x10
     2ea:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     2ee:	dc 01       	movw	r26, r24
     2f0:	cb 01       	movw	r24, r22
     2f2:	9a 8b       	std	Y+18, r25	; 0x12
     2f4:	89 8b       	std	Y+17, r24	; 0x11
     2f6:	89 89       	ldd	r24, Y+17	; 0x11
     2f8:	9a 89       	ldd	r25, Y+18	; 0x12
     2fa:	9e 8b       	std	Y+22, r25	; 0x16
     2fc:	8d 8b       	std	Y+21, r24	; 0x15
     2fe:	8d 89       	ldd	r24, Y+21	; 0x15
     300:	9e 89       	ldd	r25, Y+22	; 0x16
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <main+0x250>
     306:	9e 8b       	std	Y+22, r25	; 0x16
     308:	8d 8b       	std	Y+21, r24	; 0x15
				_delay_ms(500);
				LCD_clearScreen();
     30a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <LCD_clearScreen>

				if(!strcmp(password1,password2))
     30e:	69 e8       	ldi	r22, 0x89	; 137
     310:	71 e0       	ldi	r23, 0x01	; 1
     312:	89 e7       	ldi	r24, 0x79	; 121
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
     31a:	89 2b       	or	r24, r25
     31c:	09 f0       	breq	.+2      	; 0x320 <main+0x26e>
     31e:	fd ce       	rjmp	.-518    	; 0x11a <main+0x68>
				{	LCD_clearScreen();
     320:	0e 94 aa 0a 	call	0x1554	; 0x1554 <LCD_clearScreen>
					LCD_displayString("saved");
     324:	80 ef       	ldi	r24, 0xF0	; 240
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_displayString>
					UART_sendString(password2);
     32c:	89 e8       	ldi	r24, 0x89	; 137
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	0e 94 42 10 	call	0x2084	; 0x2084 <UART_sendString>
					break;
     334:	00 00       	nop
					}
				}
		LCD_clearScreen();
     336:	0e 94 aa 0a 	call	0x1554	; 0x1554 <LCD_clearScreen>
		LCD_displayString("press enter to open");
     33a:	86 ef       	ldi	r24, 0xF6	; 246
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_displayString>
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	aa ef       	ldi	r26, 0xFA	; 250
     348:	b3 e4       	ldi	r27, 0x43	; 67
     34a:	89 83       	std	Y+1, r24	; 0x01
     34c:	9a 83       	std	Y+2, r25	; 0x02
     34e:	ab 83       	std	Y+3, r26	; 0x03
     350:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     352:	20 e0       	ldi	r18, 0x00	; 0
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	4a ef       	ldi	r20, 0xFA	; 250
     358:	54 e4       	ldi	r21, 0x44	; 68
     35a:	69 81       	ldd	r22, Y+1	; 0x01
     35c:	7a 81       	ldd	r23, Y+2	; 0x02
     35e:	8b 81       	ldd	r24, Y+3	; 0x03
     360:	9c 81       	ldd	r25, Y+4	; 0x04
     362:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     366:	dc 01       	movw	r26, r24
     368:	cb 01       	movw	r24, r22
     36a:	89 a3       	std	Y+33, r24	; 0x21
     36c:	9a a3       	std	Y+34, r25	; 0x22
     36e:	ab a3       	std	Y+35, r26	; 0x23
     370:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	40 e8       	ldi	r20, 0x80	; 128
     378:	5f e3       	ldi	r21, 0x3F	; 63
     37a:	69 a1       	ldd	r22, Y+33	; 0x21
     37c:	7a a1       	ldd	r23, Y+34	; 0x22
     37e:	8b a1       	ldd	r24, Y+35	; 0x23
     380:	9c a1       	ldd	r25, Y+36	; 0x24
     382:	0e 94 48 11 	call	0x2290	; 0x2290 <__cmpsf2>
     386:	88 23       	and	r24, r24
     388:	0c f0       	brlt	.+2      	; 0x38c <main+0x2da>
     38a:	05 c0       	rjmp	.+10     	; 0x396 <main+0x2e4>
		__ticks = 1;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	9e a3       	std	Y+38, r25	; 0x26
     392:	8d a3       	std	Y+37, r24	; 0x25
     394:	3f c0       	rjmp	.+126    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	else if (__tmp > 65535)
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	3f ef       	ldi	r19, 0xFF	; 255
     39a:	4f e7       	ldi	r20, 0x7F	; 127
     39c:	57 e4       	ldi	r21, 0x47	; 71
     39e:	69 a1       	ldd	r22, Y+33	; 0x21
     3a0:	7a a1       	ldd	r23, Y+34	; 0x22
     3a2:	8b a1       	ldd	r24, Y+35	; 0x23
     3a4:	9c a1       	ldd	r25, Y+36	; 0x24
     3a6:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__gesf2>
     3aa:	18 16       	cp	r1, r24
     3ac:	4c f5       	brge	.+82     	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	40 e2       	ldi	r20, 0x20	; 32
     3b4:	51 e4       	ldi	r21, 0x41	; 65
     3b6:	69 81       	ldd	r22, Y+1	; 0x01
     3b8:	7a 81       	ldd	r23, Y+2	; 0x02
     3ba:	8b 81       	ldd	r24, Y+3	; 0x03
     3bc:	9c 81       	ldd	r25, Y+4	; 0x04
     3be:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     3c2:	dc 01       	movw	r26, r24
     3c4:	cb 01       	movw	r24, r22
     3c6:	bc 01       	movw	r22, r24
     3c8:	cd 01       	movw	r24, r26
     3ca:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     3ce:	dc 01       	movw	r26, r24
     3d0:	cb 01       	movw	r24, r22
     3d2:	9e a3       	std	Y+38, r25	; 0x26
     3d4:	8d a3       	std	Y+37, r24	; 0x25
     3d6:	0f c0       	rjmp	.+30     	; 0x3f6 <main+0x344>
     3d8:	88 ec       	ldi	r24, 0xC8	; 200
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	98 a7       	std	Y+40, r25	; 0x28
     3de:	8f a3       	std	Y+39, r24	; 0x27
     3e0:	8f a1       	ldd	r24, Y+39	; 0x27
     3e2:	98 a5       	ldd	r25, Y+40	; 0x28
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <main+0x332>
     3e8:	98 a7       	std	Y+40, r25	; 0x28
     3ea:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3ec:	8d a1       	ldd	r24, Y+37	; 0x25
     3ee:	9e a1       	ldd	r25, Y+38	; 0x26
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	9e a3       	std	Y+38, r25	; 0x26
     3f4:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3f6:	8d a1       	ldd	r24, Y+37	; 0x25
     3f8:	9e a1       	ldd	r25, Y+38	; 0x26
     3fa:	89 2b       	or	r24, r25
     3fc:	69 f7       	brne	.-38     	; 0x3d8 <main+0x326>
     3fe:	14 c0       	rjmp	.+40     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     400:	69 a1       	ldd	r22, Y+33	; 0x21
     402:	7a a1       	ldd	r23, Y+34	; 0x22
     404:	8b a1       	ldd	r24, Y+35	; 0x23
     406:	9c a1       	ldd	r25, Y+36	; 0x24
     408:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	9e a3       	std	Y+38, r25	; 0x26
     412:	8d a3       	std	Y+37, r24	; 0x25
     414:	8d a1       	ldd	r24, Y+37	; 0x25
     416:	9e a1       	ldd	r25, Y+38	; 0x26
     418:	9a a7       	std	Y+42, r25	; 0x2a
     41a:	89 a7       	std	Y+41, r24	; 0x29
     41c:	89 a5       	ldd	r24, Y+41	; 0x29
     41e:	9a a5       	ldd	r25, Y+42	; 0x2a
     420:	01 97       	sbiw	r24, 0x01	; 1
     422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     424:	9a a7       	std	Y+42, r25	; 0x2a
     426:	89 a7       	std	Y+41, r24	; 0x29
		_delay_ms(500);
		confirm_key=KeyPad_getPressedKey();
     428:	0e 94 f7 02 	call	0x5ee	; 0x5ee <KeyPad_getPressedKey>
     42c:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <confirm_key>
		if(confirm_key==13)
     430:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <confirm_key>
     434:	8d 30       	cpi	r24, 0x0D	; 13
     436:	09 f0       	breq	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     438:	64 ce       	rjmp	.-824    	; 0x102 <main+0x50>
		UART_sendByte('O');
     43a:	8f e4       	ldi	r24, 0x4F	; 79
     43c:	0e 94 1e 10 	call	0x203c	; 0x203c <UART_sendByte>
     440:	60 ce       	rjmp	.-832    	; 0x102 <main+0x50>
	}

	else if(data=='d')
     442:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <data>
     446:	84 36       	cpi	r24, 0x64	; 100
     448:	69 f4       	brne	.+26     	; 0x464 <__stack+0x5>
	{
		LCD_clearScreen();
     44a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <LCD_clearScreen>
				LCD_displayString("rest pass 1 ,open 2");
     44e:	8a e0       	ldi	r24, 0x0A	; 10
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_displayString>
				//readPassword();

				 	 UART_sendString(password1);
     456:	89 e7       	ldi	r24, 0x79	; 121
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	0e 94 42 10 	call	0x2084	; 0x2084 <UART_sendString>

			 	LCD_clearScreen();
     45e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <LCD_clearScreen>
     462:	4f ce       	rjmp	.-866    	; 0x102 <main+0x50>
			//	LCD_displayString(strrr);
	}
	else if(data=='B')
     464:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <data>
     468:	82 34       	cpi	r24, 0x42	; 66
     46a:	09 f0       	breq	.+2      	; 0x46e <__stack+0xf>
     46c:	4a ce       	rjmp	.-876    	; 0x102 <main+0x50>
	{
		LCD_clearScreen();
     46e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <LCD_clearScreen>
		LCD_displayString("bazzer  ");
     472:	8e e1       	ldi	r24, 0x1E	; 30
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_displayString>
	}

}
     47a:	43 ce       	rjmp	.-890    	; 0x102 <main+0x50>

0000047c <intgerToString>:

}

void intgerToString(int data)
{
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	00 d0       	rcall	.+0      	; 0x482 <intgerToString+0x6>
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	9a 83       	std	Y+2, r25	; 0x02
     488:	89 83       	std	Y+1, r24	; 0x01
	/* buffer to hold acii result */
	itoa(data,buff,10); /* 10 for decimal base */
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	9a 81       	ldd	r25, Y+2	; 0x02
     48e:	4a e0       	ldi	r20, 0x0A	; 10
     490:	50 e0       	ldi	r21, 0x00	; 0
     492:	6d e9       	ldi	r22, 0x9D	; 157
     494:	71 e0       	ldi	r23, 0x01	; 1
     496:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <itoa>
}
     49a:	00 00       	nop
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <readPassword>:

 void readPassword(uint8 *data)
 {
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	60 97       	sbiw	r28, 0x10	; 16
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	de bf       	out	0x3e, r29	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	cd bf       	out	0x3d, r28	; 61
     4ba:	98 8b       	std	Y+16, r25	; 0x10
     4bc:	8f 87       	std	Y+15, r24	; 0x0f
	// key =KeyPad_getPressedKey();

	 	while(enter==1)
     4be:	86 c0       	rjmp	.+268    	; 0x5cc <readPassword+0x126>
	 	{
	 	key =KeyPad_getPressedKey();
     4c0:	0e 94 f7 02 	call	0x5ee	; 0x5ee <KeyPad_getPressedKey>
     4c4:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <__data_end>
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	a8 ec       	ldi	r26, 0xC8	; 200
     4ce:	b3 e4       	ldi	r27, 0x43	; 67
     4d0:	89 83       	std	Y+1, r24	; 0x01
     4d2:	9a 83       	std	Y+2, r25	; 0x02
     4d4:	ab 83       	std	Y+3, r26	; 0x03
     4d6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	4a ef       	ldi	r20, 0xFA	; 250
     4de:	54 e4       	ldi	r21, 0x44	; 68
     4e0:	69 81       	ldd	r22, Y+1	; 0x01
     4e2:	7a 81       	ldd	r23, Y+2	; 0x02
     4e4:	8b 81       	ldd	r24, Y+3	; 0x03
     4e6:	9c 81       	ldd	r25, Y+4	; 0x04
     4e8:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     4ec:	dc 01       	movw	r26, r24
     4ee:	cb 01       	movw	r24, r22
     4f0:	8d 83       	std	Y+5, r24	; 0x05
     4f2:	9e 83       	std	Y+6, r25	; 0x06
     4f4:	af 83       	std	Y+7, r26	; 0x07
     4f6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	40 e8       	ldi	r20, 0x80	; 128
     4fe:	5f e3       	ldi	r21, 0x3F	; 63
     500:	6d 81       	ldd	r22, Y+5	; 0x05
     502:	7e 81       	ldd	r23, Y+6	; 0x06
     504:	8f 81       	ldd	r24, Y+7	; 0x07
     506:	98 85       	ldd	r25, Y+8	; 0x08
     508:	0e 94 48 11 	call	0x2290	; 0x2290 <__cmpsf2>
     50c:	88 23       	and	r24, r24
     50e:	2c f4       	brge	.+10     	; 0x51a <readPassword+0x74>
		__ticks = 1;
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	9a 87       	std	Y+10, r25	; 0x0a
     516:	89 87       	std	Y+9, r24	; 0x09
     518:	3f c0       	rjmp	.+126    	; 0x598 <readPassword+0xf2>
	else if (__tmp > 65535)
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	3f ef       	ldi	r19, 0xFF	; 255
     51e:	4f e7       	ldi	r20, 0x7F	; 127
     520:	57 e4       	ldi	r21, 0x47	; 71
     522:	6d 81       	ldd	r22, Y+5	; 0x05
     524:	7e 81       	ldd	r23, Y+6	; 0x06
     526:	8f 81       	ldd	r24, Y+7	; 0x07
     528:	98 85       	ldd	r25, Y+8	; 0x08
     52a:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__gesf2>
     52e:	18 16       	cp	r1, r24
     530:	4c f5       	brge	.+82     	; 0x584 <readPassword+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	40 e2       	ldi	r20, 0x20	; 32
     538:	51 e4       	ldi	r21, 0x41	; 65
     53a:	69 81       	ldd	r22, Y+1	; 0x01
     53c:	7a 81       	ldd	r23, Y+2	; 0x02
     53e:	8b 81       	ldd	r24, Y+3	; 0x03
     540:	9c 81       	ldd	r25, Y+4	; 0x04
     542:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     546:	dc 01       	movw	r26, r24
     548:	cb 01       	movw	r24, r22
     54a:	bc 01       	movw	r22, r24
     54c:	cd 01       	movw	r24, r26
     54e:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     552:	dc 01       	movw	r26, r24
     554:	cb 01       	movw	r24, r22
     556:	9a 87       	std	Y+10, r25	; 0x0a
     558:	89 87       	std	Y+9, r24	; 0x09
     55a:	0f c0       	rjmp	.+30     	; 0x57a <readPassword+0xd4>
     55c:	88 ec       	ldi	r24, 0xC8	; 200
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	9c 87       	std	Y+12, r25	; 0x0c
     562:	8b 87       	std	Y+11, r24	; 0x0b
     564:	8b 85       	ldd	r24, Y+11	; 0x0b
     566:	9c 85       	ldd	r25, Y+12	; 0x0c
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <readPassword+0xc2>
     56c:	9c 87       	std	Y+12, r25	; 0x0c
     56e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     570:	89 85       	ldd	r24, Y+9	; 0x09
     572:	9a 85       	ldd	r25, Y+10	; 0x0a
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	9a 87       	std	Y+10, r25	; 0x0a
     578:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     57a:	89 85       	ldd	r24, Y+9	; 0x09
     57c:	9a 85       	ldd	r25, Y+10	; 0x0a
     57e:	89 2b       	or	r24, r25
     580:	69 f7       	brne	.-38     	; 0x55c <readPassword+0xb6>
     582:	14 c0       	rjmp	.+40     	; 0x5ac <readPassword+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     584:	6d 81       	ldd	r22, Y+5	; 0x05
     586:	7e 81       	ldd	r23, Y+6	; 0x06
     588:	8f 81       	ldd	r24, Y+7	; 0x07
     58a:	98 85       	ldd	r25, Y+8	; 0x08
     58c:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	9a 87       	std	Y+10, r25	; 0x0a
     596:	89 87       	std	Y+9, r24	; 0x09
     598:	89 85       	ldd	r24, Y+9	; 0x09
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	9e 87       	std	Y+14, r25	; 0x0e
     59e:	8d 87       	std	Y+13, r24	; 0x0d
     5a0:	8d 85       	ldd	r24, Y+13	; 0x0d
     5a2:	9e 85       	ldd	r25, Y+14	; 0x0e
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <readPassword+0xfe>
     5a8:	9e 87       	std	Y+14, r25	; 0x0e
     5aa:	8d 87       	std	Y+13, r24	; 0x0d
	 	_delay_ms(400);
	 	if(key==13)
     5ac:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <__data_end>
     5b0:	8d 30       	cpi	r24, 0x0D	; 13
     5b2:	91 f0       	breq	.+36     	; 0x5d8 <readPassword+0x132>
	 		break;
	 	intgerToString(key);
     5b4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <__data_end>
     5b8:	88 2f       	mov	r24, r24
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 3e 02 	call	0x47c	; 0x47c <intgerToString>
	 	strcat(data,buff);
     5c0:	8f 85       	ldd	r24, Y+15	; 0x0f
     5c2:	98 89       	ldd	r25, Y+16	; 0x10
     5c4:	6d e9       	ldi	r22, 0x9D	; 157
     5c6:	71 e0       	ldi	r23, 0x01	; 1
     5c8:	0e 94 d5 12 	call	0x25aa	; 0x25aa <strcat>

 void readPassword(uint8 *data)
 {
	// key =KeyPad_getPressedKey();

	 	while(enter==1)
     5cc:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <enter>
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <readPassword+0x130>
     5d4:	75 cf       	rjmp	.-278    	; 0x4c0 <readPassword+0x1a>
	 	if(key==13)
	 		break;
	 	intgerToString(key);
	 	strcat(data,buff);
	 	}
 }
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <readPassword+0x134>
	 	while(enter==1)
	 	{
	 	key =KeyPad_getPressedKey();
	 	_delay_ms(400);
	 	if(key==13)
	 		break;
     5d8:	00 00       	nop
	 	intgerToString(key);
	 	strcat(data,buff);
	 	}
 }
     5da:	00 00       	nop
     5dc:	60 96       	adiw	r28, 0x10	; 16
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <KeyPad_getPressedKey>:
/***************************************************************
 * 					function definition 						*
 * *************************************************************
 */

uint8 KeyPad_getPressedKey(void) {
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	00 d0       	rcall	.+0      	; 0x5f4 <KeyPad_getPressedKey+0x6>
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1)
	{
	for (col = 0; col < N_COL; col++) {
     5f8:	1a 82       	std	Y+2, r1	; 0x02
     5fa:	44 c0       	rjmp	.+136    	; 0x684 <KeyPad_getPressedKey+0x96>
		/* set the specified column in this trace output pin and the first 4 pins as input */
		KEYPAD_PORT_DIR = (0b00010000 << col);
     5fc:	8a e3       	ldi	r24, 0x3A	; 58
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	2a 81       	ldd	r18, Y+2	; 0x02
     602:	42 2f       	mov	r20, r18
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	20 e1       	ldi	r18, 0x10	; 16
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	02 c0       	rjmp	.+4      	; 0x610 <KeyPad_getPressedKey+0x22>
     60c:	22 0f       	add	r18, r18
     60e:	33 1f       	adc	r19, r19
     610:	4a 95       	dec	r20
     612:	e2 f7       	brpl	.-8      	; 0x60c <KeyPad_getPressedKey+0x1e>
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18
		/* put on the specified column in this trace output pin 0 and  make the first 4 pins as pull up */
		KEYPAD_PORT_OUT = (~(0b00010000 << col));
     618:	8b e3       	ldi	r24, 0x3B	; 59
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	2a 81       	ldd	r18, Y+2	; 0x02
     61e:	42 2f       	mov	r20, r18
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	20 e1       	ldi	r18, 0x10	; 16
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	02 c0       	rjmp	.+4      	; 0x62c <KeyPad_getPressedKey+0x3e>
     628:	22 0f       	add	r18, r18
     62a:	33 1f       	adc	r19, r19
     62c:	4a 95       	dec	r20
     62e:	e2 f7       	brpl	.-8      	; 0x628 <KeyPad_getPressedKey+0x3a>
     630:	20 95       	com	r18
     632:	fc 01       	movw	r30, r24
     634:	20 83       	st	Z, r18
		for (row = 0; row < N_ROW; row++) /* loop for rows */
     636:	19 82       	std	Y+1, r1	; 0x01
     638:	1f c0       	rjmp	.+62     	; 0x678 <KeyPad_getPressedKey+0x8a>
		{
			if (BIT_IS_CLEAR(KEYPAD_PORT_IN, row))/* if the switch is pressed in this row */
     63a:	89 e3       	ldi	r24, 0x39	; 57
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	fc 01       	movw	r30, r24
     640:	80 81       	ld	r24, Z
     642:	88 2f       	mov	r24, r24
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	29 81       	ldd	r18, Y+1	; 0x01
     648:	22 2f       	mov	r18, r18
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	02 c0       	rjmp	.+4      	; 0x652 <KeyPad_getPressedKey+0x64>
     64e:	95 95       	asr	r25
     650:	87 95       	ror	r24
     652:	2a 95       	dec	r18
     654:	e2 f7       	brpl	.-8      	; 0x64e <KeyPad_getPressedKey+0x60>
     656:	81 70       	andi	r24, 0x01	; 1
     658:	99 27       	eor	r25, r25
     65a:	89 2b       	or	r24, r25
     65c:	51 f4       	brne	.+20     	; 0x672 <KeyPad_getPressedKey+0x84>
			{
				#if(N_COL==3)
				return KeyPad_4x3_adjustSwitchNumber((row * N_COL) + col + 1);
				#elif(N_COL==4)
				return KeyPad_4x4_adjustSwitchNumber((row * N_COL) + col + 1);
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	98 2f       	mov	r25, r24
     662:	99 0f       	add	r25, r25
     664:	99 0f       	add	r25, r25
     666:	8a 81       	ldd	r24, Y+2	; 0x02
     668:	89 0f       	add	r24, r25
     66a:	8f 5f       	subi	r24, 0xFF	; 255
     66c:	0e 94 4c 03 	call	0x698	; 0x698 <KeyPad_4x4_adjustSwitchNumber>
     670:	0e c0       	rjmp	.+28     	; 0x68e <KeyPad_getPressedKey+0xa0>
	for (col = 0; col < N_COL; col++) {
		/* set the specified column in this trace output pin and the first 4 pins as input */
		KEYPAD_PORT_DIR = (0b00010000 << col);
		/* put on the specified column in this trace output pin 0 and  make the first 4 pins as pull up */
		KEYPAD_PORT_OUT = (~(0b00010000 << col));
		for (row = 0; row < N_ROW; row++) /* loop for rows */
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	8f 5f       	subi	r24, 0xFF	; 255
     676:	89 83       	std	Y+1, r24	; 0x01
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	84 30       	cpi	r24, 0x04	; 4
     67c:	f0 f2       	brcs	.-68     	; 0x63a <KeyPad_getPressedKey+0x4c>

uint8 KeyPad_getPressedKey(void) {
	uint8 row, col;
	while(1)
	{
	for (col = 0; col < N_COL; col++) {
     67e:	8a 81       	ldd	r24, Y+2	; 0x02
     680:	8f 5f       	subi	r24, 0xFF	; 255
     682:	8a 83       	std	Y+2, r24	; 0x02
     684:	8a 81       	ldd	r24, Y+2	; 0x02
     686:	84 30       	cpi	r24, 0x04	; 4
     688:	08 f4       	brcc	.+2      	; 0x68c <KeyPad_getPressedKey+0x9e>
     68a:	b8 cf       	rjmp	.-144    	; 0x5fc <KeyPad_getPressedKey+0xe>
				#endif
			}
		}
	}

}
     68c:	b5 cf       	rjmp	.-150    	; 0x5f8 <KeyPad_getPressedKey+0xa>
}
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	08 95       	ret

00000698 <KeyPad_4x4_adjustSwitchNumber>:
 }


#elif(N_COL==4)

static uint8 KeyPad_4x4_adjustSwitchNumber(uint8 a_number) {
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	1f 92       	push	r1
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	89 83       	std	Y+1, r24	; 0x01
	switch (a_number) {
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	88 2f       	mov	r24, r24
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	09 2e       	mov	r0, r25
     6ac:	00 0c       	add	r0, r0
     6ae:	aa 0b       	sbc	r26, r26
     6b0:	bb 0b       	sbc	r27, r27
     6b2:	41 e0       	ldi	r20, 0x01	; 1
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	2f e0       	ldi	r18, 0x0F	; 15
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	84 1b       	sub	r24, r20
     6bc:	95 0b       	sbc	r25, r21
     6be:	28 17       	cp	r18, r24
     6c0:	39 07       	cpc	r19, r25
     6c2:	28 f1       	brcs	.+74     	; 0x70e <KeyPad_4x4_adjustSwitchNumber+0x76>
     6c4:	86 5d       	subi	r24, 0xD6	; 214
     6c6:	9f 4f       	sbci	r25, 0xFF	; 255
     6c8:	fc 01       	movw	r30, r24
     6ca:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <__tablejump2__>
	case 1:
		return 7;
     6ce:	87 e0       	ldi	r24, 0x07	; 7
     6d0:	1e c0       	rjmp	.+60     	; 0x70e <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 2:
		return 8;
     6d2:	88 e0       	ldi	r24, 0x08	; 8
     6d4:	1c c0       	rjmp	.+56     	; 0x70e <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 3:
		return 9;
     6d6:	89 e0       	ldi	r24, 0x09	; 9
     6d8:	1a c0       	rjmp	.+52     	; 0x70e <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 4:
		return '/';
     6da:	8f e2       	ldi	r24, 0x2F	; 47
     6dc:	18 c0       	rjmp	.+48     	; 0x70e <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 5:
		return 4;
     6de:	84 e0       	ldi	r24, 0x04	; 4
     6e0:	16 c0       	rjmp	.+44     	; 0x70e <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 6:
		return 5;
     6e2:	85 e0       	ldi	r24, 0x05	; 5
     6e4:	14 c0       	rjmp	.+40     	; 0x70e <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 7:
		return 6;
     6e6:	86 e0       	ldi	r24, 0x06	; 6
     6e8:	12 c0       	rjmp	.+36     	; 0x70e <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 8:
		return '*';
     6ea:	8a e2       	ldi	r24, 0x2A	; 42
     6ec:	10 c0       	rjmp	.+32     	; 0x70e <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 9:
		return 1;
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	0e c0       	rjmp	.+28     	; 0x70e <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 10:
		return 2;
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	0c c0       	rjmp	.+24     	; 0x70e <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 11:
		return 3;
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	0a c0       	rjmp	.+20     	; 0x70e <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 12:
		return '-';
     6fa:	8d e2       	ldi	r24, 0x2D	; 45
     6fc:	08 c0       	rjmp	.+16     	; 0x70e <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 13:
		return 13;
     6fe:	8d e0       	ldi	r24, 0x0D	; 13
     700:	06 c0       	rjmp	.+12     	; 0x70e <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 14:
		return 0;
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	04 c0       	rjmp	.+8      	; 0x70e <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 15:
		return '=';
     706:	8d e3       	ldi	r24, 0x3D	; 61
     708:	02 c0       	rjmp	.+4      	; 0x70e <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 16:
		return '+';
     70a:	8b e2       	ldi	r24, 0x2B	; 43
     70c:	00 c0       	rjmp	.+0      	; 0x70e <KeyPad_4x4_adjustSwitchNumber+0x76>

	}
}
     70e:	0f 90       	pop	r0
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <LCD_init>:
 * 								Functions Definitions				   *
 ***********************************************************************
 */

void LCD_init(void)
{
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
LCD_CTRL_PORT_DIR |=(1<<4)|(1<<5)|(1<<6);/* configure control port pins(RS ,R/W ,ENABLE) AS OUTPUT*/
     71e:	81 e3       	ldi	r24, 0x31	; 49
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	21 e3       	ldi	r18, 0x31	; 49
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	f9 01       	movw	r30, r18
     728:	20 81       	ld	r18, Z
     72a:	20 67       	ori	r18, 0x70	; 112
     72c:	fc 01       	movw	r30, r24
     72e:	20 83       	st	Z, r18
LCD_DATA_PORT_DIR=0XFF; /* configure the data port as output port */
     730:	84 e3       	ldi	r24, 0x34	; 52
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	2f ef       	ldi	r18, 0xFF	; 255
     736:	fc 01       	movw	r30, r24
     738:	20 83       	st	Z, r18
LCD_sendCommand(FUNCTION_SET_8_BIT_2LINE); /* using 2 lines + LCD 8 bit mode + 5*7 dot  display mode*/
     73a:	88 e3       	ldi	r24, 0x38	; 56
     73c:	0e 94 aa 03 	call	0x754	; 0x754 <LCD_sendCommand>
LCD_sendCommand(DISPLAY_CURSOR_OFF);
     740:	8c e0       	ldi	r24, 0x0C	; 12
     742:	0e 94 aa 03 	call	0x754	; 0x754 <LCD_sendCommand>
LCD_sendCommand(CLEAR_COMMAND);
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	0e 94 aa 03 	call	0x754	; 0x754 <LCD_sendCommand>

}
     74c:	00 00       	nop
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
     75c:	e9 97       	sbiw	r28, 0x39	; 57
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	f8 94       	cli
     762:	de bf       	out	0x3e, r29	; 62
     764:	0f be       	out	0x3f, r0	; 63
     766:	cd bf       	out	0x3d, r28	; 61
     768:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS);/* instruction mode RS =0*/
     76a:	82 e3       	ldi	r24, 0x32	; 50
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	22 e3       	ldi	r18, 0x32	; 50
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	f9 01       	movw	r30, r18
     774:	20 81       	ld	r18, Z
     776:	2f 7e       	andi	r18, 0xEF	; 239
     778:	fc 01       	movw	r30, r24
     77a:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_PORT,READWRITE); /* write data to LCD so readwrite=0*/
     77c:	82 e3       	ldi	r24, 0x32	; 50
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	22 e3       	ldi	r18, 0x32	; 50
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	f9 01       	movw	r30, r18
     786:	20 81       	ld	r18, Z
     788:	2f 7d       	andi	r18, 0xDF	; 223
     78a:	fc 01       	movw	r30, r24
     78c:	20 83       	st	Z, r18
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	a0 e8       	ldi	r26, 0x80	; 128
     794:	bf e3       	ldi	r27, 0x3F	; 63
     796:	89 83       	std	Y+1, r24	; 0x01
     798:	9a 83       	std	Y+2, r25	; 0x02
     79a:	ab 83       	std	Y+3, r26	; 0x03
     79c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	4a ef       	ldi	r20, 0xFA	; 250
     7a4:	54 e4       	ldi	r21, 0x44	; 68
     7a6:	69 81       	ldd	r22, Y+1	; 0x01
     7a8:	7a 81       	ldd	r23, Y+2	; 0x02
     7aa:	8b 81       	ldd	r24, Y+3	; 0x03
     7ac:	9c 81       	ldd	r25, Y+4	; 0x04
     7ae:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     7b2:	dc 01       	movw	r26, r24
     7b4:	cb 01       	movw	r24, r22
     7b6:	8f a7       	std	Y+47, r24	; 0x2f
     7b8:	98 ab       	std	Y+48, r25	; 0x30
     7ba:	a9 ab       	std	Y+49, r26	; 0x31
     7bc:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e8       	ldi	r20, 0x80	; 128
     7c4:	5f e3       	ldi	r21, 0x3F	; 63
     7c6:	6f a5       	ldd	r22, Y+47	; 0x2f
     7c8:	78 a9       	ldd	r23, Y+48	; 0x30
     7ca:	89 a9       	ldd	r24, Y+49	; 0x31
     7cc:	9a a9       	ldd	r25, Y+50	; 0x32
     7ce:	0e 94 48 11 	call	0x2290	; 0x2290 <__cmpsf2>
     7d2:	88 23       	and	r24, r24
     7d4:	2c f4       	brge	.+10     	; 0x7e0 <LCD_sendCommand+0x8c>
		__ticks = 1;
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	9c ab       	std	Y+52, r25	; 0x34
     7dc:	8b ab       	std	Y+51, r24	; 0x33
     7de:	3f c0       	rjmp	.+126    	; 0x85e <LCD_sendCommand+0x10a>
	else if (__tmp > 65535)
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	3f ef       	ldi	r19, 0xFF	; 255
     7e4:	4f e7       	ldi	r20, 0x7F	; 127
     7e6:	57 e4       	ldi	r21, 0x47	; 71
     7e8:	6f a5       	ldd	r22, Y+47	; 0x2f
     7ea:	78 a9       	ldd	r23, Y+48	; 0x30
     7ec:	89 a9       	ldd	r24, Y+49	; 0x31
     7ee:	9a a9       	ldd	r25, Y+50	; 0x32
     7f0:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__gesf2>
     7f4:	18 16       	cp	r1, r24
     7f6:	4c f5       	brge	.+82     	; 0x84a <LCD_sendCommand+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	40 e2       	ldi	r20, 0x20	; 32
     7fe:	51 e4       	ldi	r21, 0x41	; 65
     800:	69 81       	ldd	r22, Y+1	; 0x01
     802:	7a 81       	ldd	r23, Y+2	; 0x02
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	9c 81       	ldd	r25, Y+4	; 0x04
     808:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	bc 01       	movw	r22, r24
     812:	cd 01       	movw	r24, r26
     814:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     818:	dc 01       	movw	r26, r24
     81a:	cb 01       	movw	r24, r22
     81c:	9c ab       	std	Y+52, r25	; 0x34
     81e:	8b ab       	std	Y+51, r24	; 0x33
     820:	0f c0       	rjmp	.+30     	; 0x840 <LCD_sendCommand+0xec>
     822:	88 ec       	ldi	r24, 0xC8	; 200
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	9e ab       	std	Y+54, r25	; 0x36
     828:	8d ab       	std	Y+53, r24	; 0x35
     82a:	8d a9       	ldd	r24, Y+53	; 0x35
     82c:	9e a9       	ldd	r25, Y+54	; 0x36
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	f1 f7       	brne	.-4      	; 0x82e <LCD_sendCommand+0xda>
     832:	9e ab       	std	Y+54, r25	; 0x36
     834:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     836:	8b a9       	ldd	r24, Y+51	; 0x33
     838:	9c a9       	ldd	r25, Y+52	; 0x34
     83a:	01 97       	sbiw	r24, 0x01	; 1
     83c:	9c ab       	std	Y+52, r25	; 0x34
     83e:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     840:	8b a9       	ldd	r24, Y+51	; 0x33
     842:	9c a9       	ldd	r25, Y+52	; 0x34
     844:	89 2b       	or	r24, r25
     846:	69 f7       	brne	.-38     	; 0x822 <LCD_sendCommand+0xce>
     848:	14 c0       	rjmp	.+40     	; 0x872 <LCD_sendCommand+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     84a:	6f a5       	ldd	r22, Y+47	; 0x2f
     84c:	78 a9       	ldd	r23, Y+48	; 0x30
     84e:	89 a9       	ldd	r24, Y+49	; 0x31
     850:	9a a9       	ldd	r25, Y+50	; 0x32
     852:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     856:	dc 01       	movw	r26, r24
     858:	cb 01       	movw	r24, r22
     85a:	9c ab       	std	Y+52, r25	; 0x34
     85c:	8b ab       	std	Y+51, r24	; 0x33
     85e:	8b a9       	ldd	r24, Y+51	; 0x33
     860:	9c a9       	ldd	r25, Y+52	; 0x34
     862:	98 af       	std	Y+56, r25	; 0x38
     864:	8f ab       	std	Y+55, r24	; 0x37
     866:	8f a9       	ldd	r24, Y+55	; 0x37
     868:	98 ad       	ldd	r25, Y+56	; 0x38
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <LCD_sendCommand+0x116>
     86e:	98 af       	std	Y+56, r25	; 0x38
     870:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1);/* delay for prossing tas=50ns*/
	SET_BIT(LCD_CTRL_PORT,LCD_ENABLE); /*enable LCD so enable pin =1*/
     872:	82 e3       	ldi	r24, 0x32	; 50
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	22 e3       	ldi	r18, 0x32	; 50
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	f9 01       	movw	r30, r18
     87c:	20 81       	ld	r18, Z
     87e:	20 64       	ori	r18, 0x40	; 64
     880:	fc 01       	movw	r30, r24
     882:	20 83       	st	Z, r18
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e8       	ldi	r26, 0x80	; 128
     88a:	bf e3       	ldi	r27, 0x3F	; 63
     88c:	8d 83       	std	Y+5, r24	; 0x05
     88e:	9e 83       	std	Y+6, r25	; 0x06
     890:	af 83       	std	Y+7, r26	; 0x07
     892:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	4a ef       	ldi	r20, 0xFA	; 250
     89a:	54 e4       	ldi	r21, 0x44	; 68
     89c:	6d 81       	ldd	r22, Y+5	; 0x05
     89e:	7e 81       	ldd	r23, Y+6	; 0x06
     8a0:	8f 81       	ldd	r24, Y+7	; 0x07
     8a2:	98 85       	ldd	r25, Y+8	; 0x08
     8a4:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	8d a3       	std	Y+37, r24	; 0x25
     8ae:	9e a3       	std	Y+38, r25	; 0x26
     8b0:	af a3       	std	Y+39, r26	; 0x27
     8b2:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	40 e8       	ldi	r20, 0x80	; 128
     8ba:	5f e3       	ldi	r21, 0x3F	; 63
     8bc:	6d a1       	ldd	r22, Y+37	; 0x25
     8be:	7e a1       	ldd	r23, Y+38	; 0x26
     8c0:	8f a1       	ldd	r24, Y+39	; 0x27
     8c2:	98 a5       	ldd	r25, Y+40	; 0x28
     8c4:	0e 94 48 11 	call	0x2290	; 0x2290 <__cmpsf2>
     8c8:	88 23       	and	r24, r24
     8ca:	2c f4       	brge	.+10     	; 0x8d6 <LCD_sendCommand+0x182>
		__ticks = 1;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	9a a7       	std	Y+42, r25	; 0x2a
     8d2:	89 a7       	std	Y+41, r24	; 0x29
     8d4:	3f c0       	rjmp	.+126    	; 0x954 <LCD_sendCommand+0x200>
	else if (__tmp > 65535)
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	3f ef       	ldi	r19, 0xFF	; 255
     8da:	4f e7       	ldi	r20, 0x7F	; 127
     8dc:	57 e4       	ldi	r21, 0x47	; 71
     8de:	6d a1       	ldd	r22, Y+37	; 0x25
     8e0:	7e a1       	ldd	r23, Y+38	; 0x26
     8e2:	8f a1       	ldd	r24, Y+39	; 0x27
     8e4:	98 a5       	ldd	r25, Y+40	; 0x28
     8e6:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__gesf2>
     8ea:	18 16       	cp	r1, r24
     8ec:	4c f5       	brge	.+82     	; 0x940 <LCD_sendCommand+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e2       	ldi	r20, 0x20	; 32
     8f4:	51 e4       	ldi	r21, 0x41	; 65
     8f6:	6d 81       	ldd	r22, Y+5	; 0x05
     8f8:	7e 81       	ldd	r23, Y+6	; 0x06
     8fa:	8f 81       	ldd	r24, Y+7	; 0x07
     8fc:	98 85       	ldd	r25, Y+8	; 0x08
     8fe:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     902:	dc 01       	movw	r26, r24
     904:	cb 01       	movw	r24, r22
     906:	bc 01       	movw	r22, r24
     908:	cd 01       	movw	r24, r26
     90a:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     90e:	dc 01       	movw	r26, r24
     910:	cb 01       	movw	r24, r22
     912:	9a a7       	std	Y+42, r25	; 0x2a
     914:	89 a7       	std	Y+41, r24	; 0x29
     916:	0f c0       	rjmp	.+30     	; 0x936 <LCD_sendCommand+0x1e2>
     918:	88 ec       	ldi	r24, 0xC8	; 200
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	9c a7       	std	Y+44, r25	; 0x2c
     91e:	8b a7       	std	Y+43, r24	; 0x2b
     920:	8b a5       	ldd	r24, Y+43	; 0x2b
     922:	9c a5       	ldd	r25, Y+44	; 0x2c
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	f1 f7       	brne	.-4      	; 0x924 <LCD_sendCommand+0x1d0>
     928:	9c a7       	std	Y+44, r25	; 0x2c
     92a:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     92c:	89 a5       	ldd	r24, Y+41	; 0x29
     92e:	9a a5       	ldd	r25, Y+42	; 0x2a
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	9a a7       	std	Y+42, r25	; 0x2a
     934:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     936:	89 a5       	ldd	r24, Y+41	; 0x29
     938:	9a a5       	ldd	r25, Y+42	; 0x2a
     93a:	89 2b       	or	r24, r25
     93c:	69 f7       	brne	.-38     	; 0x918 <LCD_sendCommand+0x1c4>
     93e:	14 c0       	rjmp	.+40     	; 0x968 <LCD_sendCommand+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     940:	6d a1       	ldd	r22, Y+37	; 0x25
     942:	7e a1       	ldd	r23, Y+38	; 0x26
     944:	8f a1       	ldd	r24, Y+39	; 0x27
     946:	98 a5       	ldd	r25, Y+40	; 0x28
     948:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     94c:	dc 01       	movw	r26, r24
     94e:	cb 01       	movw	r24, r22
     950:	9a a7       	std	Y+42, r25	; 0x2a
     952:	89 a7       	std	Y+41, r24	; 0x29
     954:	89 a5       	ldd	r24, Y+41	; 0x29
     956:	9a a5       	ldd	r25, Y+42	; 0x2a
     958:	9e a7       	std	Y+46, r25	; 0x2e
     95a:	8d a7       	std	Y+45, r24	; 0x2d
     95c:	8d a5       	ldd	r24, Y+45	; 0x2d
     95e:	9e a5       	ldd	r25, Y+46	; 0x2e
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	f1 f7       	brne	.-4      	; 0x960 <LCD_sendCommand+0x20c>
     964:	9e a7       	std	Y+46, r25	; 0x2e
     966:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(1); /*delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT=command;/* out the required command to the data bus D0--->D7*/
     968:	85 e3       	ldi	r24, 0x35	; 53
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	29 ad       	ldd	r18, Y+57	; 0x39
     96e:	fc 01       	movw	r30, r24
     970:	20 83       	st	Z, r18
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e8       	ldi	r26, 0x80	; 128
     978:	bf e3       	ldi	r27, 0x3F	; 63
     97a:	89 87       	std	Y+9, r24	; 0x09
     97c:	9a 87       	std	Y+10, r25	; 0x0a
     97e:	ab 87       	std	Y+11, r26	; 0x0b
     980:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	4a ef       	ldi	r20, 0xFA	; 250
     988:	54 e4       	ldi	r21, 0x44	; 68
     98a:	69 85       	ldd	r22, Y+9	; 0x09
     98c:	7a 85       	ldd	r23, Y+10	; 0x0a
     98e:	8b 85       	ldd	r24, Y+11	; 0x0b
     990:	9c 85       	ldd	r25, Y+12	; 0x0c
     992:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     996:	dc 01       	movw	r26, r24
     998:	cb 01       	movw	r24, r22
     99a:	8b 8f       	std	Y+27, r24	; 0x1b
     99c:	9c 8f       	std	Y+28, r25	; 0x1c
     99e:	ad 8f       	std	Y+29, r26	; 0x1d
     9a0:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	40 e8       	ldi	r20, 0x80	; 128
     9a8:	5f e3       	ldi	r21, 0x3F	; 63
     9aa:	6b 8d       	ldd	r22, Y+27	; 0x1b
     9ac:	7c 8d       	ldd	r23, Y+28	; 0x1c
     9ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9b2:	0e 94 48 11 	call	0x2290	; 0x2290 <__cmpsf2>
     9b6:	88 23       	and	r24, r24
     9b8:	2c f4       	brge	.+10     	; 0x9c4 <LCD_sendCommand+0x270>
		__ticks = 1;
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	98 a3       	std	Y+32, r25	; 0x20
     9c0:	8f 8f       	std	Y+31, r24	; 0x1f
     9c2:	3f c0       	rjmp	.+126    	; 0xa42 <LCD_sendCommand+0x2ee>
	else if (__tmp > 65535)
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	3f ef       	ldi	r19, 0xFF	; 255
     9c8:	4f e7       	ldi	r20, 0x7F	; 127
     9ca:	57 e4       	ldi	r21, 0x47	; 71
     9cc:	6b 8d       	ldd	r22, Y+27	; 0x1b
     9ce:	7c 8d       	ldd	r23, Y+28	; 0x1c
     9d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9d4:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__gesf2>
     9d8:	18 16       	cp	r1, r24
     9da:	4c f5       	brge	.+82     	; 0xa2e <LCD_sendCommand+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	40 e2       	ldi	r20, 0x20	; 32
     9e2:	51 e4       	ldi	r21, 0x41	; 65
     9e4:	69 85       	ldd	r22, Y+9	; 0x09
     9e6:	7a 85       	ldd	r23, Y+10	; 0x0a
     9e8:	8b 85       	ldd	r24, Y+11	; 0x0b
     9ea:	9c 85       	ldd	r25, Y+12	; 0x0c
     9ec:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     9f0:	dc 01       	movw	r26, r24
     9f2:	cb 01       	movw	r24, r22
     9f4:	bc 01       	movw	r22, r24
     9f6:	cd 01       	movw	r24, r26
     9f8:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     9fc:	dc 01       	movw	r26, r24
     9fe:	cb 01       	movw	r24, r22
     a00:	98 a3       	std	Y+32, r25	; 0x20
     a02:	8f 8f       	std	Y+31, r24	; 0x1f
     a04:	0f c0       	rjmp	.+30     	; 0xa24 <LCD_sendCommand+0x2d0>
     a06:	88 ec       	ldi	r24, 0xC8	; 200
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	9a a3       	std	Y+34, r25	; 0x22
     a0c:	89 a3       	std	Y+33, r24	; 0x21
     a0e:	89 a1       	ldd	r24, Y+33	; 0x21
     a10:	9a a1       	ldd	r25, Y+34	; 0x22
     a12:	01 97       	sbiw	r24, 0x01	; 1
     a14:	f1 f7       	brne	.-4      	; 0xa12 <LCD_sendCommand+0x2be>
     a16:	9a a3       	std	Y+34, r25	; 0x22
     a18:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a1c:	98 a1       	ldd	r25, Y+32	; 0x20
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	98 a3       	std	Y+32, r25	; 0x20
     a22:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a24:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a26:	98 a1       	ldd	r25, Y+32	; 0x20
     a28:	89 2b       	or	r24, r25
     a2a:	69 f7       	brne	.-38     	; 0xa06 <LCD_sendCommand+0x2b2>
     a2c:	14 c0       	rjmp	.+40     	; 0xa56 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a2e:	6b 8d       	ldd	r22, Y+27	; 0x1b
     a30:	7c 8d       	ldd	r23, Y+28	; 0x1c
     a32:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a34:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a36:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     a3a:	dc 01       	movw	r26, r24
     a3c:	cb 01       	movw	r24, r22
     a3e:	98 a3       	std	Y+32, r25	; 0x20
     a40:	8f 8f       	std	Y+31, r24	; 0x1f
     a42:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a44:	98 a1       	ldd	r25, Y+32	; 0x20
     a46:	9c a3       	std	Y+36, r25	; 0x24
     a48:	8b a3       	std	Y+35, r24	; 0x23
     a4a:	8b a1       	ldd	r24, Y+35	; 0x23
     a4c:	9c a1       	ldd	r25, Y+36	; 0x24
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	f1 f7       	brne	.-4      	; 0xa4e <LCD_sendCommand+0x2fa>
     a52:	9c a3       	std	Y+36, r25	; 0x24
     a54:	8b a3       	std	Y+35, r24	; 0x23
	_delay_ms(1);/* delay for processing command setup time tdsw =60ns */
	CLEAR_BIT(LCD_CTRL_PORT,LCD_ENABLE); /* disable LCD so enable pin =0 */
     a56:	82 e3       	ldi	r24, 0x32	; 50
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	22 e3       	ldi	r18, 0x32	; 50
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	f9 01       	movw	r30, r18
     a60:	20 81       	ld	r18, Z
     a62:	2f 7b       	andi	r18, 0xBF	; 191
     a64:	fc 01       	movw	r30, r24
     a66:	20 83       	st	Z, r18
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e8       	ldi	r26, 0x80	; 128
     a6e:	bf e3       	ldi	r27, 0x3F	; 63
     a70:	8d 87       	std	Y+13, r24	; 0x0d
     a72:	9e 87       	std	Y+14, r25	; 0x0e
     a74:	af 87       	std	Y+15, r26	; 0x0f
     a76:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	4a ef       	ldi	r20, 0xFA	; 250
     a7e:	54 e4       	ldi	r21, 0x44	; 68
     a80:	6d 85       	ldd	r22, Y+13	; 0x0d
     a82:	7e 85       	ldd	r23, Y+14	; 0x0e
     a84:	8f 85       	ldd	r24, Y+15	; 0x0f
     a86:	98 89       	ldd	r25, Y+16	; 0x10
     a88:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     a8c:	dc 01       	movw	r26, r24
     a8e:	cb 01       	movw	r24, r22
     a90:	89 8b       	std	Y+17, r24	; 0x11
     a92:	9a 8b       	std	Y+18, r25	; 0x12
     a94:	ab 8b       	std	Y+19, r26	; 0x13
     a96:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e8       	ldi	r20, 0x80	; 128
     a9e:	5f e3       	ldi	r21, 0x3F	; 63
     aa0:	69 89       	ldd	r22, Y+17	; 0x11
     aa2:	7a 89       	ldd	r23, Y+18	; 0x12
     aa4:	8b 89       	ldd	r24, Y+19	; 0x13
     aa6:	9c 89       	ldd	r25, Y+20	; 0x14
     aa8:	0e 94 48 11 	call	0x2290	; 0x2290 <__cmpsf2>
     aac:	88 23       	and	r24, r24
     aae:	2c f4       	brge	.+10     	; 0xaba <LCD_sendCommand+0x366>
		__ticks = 1;
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	9e 8b       	std	Y+22, r25	; 0x16
     ab6:	8d 8b       	std	Y+21, r24	; 0x15
     ab8:	3f c0       	rjmp	.+126    	; 0xb38 <LCD_sendCommand+0x3e4>
	else if (__tmp > 65535)
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	3f ef       	ldi	r19, 0xFF	; 255
     abe:	4f e7       	ldi	r20, 0x7F	; 127
     ac0:	57 e4       	ldi	r21, 0x47	; 71
     ac2:	69 89       	ldd	r22, Y+17	; 0x11
     ac4:	7a 89       	ldd	r23, Y+18	; 0x12
     ac6:	8b 89       	ldd	r24, Y+19	; 0x13
     ac8:	9c 89       	ldd	r25, Y+20	; 0x14
     aca:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__gesf2>
     ace:	18 16       	cp	r1, r24
     ad0:	4c f5       	brge	.+82     	; 0xb24 <LCD_sendCommand+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e2       	ldi	r20, 0x20	; 32
     ad8:	51 e4       	ldi	r21, 0x41	; 65
     ada:	6d 85       	ldd	r22, Y+13	; 0x0d
     adc:	7e 85       	ldd	r23, Y+14	; 0x0e
     ade:	8f 85       	ldd	r24, Y+15	; 0x0f
     ae0:	98 89       	ldd	r25, Y+16	; 0x10
     ae2:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	bc 01       	movw	r22, r24
     aec:	cd 01       	movw	r24, r26
     aee:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     af2:	dc 01       	movw	r26, r24
     af4:	cb 01       	movw	r24, r22
     af6:	9e 8b       	std	Y+22, r25	; 0x16
     af8:	8d 8b       	std	Y+21, r24	; 0x15
     afa:	0f c0       	rjmp	.+30     	; 0xb1a <LCD_sendCommand+0x3c6>
     afc:	88 ec       	ldi	r24, 0xC8	; 200
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	98 8f       	std	Y+24, r25	; 0x18
     b02:	8f 8b       	std	Y+23, r24	; 0x17
     b04:	8f 89       	ldd	r24, Y+23	; 0x17
     b06:	98 8d       	ldd	r25, Y+24	; 0x18
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <LCD_sendCommand+0x3b4>
     b0c:	98 8f       	std	Y+24, r25	; 0x18
     b0e:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b10:	8d 89       	ldd	r24, Y+21	; 0x15
     b12:	9e 89       	ldd	r25, Y+22	; 0x16
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	9e 8b       	std	Y+22, r25	; 0x16
     b18:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b1a:	8d 89       	ldd	r24, Y+21	; 0x15
     b1c:	9e 89       	ldd	r25, Y+22	; 0x16
     b1e:	89 2b       	or	r24, r25
     b20:	69 f7       	brne	.-38     	; 0xafc <LCD_sendCommand+0x3a8>
	_delay_ms(1); /* delay for processing hold time th=10ns */

}
     b22:	14 c0       	rjmp	.+40     	; 0xb4c <LCD_sendCommand+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b24:	69 89       	ldd	r22, Y+17	; 0x11
     b26:	7a 89       	ldd	r23, Y+18	; 0x12
     b28:	8b 89       	ldd	r24, Y+19	; 0x13
     b2a:	9c 89       	ldd	r25, Y+20	; 0x14
     b2c:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     b30:	dc 01       	movw	r26, r24
     b32:	cb 01       	movw	r24, r22
     b34:	9e 8b       	std	Y+22, r25	; 0x16
     b36:	8d 8b       	std	Y+21, r24	; 0x15
     b38:	8d 89       	ldd	r24, Y+21	; 0x15
     b3a:	9e 89       	ldd	r25, Y+22	; 0x16
     b3c:	9a 8f       	std	Y+26, r25	; 0x1a
     b3e:	89 8f       	std	Y+25, r24	; 0x19
     b40:	89 8d       	ldd	r24, Y+25	; 0x19
     b42:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	f1 f7       	brne	.-4      	; 0xb44 <LCD_sendCommand+0x3f0>
     b48:	9a 8f       	std	Y+26, r25	; 0x1a
     b4a:	89 8f       	std	Y+25, r24	; 0x19
     b4c:	00 00       	nop
     b4e:	e9 96       	adiw	r28, 0x39	; 57
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data)
{
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	cb 56       	subi	r28, 0x6B	; 107
     b6e:	d1 09       	sbc	r29, r1
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	9e 01       	movw	r18, r28
     b7c:	25 59       	subi	r18, 0x95	; 149
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
     b80:	f9 01       	movw	r30, r18
     b82:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* data mode so RS =1*/
     b84:	82 e3       	ldi	r24, 0x32	; 50
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	22 e3       	ldi	r18, 0x32	; 50
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	f9 01       	movw	r30, r18
     b8e:	20 81       	ld	r18, Z
     b90:	20 61       	ori	r18, 0x10	; 16
     b92:	fc 01       	movw	r30, r24
     b94:	20 83       	st	Z, r18
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e8       	ldi	r26, 0x80	; 128
     b9c:	bf e3       	ldi	r27, 0x3F	; 63
     b9e:	89 83       	std	Y+1, r24	; 0x01
     ba0:	9a 83       	std	Y+2, r25	; 0x02
     ba2:	ab 83       	std	Y+3, r26	; 0x03
     ba4:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     ba6:	8e 01       	movw	r16, r28
     ba8:	01 5b       	subi	r16, 0xB1	; 177
     baa:	1f 4f       	sbci	r17, 0xFF	; 255
     bac:	2b ea       	ldi	r18, 0xAB	; 171
     bae:	3a ea       	ldi	r19, 0xAA	; 170
     bb0:	4a e2       	ldi	r20, 0x2A	; 42
     bb2:	50 e4       	ldi	r21, 0x40	; 64
     bb4:	69 81       	ldd	r22, Y+1	; 0x01
     bb6:	7a 81       	ldd	r23, Y+2	; 0x02
     bb8:	8b 81       	ldd	r24, Y+3	; 0x03
     bba:	9c 81       	ldd	r25, Y+4	; 0x04
     bbc:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     bc0:	dc 01       	movw	r26, r24
     bc2:	cb 01       	movw	r24, r22
     bc4:	f8 01       	movw	r30, r16
     bc6:	80 83       	st	Z, r24
     bc8:	91 83       	std	Z+1, r25	; 0x01
     bca:	a2 83       	std	Z+2, r26	; 0x02
     bcc:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     bce:	8e 01       	movw	r16, r28
     bd0:	0d 5a       	subi	r16, 0xAD	; 173
     bd2:	1f 4f       	sbci	r17, 0xFF	; 255
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	9a 81       	ldd	r25, Y+2	; 0x02
     bd8:	ab 81       	ldd	r26, Y+3	; 0x03
     bda:	bc 81       	ldd	r27, Y+4	; 0x04
     bdc:	9c 01       	movw	r18, r24
     bde:	ad 01       	movw	r20, r26
     be0:	bc 01       	movw	r22, r24
     be2:	cd 01       	movw	r24, r26
     be4:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__addsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	f8 01       	movw	r30, r16
     bee:	80 83       	st	Z, r24
     bf0:	91 83       	std	Z+1, r25	; 0x01
     bf2:	a2 83       	std	Z+2, r26	; 0x02
     bf4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bf6:	ce 01       	movw	r24, r28
     bf8:	81 5b       	subi	r24, 0xB1	; 177
     bfa:	9f 4f       	sbci	r25, 0xFF	; 255
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e8       	ldi	r20, 0x80	; 128
     c02:	5f e3       	ldi	r21, 0x3F	; 63
     c04:	fc 01       	movw	r30, r24
     c06:	60 81       	ld	r22, Z
     c08:	71 81       	ldd	r23, Z+1	; 0x01
     c0a:	82 81       	ldd	r24, Z+2	; 0x02
     c0c:	93 81       	ldd	r25, Z+3	; 0x03
     c0e:	0e 94 48 11 	call	0x2290	; 0x2290 <__cmpsf2>
     c12:	88 23       	and	r24, r24
     c14:	3c f4       	brge	.+14     	; 0xc24 <LCD_displayCharacter+0xc4>
		__ticks = 1;
     c16:	ce 01       	movw	r24, r28
     c18:	89 5a       	subi	r24, 0xA9	; 169
     c1a:	9f 4f       	sbci	r25, 0xFF	; 255
     c1c:	21 e0       	ldi	r18, 0x01	; 1
     c1e:	fc 01       	movw	r30, r24
     c20:	20 83       	st	Z, r18
     c22:	2c c1       	rjmp	.+600    	; 0xe7c <LCD_displayCharacter+0x31c>
	else if (__tmp2 > 65535)
     c24:	ce 01       	movw	r24, r28
     c26:	8d 5a       	subi	r24, 0xAD	; 173
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	3f ef       	ldi	r19, 0xFF	; 255
     c2e:	4f e7       	ldi	r20, 0x7F	; 127
     c30:	57 e4       	ldi	r21, 0x47	; 71
     c32:	fc 01       	movw	r30, r24
     c34:	60 81       	ld	r22, Z
     c36:	71 81       	ldd	r23, Z+1	; 0x01
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__gesf2>
     c40:	18 16       	cp	r1, r24
     c42:	0c f0       	brlt	.+2      	; 0xc46 <LCD_displayCharacter+0xe6>
     c44:	cd c0       	rjmp	.+410    	; 0xde0 <LCD_displayCharacter+0x280>
	{
		_delay_ms(__us / 1000.0);
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	4a e7       	ldi	r20, 0x7A	; 122
     c4c:	54 e4       	ldi	r21, 0x44	; 68
     c4e:	69 81       	ldd	r22, Y+1	; 0x01
     c50:	7a 81       	ldd	r23, Y+2	; 0x02
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	0e 94 4d 11 	call	0x229a	; 0x229a <__divsf3>
     c5a:	dc 01       	movw	r26, r24
     c5c:	cb 01       	movw	r24, r22
     c5e:	9e 01       	movw	r18, r28
     c60:	28 5a       	subi	r18, 0xA8	; 168
     c62:	3f 4f       	sbci	r19, 0xFF	; 255
     c64:	f9 01       	movw	r30, r18
     c66:	80 83       	st	Z, r24
     c68:	91 83       	std	Z+1, r25	; 0x01
     c6a:	a2 83       	std	Z+2, r26	; 0x02
     c6c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c6e:	8e 01       	movw	r16, r28
     c70:	04 5a       	subi	r16, 0xA4	; 164
     c72:	1f 4f       	sbci	r17, 0xFF	; 255
     c74:	ce 01       	movw	r24, r28
     c76:	88 5a       	subi	r24, 0xA8	; 168
     c78:	9f 4f       	sbci	r25, 0xFF	; 255
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	4a ef       	ldi	r20, 0xFA	; 250
     c80:	54 e4       	ldi	r21, 0x44	; 68
     c82:	fc 01       	movw	r30, r24
     c84:	60 81       	ld	r22, Z
     c86:	71 81       	ldd	r23, Z+1	; 0x01
     c88:	82 81       	ldd	r24, Z+2	; 0x02
     c8a:	93 81       	ldd	r25, Z+3	; 0x03
     c8c:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     c90:	dc 01       	movw	r26, r24
     c92:	cb 01       	movw	r24, r22
     c94:	f8 01       	movw	r30, r16
     c96:	80 83       	st	Z, r24
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	a2 83       	std	Z+2, r26	; 0x02
     c9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c9e:	ce 01       	movw	r24, r28
     ca0:	84 5a       	subi	r24, 0xA4	; 164
     ca2:	9f 4f       	sbci	r25, 0xFF	; 255
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	40 e8       	ldi	r20, 0x80	; 128
     caa:	5f e3       	ldi	r21, 0x3F	; 63
     cac:	fc 01       	movw	r30, r24
     cae:	60 81       	ld	r22, Z
     cb0:	71 81       	ldd	r23, Z+1	; 0x01
     cb2:	82 81       	ldd	r24, Z+2	; 0x02
     cb4:	93 81       	ldd	r25, Z+3	; 0x03
     cb6:	0e 94 48 11 	call	0x2290	; 0x2290 <__cmpsf2>
     cba:	88 23       	and	r24, r24
     cbc:	4c f4       	brge	.+18     	; 0xcd0 <LCD_displayCharacter+0x170>
		__ticks = 1;
     cbe:	ce 01       	movw	r24, r28
     cc0:	80 5a       	subi	r24, 0xA0	; 160
     cc2:	9f 4f       	sbci	r25, 0xFF	; 255
     cc4:	21 e0       	ldi	r18, 0x01	; 1
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	fc 01       	movw	r30, r24
     cca:	31 83       	std	Z+1, r19	; 0x01
     ccc:	20 83       	st	Z, r18
     cce:	6d c0       	rjmp	.+218    	; 0xdaa <LCD_displayCharacter+0x24a>
	else if (__tmp > 65535)
     cd0:	ce 01       	movw	r24, r28
     cd2:	84 5a       	subi	r24, 0xA4	; 164
     cd4:	9f 4f       	sbci	r25, 0xFF	; 255
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	3f ef       	ldi	r19, 0xFF	; 255
     cda:	4f e7       	ldi	r20, 0x7F	; 127
     cdc:	57 e4       	ldi	r21, 0x47	; 71
     cde:	fc 01       	movw	r30, r24
     ce0:	60 81       	ld	r22, Z
     ce2:	71 81       	ldd	r23, Z+1	; 0x01
     ce4:	82 81       	ldd	r24, Z+2	; 0x02
     ce6:	93 81       	ldd	r25, Z+3	; 0x03
     ce8:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__gesf2>
     cec:	18 16       	cp	r1, r24
     cee:	0c f0       	brlt	.+2      	; 0xcf2 <LCD_displayCharacter+0x192>
     cf0:	4a c0       	rjmp	.+148    	; 0xd86 <LCD_displayCharacter+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf2:	ce 01       	movw	r24, r28
     cf4:	88 5a       	subi	r24, 0xA8	; 168
     cf6:	9f 4f       	sbci	r25, 0xFF	; 255
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e2       	ldi	r20, 0x20	; 32
     cfe:	51 e4       	ldi	r21, 0x41	; 65
     d00:	fc 01       	movw	r30, r24
     d02:	60 81       	ld	r22, Z
     d04:	71 81       	ldd	r23, Z+1	; 0x01
     d06:	82 81       	ldd	r24, Z+2	; 0x02
     d08:	93 81       	ldd	r25, Z+3	; 0x03
     d0a:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	8e 01       	movw	r16, r28
     d14:	00 5a       	subi	r16, 0xA0	; 160
     d16:	1f 4f       	sbci	r17, 0xFF	; 255
     d18:	bc 01       	movw	r22, r24
     d1a:	cd 01       	movw	r24, r26
     d1c:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	f8 01       	movw	r30, r16
     d26:	91 83       	std	Z+1, r25	; 0x01
     d28:	80 83       	st	Z, r24
     d2a:	24 c0       	rjmp	.+72     	; 0xd74 <LCD_displayCharacter+0x214>
     d2c:	ce 01       	movw	r24, r28
     d2e:	8e 59       	subi	r24, 0x9E	; 158
     d30:	9f 4f       	sbci	r25, 0xFF	; 255
     d32:	28 ec       	ldi	r18, 0xC8	; 200
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	fc 01       	movw	r30, r24
     d38:	31 83       	std	Z+1, r19	; 0x01
     d3a:	20 83       	st	Z, r18
     d3c:	ce 01       	movw	r24, r28
     d3e:	8e 59       	subi	r24, 0x9E	; 158
     d40:	9f 4f       	sbci	r25, 0xFF	; 255
     d42:	fc 01       	movw	r30, r24
     d44:	80 81       	ld	r24, Z
     d46:	91 81       	ldd	r25, Z+1	; 0x01
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <LCD_displayCharacter+0x1e8>
     d4c:	9e 01       	movw	r18, r28
     d4e:	2e 59       	subi	r18, 0x9E	; 158
     d50:	3f 4f       	sbci	r19, 0xFF	; 255
     d52:	f9 01       	movw	r30, r18
     d54:	91 83       	std	Z+1, r25	; 0x01
     d56:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d58:	ce 01       	movw	r24, r28
     d5a:	80 5a       	subi	r24, 0xA0	; 160
     d5c:	9f 4f       	sbci	r25, 0xFF	; 255
     d5e:	9e 01       	movw	r18, r28
     d60:	20 5a       	subi	r18, 0xA0	; 160
     d62:	3f 4f       	sbci	r19, 0xFF	; 255
     d64:	f9 01       	movw	r30, r18
     d66:	20 81       	ld	r18, Z
     d68:	31 81       	ldd	r19, Z+1	; 0x01
     d6a:	21 50       	subi	r18, 0x01	; 1
     d6c:	31 09       	sbc	r19, r1
     d6e:	fc 01       	movw	r30, r24
     d70:	31 83       	std	Z+1, r19	; 0x01
     d72:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d74:	ce 01       	movw	r24, r28
     d76:	80 5a       	subi	r24, 0xA0	; 160
     d78:	9f 4f       	sbci	r25, 0xFF	; 255
     d7a:	fc 01       	movw	r30, r24
     d7c:	80 81       	ld	r24, Z
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	89 2b       	or	r24, r25
     d82:	a1 f6       	brne	.-88     	; 0xd2c <LCD_displayCharacter+0x1cc>
     d84:	7b c0       	rjmp	.+246    	; 0xe7c <LCD_displayCharacter+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d86:	8e 01       	movw	r16, r28
     d88:	00 5a       	subi	r16, 0xA0	; 160
     d8a:	1f 4f       	sbci	r17, 0xFF	; 255
     d8c:	ce 01       	movw	r24, r28
     d8e:	84 5a       	subi	r24, 0xA4	; 164
     d90:	9f 4f       	sbci	r25, 0xFF	; 255
     d92:	fc 01       	movw	r30, r24
     d94:	60 81       	ld	r22, Z
     d96:	71 81       	ldd	r23, Z+1	; 0x01
     d98:	82 81       	ldd	r24, Z+2	; 0x02
     d9a:	93 81       	ldd	r25, Z+3	; 0x03
     d9c:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	f8 01       	movw	r30, r16
     da6:	91 83       	std	Z+1, r25	; 0x01
     da8:	80 83       	st	Z, r24
     daa:	ce 01       	movw	r24, r28
     dac:	8c 59       	subi	r24, 0x9C	; 156
     dae:	9f 4f       	sbci	r25, 0xFF	; 255
     db0:	9e 01       	movw	r18, r28
     db2:	20 5a       	subi	r18, 0xA0	; 160
     db4:	3f 4f       	sbci	r19, 0xFF	; 255
     db6:	f9 01       	movw	r30, r18
     db8:	20 81       	ld	r18, Z
     dba:	31 81       	ldd	r19, Z+1	; 0x01
     dbc:	fc 01       	movw	r30, r24
     dbe:	31 83       	std	Z+1, r19	; 0x01
     dc0:	20 83       	st	Z, r18
     dc2:	ce 01       	movw	r24, r28
     dc4:	8c 59       	subi	r24, 0x9C	; 156
     dc6:	9f 4f       	sbci	r25, 0xFF	; 255
     dc8:	fc 01       	movw	r30, r24
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <LCD_displayCharacter+0x26e>
     dd2:	9e 01       	movw	r18, r28
     dd4:	2c 59       	subi	r18, 0x9C	; 156
     dd6:	3f 4f       	sbci	r19, 0xFF	; 255
     dd8:	f9 01       	movw	r30, r18
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	80 83       	st	Z, r24
     dde:	4e c0       	rjmp	.+156    	; 0xe7c <LCD_displayCharacter+0x31c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     de0:	ce 01       	movw	r24, r28
     de2:	81 5b       	subi	r24, 0xB1	; 177
     de4:	9f 4f       	sbci	r25, 0xFF	; 255
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	4f e7       	ldi	r20, 0x7F	; 127
     dec:	53 e4       	ldi	r21, 0x43	; 67
     dee:	fc 01       	movw	r30, r24
     df0:	60 81       	ld	r22, Z
     df2:	71 81       	ldd	r23, Z+1	; 0x01
     df4:	82 81       	ldd	r24, Z+2	; 0x02
     df6:	93 81       	ldd	r25, Z+3	; 0x03
     df8:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__gesf2>
     dfc:	18 16       	cp	r1, r24
     dfe:	6c f5       	brge	.+90     	; 0xe5a <LCD_displayCharacter+0x2fa>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     e00:	8e 01       	movw	r16, r28
     e02:	0a 59       	subi	r16, 0x9A	; 154
     e04:	1f 4f       	sbci	r17, 0xFF	; 255
     e06:	ce 01       	movw	r24, r28
     e08:	8d 5a       	subi	r24, 0xAD	; 173
     e0a:	9f 4f       	sbci	r25, 0xFF	; 255
     e0c:	fc 01       	movw	r30, r24
     e0e:	60 81       	ld	r22, Z
     e10:	71 81       	ldd	r23, Z+1	; 0x01
     e12:	82 81       	ldd	r24, Z+2	; 0x02
     e14:	93 81       	ldd	r25, Z+3	; 0x03
     e16:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     e1a:	dc 01       	movw	r26, r24
     e1c:	cb 01       	movw	r24, r22
     e1e:	f8 01       	movw	r30, r16
     e20:	91 83       	std	Z+1, r25	; 0x01
     e22:	80 83       	st	Z, r24
     e24:	ce 01       	movw	r24, r28
     e26:	88 59       	subi	r24, 0x98	; 152
     e28:	9f 4f       	sbci	r25, 0xFF	; 255
     e2a:	9e 01       	movw	r18, r28
     e2c:	2a 59       	subi	r18, 0x9A	; 154
     e2e:	3f 4f       	sbci	r19, 0xFF	; 255
     e30:	f9 01       	movw	r30, r18
     e32:	20 81       	ld	r18, Z
     e34:	31 81       	ldd	r19, Z+1	; 0x01
     e36:	fc 01       	movw	r30, r24
     e38:	31 83       	std	Z+1, r19	; 0x01
     e3a:	20 83       	st	Z, r18
     e3c:	ce 01       	movw	r24, r28
     e3e:	88 59       	subi	r24, 0x98	; 152
     e40:	9f 4f       	sbci	r25, 0xFF	; 255
     e42:	fc 01       	movw	r30, r24
     e44:	80 81       	ld	r24, Z
     e46:	91 81       	ldd	r25, Z+1	; 0x01
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <LCD_displayCharacter+0x2e8>
     e4c:	9e 01       	movw	r18, r28
     e4e:	28 59       	subi	r18, 0x98	; 152
     e50:	3f 4f       	sbci	r19, 0xFF	; 255
     e52:	f9 01       	movw	r30, r18
     e54:	91 83       	std	Z+1, r25	; 0x01
     e56:	80 83       	st	Z, r24
     e58:	28 c0       	rjmp	.+80     	; 0xeaa <LCD_displayCharacter+0x34a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e5a:	8e 01       	movw	r16, r28
     e5c:	09 5a       	subi	r16, 0xA9	; 169
     e5e:	1f 4f       	sbci	r17, 0xFF	; 255
     e60:	ce 01       	movw	r24, r28
     e62:	81 5b       	subi	r24, 0xB1	; 177
     e64:	9f 4f       	sbci	r25, 0xFF	; 255
     e66:	fc 01       	movw	r30, r24
     e68:	60 81       	ld	r22, Z
     e6a:	71 81       	ldd	r23, Z+1	; 0x01
     e6c:	82 81       	ldd	r24, Z+2	; 0x02
     e6e:	93 81       	ldd	r25, Z+3	; 0x03
     e70:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	f8 01       	movw	r30, r16
     e7a:	80 83       	st	Z, r24
     e7c:	ce 01       	movw	r24, r28
     e7e:	86 59       	subi	r24, 0x96	; 150
     e80:	9f 4f       	sbci	r25, 0xFF	; 255
     e82:	9e 01       	movw	r18, r28
     e84:	29 5a       	subi	r18, 0xA9	; 169
     e86:	3f 4f       	sbci	r19, 0xFF	; 255
     e88:	f9 01       	movw	r30, r18
     e8a:	20 81       	ld	r18, Z
     e8c:	fc 01       	movw	r30, r24
     e8e:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e90:	ce 01       	movw	r24, r28
     e92:	86 59       	subi	r24, 0x96	; 150
     e94:	9f 4f       	sbci	r25, 0xFF	; 255
     e96:	fc 01       	movw	r30, r24
     e98:	80 81       	ld	r24, Z
     e9a:	28 2f       	mov	r18, r24
     e9c:	2a 95       	dec	r18
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <LCD_displayCharacter+0x33c>
     ea0:	ce 01       	movw	r24, r28
     ea2:	86 59       	subi	r24, 0x96	; 150
     ea4:	9f 4f       	sbci	r25, 0xFF	; 255
     ea6:	fc 01       	movw	r30, r24
     ea8:	20 83       	st	Z, r18
	_delay_us(1);/*delay processing RS set time tas=40ns */
	CLEAR_BIT(LCD_CTRL_PORT,READWRITE); /*write data to LCD so READWRITE =0 */
     eaa:	82 e3       	ldi	r24, 0x32	; 50
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	22 e3       	ldi	r18, 0x32	; 50
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	f9 01       	movw	r30, r18
     eb4:	20 81       	ld	r18, Z
     eb6:	2f 7d       	andi	r18, 0xDF	; 223
     eb8:	fc 01       	movw	r30, r24
     eba:	20 83       	st	Z, r18
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	a0 e8       	ldi	r26, 0x80	; 128
     ec2:	bf e3       	ldi	r27, 0x3F	; 63
     ec4:	8d 83       	std	Y+5, r24	; 0x05
     ec6:	9e 83       	std	Y+6, r25	; 0x06
     ec8:	af 83       	std	Y+7, r26	; 0x07
     eca:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     ecc:	2b ea       	ldi	r18, 0xAB	; 171
     ece:	3a ea       	ldi	r19, 0xAA	; 170
     ed0:	4a e2       	ldi	r20, 0x2A	; 42
     ed2:	50 e4       	ldi	r21, 0x40	; 64
     ed4:	6d 81       	ldd	r22, Y+5	; 0x05
     ed6:	7e 81       	ldd	r23, Y+6	; 0x06
     ed8:	8f 81       	ldd	r24, Y+7	; 0x07
     eda:	98 85       	ldd	r25, Y+8	; 0x08
     edc:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	8b ab       	std	Y+51, r24	; 0x33
     ee6:	9c ab       	std	Y+52, r25	; 0x34
     ee8:	ad ab       	std	Y+53, r26	; 0x35
     eea:	be ab       	std	Y+54, r27	; 0x36
	__tmp2 = ((F_CPU) / 4e6) * __us;
     eec:	8d 81       	ldd	r24, Y+5	; 0x05
     eee:	9e 81       	ldd	r25, Y+6	; 0x06
     ef0:	af 81       	ldd	r26, Y+7	; 0x07
     ef2:	b8 85       	ldd	r27, Y+8	; 0x08
     ef4:	9c 01       	movw	r18, r24
     ef6:	ad 01       	movw	r20, r26
     ef8:	bc 01       	movw	r22, r24
     efa:	cd 01       	movw	r24, r26
     efc:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__addsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	8f ab       	std	Y+55, r24	; 0x37
     f06:	98 af       	std	Y+56, r25	; 0x38
     f08:	a9 af       	std	Y+57, r26	; 0x39
     f0a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e8       	ldi	r20, 0x80	; 128
     f12:	5f e3       	ldi	r21, 0x3F	; 63
     f14:	6b a9       	ldd	r22, Y+51	; 0x33
     f16:	7c a9       	ldd	r23, Y+52	; 0x34
     f18:	8d a9       	ldd	r24, Y+53	; 0x35
     f1a:	9e a9       	ldd	r25, Y+54	; 0x36
     f1c:	0e 94 48 11 	call	0x2290	; 0x2290 <__cmpsf2>
     f20:	88 23       	and	r24, r24
     f22:	1c f4       	brge	.+6      	; 0xf2a <LCD_displayCharacter+0x3ca>
		__ticks = 1;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	8b af       	std	Y+59, r24	; 0x3b
     f28:	0c c1       	rjmp	.+536    	; 0x1142 <LCD_displayCharacter+0x5e2>
	else if (__tmp2 > 65535)
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	3f ef       	ldi	r19, 0xFF	; 255
     f2e:	4f e7       	ldi	r20, 0x7F	; 127
     f30:	57 e4       	ldi	r21, 0x47	; 71
     f32:	6f a9       	ldd	r22, Y+55	; 0x37
     f34:	78 ad       	ldd	r23, Y+56	; 0x38
     f36:	89 ad       	ldd	r24, Y+57	; 0x39
     f38:	9a ad       	ldd	r25, Y+58	; 0x3a
     f3a:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__gesf2>
     f3e:	18 16       	cp	r1, r24
     f40:	0c f0       	brlt	.+2      	; 0xf44 <LCD_displayCharacter+0x3e4>
     f42:	c1 c0       	rjmp	.+386    	; 0x10c6 <LCD_displayCharacter+0x566>
	{
		_delay_ms(__us / 1000.0);
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	4a e7       	ldi	r20, 0x7A	; 122
     f4a:	54 e4       	ldi	r21, 0x44	; 68
     f4c:	6d 81       	ldd	r22, Y+5	; 0x05
     f4e:	7e 81       	ldd	r23, Y+6	; 0x06
     f50:	8f 81       	ldd	r24, Y+7	; 0x07
     f52:	98 85       	ldd	r25, Y+8	; 0x08
     f54:	0e 94 4d 11 	call	0x229a	; 0x229a <__divsf3>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	8c af       	std	Y+60, r24	; 0x3c
     f5e:	9d af       	std	Y+61, r25	; 0x3d
     f60:	ae af       	std	Y+62, r26	; 0x3e
     f62:	bf af       	std	Y+63, r27	; 0x3f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f64:	8e 01       	movw	r16, r28
     f66:	00 5c       	subi	r16, 0xC0	; 192
     f68:	1f 4f       	sbci	r17, 0xFF	; 255
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	4a ef       	ldi	r20, 0xFA	; 250
     f70:	54 e4       	ldi	r21, 0x44	; 68
     f72:	6c ad       	ldd	r22, Y+60	; 0x3c
     f74:	7d ad       	ldd	r23, Y+61	; 0x3d
     f76:	8e ad       	ldd	r24, Y+62	; 0x3e
     f78:	9f ad       	ldd	r25, Y+63	; 0x3f
     f7a:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	f8 01       	movw	r30, r16
     f84:	80 83       	st	Z, r24
     f86:	91 83       	std	Z+1, r25	; 0x01
     f88:	a2 83       	std	Z+2, r26	; 0x02
     f8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f8c:	ce 01       	movw	r24, r28
     f8e:	80 5c       	subi	r24, 0xC0	; 192
     f90:	9f 4f       	sbci	r25, 0xFF	; 255
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e8       	ldi	r20, 0x80	; 128
     f98:	5f e3       	ldi	r21, 0x3F	; 63
     f9a:	fc 01       	movw	r30, r24
     f9c:	60 81       	ld	r22, Z
     f9e:	71 81       	ldd	r23, Z+1	; 0x01
     fa0:	82 81       	ldd	r24, Z+2	; 0x02
     fa2:	93 81       	ldd	r25, Z+3	; 0x03
     fa4:	0e 94 48 11 	call	0x2290	; 0x2290 <__cmpsf2>
     fa8:	88 23       	and	r24, r24
     faa:	4c f4       	brge	.+18     	; 0xfbe <LCD_displayCharacter+0x45e>
		__ticks = 1;
     fac:	ce 01       	movw	r24, r28
     fae:	8c 5b       	subi	r24, 0xBC	; 188
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	21 e0       	ldi	r18, 0x01	; 1
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	fc 01       	movw	r30, r24
     fb8:	31 83       	std	Z+1, r19	; 0x01
     fba:	20 83       	st	Z, r18
     fbc:	69 c0       	rjmp	.+210    	; 0x1090 <LCD_displayCharacter+0x530>
	else if (__tmp > 65535)
     fbe:	ce 01       	movw	r24, r28
     fc0:	80 5c       	subi	r24, 0xC0	; 192
     fc2:	9f 4f       	sbci	r25, 0xFF	; 255
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	3f ef       	ldi	r19, 0xFF	; 255
     fc8:	4f e7       	ldi	r20, 0x7F	; 127
     fca:	57 e4       	ldi	r21, 0x47	; 71
     fcc:	fc 01       	movw	r30, r24
     fce:	60 81       	ld	r22, Z
     fd0:	71 81       	ldd	r23, Z+1	; 0x01
     fd2:	82 81       	ldd	r24, Z+2	; 0x02
     fd4:	93 81       	ldd	r25, Z+3	; 0x03
     fd6:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__gesf2>
     fda:	18 16       	cp	r1, r24
     fdc:	0c f0       	brlt	.+2      	; 0xfe0 <LCD_displayCharacter+0x480>
     fde:	46 c0       	rjmp	.+140    	; 0x106c <LCD_displayCharacter+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e2       	ldi	r20, 0x20	; 32
     fe6:	51 e4       	ldi	r21, 0x41	; 65
     fe8:	6c ad       	ldd	r22, Y+60	; 0x3c
     fea:	7d ad       	ldd	r23, Y+61	; 0x3d
     fec:	8e ad       	ldd	r24, Y+62	; 0x3e
     fee:	9f ad       	ldd	r25, Y+63	; 0x3f
     ff0:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	8e 01       	movw	r16, r28
     ffa:	0c 5b       	subi	r16, 0xBC	; 188
     ffc:	1f 4f       	sbci	r17, 0xFF	; 255
     ffe:	bc 01       	movw	r22, r24
    1000:	cd 01       	movw	r24, r26
    1002:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	f8 01       	movw	r30, r16
    100c:	91 83       	std	Z+1, r25	; 0x01
    100e:	80 83       	st	Z, r24
    1010:	24 c0       	rjmp	.+72     	; 0x105a <LCD_displayCharacter+0x4fa>
    1012:	ce 01       	movw	r24, r28
    1014:	8a 5b       	subi	r24, 0xBA	; 186
    1016:	9f 4f       	sbci	r25, 0xFF	; 255
    1018:	28 ec       	ldi	r18, 0xC8	; 200
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	fc 01       	movw	r30, r24
    101e:	31 83       	std	Z+1, r19	; 0x01
    1020:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1022:	ce 01       	movw	r24, r28
    1024:	8a 5b       	subi	r24, 0xBA	; 186
    1026:	9f 4f       	sbci	r25, 0xFF	; 255
    1028:	fc 01       	movw	r30, r24
    102a:	80 81       	ld	r24, Z
    102c:	91 81       	ldd	r25, Z+1	; 0x01
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <LCD_displayCharacter+0x4ce>
    1032:	9e 01       	movw	r18, r28
    1034:	2a 5b       	subi	r18, 0xBA	; 186
    1036:	3f 4f       	sbci	r19, 0xFF	; 255
    1038:	f9 01       	movw	r30, r18
    103a:	91 83       	std	Z+1, r25	; 0x01
    103c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    103e:	ce 01       	movw	r24, r28
    1040:	8c 5b       	subi	r24, 0xBC	; 188
    1042:	9f 4f       	sbci	r25, 0xFF	; 255
    1044:	9e 01       	movw	r18, r28
    1046:	2c 5b       	subi	r18, 0xBC	; 188
    1048:	3f 4f       	sbci	r19, 0xFF	; 255
    104a:	f9 01       	movw	r30, r18
    104c:	20 81       	ld	r18, Z
    104e:	31 81       	ldd	r19, Z+1	; 0x01
    1050:	21 50       	subi	r18, 0x01	; 1
    1052:	31 09       	sbc	r19, r1
    1054:	fc 01       	movw	r30, r24
    1056:	31 83       	std	Z+1, r19	; 0x01
    1058:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    105a:	ce 01       	movw	r24, r28
    105c:	8c 5b       	subi	r24, 0xBC	; 188
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	fc 01       	movw	r30, r24
    1062:	80 81       	ld	r24, Z
    1064:	91 81       	ldd	r25, Z+1	; 0x01
    1066:	89 2b       	or	r24, r25
    1068:	a1 f6       	brne	.-88     	; 0x1012 <LCD_displayCharacter+0x4b2>
    106a:	6b c0       	rjmp	.+214    	; 0x1142 <LCD_displayCharacter+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    106c:	8e 01       	movw	r16, r28
    106e:	0c 5b       	subi	r16, 0xBC	; 188
    1070:	1f 4f       	sbci	r17, 0xFF	; 255
    1072:	ce 01       	movw	r24, r28
    1074:	80 5c       	subi	r24, 0xC0	; 192
    1076:	9f 4f       	sbci	r25, 0xFF	; 255
    1078:	fc 01       	movw	r30, r24
    107a:	60 81       	ld	r22, Z
    107c:	71 81       	ldd	r23, Z+1	; 0x01
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	93 81       	ldd	r25, Z+3	; 0x03
    1082:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	f8 01       	movw	r30, r16
    108c:	91 83       	std	Z+1, r25	; 0x01
    108e:	80 83       	st	Z, r24
    1090:	ce 01       	movw	r24, r28
    1092:	88 5b       	subi	r24, 0xB8	; 184
    1094:	9f 4f       	sbci	r25, 0xFF	; 255
    1096:	9e 01       	movw	r18, r28
    1098:	2c 5b       	subi	r18, 0xBC	; 188
    109a:	3f 4f       	sbci	r19, 0xFF	; 255
    109c:	f9 01       	movw	r30, r18
    109e:	20 81       	ld	r18, Z
    10a0:	31 81       	ldd	r19, Z+1	; 0x01
    10a2:	fc 01       	movw	r30, r24
    10a4:	31 83       	std	Z+1, r19	; 0x01
    10a6:	20 83       	st	Z, r18
    10a8:	ce 01       	movw	r24, r28
    10aa:	88 5b       	subi	r24, 0xB8	; 184
    10ac:	9f 4f       	sbci	r25, 0xFF	; 255
    10ae:	fc 01       	movw	r30, r24
    10b0:	80 81       	ld	r24, Z
    10b2:	91 81       	ldd	r25, Z+1	; 0x01
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <LCD_displayCharacter+0x554>
    10b8:	9e 01       	movw	r18, r28
    10ba:	28 5b       	subi	r18, 0xB8	; 184
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    10be:	f9 01       	movw	r30, r18
    10c0:	91 83       	std	Z+1, r25	; 0x01
    10c2:	80 83       	st	Z, r24
    10c4:	3e c0       	rjmp	.+124    	; 0x1142 <LCD_displayCharacter+0x5e2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	4f e7       	ldi	r20, 0x7F	; 127
    10cc:	53 e4       	ldi	r21, 0x43	; 67
    10ce:	6b a9       	ldd	r22, Y+51	; 0x33
    10d0:	7c a9       	ldd	r23, Y+52	; 0x34
    10d2:	8d a9       	ldd	r24, Y+53	; 0x35
    10d4:	9e a9       	ldd	r25, Y+54	; 0x36
    10d6:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__gesf2>
    10da:	18 16       	cp	r1, r24
    10dc:	4c f5       	brge	.+82     	; 0x1130 <LCD_displayCharacter+0x5d0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    10de:	8e 01       	movw	r16, r28
    10e0:	06 5b       	subi	r16, 0xB6	; 182
    10e2:	1f 4f       	sbci	r17, 0xFF	; 255
    10e4:	6f a9       	ldd	r22, Y+55	; 0x37
    10e6:	78 ad       	ldd	r23, Y+56	; 0x38
    10e8:	89 ad       	ldd	r24, Y+57	; 0x39
    10ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    10ec:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	f8 01       	movw	r30, r16
    10f6:	91 83       	std	Z+1, r25	; 0x01
    10f8:	80 83       	st	Z, r24
    10fa:	ce 01       	movw	r24, r28
    10fc:	84 5b       	subi	r24, 0xB4	; 180
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	9e 01       	movw	r18, r28
    1102:	26 5b       	subi	r18, 0xB6	; 182
    1104:	3f 4f       	sbci	r19, 0xFF	; 255
    1106:	f9 01       	movw	r30, r18
    1108:	20 81       	ld	r18, Z
    110a:	31 81       	ldd	r19, Z+1	; 0x01
    110c:	fc 01       	movw	r30, r24
    110e:	31 83       	std	Z+1, r19	; 0x01
    1110:	20 83       	st	Z, r18
    1112:	ce 01       	movw	r24, r28
    1114:	84 5b       	subi	r24, 0xB4	; 180
    1116:	9f 4f       	sbci	r25, 0xFF	; 255
    1118:	fc 01       	movw	r30, r24
    111a:	80 81       	ld	r24, Z
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <LCD_displayCharacter+0x5be>
    1122:	9e 01       	movw	r18, r28
    1124:	24 5b       	subi	r18, 0xB4	; 180
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	f9 01       	movw	r30, r18
    112a:	91 83       	std	Z+1, r25	; 0x01
    112c:	80 83       	st	Z, r24
    112e:	1c c0       	rjmp	.+56     	; 0x1168 <LCD_displayCharacter+0x608>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1130:	6b a9       	ldd	r22, Y+51	; 0x33
    1132:	7c a9       	ldd	r23, Y+52	; 0x34
    1134:	8d a9       	ldd	r24, Y+53	; 0x35
    1136:	9e a9       	ldd	r25, Y+54	; 0x36
    1138:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	8b af       	std	Y+59, r24	; 0x3b
    1142:	ce 01       	movw	r24, r28
    1144:	82 5b       	subi	r24, 0xB2	; 178
    1146:	9f 4f       	sbci	r25, 0xFF	; 255
    1148:	2b ad       	ldd	r18, Y+59	; 0x3b
    114a:	fc 01       	movw	r30, r24
    114c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    114e:	ce 01       	movw	r24, r28
    1150:	82 5b       	subi	r24, 0xB2	; 178
    1152:	9f 4f       	sbci	r25, 0xFF	; 255
    1154:	fc 01       	movw	r30, r24
    1156:	80 81       	ld	r24, Z
    1158:	28 2f       	mov	r18, r24
    115a:	2a 95       	dec	r18
    115c:	f1 f7       	brne	.-4      	; 0x115a <LCD_displayCharacter+0x5fa>
    115e:	ce 01       	movw	r24, r28
    1160:	82 5b       	subi	r24, 0xB2	; 178
    1162:	9f 4f       	sbci	r25, 0xFF	; 255
    1164:	fc 01       	movw	r30, r24
    1166:	20 83       	st	Z, r18
	_delay_us(1);/* delay processing R/W set time tas =40ns */
	SET_BIT(LCD_CTRL_PORT,LCD_ENABLE); /* enable LCD so enable =1 */
    1168:	82 e3       	ldi	r24, 0x32	; 50
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	22 e3       	ldi	r18, 0x32	; 50
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	f9 01       	movw	r30, r18
    1172:	20 81       	ld	r18, Z
    1174:	20 64       	ori	r18, 0x40	; 64
    1176:	fc 01       	movw	r30, r24
    1178:	20 83       	st	Z, r18
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	a0 e8       	ldi	r26, 0x80	; 128
    1180:	bf e3       	ldi	r27, 0x3F	; 63
    1182:	89 87       	std	Y+9, r24	; 0x09
    1184:	9a 87       	std	Y+10, r25	; 0x0a
    1186:	ab 87       	std	Y+11, r26	; 0x0b
    1188:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	4a ef       	ldi	r20, 0xFA	; 250
    1190:	54 e4       	ldi	r21, 0x44	; 68
    1192:	69 85       	ldd	r22, Y+9	; 0x09
    1194:	7a 85       	ldd	r23, Y+10	; 0x0a
    1196:	8b 85       	ldd	r24, Y+11	; 0x0b
    1198:	9c 85       	ldd	r25, Y+12	; 0x0c
    119a:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	89 a7       	std	Y+41, r24	; 0x29
    11a4:	9a a7       	std	Y+42, r25	; 0x2a
    11a6:	ab a7       	std	Y+43, r26	; 0x2b
    11a8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	40 e8       	ldi	r20, 0x80	; 128
    11b0:	5f e3       	ldi	r21, 0x3F	; 63
    11b2:	69 a5       	ldd	r22, Y+41	; 0x29
    11b4:	7a a5       	ldd	r23, Y+42	; 0x2a
    11b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    11b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    11ba:	0e 94 48 11 	call	0x2290	; 0x2290 <__cmpsf2>
    11be:	88 23       	and	r24, r24
    11c0:	2c f4       	brge	.+10     	; 0x11cc <LCD_displayCharacter+0x66c>
		__ticks = 1;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	9e a7       	std	Y+46, r25	; 0x2e
    11c8:	8d a7       	std	Y+45, r24	; 0x2d
    11ca:	3f c0       	rjmp	.+126    	; 0x124a <LCD_displayCharacter+0x6ea>
	else if (__tmp > 65535)
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	3f ef       	ldi	r19, 0xFF	; 255
    11d0:	4f e7       	ldi	r20, 0x7F	; 127
    11d2:	57 e4       	ldi	r21, 0x47	; 71
    11d4:	69 a5       	ldd	r22, Y+41	; 0x29
    11d6:	7a a5       	ldd	r23, Y+42	; 0x2a
    11d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    11da:	9c a5       	ldd	r25, Y+44	; 0x2c
    11dc:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__gesf2>
    11e0:	18 16       	cp	r1, r24
    11e2:	4c f5       	brge	.+82     	; 0x1236 <LCD_displayCharacter+0x6d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e2       	ldi	r20, 0x20	; 32
    11ea:	51 e4       	ldi	r21, 0x41	; 65
    11ec:	69 85       	ldd	r22, Y+9	; 0x09
    11ee:	7a 85       	ldd	r23, Y+10	; 0x0a
    11f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    11f4:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	bc 01       	movw	r22, r24
    11fe:	cd 01       	movw	r24, r26
    1200:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	9e a7       	std	Y+46, r25	; 0x2e
    120a:	8d a7       	std	Y+45, r24	; 0x2d
    120c:	0f c0       	rjmp	.+30     	; 0x122c <LCD_displayCharacter+0x6cc>
    120e:	88 ec       	ldi	r24, 0xC8	; 200
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	98 ab       	std	Y+48, r25	; 0x30
    1214:	8f a7       	std	Y+47, r24	; 0x2f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1216:	8f a5       	ldd	r24, Y+47	; 0x2f
    1218:	98 a9       	ldd	r25, Y+48	; 0x30
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <LCD_displayCharacter+0x6ba>
    121e:	98 ab       	std	Y+48, r25	; 0x30
    1220:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1222:	8d a5       	ldd	r24, Y+45	; 0x2d
    1224:	9e a5       	ldd	r25, Y+46	; 0x2e
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	9e a7       	std	Y+46, r25	; 0x2e
    122a:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122c:	8d a5       	ldd	r24, Y+45	; 0x2d
    122e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1230:	89 2b       	or	r24, r25
    1232:	69 f7       	brne	.-38     	; 0x120e <LCD_displayCharacter+0x6ae>
    1234:	14 c0       	rjmp	.+40     	; 0x125e <LCD_displayCharacter+0x6fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1236:	69 a5       	ldd	r22, Y+41	; 0x29
    1238:	7a a5       	ldd	r23, Y+42	; 0x2a
    123a:	8b a5       	ldd	r24, Y+43	; 0x2b
    123c:	9c a5       	ldd	r25, Y+44	; 0x2c
    123e:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	9e a7       	std	Y+46, r25	; 0x2e
    1248:	8d a7       	std	Y+45, r24	; 0x2d
    124a:	8d a5       	ldd	r24, Y+45	; 0x2d
    124c:	9e a5       	ldd	r25, Y+46	; 0x2e
    124e:	9a ab       	std	Y+50, r25	; 0x32
    1250:	89 ab       	std	Y+49, r24	; 0x31
    1252:	89 a9       	ldd	r24, Y+49	; 0x31
    1254:	9a a9       	ldd	r25, Y+50	; 0x32
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	f1 f7       	brne	.-4      	; 0x1256 <LCD_displayCharacter+0x6f6>
    125a:	9a ab       	std	Y+50, r25	; 0x32
    125c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1); /*delay for processing Tpw - Tdws = 190ns*/
	PORTC=data; /* out the required data to output data bus D0-->D7 */
    125e:	85 e3       	ldi	r24, 0x35	; 53
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	9e 01       	movw	r18, r28
    1264:	25 59       	subi	r18, 0x95	; 149
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	f9 01       	movw	r30, r18
    126a:	20 81       	ld	r18, Z
    126c:	fc 01       	movw	r30, r24
    126e:	20 83       	st	Z, r18
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	a0 e8       	ldi	r26, 0x80	; 128
    1276:	bf e3       	ldi	r27, 0x3F	; 63
    1278:	8d 87       	std	Y+13, r24	; 0x0d
    127a:	9e 87       	std	Y+14, r25	; 0x0e
    127c:	af 87       	std	Y+15, r26	; 0x0f
    127e:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	4a ef       	ldi	r20, 0xFA	; 250
    1286:	54 e4       	ldi	r21, 0x44	; 68
    1288:	6d 85       	ldd	r22, Y+13	; 0x0d
    128a:	7e 85       	ldd	r23, Y+14	; 0x0e
    128c:	8f 85       	ldd	r24, Y+15	; 0x0f
    128e:	98 89       	ldd	r25, Y+16	; 0x10
    1290:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	8f 8f       	std	Y+31, r24	; 0x1f
    129a:	98 a3       	std	Y+32, r25	; 0x20
    129c:	a9 a3       	std	Y+33, r26	; 0x21
    129e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	40 e8       	ldi	r20, 0x80	; 128
    12a6:	5f e3       	ldi	r21, 0x3F	; 63
    12a8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    12aa:	78 a1       	ldd	r23, Y+32	; 0x20
    12ac:	89 a1       	ldd	r24, Y+33	; 0x21
    12ae:	9a a1       	ldd	r25, Y+34	; 0x22
    12b0:	0e 94 48 11 	call	0x2290	; 0x2290 <__cmpsf2>
    12b4:	88 23       	and	r24, r24
    12b6:	2c f4       	brge	.+10     	; 0x12c2 <LCD_displayCharacter+0x762>
		__ticks = 1;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	9c a3       	std	Y+36, r25	; 0x24
    12be:	8b a3       	std	Y+35, r24	; 0x23
    12c0:	3f c0       	rjmp	.+126    	; 0x1340 <LCD_displayCharacter+0x7e0>
	else if (__tmp > 65535)
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	3f ef       	ldi	r19, 0xFF	; 255
    12c6:	4f e7       	ldi	r20, 0x7F	; 127
    12c8:	57 e4       	ldi	r21, 0x47	; 71
    12ca:	6f 8d       	ldd	r22, Y+31	; 0x1f
    12cc:	78 a1       	ldd	r23, Y+32	; 0x20
    12ce:	89 a1       	ldd	r24, Y+33	; 0x21
    12d0:	9a a1       	ldd	r25, Y+34	; 0x22
    12d2:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__gesf2>
    12d6:	18 16       	cp	r1, r24
    12d8:	4c f5       	brge	.+82     	; 0x132c <LCD_displayCharacter+0x7cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e2       	ldi	r20, 0x20	; 32
    12e0:	51 e4       	ldi	r21, 0x41	; 65
    12e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    12e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    12e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12e8:	98 89       	ldd	r25, Y+16	; 0x10
    12ea:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	bc 01       	movw	r22, r24
    12f4:	cd 01       	movw	r24, r26
    12f6:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	9c a3       	std	Y+36, r25	; 0x24
    1300:	8b a3       	std	Y+35, r24	; 0x23
    1302:	0f c0       	rjmp	.+30     	; 0x1322 <LCD_displayCharacter+0x7c2>
    1304:	88 ec       	ldi	r24, 0xC8	; 200
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	9e a3       	std	Y+38, r25	; 0x26
    130a:	8d a3       	std	Y+37, r24	; 0x25
    130c:	8d a1       	ldd	r24, Y+37	; 0x25
    130e:	9e a1       	ldd	r25, Y+38	; 0x26
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	f1 f7       	brne	.-4      	; 0x1310 <LCD_displayCharacter+0x7b0>
    1314:	9e a3       	std	Y+38, r25	; 0x26
    1316:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1318:	8b a1       	ldd	r24, Y+35	; 0x23
    131a:	9c a1       	ldd	r25, Y+36	; 0x24
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	9c a3       	std	Y+36, r25	; 0x24
    1320:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1322:	8b a1       	ldd	r24, Y+35	; 0x23
    1324:	9c a1       	ldd	r25, Y+36	; 0x24
    1326:	89 2b       	or	r24, r25
    1328:	69 f7       	brne	.-38     	; 0x1304 <LCD_displayCharacter+0x7a4>
    132a:	14 c0       	rjmp	.+40     	; 0x1354 <LCD_displayCharacter+0x7f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    132c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    132e:	78 a1       	ldd	r23, Y+32	; 0x20
    1330:	89 a1       	ldd	r24, Y+33	; 0x21
    1332:	9a a1       	ldd	r25, Y+34	; 0x22
    1334:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	9c a3       	std	Y+36, r25	; 0x24
    133e:	8b a3       	std	Y+35, r24	; 0x23
    1340:	8b a1       	ldd	r24, Y+35	; 0x23
    1342:	9c a1       	ldd	r25, Y+36	; 0x24
    1344:	98 a7       	std	Y+40, r25	; 0x28
    1346:	8f a3       	std	Y+39, r24	; 0x27
    1348:	8f a1       	ldd	r24, Y+39	; 0x27
    134a:	98 a5       	ldd	r25, Y+40	; 0x28
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <LCD_displayCharacter+0x7ec>
    1350:	98 a7       	std	Y+40, r25	; 0x28
    1352:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(1);/* delay processing command setup time tdsw=60ns */
	CLEAR_BIT(LCD_CTRL_PORT,6); /* disable LCD so enable pin =0*/
    1354:	82 e3       	ldi	r24, 0x32	; 50
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	22 e3       	ldi	r18, 0x32	; 50
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	f9 01       	movw	r30, r18
    135e:	20 81       	ld	r18, Z
    1360:	2f 7b       	andi	r18, 0xBF	; 191
    1362:	fc 01       	movw	r30, r24
    1364:	20 83       	st	Z, r18
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	a0 e8       	ldi	r26, 0x80	; 128
    136c:	bf e3       	ldi	r27, 0x3F	; 63
    136e:	89 8b       	std	Y+17, r24	; 0x11
    1370:	9a 8b       	std	Y+18, r25	; 0x12
    1372:	ab 8b       	std	Y+19, r26	; 0x13
    1374:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	4a ef       	ldi	r20, 0xFA	; 250
    137c:	54 e4       	ldi	r21, 0x44	; 68
    137e:	69 89       	ldd	r22, Y+17	; 0x11
    1380:	7a 89       	ldd	r23, Y+18	; 0x12
    1382:	8b 89       	ldd	r24, Y+19	; 0x13
    1384:	9c 89       	ldd	r25, Y+20	; 0x14
    1386:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	8d 8b       	std	Y+21, r24	; 0x15
    1390:	9e 8b       	std	Y+22, r25	; 0x16
    1392:	af 8b       	std	Y+23, r26	; 0x17
    1394:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	40 e8       	ldi	r20, 0x80	; 128
    139c:	5f e3       	ldi	r21, 0x3F	; 63
    139e:	6d 89       	ldd	r22, Y+21	; 0x15
    13a0:	7e 89       	ldd	r23, Y+22	; 0x16
    13a2:	8f 89       	ldd	r24, Y+23	; 0x17
    13a4:	98 8d       	ldd	r25, Y+24	; 0x18
    13a6:	0e 94 48 11 	call	0x2290	; 0x2290 <__cmpsf2>
    13aa:	88 23       	and	r24, r24
    13ac:	2c f4       	brge	.+10     	; 0x13b8 <LCD_displayCharacter+0x858>
		__ticks = 1;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	9a 8f       	std	Y+26, r25	; 0x1a
    13b4:	89 8f       	std	Y+25, r24	; 0x19
    13b6:	3f c0       	rjmp	.+126    	; 0x1436 <LCD_displayCharacter+0x8d6>
	else if (__tmp > 65535)
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	3f ef       	ldi	r19, 0xFF	; 255
    13bc:	4f e7       	ldi	r20, 0x7F	; 127
    13be:	57 e4       	ldi	r21, 0x47	; 71
    13c0:	6d 89       	ldd	r22, Y+21	; 0x15
    13c2:	7e 89       	ldd	r23, Y+22	; 0x16
    13c4:	8f 89       	ldd	r24, Y+23	; 0x17
    13c6:	98 8d       	ldd	r25, Y+24	; 0x18
    13c8:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__gesf2>
    13cc:	18 16       	cp	r1, r24
    13ce:	4c f5       	brge	.+82     	; 0x1422 <LCD_displayCharacter+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e2       	ldi	r20, 0x20	; 32
    13d6:	51 e4       	ldi	r21, 0x41	; 65
    13d8:	69 89       	ldd	r22, Y+17	; 0x11
    13da:	7a 89       	ldd	r23, Y+18	; 0x12
    13dc:	8b 89       	ldd	r24, Y+19	; 0x13
    13de:	9c 89       	ldd	r25, Y+20	; 0x14
    13e0:	0e 94 68 12 	call	0x24d0	; 0x24d0 <__mulsf3>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	bc 01       	movw	r22, r24
    13ea:	cd 01       	movw	r24, r26
    13ec:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	9a 8f       	std	Y+26, r25	; 0x1a
    13f6:	89 8f       	std	Y+25, r24	; 0x19
    13f8:	0f c0       	rjmp	.+30     	; 0x1418 <LCD_displayCharacter+0x8b8>
    13fa:	88 ec       	ldi	r24, 0xC8	; 200
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	9c 8f       	std	Y+28, r25	; 0x1c
    1400:	8b 8f       	std	Y+27, r24	; 0x1b
    1402:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1404:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	f1 f7       	brne	.-4      	; 0x1406 <LCD_displayCharacter+0x8a6>
    140a:	9c 8f       	std	Y+28, r25	; 0x1c
    140c:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    140e:	89 8d       	ldd	r24, Y+25	; 0x19
    1410:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	9a 8f       	std	Y+26, r25	; 0x1a
    1416:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1418:	89 8d       	ldd	r24, Y+25	; 0x19
    141a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    141c:	89 2b       	or	r24, r25
    141e:	69 f7       	brne	.-38     	; 0x13fa <LCD_displayCharacter+0x89a>
	_delay_ms(1); /* delay for processing hold time th =10ns*/
}
    1420:	14 c0       	rjmp	.+40     	; 0x144a <LCD_displayCharacter+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1422:	6d 89       	ldd	r22, Y+21	; 0x15
    1424:	7e 89       	ldd	r23, Y+22	; 0x16
    1426:	8f 89       	ldd	r24, Y+23	; 0x17
    1428:	98 8d       	ldd	r25, Y+24	; 0x18
    142a:	0e 94 bf 11 	call	0x237e	; 0x237e <__fixunssfsi>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	9a 8f       	std	Y+26, r25	; 0x1a
    1434:	89 8f       	std	Y+25, r24	; 0x19
    1436:	89 8d       	ldd	r24, Y+25	; 0x19
    1438:	9a 8d       	ldd	r25, Y+26	; 0x1a
    143a:	9e 8f       	std	Y+30, r25	; 0x1e
    143c:	8d 8f       	std	Y+29, r24	; 0x1d
    143e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1440:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	f1 f7       	brne	.-4      	; 0x1442 <LCD_displayCharacter+0x8e2>
    1446:	9e 8f       	std	Y+30, r25	; 0x1e
    1448:	8d 8f       	std	Y+29, r24	; 0x1d
    144a:	00 00       	nop
    144c:	c5 59       	subi	r28, 0x95	; 149
    144e:	df 4f       	sbci	r29, 0xFF	; 255
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	08 95       	ret

00001464 <LCD_displayString>:
void LCD_displayString(uint8 *str)
{
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	00 d0       	rcall	.+0      	; 0x146a <LCD_displayString+0x6>
    146a:	1f 92       	push	r1
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	9b 83       	std	Y+3, r25	; 0x03
    1472:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0 ;str[i]!='\0';i++)
    1474:	19 82       	std	Y+1, r1	; 0x01
    1476:	0e c0       	rjmp	.+28     	; 0x1494 <LCD_displayString+0x30>
	LCD_displayCharacter( str[i]);
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	2a 81       	ldd	r18, Y+2	; 0x02
    1480:	3b 81       	ldd	r19, Y+3	; 0x03
    1482:	82 0f       	add	r24, r18
    1484:	93 1f       	adc	r25, r19
    1486:	fc 01       	movw	r30, r24
    1488:	80 81       	ld	r24, Z
    148a:	0e 94 b0 05 	call	0xb60	; 0xb60 <LCD_displayCharacter>
	CLEAR_BIT(LCD_CTRL_PORT,6); /* disable LCD so enable pin =0*/
	_delay_ms(1); /* delay for processing hold time th =10ns*/
}
void LCD_displayString(uint8 *str)
{
	for(uint8 i=0 ;str[i]!='\0';i++)
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	8f 5f       	subi	r24, 0xFF	; 255
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	88 2f       	mov	r24, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	2a 81       	ldd	r18, Y+2	; 0x02
    149c:	3b 81       	ldd	r19, Y+3	; 0x03
    149e:	82 0f       	add	r24, r18
    14a0:	93 1f       	adc	r25, r19
    14a2:	fc 01       	movw	r30, r24
    14a4:	80 81       	ld	r24, Z
    14a6:	88 23       	and	r24, r24
    14a8:	39 f7       	brne	.-50     	; 0x1478 <LCD_displayString+0x14>
	LCD_displayCharacter( str[i]);
}
    14aa:	00 00       	nop
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{	/* first of all calculate the required address */
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	00 d0       	rcall	.+0      	; 0x14be <LCD_goToRowColumn+0x6>
    14be:	1f 92       	push	r1
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	8a 83       	std	Y+2, r24	; 0x02
    14c6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	88 2f       	mov	r24, r24
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	91 05       	cpc	r25, r1
    14d2:	79 f0       	breq	.+30     	; 0x14f2 <LCD_goToRowColumn+0x3a>
    14d4:	82 30       	cpi	r24, 0x02	; 2
    14d6:	91 05       	cpc	r25, r1
    14d8:	1c f4       	brge	.+6      	; 0x14e0 <LCD_goToRowColumn+0x28>
    14da:	89 2b       	or	r24, r25
    14dc:	39 f0       	breq	.+14     	; 0x14ec <LCD_goToRowColumn+0x34>
    14de:	15 c0       	rjmp	.+42     	; 0x150a <LCD_goToRowColumn+0x52>
    14e0:	82 30       	cpi	r24, 0x02	; 2
    14e2:	91 05       	cpc	r25, r1
    14e4:	51 f0       	breq	.+20     	; 0x14fa <LCD_goToRowColumn+0x42>
    14e6:	03 97       	sbiw	r24, 0x03	; 3
    14e8:	61 f0       	breq	.+24     	; 0x1502 <LCD_goToRowColumn+0x4a>
    14ea:	0f c0       	rjmp	.+30     	; 0x150a <LCD_goToRowColumn+0x52>
	{
	case 0:
		address=col;
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	89 83       	std	Y+1, r24	; 0x01
		break;
    14f0:	0c c0       	rjmp	.+24     	; 0x150a <LCD_goToRowColumn+0x52>
	case 1:
		address=0x40+col;
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	80 5c       	subi	r24, 0xC0	; 192
    14f6:	89 83       	std	Y+1, r24	; 0x01
		break;
    14f8:	08 c0       	rjmp	.+16     	; 0x150a <LCD_goToRowColumn+0x52>
	case 2:
		address=0x10+col;
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	80 5f       	subi	r24, 0xF0	; 240
    14fe:	89 83       	std	Y+1, r24	; 0x01
		break;
    1500:	04 c0       	rjmp	.+8      	; 0x150a <LCD_goToRowColumn+0x52>
	case 3:
		address=0x50+col;
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	80 5b       	subi	r24, 0xB0	; 176
    1506:	89 83       	std	Y+1, r24	; 0x01
		break;
    1508:	00 00       	nop
		}
	/* pass the specific address to the LCD
	 * to change the address you should add 0x80 to address
	 */
	LCD_sendCommand(address|0x80);
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	80 68       	ori	r24, 0x80	; 128
    150e:	0e 94 aa 03 	call	0x754	; 0x754 <LCD_sendCommand>
}
    1512:	00 00       	nop
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row, uint8 col ,uint8 *str)
{
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	00 d0       	rcall	.+0      	; 0x1526 <LCD_displayStringRowColumn+0x6>
    1526:	00 d0       	rcall	.+0      	; 0x1528 <LCD_displayStringRowColumn+0x8>
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	89 83       	std	Y+1, r24	; 0x01
    152e:	6a 83       	std	Y+2, r22	; 0x02
    1530:	5c 83       	std	Y+4, r21	; 0x04
    1532:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn( row, col);/* go to the required position*/
    1534:	6a 81       	ldd	r22, Y+2	; 0x02
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <LCD_goToRowColumn>
	LCD_displayString(str);/* display the string*/
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_displayString>
}
    1544:	00 00       	nop
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	08 95       	ret

00001554 <LCD_clearScreen>:
void LCD_clearScreen()
{
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);/* clear display*/
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	0e 94 aa 03 	call	0x754	; 0x754 <LCD_sendCommand>
}
    1562:	00 00       	nop
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	08 95       	ret

0000156a <LCD_intgerToString>:
void LCD_intgerToString(int data)
{
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	62 97       	sbiw	r28, 0x12	; 18
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	9a 8b       	std	Y+18, r25	; 0x12
    1580:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];/* buffer to hold acii result */
	itoa(data,buff,10); /* 10 for decimal base */
    1582:	89 89       	ldd	r24, Y+17	; 0x11
    1584:	9a 89       	ldd	r25, Y+18	; 0x12
    1586:	4a e0       	ldi	r20, 0x0A	; 10
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	9e 01       	movw	r18, r28
    158c:	2f 5f       	subi	r18, 0xFF	; 255
    158e:	3f 4f       	sbci	r19, 0xFF	; 255
    1590:	b9 01       	movw	r22, r18
    1592:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <itoa>
	LCD_displayString(buff);
    1596:	ce 01       	movw	r24, r28
    1598:	01 96       	adiw	r24, 0x01	; 1
    159a:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_displayString>
}
    159e:	00 00       	nop
    15a0:	62 96       	adiw	r28, 0x12	; 18
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	08 95       	ret

000015b2 <__vector_19>:

#include"timer.h"
static volatile  void(*g_callBackPtr)(void)= NULL_PTR;
static volatile TIMER_configurationType * configPtr;
ISR(TIMER0_COMP_vect)
{
    15b2:	1f 92       	push	r1
    15b4:	0f 92       	push	r0
    15b6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    15ba:	0f 92       	push	r0
    15bc:	11 24       	eor	r1, r1
    15be:	2f 93       	push	r18
    15c0:	3f 93       	push	r19
    15c2:	4f 93       	push	r20
    15c4:	5f 93       	push	r21
    15c6:	6f 93       	push	r22
    15c8:	7f 93       	push	r23
    15ca:	8f 93       	push	r24
    15cc:	9f 93       	push	r25
    15ce:	af 93       	push	r26
    15d0:	bf 93       	push	r27
    15d2:	ef 93       	push	r30
    15d4:	ff 93       	push	r31
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    15de:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <g_callBackPtr>
    15e2:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <g_callBackPtr+0x1>
    15e6:	89 2b       	or	r24, r25
    15e8:	31 f0       	breq	.+12     	; 0x15f6 <__vector_19+0x44>
		g_callBackPtr();
    15ea:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <g_callBackPtr>
    15ee:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <g_callBackPtr+0x1>
    15f2:	fc 01       	movw	r30, r24
    15f4:	09 95       	icall

}
    15f6:	00 00       	nop
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	ff 91       	pop	r31
    15fe:	ef 91       	pop	r30
    1600:	bf 91       	pop	r27
    1602:	af 91       	pop	r26
    1604:	9f 91       	pop	r25
    1606:	8f 91       	pop	r24
    1608:	7f 91       	pop	r23
    160a:	6f 91       	pop	r22
    160c:	5f 91       	pop	r21
    160e:	4f 91       	pop	r20
    1610:	3f 91       	pop	r19
    1612:	2f 91       	pop	r18
    1614:	0f 90       	pop	r0
    1616:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    161a:	0f 90       	pop	r0
    161c:	1f 90       	pop	r1
    161e:	18 95       	reti

00001620 <__vector_9>:
ISR(TIMER0_OVF_vect)
{
    1620:	1f 92       	push	r1
    1622:	0f 92       	push	r0
    1624:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1628:	0f 92       	push	r0
    162a:	11 24       	eor	r1, r1
    162c:	2f 93       	push	r18
    162e:	3f 93       	push	r19
    1630:	4f 93       	push	r20
    1632:	5f 93       	push	r21
    1634:	6f 93       	push	r22
    1636:	7f 93       	push	r23
    1638:	8f 93       	push	r24
    163a:	9f 93       	push	r25
    163c:	af 93       	push	r26
    163e:	bf 93       	push	r27
    1640:	ef 93       	push	r30
    1642:	ff 93       	push	r31
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    164c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <g_callBackPtr>
    1650:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <g_callBackPtr+0x1>
    1654:	89 2b       	or	r24, r25
    1656:	31 f0       	breq	.+12     	; 0x1664 <__vector_9+0x44>
		g_callBackPtr();
    1658:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <g_callBackPtr>
    165c:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <g_callBackPtr+0x1>
    1660:	fc 01       	movw	r30, r24
    1662:	09 95       	icall

}
    1664:	00 00       	nop
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	ff 91       	pop	r31
    166c:	ef 91       	pop	r30
    166e:	bf 91       	pop	r27
    1670:	af 91       	pop	r26
    1672:	9f 91       	pop	r25
    1674:	8f 91       	pop	r24
    1676:	7f 91       	pop	r23
    1678:	6f 91       	pop	r22
    167a:	5f 91       	pop	r21
    167c:	4f 91       	pop	r20
    167e:	3f 91       	pop	r19
    1680:	2f 91       	pop	r18
    1682:	0f 90       	pop	r0
    1684:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1688:	0f 90       	pop	r0
    168a:	1f 90       	pop	r1
    168c:	18 95       	reti

0000168e <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    168e:	1f 92       	push	r1
    1690:	0f 92       	push	r0
    1692:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1696:	0f 92       	push	r0
    1698:	11 24       	eor	r1, r1
    169a:	2f 93       	push	r18
    169c:	3f 93       	push	r19
    169e:	4f 93       	push	r20
    16a0:	5f 93       	push	r21
    16a2:	6f 93       	push	r22
    16a4:	7f 93       	push	r23
    16a6:	8f 93       	push	r24
    16a8:	9f 93       	push	r25
    16aa:	af 93       	push	r26
    16ac:	bf 93       	push	r27
    16ae:	ef 93       	push	r30
    16b0:	ff 93       	push	r31
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    16ba:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <g_callBackPtr>
    16be:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <g_callBackPtr+0x1>
    16c2:	89 2b       	or	r24, r25
    16c4:	31 f0       	breq	.+12     	; 0x16d2 <__vector_6+0x44>
			g_callBackPtr();
    16c6:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <g_callBackPtr>
    16ca:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <g_callBackPtr+0x1>
    16ce:	fc 01       	movw	r30, r24
    16d0:	09 95       	icall
}
    16d2:	00 00       	nop
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	ff 91       	pop	r31
    16da:	ef 91       	pop	r30
    16dc:	bf 91       	pop	r27
    16de:	af 91       	pop	r26
    16e0:	9f 91       	pop	r25
    16e2:	8f 91       	pop	r24
    16e4:	7f 91       	pop	r23
    16e6:	6f 91       	pop	r22
    16e8:	5f 91       	pop	r21
    16ea:	4f 91       	pop	r20
    16ec:	3f 91       	pop	r19
    16ee:	2f 91       	pop	r18
    16f0:	0f 90       	pop	r0
    16f2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    16f6:	0f 90       	pop	r0
    16f8:	1f 90       	pop	r1
    16fa:	18 95       	reti

000016fc <TIMER_init>:
void TIMER_init( TIMER_configurationType * config)
{configPtr=config;
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	00 d0       	rcall	.+0      	; 0x1702 <TIMER_init+0x6>
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	9a 83       	std	Y+2, r25	; 0x02
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <configPtr+0x1>
    1712:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <configPtr>
	if(config->timerNumber==0)
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	fc 01       	movw	r30, r24
    171c:	80 81       	ld	r24, Z
    171e:	88 23       	and	r24, r24
    1720:	09 f0       	breq	.+2      	; 0x1724 <TIMER_init+0x28>
    1722:	22 c1       	rjmp	.+580    	; 0x1968 <TIMER_init+0x26c>
	{
		TCCR0=0;
    1724:	83 e5       	ldi	r24, 0x53	; 83
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	fc 01       	movw	r30, r24
    172a:	10 82       	st	Z, r1
	switch(config->prescaler)
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	9a 81       	ldd	r25, Y+2	; 0x02
    1730:	fc 01       	movw	r30, r24
    1732:	85 89       	ldd	r24, Z+21	; 0x15
    1734:	96 89       	ldd	r25, Z+22	; 0x16
    1736:	80 34       	cpi	r24, 0x40	; 64
    1738:	91 05       	cpc	r25, r1
    173a:	c1 f0       	breq	.+48     	; 0x176c <TIMER_init+0x70>
    173c:	81 34       	cpi	r24, 0x41	; 65
    173e:	91 05       	cpc	r25, r1
    1740:	18 f4       	brcc	.+6      	; 0x1748 <TIMER_init+0x4c>
    1742:	08 97       	sbiw	r24, 0x08	; 8
    1744:	49 f0       	breq	.+18     	; 0x1758 <TIMER_init+0x5c>
    1746:	30 c0       	rjmp	.+96     	; 0x17a8 <TIMER_init+0xac>
    1748:	81 15       	cp	r24, r1
    174a:	f1 e0       	ldi	r31, 0x01	; 1
    174c:	9f 07       	cpc	r25, r31
    174e:	c1 f0       	breq	.+48     	; 0x1780 <TIMER_init+0x84>
    1750:	81 15       	cp	r24, r1
    1752:	94 40       	sbci	r25, 0x04	; 4
    1754:	f9 f0       	breq	.+62     	; 0x1794 <TIMER_init+0x98>
    1756:	28 c0       	rjmp	.+80     	; 0x17a8 <TIMER_init+0xac>
	{
	case 8:
		TCCR0|=(1<<CS01);
    1758:	83 e5       	ldi	r24, 0x53	; 83
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	23 e5       	ldi	r18, 0x53	; 83
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	f9 01       	movw	r30, r18
    1762:	20 81       	ld	r18, Z
    1764:	22 60       	ori	r18, 0x02	; 2
    1766:	fc 01       	movw	r30, r24
    1768:	20 83       	st	Z, r18
		break;
    176a:	27 c0       	rjmp	.+78     	; 0x17ba <TIMER_init+0xbe>
	case 64:
			TCCR0|=(1<<CS00)|(1<<CS01);
    176c:	83 e5       	ldi	r24, 0x53	; 83
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	23 e5       	ldi	r18, 0x53	; 83
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	f9 01       	movw	r30, r18
    1776:	20 81       	ld	r18, Z
    1778:	23 60       	ori	r18, 0x03	; 3
    177a:	fc 01       	movw	r30, r24
    177c:	20 83       	st	Z, r18
			break;
    177e:	1d c0       	rjmp	.+58     	; 0x17ba <TIMER_init+0xbe>
	case 256:
			TCCR0|=(1<<CS02);
    1780:	83 e5       	ldi	r24, 0x53	; 83
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	23 e5       	ldi	r18, 0x53	; 83
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	f9 01       	movw	r30, r18
    178a:	20 81       	ld	r18, Z
    178c:	24 60       	ori	r18, 0x04	; 4
    178e:	fc 01       	movw	r30, r24
    1790:	20 83       	st	Z, r18
			break;
    1792:	13 c0       	rjmp	.+38     	; 0x17ba <TIMER_init+0xbe>
	case 1024:
			TCCR0|=(1<<CS00)|(1<<CS02);
    1794:	83 e5       	ldi	r24, 0x53	; 83
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	23 e5       	ldi	r18, 0x53	; 83
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	f9 01       	movw	r30, r18
    179e:	20 81       	ld	r18, Z
    17a0:	25 60       	ori	r18, 0x05	; 5
    17a2:	fc 01       	movw	r30, r24
    17a4:	20 83       	st	Z, r18
			break;
    17a6:	09 c0       	rjmp	.+18     	; 0x17ba <TIMER_init+0xbe>
	default:
			TCCR0|=(1<<CS00);
    17a8:	83 e5       	ldi	r24, 0x53	; 83
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	23 e5       	ldi	r18, 0x53	; 83
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	f9 01       	movw	r30, r18
    17b2:	20 81       	ld	r18, Z
    17b4:	21 60       	ori	r18, 0x01	; 1
    17b6:	fc 01       	movw	r30, r24
    17b8:	20 83       	st	Z, r18

		}

	if(!strcmp(config->mode,"compare"))
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	67 e2       	ldi	r22, 0x27	; 39
    17c2:	71 e0       	ldi	r23, 0x01	; 1
    17c4:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    17c8:	89 2b       	or	r24, r25
    17ca:	09 f0       	breq	.+2      	; 0x17ce <TIMER_init+0xd2>
    17cc:	62 c0       	rjmp	.+196    	; 0x1892 <TIMER_init+0x196>
	{	TCCR0|=(1<<FOC0)|(1<<WGM01);
    17ce:	83 e5       	ldi	r24, 0x53	; 83
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	23 e5       	ldi	r18, 0x53	; 83
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	f9 01       	movw	r30, r18
    17d8:	20 81       	ld	r18, Z
    17da:	28 68       	ori	r18, 0x88	; 136
    17dc:	fc 01       	movw	r30, r24
    17de:	20 83       	st	Z, r18

		if(!strcmp(config->compareMatchMode,"toggle"))
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	9a 81       	ldd	r25, Y+2	; 0x02
    17e4:	47 96       	adiw	r24, 0x17	; 23
    17e6:	6f e2       	ldi	r22, 0x2F	; 47
    17e8:	71 e0       	ldi	r23, 0x01	; 1
    17ea:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    17ee:	89 2b       	or	r24, r25
    17f0:	99 f4       	brne	.+38     	; 0x1818 <TIMER_init+0x11c>
		{
		TCCR0|=(1<<COM00);
    17f2:	83 e5       	ldi	r24, 0x53	; 83
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	23 e5       	ldi	r18, 0x53	; 83
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	f9 01       	movw	r30, r18
    17fc:	20 81       	ld	r18, Z
    17fe:	20 61       	ori	r18, 0x10	; 16
    1800:	fc 01       	movw	r30, r24
    1802:	20 83       	st	Z, r18
		SET_BIT(DDRB,3);
    1804:	87 e3       	ldi	r24, 0x37	; 55
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	27 e3       	ldi	r18, 0x37	; 55
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	f9 01       	movw	r30, r18
    180e:	20 81       	ld	r18, Z
    1810:	28 60       	ori	r18, 0x08	; 8
    1812:	fc 01       	movw	r30, r24
    1814:	20 83       	st	Z, r18
    1816:	37 c0       	rjmp	.+110    	; 0x1886 <TIMER_init+0x18a>
		}
		else if(!strcmp(config->compareMatchMode,"clear"))
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	9a 81       	ldd	r25, Y+2	; 0x02
    181c:	47 96       	adiw	r24, 0x17	; 23
    181e:	66 e3       	ldi	r22, 0x36	; 54
    1820:	71 e0       	ldi	r23, 0x01	; 1
    1822:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    1826:	89 2b       	or	r24, r25
    1828:	99 f4       	brne	.+38     	; 0x1850 <TIMER_init+0x154>
			{
			TCCR0|=(1<<COM01);
    182a:	83 e5       	ldi	r24, 0x53	; 83
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	23 e5       	ldi	r18, 0x53	; 83
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	f9 01       	movw	r30, r18
    1834:	20 81       	ld	r18, Z
    1836:	20 62       	ori	r18, 0x20	; 32
    1838:	fc 01       	movw	r30, r24
    183a:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    183c:	87 e3       	ldi	r24, 0x37	; 55
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	27 e3       	ldi	r18, 0x37	; 55
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	f9 01       	movw	r30, r18
    1846:	20 81       	ld	r18, Z
    1848:	28 60       	ori	r18, 0x08	; 8
    184a:	fc 01       	movw	r30, r24
    184c:	20 83       	st	Z, r18
    184e:	1b c0       	rjmp	.+54     	; 0x1886 <TIMER_init+0x18a>

			}
		else if(!strcmp(config->compareMatchMode,"set"))
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	9a 81       	ldd	r25, Y+2	; 0x02
    1854:	47 96       	adiw	r24, 0x17	; 23
    1856:	6c e3       	ldi	r22, 0x3C	; 60
    1858:	71 e0       	ldi	r23, 0x01	; 1
    185a:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    185e:	89 2b       	or	r24, r25
    1860:	91 f4       	brne	.+36     	; 0x1886 <TIMER_init+0x18a>
			{
			TCCR0|=(1<<COM01)|(1<<COM00);
    1862:	83 e5       	ldi	r24, 0x53	; 83
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	23 e5       	ldi	r18, 0x53	; 83
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	f9 01       	movw	r30, r18
    186c:	20 81       	ld	r18, Z
    186e:	20 63       	ori	r18, 0x30	; 48
    1870:	fc 01       	movw	r30, r24
    1872:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    1874:	87 e3       	ldi	r24, 0x37	; 55
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	27 e3       	ldi	r18, 0x37	; 55
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	f9 01       	movw	r30, r18
    187e:	20 81       	ld	r18, Z
    1880:	28 60       	ori	r18, 0x08	; 8
    1882:	fc 01       	movw	r30, r24
    1884:	20 83       	st	Z, r18

			}
		//enable interrupt
		TIMSK=(1<<OCIE0);
    1886:	89 e5       	ldi	r24, 0x59	; 89
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	22 e0       	ldi	r18, 0x02	; 2
    188c:	fc 01       	movw	r30, r24
    188e:	20 83       	st	Z, r18
    1890:	6b c0       	rjmp	.+214    	; 0x1968 <TIMER_init+0x26c>

	}
	else if(!strcmp(config->mode,"normal"))
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	9a 81       	ldd	r25, Y+2	; 0x02
    1896:	01 96       	adiw	r24, 0x01	; 1
    1898:	60 e4       	ldi	r22, 0x40	; 64
    189a:	71 e0       	ldi	r23, 0x01	; 1
    189c:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    18a0:	89 2b       	or	r24, r25
    18a2:	79 f4       	brne	.+30     	; 0x18c2 <TIMER_init+0x1c6>
	{
		TCCR0|=(1<<FOC0);
    18a4:	83 e5       	ldi	r24, 0x53	; 83
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	23 e5       	ldi	r18, 0x53	; 83
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	f9 01       	movw	r30, r18
    18ae:	20 81       	ld	r18, Z
    18b0:	20 68       	ori	r18, 0x80	; 128
    18b2:	fc 01       	movw	r30, r24
    18b4:	20 83       	st	Z, r18
		TIMSK=(1<<TOIE0);
    18b6:	89 e5       	ldi	r24, 0x59	; 89
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	21 e0       	ldi	r18, 0x01	; 1
    18bc:	fc 01       	movw	r30, r24
    18be:	20 83       	st	Z, r18
    18c0:	53 c0       	rjmp	.+166    	; 0x1968 <TIMER_init+0x26c>
	}
	else if(!strcmp(config->mode,"pwm"))
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	9a 81       	ldd	r25, Y+2	; 0x02
    18c6:	01 96       	adiw	r24, 0x01	; 1
    18c8:	67 e4       	ldi	r22, 0x47	; 71
    18ca:	71 e0       	ldi	r23, 0x01	; 1
    18cc:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    18d0:	89 2b       	or	r24, r25
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <TIMER_init+0x1da>
    18d4:	49 c0       	rjmp	.+146    	; 0x1968 <TIMER_init+0x26c>
	{
		TCCR0 |=(1<<WGM00)|(1<<WGM01);
    18d6:	83 e5       	ldi	r24, 0x53	; 83
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	23 e5       	ldi	r18, 0x53	; 83
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	f9 01       	movw	r30, r18
    18e0:	20 81       	ld	r18, Z
    18e2:	28 64       	ori	r18, 0x48	; 72
    18e4:	fc 01       	movw	r30, r24
    18e6:	20 83       	st	Z, r18
		if(!strcmp(config->pwmMode,"inverting"))
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	9a 81       	ldd	r25, Y+2	; 0x02
    18ec:	8b 96       	adiw	r24, 0x2b	; 43
    18ee:	6b e4       	ldi	r22, 0x4B	; 75
    18f0:	71 e0       	ldi	r23, 0x01	; 1
    18f2:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    18f6:	89 2b       	or	r24, r25
    18f8:	e1 f4       	brne	.+56     	; 0x1932 <TIMER_init+0x236>
				{
				TCCR0|=(1<<COM00);
    18fa:	83 e5       	ldi	r24, 0x53	; 83
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	23 e5       	ldi	r18, 0x53	; 83
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	f9 01       	movw	r30, r18
    1904:	20 81       	ld	r18, Z
    1906:	20 61       	ori	r18, 0x10	; 16
    1908:	fc 01       	movw	r30, r24
    190a:	20 83       	st	Z, r18
				TCCR0|=(1<<COM01);
    190c:	83 e5       	ldi	r24, 0x53	; 83
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	23 e5       	ldi	r18, 0x53	; 83
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	f9 01       	movw	r30, r18
    1916:	20 81       	ld	r18, Z
    1918:	20 62       	ori	r18, 0x20	; 32
    191a:	fc 01       	movw	r30, r24
    191c:	20 83       	st	Z, r18
				SET_BIT(DDRB,3);
    191e:	87 e3       	ldi	r24, 0x37	; 55
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	27 e3       	ldi	r18, 0x37	; 55
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	f9 01       	movw	r30, r18
    1928:	20 81       	ld	r18, Z
    192a:	28 60       	ori	r18, 0x08	; 8
    192c:	fc 01       	movw	r30, r24
    192e:	20 83       	st	Z, r18
    1930:	1b c0       	rjmp	.+54     	; 0x1968 <TIMER_init+0x26c>
				}
				else if(!strcmp(config->pwmMode,"non-inverting"))
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	9a 81       	ldd	r25, Y+2	; 0x02
    1936:	8b 96       	adiw	r24, 0x2b	; 43
    1938:	65 e5       	ldi	r22, 0x55	; 85
    193a:	71 e0       	ldi	r23, 0x01	; 1
    193c:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    1940:	89 2b       	or	r24, r25
    1942:	91 f4       	brne	.+36     	; 0x1968 <TIMER_init+0x26c>
					{
					TCCR0|=(1<<COM01);
    1944:	83 e5       	ldi	r24, 0x53	; 83
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	23 e5       	ldi	r18, 0x53	; 83
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	f9 01       	movw	r30, r18
    194e:	20 81       	ld	r18, Z
    1950:	20 62       	ori	r18, 0x20	; 32
    1952:	fc 01       	movw	r30, r24
    1954:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    1956:	87 e3       	ldi	r24, 0x37	; 55
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	27 e3       	ldi	r18, 0x37	; 55
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	f9 01       	movw	r30, r18
    1960:	20 81       	ld	r18, Z
    1962:	28 60       	ori	r18, 0x08	; 8
    1964:	fc 01       	movw	r30, r24
    1966:	20 83       	st	Z, r18

	}

	}
	///
	if(config->timerNumber==1)
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	9a 81       	ldd	r25, Y+2	; 0x02
    196c:	fc 01       	movw	r30, r24
    196e:	80 81       	ld	r24, Z
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	09 f0       	breq	.+2      	; 0x1976 <TIMER_init+0x27a>
    1974:	30 c1       	rjmp	.+608    	; 0x1bd6 <TIMER_init+0x4da>
		{
			TCCR1A=0;
    1976:	8f e4       	ldi	r24, 0x4F	; 79
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	fc 01       	movw	r30, r24
    197c:	10 82       	st	Z, r1
			TCCR1B=0;
    197e:	8e e4       	ldi	r24, 0x4E	; 78
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	fc 01       	movw	r30, r24
    1984:	10 82       	st	Z, r1

		switch(config->prescaler)
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
    198a:	fc 01       	movw	r30, r24
    198c:	85 89       	ldd	r24, Z+21	; 0x15
    198e:	96 89       	ldd	r25, Z+22	; 0x16
    1990:	80 34       	cpi	r24, 0x40	; 64
    1992:	91 05       	cpc	r25, r1
    1994:	c1 f0       	breq	.+48     	; 0x19c6 <TIMER_init+0x2ca>
    1996:	81 34       	cpi	r24, 0x41	; 65
    1998:	91 05       	cpc	r25, r1
    199a:	18 f4       	brcc	.+6      	; 0x19a2 <TIMER_init+0x2a6>
    199c:	08 97       	sbiw	r24, 0x08	; 8
    199e:	49 f0       	breq	.+18     	; 0x19b2 <TIMER_init+0x2b6>
    19a0:	30 c0       	rjmp	.+96     	; 0x1a02 <TIMER_init+0x306>
    19a2:	81 15       	cp	r24, r1
    19a4:	f1 e0       	ldi	r31, 0x01	; 1
    19a6:	9f 07       	cpc	r25, r31
    19a8:	c1 f0       	breq	.+48     	; 0x19da <TIMER_init+0x2de>
    19aa:	81 15       	cp	r24, r1
    19ac:	94 40       	sbci	r25, 0x04	; 4
    19ae:	f9 f0       	breq	.+62     	; 0x19ee <TIMER_init+0x2f2>
    19b0:	28 c0       	rjmp	.+80     	; 0x1a02 <TIMER_init+0x306>
		{
		case 8:
			TCCR1B|=(1<<CS11);
    19b2:	8e e4       	ldi	r24, 0x4E	; 78
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	2e e4       	ldi	r18, 0x4E	; 78
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	f9 01       	movw	r30, r18
    19bc:	20 81       	ld	r18, Z
    19be:	22 60       	ori	r18, 0x02	; 2
    19c0:	fc 01       	movw	r30, r24
    19c2:	20 83       	st	Z, r18
			break;
    19c4:	27 c0       	rjmp	.+78     	; 0x1a14 <TIMER_init+0x318>
		case 64:
				TCCR1B|=(1<<CS10)|(1<<CS11);
    19c6:	8e e4       	ldi	r24, 0x4E	; 78
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	2e e4       	ldi	r18, 0x4E	; 78
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	f9 01       	movw	r30, r18
    19d0:	20 81       	ld	r18, Z
    19d2:	23 60       	ori	r18, 0x03	; 3
    19d4:	fc 01       	movw	r30, r24
    19d6:	20 83       	st	Z, r18
				break;
    19d8:	1d c0       	rjmp	.+58     	; 0x1a14 <TIMER_init+0x318>
		case 256:
				TCCR1B|=(1<<CS12);
    19da:	8e e4       	ldi	r24, 0x4E	; 78
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	2e e4       	ldi	r18, 0x4E	; 78
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	f9 01       	movw	r30, r18
    19e4:	20 81       	ld	r18, Z
    19e6:	24 60       	ori	r18, 0x04	; 4
    19e8:	fc 01       	movw	r30, r24
    19ea:	20 83       	st	Z, r18
				break;
    19ec:	13 c0       	rjmp	.+38     	; 0x1a14 <TIMER_init+0x318>
		case 1024:
				TCCR1B|=(1<<CS10)|(1<<CS12);
    19ee:	8e e4       	ldi	r24, 0x4E	; 78
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	2e e4       	ldi	r18, 0x4E	; 78
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	f9 01       	movw	r30, r18
    19f8:	20 81       	ld	r18, Z
    19fa:	25 60       	ori	r18, 0x05	; 5
    19fc:	fc 01       	movw	r30, r24
    19fe:	20 83       	st	Z, r18
				break;
    1a00:	09 c0       	rjmp	.+18     	; 0x1a14 <TIMER_init+0x318>
		default:
				TCCR1B|=(1<<CS10);
    1a02:	8e e4       	ldi	r24, 0x4E	; 78
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	2e e4       	ldi	r18, 0x4E	; 78
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	f9 01       	movw	r30, r18
    1a0c:	20 81       	ld	r18, Z
    1a0e:	21 60       	ori	r18, 0x01	; 1
    1a10:	fc 01       	movw	r30, r24
    1a12:	20 83       	st	Z, r18

			}
//FOR A
		if(!strcmp(config->mode,"compare"))
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	9a 81       	ldd	r25, Y+2	; 0x02
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	67 e2       	ldi	r22, 0x27	; 39
    1a1c:	71 e0       	ldi	r23, 0x01	; 1
    1a1e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    1a22:	89 2b       	or	r24, r25
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <TIMER_init+0x32c>
    1a26:	6b c0       	rjmp	.+214    	; 0x1afe <TIMER_init+0x402>
		{	TCCR1A|=(1<<FOC1A);
    1a28:	8f e4       	ldi	r24, 0x4F	; 79
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	2f e4       	ldi	r18, 0x4F	; 79
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	f9 01       	movw	r30, r18
    1a32:	20 81       	ld	r18, Z
    1a34:	28 60       	ori	r18, 0x08	; 8
    1a36:	fc 01       	movw	r30, r24
    1a38:	20 83       	st	Z, r18
			TCCR1B|=(1<<WGM12);
    1a3a:	8e e4       	ldi	r24, 0x4E	; 78
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	2e e4       	ldi	r18, 0x4E	; 78
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	f9 01       	movw	r30, r18
    1a44:	20 81       	ld	r18, Z
    1a46:	28 60       	ori	r18, 0x08	; 8
    1a48:	fc 01       	movw	r30, r24
    1a4a:	20 83       	st	Z, r18
			if(!strcmp(config->compareMatchMode,"toggle"))
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a50:	47 96       	adiw	r24, 0x17	; 23
    1a52:	6f e2       	ldi	r22, 0x2F	; 47
    1a54:	71 e0       	ldi	r23, 0x01	; 1
    1a56:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    1a5a:	89 2b       	or	r24, r25
    1a5c:	99 f4       	brne	.+38     	; 0x1a84 <TIMER_init+0x388>
			{
			TCCR1A|=(1<<COM1A0);
    1a5e:	8f e4       	ldi	r24, 0x4F	; 79
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	2f e4       	ldi	r18, 0x4F	; 79
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	f9 01       	movw	r30, r18
    1a68:	20 81       	ld	r18, Z
    1a6a:	20 64       	ori	r18, 0x40	; 64
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	20 83       	st	Z, r18
			SET_BIT(DDRD,5);
    1a70:	81 e3       	ldi	r24, 0x31	; 49
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	21 e3       	ldi	r18, 0x31	; 49
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	f9 01       	movw	r30, r18
    1a7a:	20 81       	ld	r18, Z
    1a7c:	20 62       	ori	r18, 0x20	; 32
    1a7e:	fc 01       	movw	r30, r24
    1a80:	20 83       	st	Z, r18
    1a82:	37 c0       	rjmp	.+110    	; 0x1af2 <TIMER_init+0x3f6>
			}
			else if(!strcmp(config->compareMatchMode,"clear"))
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	9a 81       	ldd	r25, Y+2	; 0x02
    1a88:	47 96       	adiw	r24, 0x17	; 23
    1a8a:	66 e3       	ldi	r22, 0x36	; 54
    1a8c:	71 e0       	ldi	r23, 0x01	; 1
    1a8e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    1a92:	89 2b       	or	r24, r25
    1a94:	99 f4       	brne	.+38     	; 0x1abc <TIMER_init+0x3c0>
				{
				TCCR1A|=(1<<COM1A1);
    1a96:	8f e4       	ldi	r24, 0x4F	; 79
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	2f e4       	ldi	r18, 0x4F	; 79
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	f9 01       	movw	r30, r18
    1aa0:	20 81       	ld	r18, Z
    1aa2:	20 68       	ori	r18, 0x80	; 128
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    1aa8:	81 e3       	ldi	r24, 0x31	; 49
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	21 e3       	ldi	r18, 0x31	; 49
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	f9 01       	movw	r30, r18
    1ab2:	20 81       	ld	r18, Z
    1ab4:	20 62       	ori	r18, 0x20	; 32
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	20 83       	st	Z, r18
    1aba:	1b c0       	rjmp	.+54     	; 0x1af2 <TIMER_init+0x3f6>

				}
			else if(!strcmp(config->compareMatchMode,"set"))
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac0:	47 96       	adiw	r24, 0x17	; 23
    1ac2:	6c e3       	ldi	r22, 0x3C	; 60
    1ac4:	71 e0       	ldi	r23, 0x01	; 1
    1ac6:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    1aca:	89 2b       	or	r24, r25
    1acc:	91 f4       	brne	.+36     	; 0x1af2 <TIMER_init+0x3f6>
				{
				TCCR1A|=(1<<COM1A1)|(1<<COM1A0);
    1ace:	8f e4       	ldi	r24, 0x4F	; 79
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	2f e4       	ldi	r18, 0x4F	; 79
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	f9 01       	movw	r30, r18
    1ad8:	20 81       	ld	r18, Z
    1ada:	20 6c       	ori	r18, 0xC0	; 192
    1adc:	fc 01       	movw	r30, r24
    1ade:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    1ae0:	81 e3       	ldi	r24, 0x31	; 49
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	21 e3       	ldi	r18, 0x31	; 49
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	f9 01       	movw	r30, r18
    1aea:	20 81       	ld	r18, Z
    1aec:	20 62       	ori	r18, 0x20	; 32
    1aee:	fc 01       	movw	r30, r24
    1af0:	20 83       	st	Z, r18

				}
			//enable interrupt
			TIMSK=(1<<OCIE1A);
    1af2:	89 e5       	ldi	r24, 0x59	; 89
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	20 e1       	ldi	r18, 0x10	; 16
    1af8:	fc 01       	movw	r30, r24
    1afa:	20 83       	st	Z, r18
    1afc:	6b c0       	rjmp	.+214    	; 0x1bd4 <TIMER_init+0x4d8>

		}
		else if(!strcmp(config->mode,"normal"))
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	9a 81       	ldd	r25, Y+2	; 0x02
    1b02:	01 96       	adiw	r24, 0x01	; 1
    1b04:	60 e4       	ldi	r22, 0x40	; 64
    1b06:	71 e0       	ldi	r23, 0x01	; 1
    1b08:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    1b0c:	89 2b       	or	r24, r25
    1b0e:	79 f4       	brne	.+30     	; 0x1b2e <TIMER_init+0x432>
		{
			TCCR0|=(1<<FOC0);
    1b10:	83 e5       	ldi	r24, 0x53	; 83
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	23 e5       	ldi	r18, 0x53	; 83
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	f9 01       	movw	r30, r18
    1b1a:	20 81       	ld	r18, Z
    1b1c:	20 68       	ori	r18, 0x80	; 128
    1b1e:	fc 01       	movw	r30, r24
    1b20:	20 83       	st	Z, r18
			TIMSK=(1<<TOIE0);
    1b22:	89 e5       	ldi	r24, 0x59	; 89
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	21 e0       	ldi	r18, 0x01	; 1
    1b28:	fc 01       	movw	r30, r24
    1b2a:	20 83       	st	Z, r18
    1b2c:	53 c0       	rjmp	.+166    	; 0x1bd4 <TIMER_init+0x4d8>
		}
		else if(!strcmp(config->mode,"pwm"))
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	9a 81       	ldd	r25, Y+2	; 0x02
    1b32:	01 96       	adiw	r24, 0x01	; 1
    1b34:	67 e4       	ldi	r22, 0x47	; 71
    1b36:	71 e0       	ldi	r23, 0x01	; 1
    1b38:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    1b3c:	89 2b       	or	r24, r25
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <TIMER_init+0x446>
    1b40:	49 c0       	rjmp	.+146    	; 0x1bd4 <TIMER_init+0x4d8>
		{
			TCCR0 |=(1<<WGM00)|(1<<WGM01);
    1b42:	83 e5       	ldi	r24, 0x53	; 83
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	23 e5       	ldi	r18, 0x53	; 83
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	f9 01       	movw	r30, r18
    1b4c:	20 81       	ld	r18, Z
    1b4e:	28 64       	ori	r18, 0x48	; 72
    1b50:	fc 01       	movw	r30, r24
    1b52:	20 83       	st	Z, r18
			if(!strcmp(config->pwmMode,"inverting"))
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	9a 81       	ldd	r25, Y+2	; 0x02
    1b58:	8b 96       	adiw	r24, 0x2b	; 43
    1b5a:	6b e4       	ldi	r22, 0x4B	; 75
    1b5c:	71 e0       	ldi	r23, 0x01	; 1
    1b5e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    1b62:	89 2b       	or	r24, r25
    1b64:	e1 f4       	brne	.+56     	; 0x1b9e <TIMER_init+0x4a2>
					{
					TCCR0|=(1<<COM00);
    1b66:	83 e5       	ldi	r24, 0x53	; 83
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	23 e5       	ldi	r18, 0x53	; 83
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	f9 01       	movw	r30, r18
    1b70:	20 81       	ld	r18, Z
    1b72:	20 61       	ori	r18, 0x10	; 16
    1b74:	fc 01       	movw	r30, r24
    1b76:	20 83       	st	Z, r18
					TCCR0|=(1<<COM01);
    1b78:	83 e5       	ldi	r24, 0x53	; 83
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	23 e5       	ldi	r18, 0x53	; 83
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	f9 01       	movw	r30, r18
    1b82:	20 81       	ld	r18, Z
    1b84:	20 62       	ori	r18, 0x20	; 32
    1b86:	fc 01       	movw	r30, r24
    1b88:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    1b8a:	87 e3       	ldi	r24, 0x37	; 55
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	27 e3       	ldi	r18, 0x37	; 55
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	f9 01       	movw	r30, r18
    1b94:	20 81       	ld	r18, Z
    1b96:	28 60       	ori	r18, 0x08	; 8
    1b98:	fc 01       	movw	r30, r24
    1b9a:	20 83       	st	Z, r18
    1b9c:	1b c0       	rjmp	.+54     	; 0x1bd4 <TIMER_init+0x4d8>
					}
					else if(!strcmp(config->pwmMode,"non-inverting"))
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	8b 96       	adiw	r24, 0x2b	; 43
    1ba4:	65 e5       	ldi	r22, 0x55	; 85
    1ba6:	71 e0       	ldi	r23, 0x01	; 1
    1ba8:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    1bac:	89 2b       	or	r24, r25
    1bae:	91 f4       	brne	.+36     	; 0x1bd4 <TIMER_init+0x4d8>
						{
						TCCR0|=(1<<COM01);
    1bb0:	83 e5       	ldi	r24, 0x53	; 83
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	23 e5       	ldi	r18, 0x53	; 83
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	f9 01       	movw	r30, r18
    1bba:	20 81       	ld	r18, Z
    1bbc:	20 62       	ori	r18, 0x20	; 32
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	20 83       	st	Z, r18
						SET_BIT(DDRB,3);
    1bc2:	87 e3       	ldi	r24, 0x37	; 55
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	27 e3       	ldi	r18, 0x37	; 55
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	f9 01       	movw	r30, r18
    1bcc:	20 81       	ld	r18, Z
    1bce:	28 60       	ori	r18, 0x08	; 8
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	20 83       	st	Z, r18
	//TCCR0=(1<<FOC0)|(1<<COM00)|(1<<CS00)|(1<<CS02);


	//enable

	sei();
    1bd4:	78 94       	sei
}
}
    1bd6:	00 00       	nop
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	08 95       	ret

00001be2 <TIMER_setCompare>:

void TIMER_setCompare(uint16 compareValue)
{
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <TIMER_setCompare+0x6>
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	9a 83       	std	Y+2, r25	; 0x02
    1bee:	89 83       	std	Y+1, r24	; 0x01
	switch (configPtr->timerNumber)
    1bf0:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <configPtr>
    1bf4:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <configPtr+0x1>
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	80 81       	ld	r24, Z
    1bfc:	88 2f       	mov	r24, r24
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	19 f0       	breq	.+6      	; 0x1c0a <TIMER_setCompare+0x28>
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	59 f0       	breq	.+22     	; 0x1c1e <TIMER_setCompare+0x3c>
	case 1:
		TCNT1=0;
		OCR1A=compareValue;
		break;
	}
}
    1c08:	17 c0       	rjmp	.+46     	; 0x1c38 <TIMER_setCompare+0x56>
void TIMER_setCompare(uint16 compareValue)
{
	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=0;
    1c0a:	82 e5       	ldi	r24, 0x52	; 82
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	fc 01       	movw	r30, r24
    1c10:	10 82       	st	Z, r1
		OCR0=compareValue;
    1c12:	8c e5       	ldi	r24, 0x5C	; 92
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	29 81       	ldd	r18, Y+1	; 0x01
    1c18:	fc 01       	movw	r30, r24
    1c1a:	20 83       	st	Z, r18
		break;
    1c1c:	0d c0       	rjmp	.+26     	; 0x1c38 <TIMER_setCompare+0x56>
	case 1:
		TCNT1=0;
    1c1e:	8c e4       	ldi	r24, 0x4C	; 76
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	fc 01       	movw	r30, r24
    1c24:	11 82       	std	Z+1, r1	; 0x01
    1c26:	10 82       	st	Z, r1
		OCR1A=compareValue;
    1c28:	8a e4       	ldi	r24, 0x4A	; 74
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	29 81       	ldd	r18, Y+1	; 0x01
    1c2e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c30:	fc 01       	movw	r30, r24
    1c32:	31 83       	std	Z+1, r19	; 0x01
    1c34:	20 83       	st	Z, r18
		break;
    1c36:	00 00       	nop
	}
}
    1c38:	00 00       	nop
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	08 95       	ret

00001c44 <TIMER_setNormal>:
void TIMER_setNormal(uint8 initValue)

{
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
    1c48:	1f 92       	push	r1
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	89 83       	std	Y+1, r24	; 0x01

	switch (configPtr->timerNumber)
    1c50:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <configPtr>
    1c54:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <configPtr+0x1>
    1c58:	fc 01       	movw	r30, r24
    1c5a:	80 81       	ld	r24, Z
    1c5c:	88 2f       	mov	r24, r24
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	19 f0       	breq	.+6      	; 0x1c6a <TIMER_setNormal+0x26>
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	39 f0       	breq	.+14     	; 0x1c76 <TIMER_setNormal+0x32>
		TCNT1=initValue;
		break;


}
}
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <TIMER_setNormal+0x44>
{

	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=initValue;
    1c6a:	82 e5       	ldi	r24, 0x52	; 82
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	29 81       	ldd	r18, Y+1	; 0x01
    1c70:	fc 01       	movw	r30, r24
    1c72:	20 83       	st	Z, r18
		break;
    1c74:	09 c0       	rjmp	.+18     	; 0x1c88 <TIMER_setNormal+0x44>
	case 1:
		TCNT1=initValue;
    1c76:	8c e4       	ldi	r24, 0x4C	; 76
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	29 81       	ldd	r18, Y+1	; 0x01
    1c7c:	22 2f       	mov	r18, r18
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	fc 01       	movw	r30, r24
    1c82:	31 83       	std	Z+1, r19	; 0x01
    1c84:	20 83       	st	Z, r18
		break;
    1c86:	00 00       	nop


}
}
    1c88:	00 00       	nop
    1c8a:	0f 90       	pop	r0
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	08 95       	ret

00001c92 <TIMER_setpwm>:
void TIMER_setpwm(uint8 dutyCycle)
{
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	1f 92       	push	r1
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
    1c9e:	82 e5       	ldi	r24, 0x52	; 82
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	10 82       	st	Z, r1
	OCR0=dutyCycle;
    1ca6:	8c e5       	ldi	r24, 0x5C	; 92
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	29 81       	ldd	r18, Y+1	; 0x01
    1cac:	fc 01       	movw	r30, r24
    1cae:	20 83       	st	Z, r18
}
    1cb0:	00 00       	nop
    1cb2:	0f 90       	pop	r0
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	08 95       	ret

00001cba <TIMER_setCallBackPtr>:
void TIMER_setCallBackPtr(void(*a_ptr)(void))
{
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <TIMER_setCallBackPtr+0x6>
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	89 83       	std	Y+1, r24	; 0x01
g_callBackPtr=a_ptr;
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <g_callBackPtr+0x1>
    1cd0:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <g_callBackPtr>
}
    1cd4:	00 00       	nop
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	08 95       	ret

00001ce0 <TIMER_stop>:
void TIMER_stop()
{
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
	switch (configPtr->timerNumber)
    1ce8:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <configPtr>
    1cec:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <configPtr+0x1>
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	80 81       	ld	r24, Z
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	89 2b       	or	r24, r25
    1cfa:	51 f4       	brne	.+20     	; 0x1d10 <TIMER_stop+0x30>

{
case 0:
	TCCR0&=~(1<<CS00)&~(1<<CS01)&~(1<<CS02);
    1cfc:	83 e5       	ldi	r24, 0x53	; 83
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	23 e5       	ldi	r18, 0x53	; 83
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	f9 01       	movw	r30, r18
    1d06:	20 81       	ld	r18, Z
    1d08:	28 7f       	andi	r18, 0xF8	; 248
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	20 83       	st	Z, r18
	break;
    1d0e:	01 c0       	rjmp	.+2      	; 0x1d12 <TIMER_stop+0x32>
case 1:
	break;
    1d10:	00 00       	nop

}
}
    1d12:	00 00       	nop
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	08 95       	ret

00001d1a <UART_init>:
 *      Author: hesham
 */
#include"uart.h"

void UART_init(UART_configurationType * config)
{UCSRA=0;
    1d1a:	0f 93       	push	r16
    1d1c:	1f 93       	push	r17
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <UART_init+0xa>
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	9a 83       	std	Y+2, r25	; 0x02
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	8b e2       	ldi	r24, 0x2B	; 43
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	fc 01       	movw	r30, r24
    1d32:	10 82       	st	Z, r1
UCSRB=0;
    1d34:	8a e2       	ldi	r24, 0x2A	; 42
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	fc 01       	movw	r30, r24
    1d3a:	10 82       	st	Z, r1
UCSRC=0;
    1d3c:	80 e4       	ldi	r24, 0x40	; 64
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	fc 01       	movw	r30, r24
    1d42:	10 82       	st	Z, r1
/* enables */
	if(!strcmp(config->mode,"normal"))
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	05 96       	adiw	r24, 0x05	; 5
    1d4a:	63 e6       	ldi	r22, 0x63	; 99
    1d4c:	71 e0       	ldi	r23, 0x01	; 1
    1d4e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    1d52:	89 2b       	or	r24, r25
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <UART_init+0x3e>
    1d56:	60 c0       	rjmp	.+192    	; 0x1e18 <UART_init+0xfe>
	{
CLEAR_BIT(UCSRA,U2X);
    1d58:	8b e2       	ldi	r24, 0x2B	; 43
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	2b e2       	ldi	r18, 0x2B	; 43
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	f9 01       	movw	r30, r18
    1d62:	20 81       	ld	r18, Z
    1d64:	2d 7f       	andi	r18, 0xFD	; 253
    1d66:	fc 01       	movw	r30, r24
    1d68:	20 83       	st	Z, r18
UBRRL=((F_CPU /(16*config->buadRate))-1);
    1d6a:	09 e2       	ldi	r16, 0x29	; 41
    1d6c:	10 e0       	ldi	r17, 0x00	; 0
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	fc 01       	movw	r30, r24
    1d74:	81 81       	ldd	r24, Z+1	; 0x01
    1d76:	92 81       	ldd	r25, Z+2	; 0x02
    1d78:	a3 81       	ldd	r26, Z+3	; 0x03
    1d7a:	b4 81       	ldd	r27, Z+4	; 0x04
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	aa 1f       	adc	r26, r26
    1d82:	bb 1f       	adc	r27, r27
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	aa 1f       	adc	r26, r26
    1d8a:	bb 1f       	adc	r27, r27
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	aa 1f       	adc	r26, r26
    1d92:	bb 1f       	adc	r27, r27
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	aa 1f       	adc	r26, r26
    1d9a:	bb 1f       	adc	r27, r27
    1d9c:	9c 01       	movw	r18, r24
    1d9e:	ad 01       	movw	r20, r26
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	92 e1       	ldi	r25, 0x12	; 18
    1da4:	aa e7       	ldi	r26, 0x7A	; 122
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	0e 94 b3 10 	call	0x2166	; 0x2166 <__udivmodsi4>
    1db0:	da 01       	movw	r26, r20
    1db2:	c9 01       	movw	r24, r18
    1db4:	81 50       	subi	r24, 0x01	; 1
    1db6:	f8 01       	movw	r30, r16
    1db8:	80 83       	st	Z, r24
UBRRH=((F_CPU /(16*config->buadRate))-1)>>8;
    1dba:	00 e4       	ldi	r16, 0x40	; 64
    1dbc:	10 e0       	ldi	r17, 0x00	; 0
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	81 81       	ldd	r24, Z+1	; 0x01
    1dc6:	92 81       	ldd	r25, Z+2	; 0x02
    1dc8:	a3 81       	ldd	r26, Z+3	; 0x03
    1dca:	b4 81       	ldd	r27, Z+4	; 0x04
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	aa 1f       	adc	r26, r26
    1dd2:	bb 1f       	adc	r27, r27
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	aa 1f       	adc	r26, r26
    1dda:	bb 1f       	adc	r27, r27
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	aa 1f       	adc	r26, r26
    1de2:	bb 1f       	adc	r27, r27
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	aa 1f       	adc	r26, r26
    1dea:	bb 1f       	adc	r27, r27
    1dec:	9c 01       	movw	r18, r24
    1dee:	ad 01       	movw	r20, r26
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	92 e1       	ldi	r25, 0x12	; 18
    1df4:	aa e7       	ldi	r26, 0x7A	; 122
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	bc 01       	movw	r22, r24
    1dfa:	cd 01       	movw	r24, r26
    1dfc:	0e 94 b3 10 	call	0x2166	; 0x2166 <__udivmodsi4>
    1e00:	da 01       	movw	r26, r20
    1e02:	c9 01       	movw	r24, r18
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	a1 09       	sbc	r26, r1
    1e08:	b1 09       	sbc	r27, r1
    1e0a:	89 2f       	mov	r24, r25
    1e0c:	9a 2f       	mov	r25, r26
    1e0e:	ab 2f       	mov	r26, r27
    1e10:	bb 27       	eor	r27, r27
    1e12:	f8 01       	movw	r30, r16
    1e14:	80 83       	st	Z, r24
    1e16:	61 c0       	rjmp	.+194    	; 0x1eda <UART_init+0x1c0>


	}
	else if(!strcmp(config->mode,"double speed"))
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	05 96       	adiw	r24, 0x05	; 5
    1e1e:	6a e6       	ldi	r22, 0x6A	; 106
    1e20:	71 e0       	ldi	r23, 0x01	; 1
    1e22:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <strcmp>
    1e26:	89 2b       	or	r24, r25
    1e28:	09 f0       	breq	.+2      	; 0x1e2c <UART_init+0x112>
    1e2a:	57 c0       	rjmp	.+174    	; 0x1eda <UART_init+0x1c0>
	{
		SET_BIT(UCSRA,U2X);
    1e2c:	8b e2       	ldi	r24, 0x2B	; 43
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	2b e2       	ldi	r18, 0x2B	; 43
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	f9 01       	movw	r30, r18
    1e36:	20 81       	ld	r18, Z
    1e38:	22 60       	ori	r18, 0x02	; 2
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	20 83       	st	Z, r18
		UBRRL=((F_CPU /(8*config->buadRate))-1);
    1e3e:	09 e2       	ldi	r16, 0x29	; 41
    1e40:	10 e0       	ldi	r17, 0x00	; 0
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	9a 81       	ldd	r25, Y+2	; 0x02
    1e46:	fc 01       	movw	r30, r24
    1e48:	81 81       	ldd	r24, Z+1	; 0x01
    1e4a:	92 81       	ldd	r25, Z+2	; 0x02
    1e4c:	a3 81       	ldd	r26, Z+3	; 0x03
    1e4e:	b4 81       	ldd	r27, Z+4	; 0x04
    1e50:	88 0f       	add	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	aa 1f       	adc	r26, r26
    1e56:	bb 1f       	adc	r27, r27
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	aa 1f       	adc	r26, r26
    1e5e:	bb 1f       	adc	r27, r27
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	aa 1f       	adc	r26, r26
    1e66:	bb 1f       	adc	r27, r27
    1e68:	9c 01       	movw	r18, r24
    1e6a:	ad 01       	movw	r20, r26
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	92 e1       	ldi	r25, 0x12	; 18
    1e70:	aa e7       	ldi	r26, 0x7A	; 122
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	bc 01       	movw	r22, r24
    1e76:	cd 01       	movw	r24, r26
    1e78:	0e 94 b3 10 	call	0x2166	; 0x2166 <__udivmodsi4>
    1e7c:	da 01       	movw	r26, r20
    1e7e:	c9 01       	movw	r24, r18
    1e80:	81 50       	subi	r24, 0x01	; 1
    1e82:	f8 01       	movw	r30, r16
    1e84:	80 83       	st	Z, r24
		UBRRH=((F_CPU /(8*config->buadRate))-1)>>8;
    1e86:	00 e4       	ldi	r16, 0x40	; 64
    1e88:	10 e0       	ldi	r17, 0x00	; 0
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	fc 01       	movw	r30, r24
    1e90:	81 81       	ldd	r24, Z+1	; 0x01
    1e92:	92 81       	ldd	r25, Z+2	; 0x02
    1e94:	a3 81       	ldd	r26, Z+3	; 0x03
    1e96:	b4 81       	ldd	r27, Z+4	; 0x04
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	aa 1f       	adc	r26, r26
    1e9e:	bb 1f       	adc	r27, r27
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	aa 1f       	adc	r26, r26
    1ea6:	bb 1f       	adc	r27, r27
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	aa 1f       	adc	r26, r26
    1eae:	bb 1f       	adc	r27, r27
    1eb0:	9c 01       	movw	r18, r24
    1eb2:	ad 01       	movw	r20, r26
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	92 e1       	ldi	r25, 0x12	; 18
    1eb8:	aa e7       	ldi	r26, 0x7A	; 122
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	bc 01       	movw	r22, r24
    1ebe:	cd 01       	movw	r24, r26
    1ec0:	0e 94 b3 10 	call	0x2166	; 0x2166 <__udivmodsi4>
    1ec4:	da 01       	movw	r26, r20
    1ec6:	c9 01       	movw	r24, r18
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	a1 09       	sbc	r26, r1
    1ecc:	b1 09       	sbc	r27, r1
    1ece:	89 2f       	mov	r24, r25
    1ed0:	9a 2f       	mov	r25, r26
    1ed2:	ab 2f       	mov	r26, r27
    1ed4:	bb 27       	eor	r27, r27
    1ed6:	f8 01       	movw	r30, r16
    1ed8:	80 83       	st	Z, r24

	}


/* TO enable writing on Register UCSRC (used for define the frame )as it has the same address with UBRR register */
SET_BIT(UCSRC,URSEL);
    1eda:	80 e4       	ldi	r24, 0x40	; 64
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	20 e4       	ldi	r18, 0x40	; 64
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	f9 01       	movw	r30, r18
    1ee4:	20 81       	ld	r18, Z
    1ee6:	20 68       	ori	r18, 0x80	; 128
    1ee8:	fc 01       	movw	r30, r24
    1eea:	20 83       	st	Z, r18
/* the UART frame parameters*/
/* character size */
//SET_BIT(UCSRC,UCSZ0);
//SET_BIT(UCSRC,UCSZ1);
switch(config->character_size)
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	80 81       	ld	r24, Z
    1ef4:	88 2f       	mov	r24, r24
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	86 30       	cpi	r24, 0x06	; 6
    1efa:	91 05       	cpc	r25, r1
    1efc:	f9 f0       	breq	.+62     	; 0x1f3c <UART_init+0x222>
    1efe:	87 30       	cpi	r24, 0x07	; 7
    1f00:	91 05       	cpc	r25, r1
    1f02:	1c f4       	brge	.+6      	; 0x1f0a <UART_init+0x1f0>
    1f04:	05 97       	sbiw	r24, 0x05	; 5
    1f06:	39 f0       	breq	.+14     	; 0x1f16 <UART_init+0x1fc>
    1f08:	5b c0       	rjmp	.+182    	; 0x1fc0 <UART_init+0x2a6>
    1f0a:	87 30       	cpi	r24, 0x07	; 7
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	49 f1       	breq	.+82     	; 0x1f62 <UART_init+0x248>
    1f10:	09 97       	sbiw	r24, 0x09	; 9
    1f12:	d1 f1       	breq	.+116    	; 0x1f88 <UART_init+0x26e>
    1f14:	55 c0       	rjmp	.+170    	; 0x1fc0 <UART_init+0x2a6>
{
case 5:
	CLEAR_BIT(UCSRC,UCSZ0);
    1f16:	80 e4       	ldi	r24, 0x40	; 64
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	20 e4       	ldi	r18, 0x40	; 64
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	f9 01       	movw	r30, r18
    1f20:	20 81       	ld	r18, Z
    1f22:	2d 7f       	andi	r18, 0xFD	; 253
    1f24:	fc 01       	movw	r30, r24
    1f26:	20 83       	st	Z, r18
	CLEAR_BIT(UCSRC,UCSZ1);
    1f28:	80 e4       	ldi	r24, 0x40	; 64
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	20 e4       	ldi	r18, 0x40	; 64
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	f9 01       	movw	r30, r18
    1f32:	20 81       	ld	r18, Z
    1f34:	2b 7f       	andi	r18, 0xFB	; 251
    1f36:	fc 01       	movw	r30, r24
    1f38:	20 83       	st	Z, r18
	break;
    1f3a:	54 c0       	rjmp	.+168    	; 0x1fe4 <UART_init+0x2ca>

case 6:
	CLEAR_BIT(UCSRC,UCSZ0);
    1f3c:	80 e4       	ldi	r24, 0x40	; 64
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	20 e4       	ldi	r18, 0x40	; 64
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	f9 01       	movw	r30, r18
    1f46:	20 81       	ld	r18, Z
    1f48:	2d 7f       	andi	r18, 0xFD	; 253
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    1f4e:	80 e4       	ldi	r24, 0x40	; 64
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	20 e4       	ldi	r18, 0x40	; 64
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	f9 01       	movw	r30, r18
    1f58:	20 81       	ld	r18, Z
    1f5a:	24 60       	ori	r18, 0x04	; 4
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	20 83       	st	Z, r18
	break;
    1f60:	41 c0       	rjmp	.+130    	; 0x1fe4 <UART_init+0x2ca>
case 7:
	CLEAR_BIT(UCSRC,UCSZ1);
    1f62:	80 e4       	ldi	r24, 0x40	; 64
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	20 e4       	ldi	r18, 0x40	; 64
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	f9 01       	movw	r30, r18
    1f6c:	20 81       	ld	r18, Z
    1f6e:	2b 7f       	andi	r18, 0xFB	; 251
    1f70:	fc 01       	movw	r30, r24
    1f72:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ0);
    1f74:	80 e4       	ldi	r24, 0x40	; 64
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	20 e4       	ldi	r18, 0x40	; 64
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	f9 01       	movw	r30, r18
    1f7e:	20 81       	ld	r18, Z
    1f80:	22 60       	ori	r18, 0x02	; 2
    1f82:	fc 01       	movw	r30, r24
    1f84:	20 83       	st	Z, r18
		break;
    1f86:	2e c0       	rjmp	.+92     	; 0x1fe4 <UART_init+0x2ca>
case 9:
	SET_BIT(UCSRC,UCSZ0);
    1f88:	80 e4       	ldi	r24, 0x40	; 64
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	20 e4       	ldi	r18, 0x40	; 64
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	f9 01       	movw	r30, r18
    1f92:	20 81       	ld	r18, Z
    1f94:	22 60       	ori	r18, 0x02	; 2
    1f96:	fc 01       	movw	r30, r24
    1f98:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    1f9a:	80 e4       	ldi	r24, 0x40	; 64
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	20 e4       	ldi	r18, 0x40	; 64
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	f9 01       	movw	r30, r18
    1fa4:	20 81       	ld	r18, Z
    1fa6:	24 60       	ori	r18, 0x04	; 4
    1fa8:	fc 01       	movw	r30, r24
    1faa:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ2);
    1fac:	80 e4       	ldi	r24, 0x40	; 64
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	20 e4       	ldi	r18, 0x40	; 64
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	f9 01       	movw	r30, r18
    1fb6:	20 81       	ld	r18, Z
    1fb8:	24 60       	ori	r18, 0x04	; 4
    1fba:	fc 01       	movw	r30, r24
    1fbc:	20 83       	st	Z, r18


	break;
    1fbe:	12 c0       	rjmp	.+36     	; 0x1fe4 <UART_init+0x2ca>

default :
	//SET_BIT(UCSRC,URSEL);
	SET_BIT(UCSRC,UCSZ0);
    1fc0:	80 e4       	ldi	r24, 0x40	; 64
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	20 e4       	ldi	r18, 0x40	; 64
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	f9 01       	movw	r30, r18
    1fca:	20 81       	ld	r18, Z
    1fcc:	22 60       	ori	r18, 0x02	; 2
    1fce:	fc 01       	movw	r30, r24
    1fd0:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    1fd2:	80 e4       	ldi	r24, 0x40	; 64
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	20 e4       	ldi	r18, 0x40	; 64
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	f9 01       	movw	r30, r18
    1fdc:	20 81       	ld	r18, Z
    1fde:	24 60       	ori	r18, 0x04	; 4
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	20 83       	st	Z, r18
/* write on UBRR instead of ucsrc register */
//CLEAR_BIT(UCSRC,URSEL);//---------------------------------------<<<<
/* writing the baud rate prescaler */
//UBRRL=12;
//UBRRH=12>>8;
SET_BIT(UCSRB,RXEN);
    1fe4:	8a e2       	ldi	r24, 0x2A	; 42
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	2a e2       	ldi	r18, 0x2A	; 42
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	f9 01       	movw	r30, r18
    1fee:	20 81       	ld	r18, Z
    1ff0:	20 61       	ori	r18, 0x10	; 16
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	20 83       	st	Z, r18
SET_BIT(UCSRB,TXEN);
    1ff6:	8a e2       	ldi	r24, 0x2A	; 42
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	2a e2       	ldi	r18, 0x2A	; 42
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	f9 01       	movw	r30, r18
    2000:	20 81       	ld	r18, Z
    2002:	28 60       	ori	r18, 0x08	; 8
    2004:	fc 01       	movw	r30, r24
    2006:	20 83       	st	Z, r18
}
    2008:	00 00       	nop
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	1f 91       	pop	r17
    2014:	0f 91       	pop	r16
    2016:	08 95       	ret

00002018 <UART_receiveByte>:

uint8 UART_receiveByte(void)
{
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)); /* wait until RXC  flag be 1 it means that there is data not read */
    2020:	00 00       	nop
    2022:	8b e2       	ldi	r24, 0x2B	; 43
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	fc 01       	movw	r30, r24
    2028:	80 81       	ld	r24, Z
    202a:	88 23       	and	r24, r24
    202c:	d4 f7       	brge	.-12     	; 0x2022 <UART_receiveByte+0xa>

	return UDR;/* read and return RXC flag to zero */
    202e:	8c e2       	ldi	r24, 0x2C	; 44
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	fc 01       	movw	r30, r24
    2034:	80 81       	ld	r24, Z
}
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	08 95       	ret

0000203c <UART_sendByte>:
void UART_sendByte(const uint8 data)
{
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	1f 92       	push	r1
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
    2048:	8c e2       	ldi	r24, 0x2C	; 44
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	29 81       	ldd	r18, Y+1	; 0x01
    204e:	fc 01       	movw	r30, r24
    2050:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(UCSRA,TXC));//wait until send data txc =1;
    2052:	00 00       	nop
    2054:	8b e2       	ldi	r24, 0x2B	; 43
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	fc 01       	movw	r30, r24
    205a:	80 81       	ld	r24, Z
    205c:	88 2f       	mov	r24, r24
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	80 74       	andi	r24, 0x40	; 64
    2062:	99 27       	eor	r25, r25
    2064:	89 2b       	or	r24, r25
    2066:	b1 f3       	breq	.-20     	; 0x2054 <UART_sendByte+0x18>
	SET_BIT(UCSRA,TXC); //clear the flag as it doesnt clear automatically as ISR
    2068:	8b e2       	ldi	r24, 0x2B	; 43
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	2b e2       	ldi	r18, 0x2B	; 43
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	f9 01       	movw	r30, r18
    2072:	20 81       	ld	r18, Z
    2074:	20 64       	ori	r18, 0x40	; 64
    2076:	fc 01       	movw	r30, r24
    2078:	20 83       	st	Z, r18
	//while(BIT_IS_CLEAR(UCSRA,UDRE)){}
		/* Put the required data in the UDR register and it also clear the UDRE flag as
		 * the UDR register is not empty now */
	//	UDR = data;
}
    207a:	00 00       	nop
    207c:	0f 90       	pop	r0
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	08 95       	ret

00002084 <UART_sendString>:
void UART_sendString(uint8 *str)
{
    2084:	cf 93       	push	r28
    2086:	df 93       	push	r29
    2088:	00 d0       	rcall	.+0      	; 0x208a <UART_sendString+0x6>
    208a:	1f 92       	push	r1
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	9b 83       	std	Y+3, r25	; 0x03
    2092:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2094:	19 82       	std	Y+1, r1	; 0x01
		while(str[i] != '\0')
    2096:	0e c0       	rjmp	.+28     	; 0x20b4 <UART_sendString+0x30>
		{
			UART_sendByte(str[i]);
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	88 2f       	mov	r24, r24
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	2a 81       	ldd	r18, Y+2	; 0x02
    20a0:	3b 81       	ldd	r19, Y+3	; 0x03
    20a2:	82 0f       	add	r24, r18
    20a4:	93 1f       	adc	r25, r19
    20a6:	fc 01       	movw	r30, r24
    20a8:	80 81       	ld	r24, Z
    20aa:	0e 94 1e 10 	call	0x203c	; 0x203c <UART_sendByte>
			i++;
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	8f 5f       	subi	r24, 0xFF	; 255
    20b2:	89 83       	std	Y+1, r24	; 0x01
	//	UDR = data;
}
void UART_sendString(uint8 *str)
{
	uint8 i = 0;
		while(str[i] != '\0')
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	2a 81       	ldd	r18, Y+2	; 0x02
    20bc:	3b 81       	ldd	r19, Y+3	; 0x03
    20be:	82 0f       	add	r24, r18
    20c0:	93 1f       	adc	r25, r19
    20c2:	fc 01       	movw	r30, r24
    20c4:	80 81       	ld	r24, Z
    20c6:	88 23       	and	r24, r24
    20c8:	39 f7       	brne	.-50     	; 0x2098 <UART_sendString+0x14>
		{
			UART_sendByte(str[i]);
			i++;
		}
	UART_sendByte('#');
    20ca:	83 e2       	ldi	r24, 0x23	; 35
    20cc:	0e 94 1e 10 	call	0x203c	; 0x203c <UART_sendByte>

}
    20d0:	00 00       	nop
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	08 95       	ret

000020de <UART_receiveString>:
void UART_receiveString(uint8 *str)
{
    20de:	0f 93       	push	r16
    20e0:	1f 93       	push	r17
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <UART_receiveString+0xa>
    20e8:	1f 92       	push	r1
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	9b 83       	std	Y+3, r25	; 0x03
    20f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    20f2:	19 82       	std	Y+1, r1	; 0x01
		str[i] = UART_receiveByte();
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	88 2f       	mov	r24, r24
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	2a 81       	ldd	r18, Y+2	; 0x02
    20fc:	3b 81       	ldd	r19, Y+3	; 0x03
    20fe:	89 01       	movw	r16, r18
    2100:	08 0f       	add	r16, r24
    2102:	19 1f       	adc	r17, r25
    2104:	0e 94 0c 10 	call	0x2018	; 0x2018 <UART_receiveByte>
    2108:	f8 01       	movw	r30, r16
    210a:	80 83       	st	Z, r24
		while(str[i] != '#')
    210c:	0f c0       	rjmp	.+30     	; 0x212c <UART_receiveString+0x4e>
		{
			i++;
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	8f 5f       	subi	r24, 0xFF	; 255
    2112:	89 83       	std	Y+1, r24	; 0x01
			str[i] = UART_receiveByte();
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	88 2f       	mov	r24, r24
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	2a 81       	ldd	r18, Y+2	; 0x02
    211c:	3b 81       	ldd	r19, Y+3	; 0x03
    211e:	89 01       	movw	r16, r18
    2120:	08 0f       	add	r16, r24
    2122:	19 1f       	adc	r17, r25
    2124:	0e 94 0c 10 	call	0x2018	; 0x2018 <UART_receiveByte>
    2128:	f8 01       	movw	r30, r16
    212a:	80 83       	st	Z, r24
}
void UART_receiveString(uint8 *str)
{
	uint8 i = 0;
		str[i] = UART_receiveByte();
		while(str[i] != '#')
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	88 2f       	mov	r24, r24
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	2a 81       	ldd	r18, Y+2	; 0x02
    2134:	3b 81       	ldd	r19, Y+3	; 0x03
    2136:	82 0f       	add	r24, r18
    2138:	93 1f       	adc	r25, r19
    213a:	fc 01       	movw	r30, r24
    213c:	80 81       	ld	r24, Z
    213e:	83 32       	cpi	r24, 0x23	; 35
    2140:	31 f7       	brne	.-52     	; 0x210e <UART_receiveString+0x30>
		{
			i++;
			str[i] = UART_receiveByte();
		}
		str[i] = '\0';
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	88 2f       	mov	r24, r24
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	2a 81       	ldd	r18, Y+2	; 0x02
    214a:	3b 81       	ldd	r19, Y+3	; 0x03
    214c:	82 0f       	add	r24, r18
    214e:	93 1f       	adc	r25, r19
    2150:	fc 01       	movw	r30, r24
    2152:	10 82       	st	Z, r1
}
    2154:	00 00       	nop
    2156:	0f 90       	pop	r0
    2158:	0f 90       	pop	r0
    215a:	0f 90       	pop	r0
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	1f 91       	pop	r17
    2162:	0f 91       	pop	r16
    2164:	08 95       	ret

00002166 <__udivmodsi4>:
    2166:	a1 e2       	ldi	r26, 0x21	; 33
    2168:	1a 2e       	mov	r1, r26
    216a:	aa 1b       	sub	r26, r26
    216c:	bb 1b       	sub	r27, r27
    216e:	fd 01       	movw	r30, r26
    2170:	0d c0       	rjmp	.+26     	; 0x218c <__udivmodsi4_ep>

00002172 <__udivmodsi4_loop>:
    2172:	aa 1f       	adc	r26, r26
    2174:	bb 1f       	adc	r27, r27
    2176:	ee 1f       	adc	r30, r30
    2178:	ff 1f       	adc	r31, r31
    217a:	a2 17       	cp	r26, r18
    217c:	b3 07       	cpc	r27, r19
    217e:	e4 07       	cpc	r30, r20
    2180:	f5 07       	cpc	r31, r21
    2182:	20 f0       	brcs	.+8      	; 0x218c <__udivmodsi4_ep>
    2184:	a2 1b       	sub	r26, r18
    2186:	b3 0b       	sbc	r27, r19
    2188:	e4 0b       	sbc	r30, r20
    218a:	f5 0b       	sbc	r31, r21

0000218c <__udivmodsi4_ep>:
    218c:	66 1f       	adc	r22, r22
    218e:	77 1f       	adc	r23, r23
    2190:	88 1f       	adc	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	1a 94       	dec	r1
    2196:	69 f7       	brne	.-38     	; 0x2172 <__udivmodsi4_loop>
    2198:	60 95       	com	r22
    219a:	70 95       	com	r23
    219c:	80 95       	com	r24
    219e:	90 95       	com	r25
    21a0:	9b 01       	movw	r18, r22
    21a2:	ac 01       	movw	r20, r24
    21a4:	bd 01       	movw	r22, r26
    21a6:	cf 01       	movw	r24, r30
    21a8:	08 95       	ret

000021aa <__tablejump2__>:
    21aa:	ee 0f       	add	r30, r30
    21ac:	ff 1f       	adc	r31, r31
    21ae:	05 90       	lpm	r0, Z+
    21b0:	f4 91       	lpm	r31, Z
    21b2:	e0 2d       	mov	r30, r0
    21b4:	09 94       	ijmp

000021b6 <__subsf3>:
    21b6:	50 58       	subi	r21, 0x80	; 128

000021b8 <__addsf3>:
    21b8:	bb 27       	eor	r27, r27
    21ba:	aa 27       	eor	r26, r26
    21bc:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__addsf3x>
    21c0:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__fp_round>
    21c4:	0e 94 1b 12 	call	0x2436	; 0x2436 <__fp_pscA>
    21c8:	38 f0       	brcs	.+14     	; 0x21d8 <__addsf3+0x20>
    21ca:	0e 94 22 12 	call	0x2444	; 0x2444 <__fp_pscB>
    21ce:	20 f0       	brcs	.+8      	; 0x21d8 <__addsf3+0x20>
    21d0:	39 f4       	brne	.+14     	; 0x21e0 <__addsf3+0x28>
    21d2:	9f 3f       	cpi	r25, 0xFF	; 255
    21d4:	19 f4       	brne	.+6      	; 0x21dc <__addsf3+0x24>
    21d6:	26 f4       	brtc	.+8      	; 0x21e0 <__addsf3+0x28>
    21d8:	0c 94 18 12 	jmp	0x2430	; 0x2430 <__fp_nan>
    21dc:	0e f4       	brtc	.+2      	; 0x21e0 <__addsf3+0x28>
    21de:	e0 95       	com	r30
    21e0:	e7 fb       	bst	r30, 7
    21e2:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__fp_inf>

000021e6 <__addsf3x>:
    21e6:	e9 2f       	mov	r30, r25
    21e8:	0e 94 3a 12 	call	0x2474	; 0x2474 <__fp_split3>
    21ec:	58 f3       	brcs	.-42     	; 0x21c4 <__addsf3+0xc>
    21ee:	ba 17       	cp	r27, r26
    21f0:	62 07       	cpc	r22, r18
    21f2:	73 07       	cpc	r23, r19
    21f4:	84 07       	cpc	r24, r20
    21f6:	95 07       	cpc	r25, r21
    21f8:	20 f0       	brcs	.+8      	; 0x2202 <__addsf3x+0x1c>
    21fa:	79 f4       	brne	.+30     	; 0x221a <__addsf3x+0x34>
    21fc:	a6 f5       	brtc	.+104    	; 0x2266 <__addsf3x+0x80>
    21fe:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__fp_zero>
    2202:	0e f4       	brtc	.+2      	; 0x2206 <__addsf3x+0x20>
    2204:	e0 95       	com	r30
    2206:	0b 2e       	mov	r0, r27
    2208:	ba 2f       	mov	r27, r26
    220a:	a0 2d       	mov	r26, r0
    220c:	0b 01       	movw	r0, r22
    220e:	b9 01       	movw	r22, r18
    2210:	90 01       	movw	r18, r0
    2212:	0c 01       	movw	r0, r24
    2214:	ca 01       	movw	r24, r20
    2216:	a0 01       	movw	r20, r0
    2218:	11 24       	eor	r1, r1
    221a:	ff 27       	eor	r31, r31
    221c:	59 1b       	sub	r21, r25
    221e:	99 f0       	breq	.+38     	; 0x2246 <__addsf3x+0x60>
    2220:	59 3f       	cpi	r21, 0xF9	; 249
    2222:	50 f4       	brcc	.+20     	; 0x2238 <__addsf3x+0x52>
    2224:	50 3e       	cpi	r21, 0xE0	; 224
    2226:	68 f1       	brcs	.+90     	; 0x2282 <__addsf3x+0x9c>
    2228:	1a 16       	cp	r1, r26
    222a:	f0 40       	sbci	r31, 0x00	; 0
    222c:	a2 2f       	mov	r26, r18
    222e:	23 2f       	mov	r18, r19
    2230:	34 2f       	mov	r19, r20
    2232:	44 27       	eor	r20, r20
    2234:	58 5f       	subi	r21, 0xF8	; 248
    2236:	f3 cf       	rjmp	.-26     	; 0x221e <__addsf3x+0x38>
    2238:	46 95       	lsr	r20
    223a:	37 95       	ror	r19
    223c:	27 95       	ror	r18
    223e:	a7 95       	ror	r26
    2240:	f0 40       	sbci	r31, 0x00	; 0
    2242:	53 95       	inc	r21
    2244:	c9 f7       	brne	.-14     	; 0x2238 <__addsf3x+0x52>
    2246:	7e f4       	brtc	.+30     	; 0x2266 <__addsf3x+0x80>
    2248:	1f 16       	cp	r1, r31
    224a:	ba 0b       	sbc	r27, r26
    224c:	62 0b       	sbc	r22, r18
    224e:	73 0b       	sbc	r23, r19
    2250:	84 0b       	sbc	r24, r20
    2252:	ba f0       	brmi	.+46     	; 0x2282 <__addsf3x+0x9c>
    2254:	91 50       	subi	r25, 0x01	; 1
    2256:	a1 f0       	breq	.+40     	; 0x2280 <__addsf3x+0x9a>
    2258:	ff 0f       	add	r31, r31
    225a:	bb 1f       	adc	r27, r27
    225c:	66 1f       	adc	r22, r22
    225e:	77 1f       	adc	r23, r23
    2260:	88 1f       	adc	r24, r24
    2262:	c2 f7       	brpl	.-16     	; 0x2254 <__addsf3x+0x6e>
    2264:	0e c0       	rjmp	.+28     	; 0x2282 <__addsf3x+0x9c>
    2266:	ba 0f       	add	r27, r26
    2268:	62 1f       	adc	r22, r18
    226a:	73 1f       	adc	r23, r19
    226c:	84 1f       	adc	r24, r20
    226e:	48 f4       	brcc	.+18     	; 0x2282 <__addsf3x+0x9c>
    2270:	87 95       	ror	r24
    2272:	77 95       	ror	r23
    2274:	67 95       	ror	r22
    2276:	b7 95       	ror	r27
    2278:	f7 95       	ror	r31
    227a:	9e 3f       	cpi	r25, 0xFE	; 254
    227c:	08 f0       	brcs	.+2      	; 0x2280 <__addsf3x+0x9a>
    227e:	b0 cf       	rjmp	.-160    	; 0x21e0 <__addsf3+0x28>
    2280:	93 95       	inc	r25
    2282:	88 0f       	add	r24, r24
    2284:	08 f0       	brcs	.+2      	; 0x2288 <__addsf3x+0xa2>
    2286:	99 27       	eor	r25, r25
    2288:	ee 0f       	add	r30, r30
    228a:	97 95       	ror	r25
    228c:	87 95       	ror	r24
    228e:	08 95       	ret

00002290 <__cmpsf2>:
    2290:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__fp_cmp>
    2294:	08 f4       	brcc	.+2      	; 0x2298 <__cmpsf2+0x8>
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	08 95       	ret

0000229a <__divsf3>:
    229a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__divsf3x>
    229e:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__fp_round>
    22a2:	0e 94 22 12 	call	0x2444	; 0x2444 <__fp_pscB>
    22a6:	58 f0       	brcs	.+22     	; 0x22be <__divsf3+0x24>
    22a8:	0e 94 1b 12 	call	0x2436	; 0x2436 <__fp_pscA>
    22ac:	40 f0       	brcs	.+16     	; 0x22be <__divsf3+0x24>
    22ae:	29 f4       	brne	.+10     	; 0x22ba <__divsf3+0x20>
    22b0:	5f 3f       	cpi	r21, 0xFF	; 255
    22b2:	29 f0       	breq	.+10     	; 0x22be <__divsf3+0x24>
    22b4:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__fp_inf>
    22b8:	51 11       	cpse	r21, r1
    22ba:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <__fp_szero>
    22be:	0c 94 18 12 	jmp	0x2430	; 0x2430 <__fp_nan>

000022c2 <__divsf3x>:
    22c2:	0e 94 3a 12 	call	0x2474	; 0x2474 <__fp_split3>
    22c6:	68 f3       	brcs	.-38     	; 0x22a2 <__divsf3+0x8>

000022c8 <__divsf3_pse>:
    22c8:	99 23       	and	r25, r25
    22ca:	b1 f3       	breq	.-20     	; 0x22b8 <__divsf3+0x1e>
    22cc:	55 23       	and	r21, r21
    22ce:	91 f3       	breq	.-28     	; 0x22b4 <__divsf3+0x1a>
    22d0:	95 1b       	sub	r25, r21
    22d2:	55 0b       	sbc	r21, r21
    22d4:	bb 27       	eor	r27, r27
    22d6:	aa 27       	eor	r26, r26
    22d8:	62 17       	cp	r22, r18
    22da:	73 07       	cpc	r23, r19
    22dc:	84 07       	cpc	r24, r20
    22de:	38 f0       	brcs	.+14     	; 0x22ee <__divsf3_pse+0x26>
    22e0:	9f 5f       	subi	r25, 0xFF	; 255
    22e2:	5f 4f       	sbci	r21, 0xFF	; 255
    22e4:	22 0f       	add	r18, r18
    22e6:	33 1f       	adc	r19, r19
    22e8:	44 1f       	adc	r20, r20
    22ea:	aa 1f       	adc	r26, r26
    22ec:	a9 f3       	breq	.-22     	; 0x22d8 <__divsf3_pse+0x10>
    22ee:	35 d0       	rcall	.+106    	; 0x235a <__divsf3_pse+0x92>
    22f0:	0e 2e       	mov	r0, r30
    22f2:	3a f0       	brmi	.+14     	; 0x2302 <__divsf3_pse+0x3a>
    22f4:	e0 e8       	ldi	r30, 0x80	; 128
    22f6:	32 d0       	rcall	.+100    	; 0x235c <__divsf3_pse+0x94>
    22f8:	91 50       	subi	r25, 0x01	; 1
    22fa:	50 40       	sbci	r21, 0x00	; 0
    22fc:	e6 95       	lsr	r30
    22fe:	00 1c       	adc	r0, r0
    2300:	ca f7       	brpl	.-14     	; 0x22f4 <__divsf3_pse+0x2c>
    2302:	2b d0       	rcall	.+86     	; 0x235a <__divsf3_pse+0x92>
    2304:	fe 2f       	mov	r31, r30
    2306:	29 d0       	rcall	.+82     	; 0x235a <__divsf3_pse+0x92>
    2308:	66 0f       	add	r22, r22
    230a:	77 1f       	adc	r23, r23
    230c:	88 1f       	adc	r24, r24
    230e:	bb 1f       	adc	r27, r27
    2310:	26 17       	cp	r18, r22
    2312:	37 07       	cpc	r19, r23
    2314:	48 07       	cpc	r20, r24
    2316:	ab 07       	cpc	r26, r27
    2318:	b0 e8       	ldi	r27, 0x80	; 128
    231a:	09 f0       	breq	.+2      	; 0x231e <__divsf3_pse+0x56>
    231c:	bb 0b       	sbc	r27, r27
    231e:	80 2d       	mov	r24, r0
    2320:	bf 01       	movw	r22, r30
    2322:	ff 27       	eor	r31, r31
    2324:	93 58       	subi	r25, 0x83	; 131
    2326:	5f 4f       	sbci	r21, 0xFF	; 255
    2328:	3a f0       	brmi	.+14     	; 0x2338 <__divsf3_pse+0x70>
    232a:	9e 3f       	cpi	r25, 0xFE	; 254
    232c:	51 05       	cpc	r21, r1
    232e:	78 f0       	brcs	.+30     	; 0x234e <__divsf3_pse+0x86>
    2330:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__fp_inf>
    2334:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <__fp_szero>
    2338:	5f 3f       	cpi	r21, 0xFF	; 255
    233a:	e4 f3       	brlt	.-8      	; 0x2334 <__divsf3_pse+0x6c>
    233c:	98 3e       	cpi	r25, 0xE8	; 232
    233e:	d4 f3       	brlt	.-12     	; 0x2334 <__divsf3_pse+0x6c>
    2340:	86 95       	lsr	r24
    2342:	77 95       	ror	r23
    2344:	67 95       	ror	r22
    2346:	b7 95       	ror	r27
    2348:	f7 95       	ror	r31
    234a:	9f 5f       	subi	r25, 0xFF	; 255
    234c:	c9 f7       	brne	.-14     	; 0x2340 <__divsf3_pse+0x78>
    234e:	88 0f       	add	r24, r24
    2350:	91 1d       	adc	r25, r1
    2352:	96 95       	lsr	r25
    2354:	87 95       	ror	r24
    2356:	97 f9       	bld	r25, 7
    2358:	08 95       	ret
    235a:	e1 e0       	ldi	r30, 0x01	; 1
    235c:	66 0f       	add	r22, r22
    235e:	77 1f       	adc	r23, r23
    2360:	88 1f       	adc	r24, r24
    2362:	bb 1f       	adc	r27, r27
    2364:	62 17       	cp	r22, r18
    2366:	73 07       	cpc	r23, r19
    2368:	84 07       	cpc	r24, r20
    236a:	ba 07       	cpc	r27, r26
    236c:	20 f0       	brcs	.+8      	; 0x2376 <__divsf3_pse+0xae>
    236e:	62 1b       	sub	r22, r18
    2370:	73 0b       	sbc	r23, r19
    2372:	84 0b       	sbc	r24, r20
    2374:	ba 0b       	sbc	r27, r26
    2376:	ee 1f       	adc	r30, r30
    2378:	88 f7       	brcc	.-30     	; 0x235c <__divsf3_pse+0x94>
    237a:	e0 95       	com	r30
    237c:	08 95       	ret

0000237e <__fixunssfsi>:
    237e:	0e 94 42 12 	call	0x2484	; 0x2484 <__fp_splitA>
    2382:	88 f0       	brcs	.+34     	; 0x23a6 <__fixunssfsi+0x28>
    2384:	9f 57       	subi	r25, 0x7F	; 127
    2386:	98 f0       	brcs	.+38     	; 0x23ae <__fixunssfsi+0x30>
    2388:	b9 2f       	mov	r27, r25
    238a:	99 27       	eor	r25, r25
    238c:	b7 51       	subi	r27, 0x17	; 23
    238e:	b0 f0       	brcs	.+44     	; 0x23bc <__fixunssfsi+0x3e>
    2390:	e1 f0       	breq	.+56     	; 0x23ca <__fixunssfsi+0x4c>
    2392:	66 0f       	add	r22, r22
    2394:	77 1f       	adc	r23, r23
    2396:	88 1f       	adc	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	1a f0       	brmi	.+6      	; 0x23a2 <__fixunssfsi+0x24>
    239c:	ba 95       	dec	r27
    239e:	c9 f7       	brne	.-14     	; 0x2392 <__fixunssfsi+0x14>
    23a0:	14 c0       	rjmp	.+40     	; 0x23ca <__fixunssfsi+0x4c>
    23a2:	b1 30       	cpi	r27, 0x01	; 1
    23a4:	91 f0       	breq	.+36     	; 0x23ca <__fixunssfsi+0x4c>
    23a6:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__fp_zero>
    23aa:	b1 e0       	ldi	r27, 0x01	; 1
    23ac:	08 95       	ret
    23ae:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__fp_zero>
    23b2:	67 2f       	mov	r22, r23
    23b4:	78 2f       	mov	r23, r24
    23b6:	88 27       	eor	r24, r24
    23b8:	b8 5f       	subi	r27, 0xF8	; 248
    23ba:	39 f0       	breq	.+14     	; 0x23ca <__fixunssfsi+0x4c>
    23bc:	b9 3f       	cpi	r27, 0xF9	; 249
    23be:	cc f3       	brlt	.-14     	; 0x23b2 <__fixunssfsi+0x34>
    23c0:	86 95       	lsr	r24
    23c2:	77 95       	ror	r23
    23c4:	67 95       	ror	r22
    23c6:	b3 95       	inc	r27
    23c8:	d9 f7       	brne	.-10     	; 0x23c0 <__fixunssfsi+0x42>
    23ca:	3e f4       	brtc	.+14     	; 0x23da <__fixunssfsi+0x5c>
    23cc:	90 95       	com	r25
    23ce:	80 95       	com	r24
    23d0:	70 95       	com	r23
    23d2:	61 95       	neg	r22
    23d4:	7f 4f       	sbci	r23, 0xFF	; 255
    23d6:	8f 4f       	sbci	r24, 0xFF	; 255
    23d8:	9f 4f       	sbci	r25, 0xFF	; 255
    23da:	08 95       	ret

000023dc <__fp_cmp>:
    23dc:	99 0f       	add	r25, r25
    23de:	00 08       	sbc	r0, r0
    23e0:	55 0f       	add	r21, r21
    23e2:	aa 0b       	sbc	r26, r26
    23e4:	e0 e8       	ldi	r30, 0x80	; 128
    23e6:	fe ef       	ldi	r31, 0xFE	; 254
    23e8:	16 16       	cp	r1, r22
    23ea:	17 06       	cpc	r1, r23
    23ec:	e8 07       	cpc	r30, r24
    23ee:	f9 07       	cpc	r31, r25
    23f0:	c0 f0       	brcs	.+48     	; 0x2422 <__fp_cmp+0x46>
    23f2:	12 16       	cp	r1, r18
    23f4:	13 06       	cpc	r1, r19
    23f6:	e4 07       	cpc	r30, r20
    23f8:	f5 07       	cpc	r31, r21
    23fa:	98 f0       	brcs	.+38     	; 0x2422 <__fp_cmp+0x46>
    23fc:	62 1b       	sub	r22, r18
    23fe:	73 0b       	sbc	r23, r19
    2400:	84 0b       	sbc	r24, r20
    2402:	95 0b       	sbc	r25, r21
    2404:	39 f4       	brne	.+14     	; 0x2414 <__fp_cmp+0x38>
    2406:	0a 26       	eor	r0, r26
    2408:	61 f0       	breq	.+24     	; 0x2422 <__fp_cmp+0x46>
    240a:	23 2b       	or	r18, r19
    240c:	24 2b       	or	r18, r20
    240e:	25 2b       	or	r18, r21
    2410:	21 f4       	brne	.+8      	; 0x241a <__fp_cmp+0x3e>
    2412:	08 95       	ret
    2414:	0a 26       	eor	r0, r26
    2416:	09 f4       	brne	.+2      	; 0x241a <__fp_cmp+0x3e>
    2418:	a1 40       	sbci	r26, 0x01	; 1
    241a:	a6 95       	lsr	r26
    241c:	8f ef       	ldi	r24, 0xFF	; 255
    241e:	81 1d       	adc	r24, r1
    2420:	81 1d       	adc	r24, r1
    2422:	08 95       	ret

00002424 <__fp_inf>:
    2424:	97 f9       	bld	r25, 7
    2426:	9f 67       	ori	r25, 0x7F	; 127
    2428:	80 e8       	ldi	r24, 0x80	; 128
    242a:	70 e0       	ldi	r23, 0x00	; 0
    242c:	60 e0       	ldi	r22, 0x00	; 0
    242e:	08 95       	ret

00002430 <__fp_nan>:
    2430:	9f ef       	ldi	r25, 0xFF	; 255
    2432:	80 ec       	ldi	r24, 0xC0	; 192
    2434:	08 95       	ret

00002436 <__fp_pscA>:
    2436:	00 24       	eor	r0, r0
    2438:	0a 94       	dec	r0
    243a:	16 16       	cp	r1, r22
    243c:	17 06       	cpc	r1, r23
    243e:	18 06       	cpc	r1, r24
    2440:	09 06       	cpc	r0, r25
    2442:	08 95       	ret

00002444 <__fp_pscB>:
    2444:	00 24       	eor	r0, r0
    2446:	0a 94       	dec	r0
    2448:	12 16       	cp	r1, r18
    244a:	13 06       	cpc	r1, r19
    244c:	14 06       	cpc	r1, r20
    244e:	05 06       	cpc	r0, r21
    2450:	08 95       	ret

00002452 <__fp_round>:
    2452:	09 2e       	mov	r0, r25
    2454:	03 94       	inc	r0
    2456:	00 0c       	add	r0, r0
    2458:	11 f4       	brne	.+4      	; 0x245e <__fp_round+0xc>
    245a:	88 23       	and	r24, r24
    245c:	52 f0       	brmi	.+20     	; 0x2472 <__fp_round+0x20>
    245e:	bb 0f       	add	r27, r27
    2460:	40 f4       	brcc	.+16     	; 0x2472 <__fp_round+0x20>
    2462:	bf 2b       	or	r27, r31
    2464:	11 f4       	brne	.+4      	; 0x246a <__fp_round+0x18>
    2466:	60 ff       	sbrs	r22, 0
    2468:	04 c0       	rjmp	.+8      	; 0x2472 <__fp_round+0x20>
    246a:	6f 5f       	subi	r22, 0xFF	; 255
    246c:	7f 4f       	sbci	r23, 0xFF	; 255
    246e:	8f 4f       	sbci	r24, 0xFF	; 255
    2470:	9f 4f       	sbci	r25, 0xFF	; 255
    2472:	08 95       	ret

00002474 <__fp_split3>:
    2474:	57 fd       	sbrc	r21, 7
    2476:	90 58       	subi	r25, 0x80	; 128
    2478:	44 0f       	add	r20, r20
    247a:	55 1f       	adc	r21, r21
    247c:	59 f0       	breq	.+22     	; 0x2494 <__fp_splitA+0x10>
    247e:	5f 3f       	cpi	r21, 0xFF	; 255
    2480:	71 f0       	breq	.+28     	; 0x249e <__fp_splitA+0x1a>
    2482:	47 95       	ror	r20

00002484 <__fp_splitA>:
    2484:	88 0f       	add	r24, r24
    2486:	97 fb       	bst	r25, 7
    2488:	99 1f       	adc	r25, r25
    248a:	61 f0       	breq	.+24     	; 0x24a4 <__fp_splitA+0x20>
    248c:	9f 3f       	cpi	r25, 0xFF	; 255
    248e:	79 f0       	breq	.+30     	; 0x24ae <__fp_splitA+0x2a>
    2490:	87 95       	ror	r24
    2492:	08 95       	ret
    2494:	12 16       	cp	r1, r18
    2496:	13 06       	cpc	r1, r19
    2498:	14 06       	cpc	r1, r20
    249a:	55 1f       	adc	r21, r21
    249c:	f2 cf       	rjmp	.-28     	; 0x2482 <__fp_split3+0xe>
    249e:	46 95       	lsr	r20
    24a0:	f1 df       	rcall	.-30     	; 0x2484 <__fp_splitA>
    24a2:	08 c0       	rjmp	.+16     	; 0x24b4 <__fp_splitA+0x30>
    24a4:	16 16       	cp	r1, r22
    24a6:	17 06       	cpc	r1, r23
    24a8:	18 06       	cpc	r1, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	f1 cf       	rjmp	.-30     	; 0x2490 <__fp_splitA+0xc>
    24ae:	86 95       	lsr	r24
    24b0:	71 05       	cpc	r23, r1
    24b2:	61 05       	cpc	r22, r1
    24b4:	08 94       	sec
    24b6:	08 95       	ret

000024b8 <__fp_zero>:
    24b8:	e8 94       	clt

000024ba <__fp_szero>:
    24ba:	bb 27       	eor	r27, r27
    24bc:	66 27       	eor	r22, r22
    24be:	77 27       	eor	r23, r23
    24c0:	cb 01       	movw	r24, r22
    24c2:	97 f9       	bld	r25, 7
    24c4:	08 95       	ret

000024c6 <__gesf2>:
    24c6:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__fp_cmp>
    24ca:	08 f4       	brcc	.+2      	; 0x24ce <__gesf2+0x8>
    24cc:	8f ef       	ldi	r24, 0xFF	; 255
    24ce:	08 95       	ret

000024d0 <__mulsf3>:
    24d0:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__mulsf3x>
    24d4:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__fp_round>
    24d8:	0e 94 1b 12 	call	0x2436	; 0x2436 <__fp_pscA>
    24dc:	38 f0       	brcs	.+14     	; 0x24ec <__mulsf3+0x1c>
    24de:	0e 94 22 12 	call	0x2444	; 0x2444 <__fp_pscB>
    24e2:	20 f0       	brcs	.+8      	; 0x24ec <__mulsf3+0x1c>
    24e4:	95 23       	and	r25, r21
    24e6:	11 f0       	breq	.+4      	; 0x24ec <__mulsf3+0x1c>
    24e8:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__fp_inf>
    24ec:	0c 94 18 12 	jmp	0x2430	; 0x2430 <__fp_nan>
    24f0:	11 24       	eor	r1, r1
    24f2:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <__fp_szero>

000024f6 <__mulsf3x>:
    24f6:	0e 94 3a 12 	call	0x2474	; 0x2474 <__fp_split3>
    24fa:	70 f3       	brcs	.-36     	; 0x24d8 <__mulsf3+0x8>

000024fc <__mulsf3_pse>:
    24fc:	95 9f       	mul	r25, r21
    24fe:	c1 f3       	breq	.-16     	; 0x24f0 <__mulsf3+0x20>
    2500:	95 0f       	add	r25, r21
    2502:	50 e0       	ldi	r21, 0x00	; 0
    2504:	55 1f       	adc	r21, r21
    2506:	62 9f       	mul	r22, r18
    2508:	f0 01       	movw	r30, r0
    250a:	72 9f       	mul	r23, r18
    250c:	bb 27       	eor	r27, r27
    250e:	f0 0d       	add	r31, r0
    2510:	b1 1d       	adc	r27, r1
    2512:	63 9f       	mul	r22, r19
    2514:	aa 27       	eor	r26, r26
    2516:	f0 0d       	add	r31, r0
    2518:	b1 1d       	adc	r27, r1
    251a:	aa 1f       	adc	r26, r26
    251c:	64 9f       	mul	r22, r20
    251e:	66 27       	eor	r22, r22
    2520:	b0 0d       	add	r27, r0
    2522:	a1 1d       	adc	r26, r1
    2524:	66 1f       	adc	r22, r22
    2526:	82 9f       	mul	r24, r18
    2528:	22 27       	eor	r18, r18
    252a:	b0 0d       	add	r27, r0
    252c:	a1 1d       	adc	r26, r1
    252e:	62 1f       	adc	r22, r18
    2530:	73 9f       	mul	r23, r19
    2532:	b0 0d       	add	r27, r0
    2534:	a1 1d       	adc	r26, r1
    2536:	62 1f       	adc	r22, r18
    2538:	83 9f       	mul	r24, r19
    253a:	a0 0d       	add	r26, r0
    253c:	61 1d       	adc	r22, r1
    253e:	22 1f       	adc	r18, r18
    2540:	74 9f       	mul	r23, r20
    2542:	33 27       	eor	r19, r19
    2544:	a0 0d       	add	r26, r0
    2546:	61 1d       	adc	r22, r1
    2548:	23 1f       	adc	r18, r19
    254a:	84 9f       	mul	r24, r20
    254c:	60 0d       	add	r22, r0
    254e:	21 1d       	adc	r18, r1
    2550:	82 2f       	mov	r24, r18
    2552:	76 2f       	mov	r23, r22
    2554:	6a 2f       	mov	r22, r26
    2556:	11 24       	eor	r1, r1
    2558:	9f 57       	subi	r25, 0x7F	; 127
    255a:	50 40       	sbci	r21, 0x00	; 0
    255c:	9a f0       	brmi	.+38     	; 0x2584 <__mulsf3_pse+0x88>
    255e:	f1 f0       	breq	.+60     	; 0x259c <__mulsf3_pse+0xa0>
    2560:	88 23       	and	r24, r24
    2562:	4a f0       	brmi	.+18     	; 0x2576 <__mulsf3_pse+0x7a>
    2564:	ee 0f       	add	r30, r30
    2566:	ff 1f       	adc	r31, r31
    2568:	bb 1f       	adc	r27, r27
    256a:	66 1f       	adc	r22, r22
    256c:	77 1f       	adc	r23, r23
    256e:	88 1f       	adc	r24, r24
    2570:	91 50       	subi	r25, 0x01	; 1
    2572:	50 40       	sbci	r21, 0x00	; 0
    2574:	a9 f7       	brne	.-22     	; 0x2560 <__mulsf3_pse+0x64>
    2576:	9e 3f       	cpi	r25, 0xFE	; 254
    2578:	51 05       	cpc	r21, r1
    257a:	80 f0       	brcs	.+32     	; 0x259c <__mulsf3_pse+0xa0>
    257c:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__fp_inf>
    2580:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <__fp_szero>
    2584:	5f 3f       	cpi	r21, 0xFF	; 255
    2586:	e4 f3       	brlt	.-8      	; 0x2580 <__mulsf3_pse+0x84>
    2588:	98 3e       	cpi	r25, 0xE8	; 232
    258a:	d4 f3       	brlt	.-12     	; 0x2580 <__mulsf3_pse+0x84>
    258c:	86 95       	lsr	r24
    258e:	77 95       	ror	r23
    2590:	67 95       	ror	r22
    2592:	b7 95       	ror	r27
    2594:	f7 95       	ror	r31
    2596:	e7 95       	ror	r30
    2598:	9f 5f       	subi	r25, 0xFF	; 255
    259a:	c1 f7       	brne	.-16     	; 0x258c <__mulsf3_pse+0x90>
    259c:	fe 2b       	or	r31, r30
    259e:	88 0f       	add	r24, r24
    25a0:	91 1d       	adc	r25, r1
    25a2:	96 95       	lsr	r25
    25a4:	87 95       	ror	r24
    25a6:	97 f9       	bld	r25, 7
    25a8:	08 95       	ret

000025aa <strcat>:
    25aa:	fb 01       	movw	r30, r22
    25ac:	dc 01       	movw	r26, r24
    25ae:	0d 90       	ld	r0, X+
    25b0:	00 20       	and	r0, r0
    25b2:	e9 f7       	brne	.-6      	; 0x25ae <strcat+0x4>
    25b4:	11 97       	sbiw	r26, 0x01	; 1
    25b6:	01 90       	ld	r0, Z+
    25b8:	0d 92       	st	X+, r0
    25ba:	00 20       	and	r0, r0
    25bc:	e1 f7       	brne	.-8      	; 0x25b6 <strcat+0xc>
    25be:	08 95       	ret

000025c0 <strcmp>:
    25c0:	fb 01       	movw	r30, r22
    25c2:	dc 01       	movw	r26, r24
    25c4:	8d 91       	ld	r24, X+
    25c6:	01 90       	ld	r0, Z+
    25c8:	80 19       	sub	r24, r0
    25ca:	01 10       	cpse	r0, r1
    25cc:	d9 f3       	breq	.-10     	; 0x25c4 <strcmp+0x4>
    25ce:	99 0b       	sbc	r25, r25
    25d0:	08 95       	ret

000025d2 <itoa>:
    25d2:	45 32       	cpi	r20, 0x25	; 37
    25d4:	51 05       	cpc	r21, r1
    25d6:	20 f4       	brcc	.+8      	; 0x25e0 <itoa+0xe>
    25d8:	42 30       	cpi	r20, 0x02	; 2
    25da:	10 f0       	brcs	.+4      	; 0x25e0 <itoa+0xe>
    25dc:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__itoa_ncheck>
    25e0:	fb 01       	movw	r30, r22
    25e2:	10 82       	st	Z, r1
    25e4:	cb 01       	movw	r24, r22
    25e6:	08 95       	ret

000025e8 <__itoa_ncheck>:
    25e8:	bb 27       	eor	r27, r27
    25ea:	4a 30       	cpi	r20, 0x0A	; 10
    25ec:	31 f4       	brne	.+12     	; 0x25fa <__itoa_ncheck+0x12>
    25ee:	99 23       	and	r25, r25
    25f0:	22 f4       	brpl	.+8      	; 0x25fa <__itoa_ncheck+0x12>
    25f2:	bd e2       	ldi	r27, 0x2D	; 45
    25f4:	90 95       	com	r25
    25f6:	81 95       	neg	r24
    25f8:	9f 4f       	sbci	r25, 0xFF	; 255
    25fa:	0c 94 00 13 	jmp	0x2600	; 0x2600 <__utoa_common>

000025fe <__utoa_ncheck>:
    25fe:	bb 27       	eor	r27, r27

00002600 <__utoa_common>:
    2600:	fb 01       	movw	r30, r22
    2602:	55 27       	eor	r21, r21
    2604:	aa 27       	eor	r26, r26
    2606:	88 0f       	add	r24, r24
    2608:	99 1f       	adc	r25, r25
    260a:	aa 1f       	adc	r26, r26
    260c:	a4 17       	cp	r26, r20
    260e:	10 f0       	brcs	.+4      	; 0x2614 <__utoa_common+0x14>
    2610:	a4 1b       	sub	r26, r20
    2612:	83 95       	inc	r24
    2614:	50 51       	subi	r21, 0x10	; 16
    2616:	b9 f7       	brne	.-18     	; 0x2606 <__utoa_common+0x6>
    2618:	a0 5d       	subi	r26, 0xD0	; 208
    261a:	aa 33       	cpi	r26, 0x3A	; 58
    261c:	08 f0       	brcs	.+2      	; 0x2620 <__utoa_common+0x20>
    261e:	a9 5d       	subi	r26, 0xD9	; 217
    2620:	a1 93       	st	Z+, r26
    2622:	00 97       	sbiw	r24, 0x00	; 0
    2624:	79 f7       	brne	.-34     	; 0x2604 <__utoa_common+0x4>
    2626:	b1 11       	cpse	r27, r1
    2628:	b1 93       	st	Z+, r27
    262a:	11 92       	st	Z+, r1
    262c:	cb 01       	movw	r24, r22
    262e:	0c 94 19 13 	jmp	0x2632	; 0x2632 <strrev>

00002632 <strrev>:
    2632:	dc 01       	movw	r26, r24
    2634:	fc 01       	movw	r30, r24
    2636:	67 2f       	mov	r22, r23
    2638:	71 91       	ld	r23, Z+
    263a:	77 23       	and	r23, r23
    263c:	e1 f7       	brne	.-8      	; 0x2636 <strrev+0x4>
    263e:	32 97       	sbiw	r30, 0x02	; 2
    2640:	04 c0       	rjmp	.+8      	; 0x264a <strrev+0x18>
    2642:	7c 91       	ld	r23, X
    2644:	6d 93       	st	X+, r22
    2646:	70 83       	st	Z, r23
    2648:	62 91       	ld	r22, -Z
    264a:	ae 17       	cp	r26, r30
    264c:	bf 07       	cpc	r27, r31
    264e:	c8 f3       	brcs	.-14     	; 0x2642 <strrev+0x10>
    2650:	08 95       	ret

00002652 <_exit>:
    2652:	f8 94       	cli

00002654 <__stop_program>:
    2654:	ff cf       	rjmp	.-2      	; 0x2654 <__stop_program>
