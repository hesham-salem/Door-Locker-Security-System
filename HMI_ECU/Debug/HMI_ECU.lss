
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00800060  000027b2  00002846  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000061  00800198  00800198  0000297e  2**0
                  ALLOC
  3 .stab         00003084  00000000  00000000  00002980  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001454  00000000  00000000  00005a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006e58  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006e6c  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00006ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  000073d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000078bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  000078d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__vector_6>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__vector_9>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 87 0b 	jmp	0x170e	; 0x170e <__vector_19>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	15 04       	cpc	r1, r5
      56:	17 04       	cpc	r1, r7
      58:	19 04       	cpc	r1, r9
      5a:	1b 04       	cpc	r1, r11
      5c:	1d 04       	cpc	r1, r13
      5e:	1f 04       	cpc	r1, r15
      60:	21 04       	cpc	r2, r1
      62:	23 04       	cpc	r2, r3
      64:	25 04       	cpc	r2, r5
      66:	27 04       	cpc	r2, r7
      68:	29 04       	cpc	r2, r9
      6a:	2b 04       	cpc	r2, r11
      6c:	2d 04       	cpc	r2, r13
      6e:	2f 04       	cpc	r2, r15
      70:	31 04       	cpc	r3, r1
      72:	33 04       	cpc	r3, r3

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf e5       	ldi	r28, 0x5F	; 95
      7a:	d4 e0       	ldi	r29, 0x04	; 4
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	11 e0       	ldi	r17, 0x01	; 1
      82:	a0 e6       	ldi	r26, 0x60	; 96
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	e2 eb       	ldi	r30, 0xB2	; 178
      88:	f7 e2       	ldi	r31, 0x27	; 39
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a8 39       	cpi	r26, 0x98	; 152
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	21 e0       	ldi	r18, 0x01	; 1
      98:	a8 e9       	ldi	r26, 0x98	; 152
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	a9 3f       	cpi	r26, 0xF9	; 249
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
      aa:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:
void readPassword(uint8 *data);

UART_configurationType UART_config ;
int main()

{	SREG|=(1<<7); /*Global interrupt enable */
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
      ba:	e9 97       	sbiw	r28, 0x39	; 57
      bc:	0f b6       	in	r0, 0x3f	; 63
      be:	f8 94       	cli
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	0f be       	out	0x3f, r0	; 63
      c4:	cd bf       	out	0x3d, r28	; 61
      c6:	8f e5       	ldi	r24, 0x5F	; 95
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	2f e5       	ldi	r18, 0x5F	; 95
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	f9 01       	movw	r30, r18
      d0:	20 81       	ld	r18, Z
      d2:	20 68       	ori	r18, 0x80	; 128
      d4:	fc 01       	movw	r30, r24
      d6:	20 83       	st	Z, r18
/*	initialize peripheral  */
	/* UART initialization */
	UART_config.buadRate=9600;
      d8:	80 e8       	ldi	r24, 0x80	; 128
      da:	95 e2       	ldi	r25, 0x25	; 37
      dc:	a0 e0       	ldi	r26, 0x00	; 0
      de:	b0 e0       	ldi	r27, 0x00	; 0
      e0:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <UART_config+0x1>
      e4:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <UART_config+0x2>
      e8:	a0 93 e1 01 	sts	0x01E1, r26	; 0x8001e1 <UART_config+0x3>
      ec:	b0 93 e2 01 	sts	0x01E2, r27	; 0x8001e2 <UART_config+0x4>
	UART_config.character_size=8;
      f0:	88 e0       	ldi	r24, 0x08	; 8
      f2:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <UART_config>
	strcpy(UART_config.mode,"double speed");
      f6:	8d e0       	ldi	r24, 0x0D	; 13
      f8:	e5 ec       	ldi	r30, 0xC5	; 197
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	a3 ee       	ldi	r26, 0xE3	; 227
      fe:	b1 e0       	ldi	r27, 0x01	; 1
     100:	01 90       	ld	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	8a 95       	dec	r24
     106:	e1 f7       	brne	.-8      	; 0x100 <main+0x4e>
	UART_init(&UART_config);
     108:	8e ed       	ldi	r24, 0xDE	; 222
     10a:	91 e0       	ldi	r25, 0x01	; 1
     10c:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <UART_init>

	/* LCD initialization */
LCD_init();
     110:	0e 94 39 04 	call	0x872	; 0x872 <LCD_init>


while(1)
{
	/*receive the character from CONTROL ECU which indicate to specific action */
data=UART_receiveByte();
     114:	0e 94 ba 10 	call	0x2174	; 0x2174 <UART_receiveByte>
     118:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <data>

/***************************************************************
* 		CASE 2 : first time and user should set password	*
* *************************************************************
*/
	if(data=='s')
     11c:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <data>
     120:	83 37       	cpi	r24, 0x73	; 115
     122:	09 f0       	breq	.+2      	; 0x126 <main+0x74>
     124:	9c c1       	rjmp	.+824    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
				{/* read from user the password and confirm it
				*then compare the password and its confirm
				*if they are typical send them to CONTROL ECU to store it in EEPROM
				*else request it again
				*/
				LCD_clearScreen();
     126:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCD_clearScreen>
				LCD_displayString("set password");
     12a:	82 ed       	ldi	r24, 0xD2	; 210
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_displayString>
				readPassword(set_password);
     132:	89 e9       	ldi	r24, 0x99	; 153
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	0e 94 01 03 	call	0x602	; 0x602 <readPassword>
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	aa ef       	ldi	r26, 0xFA	; 250
     140:	b3 e4       	ldi	r27, 0x43	; 67
     142:	8d 83       	std	Y+5, r24	; 0x05
     144:	9e 83       	std	Y+6, r25	; 0x06
     146:	af 83       	std	Y+7, r26	; 0x07
     148:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	4a ef       	ldi	r20, 0xFA	; 250
     150:	54 e4       	ldi	r21, 0x44	; 68
     152:	6d 81       	ldd	r22, Y+5	; 0x05
     154:	7e 81       	ldd	r23, Y+6	; 0x06
     156:	8f 81       	ldd	r24, Y+7	; 0x07
     158:	98 85       	ldd	r25, Y+8	; 0x08
     15a:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     15e:	dc 01       	movw	r26, r24
     160:	cb 01       	movw	r24, r22
     162:	8c 8f       	std	Y+28, r24	; 0x1c
     164:	9d 8f       	std	Y+29, r25	; 0x1d
     166:	ae 8f       	std	Y+30, r26	; 0x1e
     168:	bf 8f       	std	Y+31, r27	; 0x1f
	if (__tmp < 1.0)
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	40 e8       	ldi	r20, 0x80	; 128
     170:	5f e3       	ldi	r21, 0x3F	; 63
     172:	6c 8d       	ldd	r22, Y+28	; 0x1c
     174:	7d 8d       	ldd	r23, Y+29	; 0x1d
     176:	8e 8d       	ldd	r24, Y+30	; 0x1e
     178:	9f 8d       	ldd	r25, Y+31	; 0x1f
     17a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__cmpsf2>
     17e:	88 23       	and	r24, r24
     180:	2c f4       	brge	.+10     	; 0x18c <main+0xda>
		__ticks = 1;
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	99 a3       	std	Y+33, r25	; 0x21
     188:	88 a3       	std	Y+32, r24	; 0x20
     18a:	3f c0       	rjmp	.+126    	; 0x20a <main+0x158>
	else if (__tmp > 65535)
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	3f ef       	ldi	r19, 0xFF	; 255
     190:	4f e7       	ldi	r20, 0x7F	; 127
     192:	57 e4       	ldi	r21, 0x47	; 71
     194:	6c 8d       	ldd	r22, Y+28	; 0x1c
     196:	7d 8d       	ldd	r23, Y+29	; 0x1d
     198:	8e 8d       	ldd	r24, Y+30	; 0x1e
     19a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     19c:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
     1a0:	18 16       	cp	r1, r24
     1a2:	4c f5       	brge	.+82     	; 0x1f6 <main+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	40 e2       	ldi	r20, 0x20	; 32
     1aa:	51 e4       	ldi	r21, 0x41	; 65
     1ac:	6d 81       	ldd	r22, Y+5	; 0x05
     1ae:	7e 81       	ldd	r23, Y+6	; 0x06
     1b0:	8f 81       	ldd	r24, Y+7	; 0x07
     1b2:	98 85       	ldd	r25, Y+8	; 0x08
     1b4:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     1b8:	dc 01       	movw	r26, r24
     1ba:	cb 01       	movw	r24, r22
     1bc:	bc 01       	movw	r22, r24
     1be:	cd 01       	movw	r24, r26
     1c0:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     1c4:	dc 01       	movw	r26, r24
     1c6:	cb 01       	movw	r24, r22
     1c8:	99 a3       	std	Y+33, r25	; 0x21
     1ca:	88 a3       	std	Y+32, r24	; 0x20
     1cc:	0f c0       	rjmp	.+30     	; 0x1ec <main+0x13a>
     1ce:	88 ec       	ldi	r24, 0xC8	; 200
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	9b a3       	std	Y+35, r25	; 0x23
     1d4:	8a a3       	std	Y+34, r24	; 0x22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1d6:	8a a1       	ldd	r24, Y+34	; 0x22
     1d8:	9b a1       	ldd	r25, Y+35	; 0x23
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0x128>
     1de:	9b a3       	std	Y+35, r25	; 0x23
     1e0:	8a a3       	std	Y+34, r24	; 0x22
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1e2:	88 a1       	ldd	r24, Y+32	; 0x20
     1e4:	99 a1       	ldd	r25, Y+33	; 0x21
     1e6:	01 97       	sbiw	r24, 0x01	; 1
     1e8:	99 a3       	std	Y+33, r25	; 0x21
     1ea:	88 a3       	std	Y+32, r24	; 0x20
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1ec:	88 a1       	ldd	r24, Y+32	; 0x20
     1ee:	99 a1       	ldd	r25, Y+33	; 0x21
     1f0:	89 2b       	or	r24, r25
     1f2:	69 f7       	brne	.-38     	; 0x1ce <main+0x11c>
     1f4:	14 c0       	rjmp	.+40     	; 0x21e <main+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1f6:	6c 8d       	ldd	r22, Y+28	; 0x1c
     1f8:	7d 8d       	ldd	r23, Y+29	; 0x1d
     1fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     1fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
     1fe:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	99 a3       	std	Y+33, r25	; 0x21
     208:	88 a3       	std	Y+32, r24	; 0x20
     20a:	88 a1       	ldd	r24, Y+32	; 0x20
     20c:	99 a1       	ldd	r25, Y+33	; 0x21
     20e:	9d a3       	std	Y+37, r25	; 0x25
     210:	8c a3       	std	Y+36, r24	; 0x24
     212:	8c a1       	ldd	r24, Y+36	; 0x24
     214:	9d a1       	ldd	r25, Y+37	; 0x25
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <main+0x164>
     21a:	9d a3       	std	Y+37, r25	; 0x25
     21c:	8c a3       	std	Y+36, r24	; 0x24
				_delay_ms(500);
				LCD_clearScreen();
     21e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCD_clearScreen>
				LCD_displayString("confirm password");
     222:	8f ed       	ldi	r24, 0xDF	; 223
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_displayString>
				readPassword(confirm_password);
     22a:	89 ea       	ldi	r24, 0xA9	; 169
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	0e 94 01 03 	call	0x602	; 0x602 <readPassword>
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	aa ef       	ldi	r26, 0xFA	; 250
     238:	b3 e4       	ldi	r27, 0x43	; 67
     23a:	8e 87       	std	Y+14, r24	; 0x0e
     23c:	9f 87       	std	Y+15, r25	; 0x0f
     23e:	a8 8b       	std	Y+16, r26	; 0x10
     240:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     242:	20 e0       	ldi	r18, 0x00	; 0
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	4a ef       	ldi	r20, 0xFA	; 250
     248:	54 e4       	ldi	r21, 0x44	; 68
     24a:	6e 85       	ldd	r22, Y+14	; 0x0e
     24c:	7f 85       	ldd	r23, Y+15	; 0x0f
     24e:	88 89       	ldd	r24, Y+16	; 0x10
     250:	99 89       	ldd	r25, Y+17	; 0x11
     252:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     256:	dc 01       	movw	r26, r24
     258:	cb 01       	movw	r24, r22
     25a:	8a 8b       	std	Y+18, r24	; 0x12
     25c:	9b 8b       	std	Y+19, r25	; 0x13
     25e:	ac 8b       	std	Y+20, r26	; 0x14
     260:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	5f e3       	ldi	r21, 0x3F	; 63
     26a:	6a 89       	ldd	r22, Y+18	; 0x12
     26c:	7b 89       	ldd	r23, Y+19	; 0x13
     26e:	8c 89       	ldd	r24, Y+20	; 0x14
     270:	9d 89       	ldd	r25, Y+21	; 0x15
     272:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__cmpsf2>
     276:	88 23       	and	r24, r24
     278:	2c f4       	brge	.+10     	; 0x284 <main+0x1d2>
		__ticks = 1;
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	9f 8b       	std	Y+23, r25	; 0x17
     280:	8e 8b       	std	Y+22, r24	; 0x16
     282:	3f c0       	rjmp	.+126    	; 0x302 <main+0x250>
	else if (__tmp > 65535)
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	3f ef       	ldi	r19, 0xFF	; 255
     288:	4f e7       	ldi	r20, 0x7F	; 127
     28a:	57 e4       	ldi	r21, 0x47	; 71
     28c:	6a 89       	ldd	r22, Y+18	; 0x12
     28e:	7b 89       	ldd	r23, Y+19	; 0x13
     290:	8c 89       	ldd	r24, Y+20	; 0x14
     292:	9d 89       	ldd	r25, Y+21	; 0x15
     294:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
     298:	18 16       	cp	r1, r24
     29a:	4c f5       	brge	.+82     	; 0x2ee <main+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	40 e2       	ldi	r20, 0x20	; 32
     2a2:	51 e4       	ldi	r21, 0x41	; 65
     2a4:	6e 85       	ldd	r22, Y+14	; 0x0e
     2a6:	7f 85       	ldd	r23, Y+15	; 0x0f
     2a8:	88 89       	ldd	r24, Y+16	; 0x10
     2aa:	99 89       	ldd	r25, Y+17	; 0x11
     2ac:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     2b0:	dc 01       	movw	r26, r24
     2b2:	cb 01       	movw	r24, r22
     2b4:	bc 01       	movw	r22, r24
     2b6:	cd 01       	movw	r24, r26
     2b8:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     2bc:	dc 01       	movw	r26, r24
     2be:	cb 01       	movw	r24, r22
     2c0:	9f 8b       	std	Y+23, r25	; 0x17
     2c2:	8e 8b       	std	Y+22, r24	; 0x16
     2c4:	0f c0       	rjmp	.+30     	; 0x2e4 <main+0x232>
     2c6:	88 ec       	ldi	r24, 0xC8	; 200
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	99 8f       	std	Y+25, r25	; 0x19
     2cc:	88 8f       	std	Y+24, r24	; 0x18
     2ce:	88 8d       	ldd	r24, Y+24	; 0x18
     2d0:	99 8d       	ldd	r25, Y+25	; 0x19
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <main+0x220>
     2d6:	99 8f       	std	Y+25, r25	; 0x19
     2d8:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2da:	8e 89       	ldd	r24, Y+22	; 0x16
     2dc:	9f 89       	ldd	r25, Y+23	; 0x17
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	9f 8b       	std	Y+23, r25	; 0x17
     2e2:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2e4:	8e 89       	ldd	r24, Y+22	; 0x16
     2e6:	9f 89       	ldd	r25, Y+23	; 0x17
     2e8:	89 2b       	or	r24, r25
     2ea:	69 f7       	brne	.-38     	; 0x2c6 <main+0x214>
     2ec:	14 c0       	rjmp	.+40     	; 0x316 <main+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2ee:	6a 89       	ldd	r22, Y+18	; 0x12
     2f0:	7b 89       	ldd	r23, Y+19	; 0x13
     2f2:	8c 89       	ldd	r24, Y+20	; 0x14
     2f4:	9d 89       	ldd	r25, Y+21	; 0x15
     2f6:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     2fa:	dc 01       	movw	r26, r24
     2fc:	cb 01       	movw	r24, r22
     2fe:	9f 8b       	std	Y+23, r25	; 0x17
     300:	8e 8b       	std	Y+22, r24	; 0x16
     302:	8e 89       	ldd	r24, Y+22	; 0x16
     304:	9f 89       	ldd	r25, Y+23	; 0x17
     306:	9b 8f       	std	Y+27, r25	; 0x1b
     308:	8a 8f       	std	Y+26, r24	; 0x1a
     30a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     30c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     30e:	01 97       	sbiw	r24, 0x01	; 1
     310:	f1 f7       	brne	.-4      	; 0x30e <main+0x25c>
     312:	9b 8f       	std	Y+27, r25	; 0x1b
     314:	8a 8f       	std	Y+26, r24	; 0x1a
				_delay_ms(500);
				LCD_clearScreen();
     316:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCD_clearScreen>

				if(!strcmp(set_password,confirm_password))
     31a:	69 ea       	ldi	r22, 0xA9	; 169
     31c:	71 e0       	ldi	r23, 0x01	; 1
     31e:	89 e9       	ldi	r24, 0x99	; 153
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
     326:	89 2b       	or	r24, r25
     328:	09 f0       	breq	.+2      	; 0x32c <main+0x27a>
     32a:	fd ce       	rjmp	.-518    	; 0x126 <main+0x74>
				{	LCD_clearScreen();
     32c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCD_clearScreen>
					LCD_displayString("saved");
     330:	80 ef       	ldi	r24, 0xF0	; 240
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_displayString>
					UART_sendString(confirm_password);
     338:	89 ea       	ldi	r24, 0xA9	; 169
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <UART_sendString>
					break;
     340:	00 00       	nop
					}
				}
		/*give user option to open the door */
		LCD_clearScreen();
     342:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCD_clearScreen>
		LCD_displayString("press enter to ");
     346:	86 ef       	ldi	r24, 0xF6	; 246
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_displayString>
		LCD_displayStringRowColumn(1,0 ,"  open the door");
     34e:	46 e0       	ldi	r20, 0x06	; 6
     350:	51 e0       	ldi	r21, 0x01	; 1
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_displayStringRowColumn>
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	aa ef       	ldi	r26, 0xFA	; 250
     360:	b3 e4       	ldi	r27, 0x43	; 67
     362:	89 83       	std	Y+1, r24	; 0x01
     364:	9a 83       	std	Y+2, r25	; 0x02
     366:	ab 83       	std	Y+3, r26	; 0x03
     368:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	4a ef       	ldi	r20, 0xFA	; 250
     370:	54 e4       	ldi	r21, 0x44	; 68
     372:	69 81       	ldd	r22, Y+1	; 0x01
     374:	7a 81       	ldd	r23, Y+2	; 0x02
     376:	8b 81       	ldd	r24, Y+3	; 0x03
     378:	9c 81       	ldd	r25, Y+4	; 0x04
     37a:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     37e:	dc 01       	movw	r26, r24
     380:	cb 01       	movw	r24, r22
     382:	8e a3       	std	Y+38, r24	; 0x26
     384:	9f a3       	std	Y+39, r25	; 0x27
     386:	a8 a7       	std	Y+40, r26	; 0x28
     388:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	40 e8       	ldi	r20, 0x80	; 128
     390:	5f e3       	ldi	r21, 0x3F	; 63
     392:	6e a1       	ldd	r22, Y+38	; 0x26
     394:	7f a1       	ldd	r23, Y+39	; 0x27
     396:	88 a5       	ldd	r24, Y+40	; 0x28
     398:	99 a5       	ldd	r25, Y+41	; 0x29
     39a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__cmpsf2>
     39e:	88 23       	and	r24, r24
     3a0:	0c f0       	brlt	.+2      	; 0x3a4 <main+0x2f2>
     3a2:	05 c0       	rjmp	.+10     	; 0x3ae <main+0x2fc>
		__ticks = 1;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	9b a7       	std	Y+43, r25	; 0x2b
     3aa:	8a a7       	std	Y+42, r24	; 0x2a
     3ac:	3f c0       	rjmp	.+126    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	else if (__tmp > 65535)
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	3f ef       	ldi	r19, 0xFF	; 255
     3b2:	4f e7       	ldi	r20, 0x7F	; 127
     3b4:	57 e4       	ldi	r21, 0x47	; 71
     3b6:	6e a1       	ldd	r22, Y+38	; 0x26
     3b8:	7f a1       	ldd	r23, Y+39	; 0x27
     3ba:	88 a5       	ldd	r24, Y+40	; 0x28
     3bc:	99 a5       	ldd	r25, Y+41	; 0x29
     3be:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
     3c2:	18 16       	cp	r1, r24
     3c4:	4c f5       	brge	.+82     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	40 e2       	ldi	r20, 0x20	; 32
     3cc:	51 e4       	ldi	r21, 0x41	; 65
     3ce:	69 81       	ldd	r22, Y+1	; 0x01
     3d0:	7a 81       	ldd	r23, Y+2	; 0x02
     3d2:	8b 81       	ldd	r24, Y+3	; 0x03
     3d4:	9c 81       	ldd	r25, Y+4	; 0x04
     3d6:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     3da:	dc 01       	movw	r26, r24
     3dc:	cb 01       	movw	r24, r22
     3de:	bc 01       	movw	r22, r24
     3e0:	cd 01       	movw	r24, r26
     3e2:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     3e6:	dc 01       	movw	r26, r24
     3e8:	cb 01       	movw	r24, r22
     3ea:	9b a7       	std	Y+43, r25	; 0x2b
     3ec:	8a a7       	std	Y+42, r24	; 0x2a
     3ee:	0f c0       	rjmp	.+30     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3f0:	88 ec       	ldi	r24, 0xC8	; 200
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	9d a7       	std	Y+45, r25	; 0x2d
     3f6:	8c a7       	std	Y+44, r24	; 0x2c
     3f8:	8c a5       	ldd	r24, Y+44	; 0x2c
     3fa:	9d a5       	ldd	r25, Y+45	; 0x2d
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <main+0x34a>
     400:	9d a7       	std	Y+45, r25	; 0x2d
     402:	8c a7       	std	Y+44, r24	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     404:	8a a5       	ldd	r24, Y+42	; 0x2a
     406:	9b a5       	ldd	r25, Y+43	; 0x2b
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	9b a7       	std	Y+43, r25	; 0x2b
     40c:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     40e:	8a a5       	ldd	r24, Y+42	; 0x2a
     410:	9b a5       	ldd	r25, Y+43	; 0x2b
     412:	89 2b       	or	r24, r25
     414:	69 f7       	brne	.-38     	; 0x3f0 <main+0x33e>
     416:	14 c0       	rjmp	.+40     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     418:	6e a1       	ldd	r22, Y+38	; 0x26
     41a:	7f a1       	ldd	r23, Y+39	; 0x27
     41c:	88 a5       	ldd	r24, Y+40	; 0x28
     41e:	99 a5       	ldd	r25, Y+41	; 0x29
     420:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     424:	dc 01       	movw	r26, r24
     426:	cb 01       	movw	r24, r22
     428:	9b a7       	std	Y+43, r25	; 0x2b
     42a:	8a a7       	std	Y+42, r24	; 0x2a
     42c:	8a a5       	ldd	r24, Y+42	; 0x2a
     42e:	9b a5       	ldd	r25, Y+43	; 0x2b
     430:	9f a7       	std	Y+47, r25	; 0x2f
     432:	8e a7       	std	Y+46, r24	; 0x2e
     434:	8e a5       	ldd	r24, Y+46	; 0x2e
     436:	9f a5       	ldd	r25, Y+47	; 0x2f
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     43c:	9f a7       	std	Y+47, r25	; 0x2f
     43e:	8e a7       	std	Y+46, r24	; 0x2e
		_delay_ms(500);
		confirm_key=KeyPad_getPressedKey();
     440:	0e 94 a5 03 	call	0x74a	; 0x74a <KeyPad_getPressedKey>
     444:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <confirm_key>
		if(confirm_key==13)
     448:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <confirm_key>
     44c:	8d 30       	cpi	r24, 0x0D	; 13
     44e:	09 f0       	breq	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     450:	61 ce       	rjmp	.-830    	; 0x114 <main+0x62>
		{
		UART_sendByte('o');
     452:	8f e6       	ldi	r24, 0x6F	; 111
     454:	0e 94 cc 10 	call	0x2198	; 0x2198 <UART_sendByte>
		LCD_clearScreen();
     458:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCD_clearScreen>
     45c:	5b ce       	rjmp	.-842    	; 0x114 <main+0x62>
	}
	/***************************************************************
	* 		CASE 0 : password already set	*
	* *************************************************************
	*/
	else if(data=='e')
     45e:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <data>
     462:	85 36       	cpi	r24, 0x65	; 101
     464:	09 f0       	breq	.+2      	; 0x468 <__stack+0x9>
     466:	ae c0       	rjmp	.+348    	; 0x5c4 <__stack+0x165>
		*if CONTROL ECU confirm the entered password
		*give the user two options open the door or set new password
		*else reruest the the password again
		*/
		while(1)
		{	LCD_clearScreen();
     468:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCD_clearScreen>
				LCD_displayString("enter password");
     46c:	86 e1       	ldi	r24, 0x16	; 22
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_displayString>
				readPassword(password);
     474:	89 eb       	ldi	r24, 0xB9	; 185
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	0e 94 01 03 	call	0x602	; 0x602 <readPassword>

				 	 UART_sendString(password);
     47c:	89 eb       	ldi	r24, 0xB9	; 185
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <UART_sendString>
				 	uint8 temp_data=UART_receiveByte();
     484:	0e 94 ba 10 	call	0x2174	; 0x2174 <UART_receiveByte>
     488:	8d 87       	std	Y+13, r24	; 0x0d
				 	 if(temp_data=='w')
     48a:	8d 85       	ldd	r24, Y+13	; 0x0d
     48c:	87 37       	cpi	r24, 0x77	; 119
     48e:	09 f0       	breq	.+2      	; 0x492 <__stack+0x33>
     490:	92 c0       	rjmp	.+292    	; 0x5b6 <__stack+0x157>
				 	 {
			 	LCD_clearScreen();
     492:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCD_clearScreen>
				LCD_displayString("press 1 to open");
     496:	85 e2       	ldi	r24, 0x25	; 37
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_displayString>
				LCD_displayStringRowColumn(1,0 ,"2 to set password");
     49e:	45 e3       	ldi	r20, 0x35	; 53
     4a0:	51 e0       	ldi	r21, 0x01	; 1
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_displayStringRowColumn>
				confirm_key2=KeyPad_getPressedKey();
     4aa:	0e 94 a5 03 	call	0x74a	; 0x74a <KeyPad_getPressedKey>
     4ae:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <confirm_key2>
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	a8 ec       	ldi	r26, 0xC8	; 200
     4b8:	b3 e4       	ldi	r27, 0x43	; 67
     4ba:	89 87       	std	Y+9, r24	; 0x09
     4bc:	9a 87       	std	Y+10, r25	; 0x0a
     4be:	ab 87       	std	Y+11, r26	; 0x0b
     4c0:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	4a ef       	ldi	r20, 0xFA	; 250
     4c8:	54 e4       	ldi	r21, 0x44	; 68
     4ca:	69 85       	ldd	r22, Y+9	; 0x09
     4cc:	7a 85       	ldd	r23, Y+10	; 0x0a
     4ce:	8b 85       	ldd	r24, Y+11	; 0x0b
     4d0:	9c 85       	ldd	r25, Y+12	; 0x0c
     4d2:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     4d6:	dc 01       	movw	r26, r24
     4d8:	cb 01       	movw	r24, r22
     4da:	88 ab       	std	Y+48, r24	; 0x30
     4dc:	99 ab       	std	Y+49, r25	; 0x31
     4de:	aa ab       	std	Y+50, r26	; 0x32
     4e0:	bb ab       	std	Y+51, r27	; 0x33
	if (__tmp < 1.0)
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	40 e8       	ldi	r20, 0x80	; 128
     4e8:	5f e3       	ldi	r21, 0x3F	; 63
     4ea:	68 a9       	ldd	r22, Y+48	; 0x30
     4ec:	79 a9       	ldd	r23, Y+49	; 0x31
     4ee:	8a a9       	ldd	r24, Y+50	; 0x32
     4f0:	9b a9       	ldd	r25, Y+51	; 0x33
     4f2:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__cmpsf2>
     4f6:	88 23       	and	r24, r24
     4f8:	2c f4       	brge	.+10     	; 0x504 <__stack+0xa5>
		__ticks = 1;
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9d ab       	std	Y+53, r25	; 0x35
     500:	8c ab       	std	Y+52, r24	; 0x34
     502:	3f c0       	rjmp	.+126    	; 0x582 <__stack+0x123>
	else if (__tmp > 65535)
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	3f ef       	ldi	r19, 0xFF	; 255
     508:	4f e7       	ldi	r20, 0x7F	; 127
     50a:	57 e4       	ldi	r21, 0x47	; 71
     50c:	68 a9       	ldd	r22, Y+48	; 0x30
     50e:	79 a9       	ldd	r23, Y+49	; 0x31
     510:	8a a9       	ldd	r24, Y+50	; 0x32
     512:	9b a9       	ldd	r25, Y+51	; 0x33
     514:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
     518:	18 16       	cp	r1, r24
     51a:	4c f5       	brge	.+82     	; 0x56e <__stack+0x10f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	40 e2       	ldi	r20, 0x20	; 32
     522:	51 e4       	ldi	r21, 0x41	; 65
     524:	69 85       	ldd	r22, Y+9	; 0x09
     526:	7a 85       	ldd	r23, Y+10	; 0x0a
     528:	8b 85       	ldd	r24, Y+11	; 0x0b
     52a:	9c 85       	ldd	r25, Y+12	; 0x0c
     52c:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     530:	dc 01       	movw	r26, r24
     532:	cb 01       	movw	r24, r22
     534:	bc 01       	movw	r22, r24
     536:	cd 01       	movw	r24, r26
     538:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     53c:	dc 01       	movw	r26, r24
     53e:	cb 01       	movw	r24, r22
     540:	9d ab       	std	Y+53, r25	; 0x35
     542:	8c ab       	std	Y+52, r24	; 0x34
     544:	0f c0       	rjmp	.+30     	; 0x564 <__stack+0x105>
     546:	88 ec       	ldi	r24, 0xC8	; 200
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	9f ab       	std	Y+55, r25	; 0x37
     54c:	8e ab       	std	Y+54, r24	; 0x36
     54e:	8e a9       	ldd	r24, Y+54	; 0x36
     550:	9f a9       	ldd	r25, Y+55	; 0x37
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <__stack+0xf3>
     556:	9f ab       	std	Y+55, r25	; 0x37
     558:	8e ab       	std	Y+54, r24	; 0x36
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     55a:	8c a9       	ldd	r24, Y+52	; 0x34
     55c:	9d a9       	ldd	r25, Y+53	; 0x35
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	9d ab       	std	Y+53, r25	; 0x35
     562:	8c ab       	std	Y+52, r24	; 0x34
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     564:	8c a9       	ldd	r24, Y+52	; 0x34
     566:	9d a9       	ldd	r25, Y+53	; 0x35
     568:	89 2b       	or	r24, r25
     56a:	69 f7       	brne	.-38     	; 0x546 <__stack+0xe7>
     56c:	14 c0       	rjmp	.+40     	; 0x596 <__stack+0x137>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     56e:	68 a9       	ldd	r22, Y+48	; 0x30
     570:	79 a9       	ldd	r23, Y+49	; 0x31
     572:	8a a9       	ldd	r24, Y+50	; 0x32
     574:	9b a9       	ldd	r25, Y+51	; 0x33
     576:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     57a:	dc 01       	movw	r26, r24
     57c:	cb 01       	movw	r24, r22
     57e:	9d ab       	std	Y+53, r25	; 0x35
     580:	8c ab       	std	Y+52, r24	; 0x34
     582:	8c a9       	ldd	r24, Y+52	; 0x34
     584:	9d a9       	ldd	r25, Y+53	; 0x35
     586:	99 af       	std	Y+57, r25	; 0x39
     588:	88 af       	std	Y+56, r24	; 0x38
     58a:	88 ad       	ldd	r24, Y+56	; 0x38
     58c:	99 ad       	ldd	r25, Y+57	; 0x39
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	f1 f7       	brne	.-4      	; 0x58e <__stack+0x12f>
     592:	99 af       	std	Y+57, r25	; 0x39
     594:	88 af       	std	Y+56, r24	; 0x38
				_delay_ms(400);
						if(confirm_key2==2)
     596:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <confirm_key2>
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	21 f4       	brne	.+8      	; 0x5a6 <__stack+0x147>
						UART_sendByte('s');
     59e:	83 e7       	ldi	r24, 0x73	; 115
     5a0:	0e 94 cc 10 	call	0x2198	; 0x2198 <UART_sendByte>
						else if(confirm_key2==1)
						UART_sendByte('o');
						break;
     5a4:	17 c0       	rjmp	.+46     	; 0x5d4 <__stack+0x175>
				LCD_displayStringRowColumn(1,0 ,"2 to set password");
				confirm_key2=KeyPad_getPressedKey();
				_delay_ms(400);
						if(confirm_key2==2)
						UART_sendByte('s');
						else if(confirm_key2==1)
     5a6:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <confirm_key2>
     5aa:	81 30       	cpi	r24, 0x01	; 1
     5ac:	99 f4       	brne	.+38     	; 0x5d4 <__stack+0x175>
						UART_sendByte('o');
     5ae:	8f e6       	ldi	r24, 0x6F	; 111
     5b0:	0e 94 cc 10 	call	0x2198	; 0x2198 <UART_sendByte>
						break;
     5b4:	0f c0       	rjmp	.+30     	; 0x5d4 <__stack+0x175>
				 	 }
				 	 else if(temp_data=='B')
     5b6:	8d 85       	ldd	r24, Y+13	; 0x0d
     5b8:	82 34       	cpi	r24, 0x42	; 66
     5ba:	09 f0       	breq	.+2      	; 0x5be <__stack+0x15f>
     5bc:	55 cf       	rjmp	.-342    	; 0x468 <__stack+0x9>
				 		 {LCD_clearScreen();
     5be:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCD_clearScreen>
				 		 break;
     5c2:	09 c0       	rjmp	.+18     	; 0x5d6 <__stack+0x177>
	}
	/*******************************************************************************
	* 		CASE 1 : password already set and user try enter password than 3 times	*
	* ******************************************************************************
	*/
	else if(data=='B')
     5c4:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <data>
     5c8:	82 34       	cpi	r24, 0x42	; 66
     5ca:	09 f0       	breq	.+2      	; 0x5ce <__stack+0x16f>
     5cc:	a3 cd       	rjmp	.-1210   	; 0x114 <main+0x62>
	{
		LCD_clearScreen();
     5ce:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <LCD_clearScreen>
     5d2:	a0 cd       	rjmp	.-1216   	; 0x114 <main+0x62>
				_delay_ms(400);
						if(confirm_key2==2)
						UART_sendByte('s');
						else if(confirm_key2==1)
						UART_sendByte('o');
						break;
     5d4:	00 00       	nop
	{
		LCD_clearScreen();

	}

}
     5d6:	9e cd       	rjmp	.-1220   	; 0x114 <main+0x62>

000005d8 <intgerToString>:
/***************************************************************
 * 					functions definition 			*
 * *************************************************************
 */
void intgerToString(int data)
{
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	00 d0       	rcall	.+0      	; 0x5de <intgerToString+0x6>
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	9a 83       	std	Y+2, r25	; 0x02
     5e4:	89 83       	std	Y+1, r24	; 0x01
	/* buffer to hold acii result */
	itoa(data,buff,10); /* 10 for decimal base */
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ea:	4a e0       	ldi	r20, 0x0A	; 10
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	6d ec       	ldi	r22, 0xCD	; 205
     5f0:	71 e0       	ldi	r23, 0x01	; 1
     5f2:	0e 94 97 13 	call	0x272e	; 0x272e <itoa>
}
     5f6:	00 00       	nop
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <readPassword>:

 void readPassword(uint8 *data)
 {
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	60 97       	sbiw	r28, 0x10	; 16
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	98 8b       	std	Y+16, r25	; 0x10
     618:	8f 87       	std	Y+15, r24	; 0x0f
	 	while(enter==1)
     61a:	86 c0       	rjmp	.+268    	; 0x728 <readPassword+0x126>
	 	{
	 	key =KeyPad_getPressedKey();
     61c:	0e 94 a5 03 	call	0x74a	; 0x74a <KeyPad_getPressedKey>
     620:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <__data_end>
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	a8 ec       	ldi	r26, 0xC8	; 200
     62a:	b3 e4       	ldi	r27, 0x43	; 67
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	9a 83       	std	Y+2, r25	; 0x02
     630:	ab 83       	std	Y+3, r26	; 0x03
     632:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	4a ef       	ldi	r20, 0xFA	; 250
     63a:	54 e4       	ldi	r21, 0x44	; 68
     63c:	69 81       	ldd	r22, Y+1	; 0x01
     63e:	7a 81       	ldd	r23, Y+2	; 0x02
     640:	8b 81       	ldd	r24, Y+3	; 0x03
     642:	9c 81       	ldd	r25, Y+4	; 0x04
     644:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     648:	dc 01       	movw	r26, r24
     64a:	cb 01       	movw	r24, r22
     64c:	8d 83       	std	Y+5, r24	; 0x05
     64e:	9e 83       	std	Y+6, r25	; 0x06
     650:	af 83       	std	Y+7, r26	; 0x07
     652:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	40 e8       	ldi	r20, 0x80	; 128
     65a:	5f e3       	ldi	r21, 0x3F	; 63
     65c:	6d 81       	ldd	r22, Y+5	; 0x05
     65e:	7e 81       	ldd	r23, Y+6	; 0x06
     660:	8f 81       	ldd	r24, Y+7	; 0x07
     662:	98 85       	ldd	r25, Y+8	; 0x08
     664:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__cmpsf2>
     668:	88 23       	and	r24, r24
     66a:	2c f4       	brge	.+10     	; 0x676 <readPassword+0x74>
		__ticks = 1;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	9a 87       	std	Y+10, r25	; 0x0a
     672:	89 87       	std	Y+9, r24	; 0x09
     674:	3f c0       	rjmp	.+126    	; 0x6f4 <readPassword+0xf2>
	else if (__tmp > 65535)
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	3f ef       	ldi	r19, 0xFF	; 255
     67a:	4f e7       	ldi	r20, 0x7F	; 127
     67c:	57 e4       	ldi	r21, 0x47	; 71
     67e:	6d 81       	ldd	r22, Y+5	; 0x05
     680:	7e 81       	ldd	r23, Y+6	; 0x06
     682:	8f 81       	ldd	r24, Y+7	; 0x07
     684:	98 85       	ldd	r25, Y+8	; 0x08
     686:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
     68a:	18 16       	cp	r1, r24
     68c:	4c f5       	brge	.+82     	; 0x6e0 <readPassword+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	40 e2       	ldi	r20, 0x20	; 32
     694:	51 e4       	ldi	r21, 0x41	; 65
     696:	69 81       	ldd	r22, Y+1	; 0x01
     698:	7a 81       	ldd	r23, Y+2	; 0x02
     69a:	8b 81       	ldd	r24, Y+3	; 0x03
     69c:	9c 81       	ldd	r25, Y+4	; 0x04
     69e:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     6a2:	dc 01       	movw	r26, r24
     6a4:	cb 01       	movw	r24, r22
     6a6:	bc 01       	movw	r22, r24
     6a8:	cd 01       	movw	r24, r26
     6aa:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     6ae:	dc 01       	movw	r26, r24
     6b0:	cb 01       	movw	r24, r22
     6b2:	9a 87       	std	Y+10, r25	; 0x0a
     6b4:	89 87       	std	Y+9, r24	; 0x09
     6b6:	0f c0       	rjmp	.+30     	; 0x6d6 <readPassword+0xd4>
     6b8:	88 ec       	ldi	r24, 0xC8	; 200
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	9c 87       	std	Y+12, r25	; 0x0c
     6be:	8b 87       	std	Y+11, r24	; 0x0b
     6c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     6c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <readPassword+0xc2>
     6c8:	9c 87       	std	Y+12, r25	; 0x0c
     6ca:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6cc:	89 85       	ldd	r24, Y+9	; 0x09
     6ce:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	9a 87       	std	Y+10, r25	; 0x0a
     6d4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6d6:	89 85       	ldd	r24, Y+9	; 0x09
     6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6da:	89 2b       	or	r24, r25
     6dc:	69 f7       	brne	.-38     	; 0x6b8 <readPassword+0xb6>
     6de:	14 c0       	rjmp	.+40     	; 0x708 <readPassword+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6e0:	6d 81       	ldd	r22, Y+5	; 0x05
     6e2:	7e 81       	ldd	r23, Y+6	; 0x06
     6e4:	8f 81       	ldd	r24, Y+7	; 0x07
     6e6:	98 85       	ldd	r25, Y+8	; 0x08
     6e8:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     6ec:	dc 01       	movw	r26, r24
     6ee:	cb 01       	movw	r24, r22
     6f0:	9a 87       	std	Y+10, r25	; 0x0a
     6f2:	89 87       	std	Y+9, r24	; 0x09
     6f4:	89 85       	ldd	r24, Y+9	; 0x09
     6f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f8:	9e 87       	std	Y+14, r25	; 0x0e
     6fa:	8d 87       	std	Y+13, r24	; 0x0d
     6fc:	8d 85       	ldd	r24, Y+13	; 0x0d
     6fe:	9e 85       	ldd	r25, Y+14	; 0x0e
     700:	01 97       	sbiw	r24, 0x01	; 1
     702:	f1 f7       	brne	.-4      	; 0x700 <readPassword+0xfe>
     704:	9e 87       	std	Y+14, r25	; 0x0e
     706:	8d 87       	std	Y+13, r24	; 0x0d
	 	_delay_ms(400);
	 	if(key==13) /* enter*/
     708:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
     70c:	8d 30       	cpi	r24, 0x0D	; 13
     70e:	91 f0       	breq	.+36     	; 0x734 <readPassword+0x132>
	 		break;
	 	intgerToString(key);
     710:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
     714:	88 2f       	mov	r24, r24
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <intgerToString>
	 	strcat(data,buff);
     71c:	8f 85       	ldd	r24, Y+15	; 0x0f
     71e:	98 89       	ldd	r25, Y+16	; 0x10
     720:	6d ec       	ldi	r22, 0xCD	; 205
     722:	71 e0       	ldi	r23, 0x01	; 1
     724:	0e 94 83 13 	call	0x2706	; 0x2706 <strcat>
	itoa(data,buff,10); /* 10 for decimal base */
}

 void readPassword(uint8 *data)
 {
	 	while(enter==1)
     728:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <enter>
     72c:	81 30       	cpi	r24, 0x01	; 1
     72e:	09 f4       	brne	.+2      	; 0x732 <readPassword+0x130>
     730:	75 cf       	rjmp	.-278    	; 0x61c <readPassword+0x1a>
	 	if(key==13) /* enter*/
	 		break;
	 	intgerToString(key);
	 	strcat(data,buff);
	 	}
 }
     732:	01 c0       	rjmp	.+2      	; 0x736 <readPassword+0x134>
	 	while(enter==1)
	 	{
	 	key =KeyPad_getPressedKey();
	 	_delay_ms(400);
	 	if(key==13) /* enter*/
	 		break;
     734:	00 00       	nop
	 	intgerToString(key);
	 	strcat(data,buff);
	 	}
 }
     736:	00 00       	nop
     738:	60 96       	adiw	r28, 0x10	; 16
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <KeyPad_getPressedKey>:
/***************************************************************
 * 					function definition 						*
 * *************************************************************
 */

uint8 KeyPad_getPressedKey(void) {
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	00 d0       	rcall	.+0      	; 0x750 <KeyPad_getPressedKey+0x6>
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1)
	{
	for (col = 0; col < N_COL; col++) {
     754:	1a 82       	std	Y+2, r1	; 0x02
     756:	44 c0       	rjmp	.+136    	; 0x7e0 <KeyPad_getPressedKey+0x96>
		/* set the specified column in this trace output pin and the first 4 pins as input */
		KEYPAD_PORT_DIR = (0b00010000 << col);
     758:	8a e3       	ldi	r24, 0x3A	; 58
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	2a 81       	ldd	r18, Y+2	; 0x02
     75e:	42 2f       	mov	r20, r18
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	20 e1       	ldi	r18, 0x10	; 16
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	02 c0       	rjmp	.+4      	; 0x76c <KeyPad_getPressedKey+0x22>
     768:	22 0f       	add	r18, r18
     76a:	33 1f       	adc	r19, r19
     76c:	4a 95       	dec	r20
     76e:	e2 f7       	brpl	.-8      	; 0x768 <KeyPad_getPressedKey+0x1e>
     770:	fc 01       	movw	r30, r24
     772:	20 83       	st	Z, r18
		/* put on the specified column in this trace output pin 0 and  make the first 4 pins as pull up */
		KEYPAD_PORT_OUT = (~(0b00010000 << col));
     774:	8b e3       	ldi	r24, 0x3B	; 59
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	2a 81       	ldd	r18, Y+2	; 0x02
     77a:	42 2f       	mov	r20, r18
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	20 e1       	ldi	r18, 0x10	; 16
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	02 c0       	rjmp	.+4      	; 0x788 <KeyPad_getPressedKey+0x3e>
     784:	22 0f       	add	r18, r18
     786:	33 1f       	adc	r19, r19
     788:	4a 95       	dec	r20
     78a:	e2 f7       	brpl	.-8      	; 0x784 <KeyPad_getPressedKey+0x3a>
     78c:	20 95       	com	r18
     78e:	fc 01       	movw	r30, r24
     790:	20 83       	st	Z, r18
		for (row = 0; row < N_ROW; row++) /* loop for rows */
     792:	19 82       	std	Y+1, r1	; 0x01
     794:	1f c0       	rjmp	.+62     	; 0x7d4 <KeyPad_getPressedKey+0x8a>
		{
			if (BIT_IS_CLEAR(KEYPAD_PORT_IN, row))/* if the switch is pressed in this row */
     796:	89 e3       	ldi	r24, 0x39	; 57
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	fc 01       	movw	r30, r24
     79c:	80 81       	ld	r24, Z
     79e:	88 2f       	mov	r24, r24
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	29 81       	ldd	r18, Y+1	; 0x01
     7a4:	22 2f       	mov	r18, r18
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <KeyPad_getPressedKey+0x64>
     7aa:	95 95       	asr	r25
     7ac:	87 95       	ror	r24
     7ae:	2a 95       	dec	r18
     7b0:	e2 f7       	brpl	.-8      	; 0x7aa <KeyPad_getPressedKey+0x60>
     7b2:	81 70       	andi	r24, 0x01	; 1
     7b4:	99 27       	eor	r25, r25
     7b6:	89 2b       	or	r24, r25
     7b8:	51 f4       	brne	.+20     	; 0x7ce <KeyPad_getPressedKey+0x84>
			{
				#if(N_COL==3)
				return KeyPad_4x3_adjustSwitchNumber((row * N_COL) + col + 1);
				#elif(N_COL==4)
				return KeyPad_4x4_adjustSwitchNumber((row * N_COL) + col + 1);
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	98 2f       	mov	r25, r24
     7be:	99 0f       	add	r25, r25
     7c0:	99 0f       	add	r25, r25
     7c2:	8a 81       	ldd	r24, Y+2	; 0x02
     7c4:	89 0f       	add	r24, r25
     7c6:	8f 5f       	subi	r24, 0xFF	; 255
     7c8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <KeyPad_4x4_adjustSwitchNumber>
     7cc:	0e c0       	rjmp	.+28     	; 0x7ea <KeyPad_getPressedKey+0xa0>
	for (col = 0; col < N_COL; col++) {
		/* set the specified column in this trace output pin and the first 4 pins as input */
		KEYPAD_PORT_DIR = (0b00010000 << col);
		/* put on the specified column in this trace output pin 0 and  make the first 4 pins as pull up */
		KEYPAD_PORT_OUT = (~(0b00010000 << col));
		for (row = 0; row < N_ROW; row++) /* loop for rows */
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	8f 5f       	subi	r24, 0xFF	; 255
     7d2:	89 83       	std	Y+1, r24	; 0x01
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	84 30       	cpi	r24, 0x04	; 4
     7d8:	f0 f2       	brcs	.-68     	; 0x796 <KeyPad_getPressedKey+0x4c>

uint8 KeyPad_getPressedKey(void) {
	uint8 row, col;
	while(1)
	{
	for (col = 0; col < N_COL; col++) {
     7da:	8a 81       	ldd	r24, Y+2	; 0x02
     7dc:	8f 5f       	subi	r24, 0xFF	; 255
     7de:	8a 83       	std	Y+2, r24	; 0x02
     7e0:	8a 81       	ldd	r24, Y+2	; 0x02
     7e2:	84 30       	cpi	r24, 0x04	; 4
     7e4:	08 f4       	brcc	.+2      	; 0x7e8 <KeyPad_getPressedKey+0x9e>
     7e6:	b8 cf       	rjmp	.-144    	; 0x758 <KeyPad_getPressedKey+0xe>
				#endif
			}
		}
	}

}
     7e8:	b5 cf       	rjmp	.-150    	; 0x754 <KeyPad_getPressedKey+0xa>
}
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	08 95       	ret

000007f4 <KeyPad_4x4_adjustSwitchNumber>:
 }


#elif(N_COL==4)

static uint8 KeyPad_4x4_adjustSwitchNumber(uint8 a_number) {
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	1f 92       	push	r1
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	89 83       	std	Y+1, r24	; 0x01
	switch (a_number) {
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	88 2f       	mov	r24, r24
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	09 2e       	mov	r0, r25
     808:	00 0c       	add	r0, r0
     80a:	aa 0b       	sbc	r26, r26
     80c:	bb 0b       	sbc	r27, r27
     80e:	41 e0       	ldi	r20, 0x01	; 1
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	2f e0       	ldi	r18, 0x0F	; 15
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	84 1b       	sub	r24, r20
     818:	95 0b       	sbc	r25, r21
     81a:	28 17       	cp	r18, r24
     81c:	39 07       	cpc	r19, r25
     81e:	28 f1       	brcs	.+74     	; 0x86a <KeyPad_4x4_adjustSwitchNumber+0x76>
     820:	86 5d       	subi	r24, 0xD6	; 214
     822:	9f 4f       	sbci	r25, 0xFF	; 255
     824:	fc 01       	movw	r30, r24
     826:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__tablejump2__>
	case 1:
		return 7;
     82a:	87 e0       	ldi	r24, 0x07	; 7
     82c:	1e c0       	rjmp	.+60     	; 0x86a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 2:
		return 8;
     82e:	88 e0       	ldi	r24, 0x08	; 8
     830:	1c c0       	rjmp	.+56     	; 0x86a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 3:
		return 9;
     832:	89 e0       	ldi	r24, 0x09	; 9
     834:	1a c0       	rjmp	.+52     	; 0x86a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 4:
		return '/';
     836:	8f e2       	ldi	r24, 0x2F	; 47
     838:	18 c0       	rjmp	.+48     	; 0x86a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 5:
		return 4;
     83a:	84 e0       	ldi	r24, 0x04	; 4
     83c:	16 c0       	rjmp	.+44     	; 0x86a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 6:
		return 5;
     83e:	85 e0       	ldi	r24, 0x05	; 5
     840:	14 c0       	rjmp	.+40     	; 0x86a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 7:
		return 6;
     842:	86 e0       	ldi	r24, 0x06	; 6
     844:	12 c0       	rjmp	.+36     	; 0x86a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 8:
		return '*';
     846:	8a e2       	ldi	r24, 0x2A	; 42
     848:	10 c0       	rjmp	.+32     	; 0x86a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 9:
		return 1;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	0e c0       	rjmp	.+28     	; 0x86a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 10:
		return 2;
     84e:	82 e0       	ldi	r24, 0x02	; 2
     850:	0c c0       	rjmp	.+24     	; 0x86a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 11:
		return 3;
     852:	83 e0       	ldi	r24, 0x03	; 3
     854:	0a c0       	rjmp	.+20     	; 0x86a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 12:
		return '-';
     856:	8d e2       	ldi	r24, 0x2D	; 45
     858:	08 c0       	rjmp	.+16     	; 0x86a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 13:
		return 13;
     85a:	8d e0       	ldi	r24, 0x0D	; 13
     85c:	06 c0       	rjmp	.+12     	; 0x86a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 14:
		return 0;
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	04 c0       	rjmp	.+8      	; 0x86a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 15:
		return '=';
     862:	8d e3       	ldi	r24, 0x3D	; 61
     864:	02 c0       	rjmp	.+4      	; 0x86a <KeyPad_4x4_adjustSwitchNumber+0x76>
	case 16:
		return '+';
     866:	8b e2       	ldi	r24, 0x2B	; 43
     868:	00 c0       	rjmp	.+0      	; 0x86a <KeyPad_4x4_adjustSwitchNumber+0x76>

	}
}
     86a:	0f 90       	pop	r0
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <LCD_init>:
 * 								Functions Definitions				   *
 ***********************************************************************
 */

void LCD_init(void)
{
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
LCD_CTRL_PORT_DIR |=(1<<4)|(1<<5)|(1<<6);/* configure control port pins(RS ,R/W ,ENABLE) AS OUTPUT*/
     87a:	81 e3       	ldi	r24, 0x31	; 49
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	21 e3       	ldi	r18, 0x31	; 49
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	f9 01       	movw	r30, r18
     884:	20 81       	ld	r18, Z
     886:	20 67       	ori	r18, 0x70	; 112
     888:	fc 01       	movw	r30, r24
     88a:	20 83       	st	Z, r18
LCD_DATA_PORT_DIR=0XFF; /* configure the data port as output port */
     88c:	84 e3       	ldi	r24, 0x34	; 52
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	2f ef       	ldi	r18, 0xFF	; 255
     892:	fc 01       	movw	r30, r24
     894:	20 83       	st	Z, r18
LCD_sendCommand(FUNCTION_SET_8_BIT_2LINE); /* using 2 lines + LCD 8 bit mode + 5*7 dot  display mode*/
     896:	88 e3       	ldi	r24, 0x38	; 56
     898:	0e 94 58 04 	call	0x8b0	; 0x8b0 <LCD_sendCommand>
LCD_sendCommand(DISPLAY_CURSOR_OFF);
     89c:	8c e0       	ldi	r24, 0x0C	; 12
     89e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <LCD_sendCommand>
LCD_sendCommand(CLEAR_COMMAND);
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <LCD_sendCommand>

}
     8a8:	00 00       	nop
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	e9 97       	sbiw	r28, 0x39	; 57
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS);/* instruction mode RS =0*/
     8c6:	82 e3       	ldi	r24, 0x32	; 50
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	22 e3       	ldi	r18, 0x32	; 50
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	f9 01       	movw	r30, r18
     8d0:	20 81       	ld	r18, Z
     8d2:	2f 7e       	andi	r18, 0xEF	; 239
     8d4:	fc 01       	movw	r30, r24
     8d6:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_PORT,READWRITE); /* write data to LCD so readwrite=0*/
     8d8:	82 e3       	ldi	r24, 0x32	; 50
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	22 e3       	ldi	r18, 0x32	; 50
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	f9 01       	movw	r30, r18
     8e2:	20 81       	ld	r18, Z
     8e4:	2f 7d       	andi	r18, 0xDF	; 223
     8e6:	fc 01       	movw	r30, r24
     8e8:	20 83       	st	Z, r18
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	a0 e8       	ldi	r26, 0x80	; 128
     8f0:	bf e3       	ldi	r27, 0x3F	; 63
     8f2:	89 83       	std	Y+1, r24	; 0x01
     8f4:	9a 83       	std	Y+2, r25	; 0x02
     8f6:	ab 83       	std	Y+3, r26	; 0x03
     8f8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	4a ef       	ldi	r20, 0xFA	; 250
     900:	54 e4       	ldi	r21, 0x44	; 68
     902:	69 81       	ldd	r22, Y+1	; 0x01
     904:	7a 81       	ldd	r23, Y+2	; 0x02
     906:	8b 81       	ldd	r24, Y+3	; 0x03
     908:	9c 81       	ldd	r25, Y+4	; 0x04
     90a:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     90e:	dc 01       	movw	r26, r24
     910:	cb 01       	movw	r24, r22
     912:	8f a7       	std	Y+47, r24	; 0x2f
     914:	98 ab       	std	Y+48, r25	; 0x30
     916:	a9 ab       	std	Y+49, r26	; 0x31
     918:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e8       	ldi	r20, 0x80	; 128
     920:	5f e3       	ldi	r21, 0x3F	; 63
     922:	6f a5       	ldd	r22, Y+47	; 0x2f
     924:	78 a9       	ldd	r23, Y+48	; 0x30
     926:	89 a9       	ldd	r24, Y+49	; 0x31
     928:	9a a9       	ldd	r25, Y+50	; 0x32
     92a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__cmpsf2>
     92e:	88 23       	and	r24, r24
     930:	2c f4       	brge	.+10     	; 0x93c <LCD_sendCommand+0x8c>
		__ticks = 1;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	9c ab       	std	Y+52, r25	; 0x34
     938:	8b ab       	std	Y+51, r24	; 0x33
     93a:	3f c0       	rjmp	.+126    	; 0x9ba <LCD_sendCommand+0x10a>
	else if (__tmp > 65535)
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	3f ef       	ldi	r19, 0xFF	; 255
     940:	4f e7       	ldi	r20, 0x7F	; 127
     942:	57 e4       	ldi	r21, 0x47	; 71
     944:	6f a5       	ldd	r22, Y+47	; 0x2f
     946:	78 a9       	ldd	r23, Y+48	; 0x30
     948:	89 a9       	ldd	r24, Y+49	; 0x31
     94a:	9a a9       	ldd	r25, Y+50	; 0x32
     94c:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
     950:	18 16       	cp	r1, r24
     952:	4c f5       	brge	.+82     	; 0x9a6 <LCD_sendCommand+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	40 e2       	ldi	r20, 0x20	; 32
     95a:	51 e4       	ldi	r21, 0x41	; 65
     95c:	69 81       	ldd	r22, Y+1	; 0x01
     95e:	7a 81       	ldd	r23, Y+2	; 0x02
     960:	8b 81       	ldd	r24, Y+3	; 0x03
     962:	9c 81       	ldd	r25, Y+4	; 0x04
     964:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     968:	dc 01       	movw	r26, r24
     96a:	cb 01       	movw	r24, r22
     96c:	bc 01       	movw	r22, r24
     96e:	cd 01       	movw	r24, r26
     970:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     974:	dc 01       	movw	r26, r24
     976:	cb 01       	movw	r24, r22
     978:	9c ab       	std	Y+52, r25	; 0x34
     97a:	8b ab       	std	Y+51, r24	; 0x33
     97c:	0f c0       	rjmp	.+30     	; 0x99c <LCD_sendCommand+0xec>
     97e:	88 ec       	ldi	r24, 0xC8	; 200
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	9e ab       	std	Y+54, r25	; 0x36
     984:	8d ab       	std	Y+53, r24	; 0x35
     986:	8d a9       	ldd	r24, Y+53	; 0x35
     988:	9e a9       	ldd	r25, Y+54	; 0x36
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <LCD_sendCommand+0xda>
     98e:	9e ab       	std	Y+54, r25	; 0x36
     990:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     992:	8b a9       	ldd	r24, Y+51	; 0x33
     994:	9c a9       	ldd	r25, Y+52	; 0x34
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	9c ab       	std	Y+52, r25	; 0x34
     99a:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     99c:	8b a9       	ldd	r24, Y+51	; 0x33
     99e:	9c a9       	ldd	r25, Y+52	; 0x34
     9a0:	89 2b       	or	r24, r25
     9a2:	69 f7       	brne	.-38     	; 0x97e <LCD_sendCommand+0xce>
     9a4:	14 c0       	rjmp	.+40     	; 0x9ce <LCD_sendCommand+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9a6:	6f a5       	ldd	r22, Y+47	; 0x2f
     9a8:	78 a9       	ldd	r23, Y+48	; 0x30
     9aa:	89 a9       	ldd	r24, Y+49	; 0x31
     9ac:	9a a9       	ldd	r25, Y+50	; 0x32
     9ae:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     9b2:	dc 01       	movw	r26, r24
     9b4:	cb 01       	movw	r24, r22
     9b6:	9c ab       	std	Y+52, r25	; 0x34
     9b8:	8b ab       	std	Y+51, r24	; 0x33
     9ba:	8b a9       	ldd	r24, Y+51	; 0x33
     9bc:	9c a9       	ldd	r25, Y+52	; 0x34
     9be:	98 af       	std	Y+56, r25	; 0x38
     9c0:	8f ab       	std	Y+55, r24	; 0x37
     9c2:	8f a9       	ldd	r24, Y+55	; 0x37
     9c4:	98 ad       	ldd	r25, Y+56	; 0x38
     9c6:	01 97       	sbiw	r24, 0x01	; 1
     9c8:	f1 f7       	brne	.-4      	; 0x9c6 <LCD_sendCommand+0x116>
     9ca:	98 af       	std	Y+56, r25	; 0x38
     9cc:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1);/* delay for prossing tas=50ns*/
	SET_BIT(LCD_CTRL_PORT,LCD_ENABLE); /*enable LCD so enable pin =1*/
     9ce:	82 e3       	ldi	r24, 0x32	; 50
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	22 e3       	ldi	r18, 0x32	; 50
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	f9 01       	movw	r30, r18
     9d8:	20 81       	ld	r18, Z
     9da:	20 64       	ori	r18, 0x40	; 64
     9dc:	fc 01       	movw	r30, r24
     9de:	20 83       	st	Z, r18
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e8       	ldi	r26, 0x80	; 128
     9e6:	bf e3       	ldi	r27, 0x3F	; 63
     9e8:	8d 83       	std	Y+5, r24	; 0x05
     9ea:	9e 83       	std	Y+6, r25	; 0x06
     9ec:	af 83       	std	Y+7, r26	; 0x07
     9ee:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	4a ef       	ldi	r20, 0xFA	; 250
     9f6:	54 e4       	ldi	r21, 0x44	; 68
     9f8:	6d 81       	ldd	r22, Y+5	; 0x05
     9fa:	7e 81       	ldd	r23, Y+6	; 0x06
     9fc:	8f 81       	ldd	r24, Y+7	; 0x07
     9fe:	98 85       	ldd	r25, Y+8	; 0x08
     a00:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     a04:	dc 01       	movw	r26, r24
     a06:	cb 01       	movw	r24, r22
     a08:	8d a3       	std	Y+37, r24	; 0x25
     a0a:	9e a3       	std	Y+38, r25	; 0x26
     a0c:	af a3       	std	Y+39, r26	; 0x27
     a0e:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e8       	ldi	r20, 0x80	; 128
     a16:	5f e3       	ldi	r21, 0x3F	; 63
     a18:	6d a1       	ldd	r22, Y+37	; 0x25
     a1a:	7e a1       	ldd	r23, Y+38	; 0x26
     a1c:	8f a1       	ldd	r24, Y+39	; 0x27
     a1e:	98 a5       	ldd	r25, Y+40	; 0x28
     a20:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__cmpsf2>
     a24:	88 23       	and	r24, r24
     a26:	2c f4       	brge	.+10     	; 0xa32 <LCD_sendCommand+0x182>
		__ticks = 1;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	9a a7       	std	Y+42, r25	; 0x2a
     a2e:	89 a7       	std	Y+41, r24	; 0x29
     a30:	3f c0       	rjmp	.+126    	; 0xab0 <LCD_sendCommand+0x200>
	else if (__tmp > 65535)
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	3f ef       	ldi	r19, 0xFF	; 255
     a36:	4f e7       	ldi	r20, 0x7F	; 127
     a38:	57 e4       	ldi	r21, 0x47	; 71
     a3a:	6d a1       	ldd	r22, Y+37	; 0x25
     a3c:	7e a1       	ldd	r23, Y+38	; 0x26
     a3e:	8f a1       	ldd	r24, Y+39	; 0x27
     a40:	98 a5       	ldd	r25, Y+40	; 0x28
     a42:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
     a46:	18 16       	cp	r1, r24
     a48:	4c f5       	brge	.+82     	; 0xa9c <LCD_sendCommand+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e2       	ldi	r20, 0x20	; 32
     a50:	51 e4       	ldi	r21, 0x41	; 65
     a52:	6d 81       	ldd	r22, Y+5	; 0x05
     a54:	7e 81       	ldd	r23, Y+6	; 0x06
     a56:	8f 81       	ldd	r24, Y+7	; 0x07
     a58:	98 85       	ldd	r25, Y+8	; 0x08
     a5a:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     a5e:	dc 01       	movw	r26, r24
     a60:	cb 01       	movw	r24, r22
     a62:	bc 01       	movw	r22, r24
     a64:	cd 01       	movw	r24, r26
     a66:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     a6a:	dc 01       	movw	r26, r24
     a6c:	cb 01       	movw	r24, r22
     a6e:	9a a7       	std	Y+42, r25	; 0x2a
     a70:	89 a7       	std	Y+41, r24	; 0x29
     a72:	0f c0       	rjmp	.+30     	; 0xa92 <LCD_sendCommand+0x1e2>
     a74:	88 ec       	ldi	r24, 0xC8	; 200
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	9c a7       	std	Y+44, r25	; 0x2c
     a7a:	8b a7       	std	Y+43, r24	; 0x2b
     a7c:	8b a5       	ldd	r24, Y+43	; 0x2b
     a7e:	9c a5       	ldd	r25, Y+44	; 0x2c
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <LCD_sendCommand+0x1d0>
     a84:	9c a7       	std	Y+44, r25	; 0x2c
     a86:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a88:	89 a5       	ldd	r24, Y+41	; 0x29
     a8a:	9a a5       	ldd	r25, Y+42	; 0x2a
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	9a a7       	std	Y+42, r25	; 0x2a
     a90:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a92:	89 a5       	ldd	r24, Y+41	; 0x29
     a94:	9a a5       	ldd	r25, Y+42	; 0x2a
     a96:	89 2b       	or	r24, r25
     a98:	69 f7       	brne	.-38     	; 0xa74 <LCD_sendCommand+0x1c4>
     a9a:	14 c0       	rjmp	.+40     	; 0xac4 <LCD_sendCommand+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a9c:	6d a1       	ldd	r22, Y+37	; 0x25
     a9e:	7e a1       	ldd	r23, Y+38	; 0x26
     aa0:	8f a1       	ldd	r24, Y+39	; 0x27
     aa2:	98 a5       	ldd	r25, Y+40	; 0x28
     aa4:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9a a7       	std	Y+42, r25	; 0x2a
     aae:	89 a7       	std	Y+41, r24	; 0x29
     ab0:	89 a5       	ldd	r24, Y+41	; 0x29
     ab2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ab4:	9e a7       	std	Y+46, r25	; 0x2e
     ab6:	8d a7       	std	Y+45, r24	; 0x2d
     ab8:	8d a5       	ldd	r24, Y+45	; 0x2d
     aba:	9e a5       	ldd	r25, Y+46	; 0x2e
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	f1 f7       	brne	.-4      	; 0xabc <LCD_sendCommand+0x20c>
     ac0:	9e a7       	std	Y+46, r25	; 0x2e
     ac2:	8d a7       	std	Y+45, r24	; 0x2d
	_delay_ms(1); /*delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT=command;/* out the required command to the data bus D0--->D7*/
     ac4:	85 e3       	ldi	r24, 0x35	; 53
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	29 ad       	ldd	r18, Y+57	; 0x39
     aca:	fc 01       	movw	r30, r24
     acc:	20 83       	st	Z, r18
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e8       	ldi	r26, 0x80	; 128
     ad4:	bf e3       	ldi	r27, 0x3F	; 63
     ad6:	89 87       	std	Y+9, r24	; 0x09
     ad8:	9a 87       	std	Y+10, r25	; 0x0a
     ada:	ab 87       	std	Y+11, r26	; 0x0b
     adc:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	4a ef       	ldi	r20, 0xFA	; 250
     ae4:	54 e4       	ldi	r21, 0x44	; 68
     ae6:	69 85       	ldd	r22, Y+9	; 0x09
     ae8:	7a 85       	ldd	r23, Y+10	; 0x0a
     aea:	8b 85       	ldd	r24, Y+11	; 0x0b
     aec:	9c 85       	ldd	r25, Y+12	; 0x0c
     aee:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     af2:	dc 01       	movw	r26, r24
     af4:	cb 01       	movw	r24, r22
     af6:	8b 8f       	std	Y+27, r24	; 0x1b
     af8:	9c 8f       	std	Y+28, r25	; 0x1c
     afa:	ad 8f       	std	Y+29, r26	; 0x1d
     afc:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	40 e8       	ldi	r20, 0x80	; 128
     b04:	5f e3       	ldi	r21, 0x3F	; 63
     b06:	6b 8d       	ldd	r22, Y+27	; 0x1b
     b08:	7c 8d       	ldd	r23, Y+28	; 0x1c
     b0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b0e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__cmpsf2>
     b12:	88 23       	and	r24, r24
     b14:	2c f4       	brge	.+10     	; 0xb20 <LCD_sendCommand+0x270>
		__ticks = 1;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	98 a3       	std	Y+32, r25	; 0x20
     b1c:	8f 8f       	std	Y+31, r24	; 0x1f
     b1e:	3f c0       	rjmp	.+126    	; 0xb9e <LCD_sendCommand+0x2ee>
	else if (__tmp > 65535)
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	3f ef       	ldi	r19, 0xFF	; 255
     b24:	4f e7       	ldi	r20, 0x7F	; 127
     b26:	57 e4       	ldi	r21, 0x47	; 71
     b28:	6b 8d       	ldd	r22, Y+27	; 0x1b
     b2a:	7c 8d       	ldd	r23, Y+28	; 0x1c
     b2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b30:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
     b34:	18 16       	cp	r1, r24
     b36:	4c f5       	brge	.+82     	; 0xb8a <LCD_sendCommand+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	40 e2       	ldi	r20, 0x20	; 32
     b3e:	51 e4       	ldi	r21, 0x41	; 65
     b40:	69 85       	ldd	r22, Y+9	; 0x09
     b42:	7a 85       	ldd	r23, Y+10	; 0x0a
     b44:	8b 85       	ldd	r24, Y+11	; 0x0b
     b46:	9c 85       	ldd	r25, Y+12	; 0x0c
     b48:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	bc 01       	movw	r22, r24
     b52:	cd 01       	movw	r24, r26
     b54:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     b58:	dc 01       	movw	r26, r24
     b5a:	cb 01       	movw	r24, r22
     b5c:	98 a3       	std	Y+32, r25	; 0x20
     b5e:	8f 8f       	std	Y+31, r24	; 0x1f
     b60:	0f c0       	rjmp	.+30     	; 0xb80 <LCD_sendCommand+0x2d0>
     b62:	88 ec       	ldi	r24, 0xC8	; 200
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	9a a3       	std	Y+34, r25	; 0x22
     b68:	89 a3       	std	Y+33, r24	; 0x21
     b6a:	89 a1       	ldd	r24, Y+33	; 0x21
     b6c:	9a a1       	ldd	r25, Y+34	; 0x22
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <LCD_sendCommand+0x2be>
     b72:	9a a3       	std	Y+34, r25	; 0x22
     b74:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b76:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b78:	98 a1       	ldd	r25, Y+32	; 0x20
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	98 a3       	std	Y+32, r25	; 0x20
     b7e:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b80:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b82:	98 a1       	ldd	r25, Y+32	; 0x20
     b84:	89 2b       	or	r24, r25
     b86:	69 f7       	brne	.-38     	; 0xb62 <LCD_sendCommand+0x2b2>
     b88:	14 c0       	rjmp	.+40     	; 0xbb2 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b8a:	6b 8d       	ldd	r22, Y+27	; 0x1b
     b8c:	7c 8d       	ldd	r23, Y+28	; 0x1c
     b8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b90:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b92:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	98 a3       	std	Y+32, r25	; 0x20
     b9c:	8f 8f       	std	Y+31, r24	; 0x1f
     b9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ba0:	98 a1       	ldd	r25, Y+32	; 0x20
     ba2:	9c a3       	std	Y+36, r25	; 0x24
     ba4:	8b a3       	std	Y+35, r24	; 0x23
     ba6:	8b a1       	ldd	r24, Y+35	; 0x23
     ba8:	9c a1       	ldd	r25, Y+36	; 0x24
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	f1 f7       	brne	.-4      	; 0xbaa <LCD_sendCommand+0x2fa>
     bae:	9c a3       	std	Y+36, r25	; 0x24
     bb0:	8b a3       	std	Y+35, r24	; 0x23
	_delay_ms(1);/* delay for processing command setup time tdsw =60ns */
	CLEAR_BIT(LCD_CTRL_PORT,LCD_ENABLE); /* disable LCD so enable pin =0 */
     bb2:	82 e3       	ldi	r24, 0x32	; 50
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	22 e3       	ldi	r18, 0x32	; 50
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	f9 01       	movw	r30, r18
     bbc:	20 81       	ld	r18, Z
     bbe:	2f 7b       	andi	r18, 0xBF	; 191
     bc0:	fc 01       	movw	r30, r24
     bc2:	20 83       	st	Z, r18
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a0 e8       	ldi	r26, 0x80	; 128
     bca:	bf e3       	ldi	r27, 0x3F	; 63
     bcc:	8d 87       	std	Y+13, r24	; 0x0d
     bce:	9e 87       	std	Y+14, r25	; 0x0e
     bd0:	af 87       	std	Y+15, r26	; 0x0f
     bd2:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	4a ef       	ldi	r20, 0xFA	; 250
     bda:	54 e4       	ldi	r21, 0x44	; 68
     bdc:	6d 85       	ldd	r22, Y+13	; 0x0d
     bde:	7e 85       	ldd	r23, Y+14	; 0x0e
     be0:	8f 85       	ldd	r24, Y+15	; 0x0f
     be2:	98 89       	ldd	r25, Y+16	; 0x10
     be4:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	89 8b       	std	Y+17, r24	; 0x11
     bee:	9a 8b       	std	Y+18, r25	; 0x12
     bf0:	ab 8b       	std	Y+19, r26	; 0x13
     bf2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e8       	ldi	r20, 0x80	; 128
     bfa:	5f e3       	ldi	r21, 0x3F	; 63
     bfc:	69 89       	ldd	r22, Y+17	; 0x11
     bfe:	7a 89       	ldd	r23, Y+18	; 0x12
     c00:	8b 89       	ldd	r24, Y+19	; 0x13
     c02:	9c 89       	ldd	r25, Y+20	; 0x14
     c04:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__cmpsf2>
     c08:	88 23       	and	r24, r24
     c0a:	2c f4       	brge	.+10     	; 0xc16 <LCD_sendCommand+0x366>
		__ticks = 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9e 8b       	std	Y+22, r25	; 0x16
     c12:	8d 8b       	std	Y+21, r24	; 0x15
     c14:	3f c0       	rjmp	.+126    	; 0xc94 <LCD_sendCommand+0x3e4>
	else if (__tmp > 65535)
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	3f ef       	ldi	r19, 0xFF	; 255
     c1a:	4f e7       	ldi	r20, 0x7F	; 127
     c1c:	57 e4       	ldi	r21, 0x47	; 71
     c1e:	69 89       	ldd	r22, Y+17	; 0x11
     c20:	7a 89       	ldd	r23, Y+18	; 0x12
     c22:	8b 89       	ldd	r24, Y+19	; 0x13
     c24:	9c 89       	ldd	r25, Y+20	; 0x14
     c26:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
     c2a:	18 16       	cp	r1, r24
     c2c:	4c f5       	brge	.+82     	; 0xc80 <LCD_sendCommand+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e2       	ldi	r20, 0x20	; 32
     c34:	51 e4       	ldi	r21, 0x41	; 65
     c36:	6d 85       	ldd	r22, Y+13	; 0x0d
     c38:	7e 85       	ldd	r23, Y+14	; 0x0e
     c3a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c3c:	98 89       	ldd	r25, Y+16	; 0x10
     c3e:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	bc 01       	movw	r22, r24
     c48:	cd 01       	movw	r24, r26
     c4a:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9e 8b       	std	Y+22, r25	; 0x16
     c54:	8d 8b       	std	Y+21, r24	; 0x15
     c56:	0f c0       	rjmp	.+30     	; 0xc76 <LCD_sendCommand+0x3c6>
     c58:	88 ec       	ldi	r24, 0xC8	; 200
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	98 8f       	std	Y+24, r25	; 0x18
     c5e:	8f 8b       	std	Y+23, r24	; 0x17
     c60:	8f 89       	ldd	r24, Y+23	; 0x17
     c62:	98 8d       	ldd	r25, Y+24	; 0x18
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <LCD_sendCommand+0x3b4>
     c68:	98 8f       	std	Y+24, r25	; 0x18
     c6a:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6c:	8d 89       	ldd	r24, Y+21	; 0x15
     c6e:	9e 89       	ldd	r25, Y+22	; 0x16
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	9e 8b       	std	Y+22, r25	; 0x16
     c74:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c76:	8d 89       	ldd	r24, Y+21	; 0x15
     c78:	9e 89       	ldd	r25, Y+22	; 0x16
     c7a:	89 2b       	or	r24, r25
     c7c:	69 f7       	brne	.-38     	; 0xc58 <LCD_sendCommand+0x3a8>
	_delay_ms(1); /* delay for processing hold time th=10ns */

}
     c7e:	14 c0       	rjmp	.+40     	; 0xca8 <LCD_sendCommand+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c80:	69 89       	ldd	r22, Y+17	; 0x11
     c82:	7a 89       	ldd	r23, Y+18	; 0x12
     c84:	8b 89       	ldd	r24, Y+19	; 0x13
     c86:	9c 89       	ldd	r25, Y+20	; 0x14
     c88:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	9e 8b       	std	Y+22, r25	; 0x16
     c92:	8d 8b       	std	Y+21, r24	; 0x15
     c94:	8d 89       	ldd	r24, Y+21	; 0x15
     c96:	9e 89       	ldd	r25, Y+22	; 0x16
     c98:	9a 8f       	std	Y+26, r25	; 0x1a
     c9a:	89 8f       	std	Y+25, r24	; 0x19
     c9c:	89 8d       	ldd	r24, Y+25	; 0x19
     c9e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <LCD_sendCommand+0x3f0>
     ca4:	9a 8f       	std	Y+26, r25	; 0x1a
     ca6:	89 8f       	std	Y+25, r24	; 0x19
     ca8:	00 00       	nop
     caa:	e9 96       	adiw	r28, 0x39	; 57
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <LCD_displayCharacter>:
void LCD_displayCharacter(uint8 data)
{
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	cb 56       	subi	r28, 0x6B	; 107
     cca:	d1 09       	sbc	r29, r1
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	9e 01       	movw	r18, r28
     cd8:	25 59       	subi	r18, 0x95	; 149
     cda:	3f 4f       	sbci	r19, 0xFF	; 255
     cdc:	f9 01       	movw	r30, r18
     cde:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* data mode so RS =1*/
     ce0:	82 e3       	ldi	r24, 0x32	; 50
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	22 e3       	ldi	r18, 0x32	; 50
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	f9 01       	movw	r30, r18
     cea:	20 81       	ld	r18, Z
     cec:	20 61       	ori	r18, 0x10	; 16
     cee:	fc 01       	movw	r30, r24
     cf0:	20 83       	st	Z, r18
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	a0 e8       	ldi	r26, 0x80	; 128
     cf8:	bf e3       	ldi	r27, 0x3F	; 63
     cfa:	89 83       	std	Y+1, r24	; 0x01
     cfc:	9a 83       	std	Y+2, r25	; 0x02
     cfe:	ab 83       	std	Y+3, r26	; 0x03
     d00:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     d02:	8e 01       	movw	r16, r28
     d04:	01 5b       	subi	r16, 0xB1	; 177
     d06:	1f 4f       	sbci	r17, 0xFF	; 255
     d08:	2b ea       	ldi	r18, 0xAB	; 171
     d0a:	3a ea       	ldi	r19, 0xAA	; 170
     d0c:	4a e2       	ldi	r20, 0x2A	; 42
     d0e:	50 e4       	ldi	r21, 0x40	; 64
     d10:	69 81       	ldd	r22, Y+1	; 0x01
     d12:	7a 81       	ldd	r23, Y+2	; 0x02
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	9c 81       	ldd	r25, Y+4	; 0x04
     d18:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	f8 01       	movw	r30, r16
     d22:	80 83       	st	Z, r24
     d24:	91 83       	std	Z+1, r25	; 0x01
     d26:	a2 83       	std	Z+2, r26	; 0x02
     d28:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     d2a:	8e 01       	movw	r16, r28
     d2c:	0d 5a       	subi	r16, 0xAD	; 173
     d2e:	1f 4f       	sbci	r17, 0xFF	; 255
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	9a 81       	ldd	r25, Y+2	; 0x02
     d34:	ab 81       	ldd	r26, Y+3	; 0x03
     d36:	bc 81       	ldd	r27, Y+4	; 0x04
     d38:	9c 01       	movw	r18, r24
     d3a:	ad 01       	movw	r20, r26
     d3c:	bc 01       	movw	r22, r24
     d3e:	cd 01       	movw	r24, r26
     d40:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	f8 01       	movw	r30, r16
     d4a:	80 83       	st	Z, r24
     d4c:	91 83       	std	Z+1, r25	; 0x01
     d4e:	a2 83       	std	Z+2, r26	; 0x02
     d50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d52:	ce 01       	movw	r24, r28
     d54:	81 5b       	subi	r24, 0xB1	; 177
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	40 e8       	ldi	r20, 0x80	; 128
     d5e:	5f e3       	ldi	r21, 0x3F	; 63
     d60:	fc 01       	movw	r30, r24
     d62:	60 81       	ld	r22, Z
     d64:	71 81       	ldd	r23, Z+1	; 0x01
     d66:	82 81       	ldd	r24, Z+2	; 0x02
     d68:	93 81       	ldd	r25, Z+3	; 0x03
     d6a:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__cmpsf2>
     d6e:	88 23       	and	r24, r24
     d70:	3c f4       	brge	.+14     	; 0xd80 <LCD_displayCharacter+0xc4>
		__ticks = 1;
     d72:	ce 01       	movw	r24, r28
     d74:	89 5a       	subi	r24, 0xA9	; 169
     d76:	9f 4f       	sbci	r25, 0xFF	; 255
     d78:	21 e0       	ldi	r18, 0x01	; 1
     d7a:	fc 01       	movw	r30, r24
     d7c:	20 83       	st	Z, r18
     d7e:	2c c1       	rjmp	.+600    	; 0xfd8 <LCD_displayCharacter+0x31c>
	else if (__tmp2 > 65535)
     d80:	ce 01       	movw	r24, r28
     d82:	8d 5a       	subi	r24, 0xAD	; 173
     d84:	9f 4f       	sbci	r25, 0xFF	; 255
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	3f ef       	ldi	r19, 0xFF	; 255
     d8a:	4f e7       	ldi	r20, 0x7F	; 127
     d8c:	57 e4       	ldi	r21, 0x47	; 71
     d8e:	fc 01       	movw	r30, r24
     d90:	60 81       	ld	r22, Z
     d92:	71 81       	ldd	r23, Z+1	; 0x01
     d94:	82 81       	ldd	r24, Z+2	; 0x02
     d96:	93 81       	ldd	r25, Z+3	; 0x03
     d98:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
     d9c:	18 16       	cp	r1, r24
     d9e:	0c f0       	brlt	.+2      	; 0xda2 <LCD_displayCharacter+0xe6>
     da0:	cd c0       	rjmp	.+410    	; 0xf3c <LCD_displayCharacter+0x280>
	{
		_delay_ms(__us / 1000.0);
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	4a e7       	ldi	r20, 0x7A	; 122
     da8:	54 e4       	ldi	r21, 0x44	; 68
     daa:	69 81       	ldd	r22, Y+1	; 0x01
     dac:	7a 81       	ldd	r23, Y+2	; 0x02
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	9c 81       	ldd	r25, Y+4	; 0x04
     db2:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__divsf3>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	9e 01       	movw	r18, r28
     dbc:	28 5a       	subi	r18, 0xA8	; 168
     dbe:	3f 4f       	sbci	r19, 0xFF	; 255
     dc0:	f9 01       	movw	r30, r18
     dc2:	80 83       	st	Z, r24
     dc4:	91 83       	std	Z+1, r25	; 0x01
     dc6:	a2 83       	std	Z+2, r26	; 0x02
     dc8:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     dca:	8e 01       	movw	r16, r28
     dcc:	04 5a       	subi	r16, 0xA4	; 164
     dce:	1f 4f       	sbci	r17, 0xFF	; 255
     dd0:	ce 01       	movw	r24, r28
     dd2:	88 5a       	subi	r24, 0xA8	; 168
     dd4:	9f 4f       	sbci	r25, 0xFF	; 255
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	4a ef       	ldi	r20, 0xFA	; 250
     ddc:	54 e4       	ldi	r21, 0x44	; 68
     dde:	fc 01       	movw	r30, r24
     de0:	60 81       	ld	r22, Z
     de2:	71 81       	ldd	r23, Z+1	; 0x01
     de4:	82 81       	ldd	r24, Z+2	; 0x02
     de6:	93 81       	ldd	r25, Z+3	; 0x03
     de8:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	f8 01       	movw	r30, r16
     df2:	80 83       	st	Z, r24
     df4:	91 83       	std	Z+1, r25	; 0x01
     df6:	a2 83       	std	Z+2, r26	; 0x02
     df8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dfa:	ce 01       	movw	r24, r28
     dfc:	84 5a       	subi	r24, 0xA4	; 164
     dfe:	9f 4f       	sbci	r25, 0xFF	; 255
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e8       	ldi	r20, 0x80	; 128
     e06:	5f e3       	ldi	r21, 0x3F	; 63
     e08:	fc 01       	movw	r30, r24
     e0a:	60 81       	ld	r22, Z
     e0c:	71 81       	ldd	r23, Z+1	; 0x01
     e0e:	82 81       	ldd	r24, Z+2	; 0x02
     e10:	93 81       	ldd	r25, Z+3	; 0x03
     e12:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__cmpsf2>
     e16:	88 23       	and	r24, r24
     e18:	4c f4       	brge	.+18     	; 0xe2c <LCD_displayCharacter+0x170>
		__ticks = 1;
     e1a:	ce 01       	movw	r24, r28
     e1c:	80 5a       	subi	r24, 0xA0	; 160
     e1e:	9f 4f       	sbci	r25, 0xFF	; 255
     e20:	21 e0       	ldi	r18, 0x01	; 1
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	fc 01       	movw	r30, r24
     e26:	31 83       	std	Z+1, r19	; 0x01
     e28:	20 83       	st	Z, r18
     e2a:	6d c0       	rjmp	.+218    	; 0xf06 <LCD_displayCharacter+0x24a>
	else if (__tmp > 65535)
     e2c:	ce 01       	movw	r24, r28
     e2e:	84 5a       	subi	r24, 0xA4	; 164
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	3f ef       	ldi	r19, 0xFF	; 255
     e36:	4f e7       	ldi	r20, 0x7F	; 127
     e38:	57 e4       	ldi	r21, 0x47	; 71
     e3a:	fc 01       	movw	r30, r24
     e3c:	60 81       	ld	r22, Z
     e3e:	71 81       	ldd	r23, Z+1	; 0x01
     e40:	82 81       	ldd	r24, Z+2	; 0x02
     e42:	93 81       	ldd	r25, Z+3	; 0x03
     e44:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
     e48:	18 16       	cp	r1, r24
     e4a:	0c f0       	brlt	.+2      	; 0xe4e <LCD_displayCharacter+0x192>
     e4c:	4a c0       	rjmp	.+148    	; 0xee2 <LCD_displayCharacter+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e4e:	ce 01       	movw	r24, r28
     e50:	88 5a       	subi	r24, 0xA8	; 168
     e52:	9f 4f       	sbci	r25, 0xFF	; 255
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e2       	ldi	r20, 0x20	; 32
     e5a:	51 e4       	ldi	r21, 0x41	; 65
     e5c:	fc 01       	movw	r30, r24
     e5e:	60 81       	ld	r22, Z
     e60:	71 81       	ldd	r23, Z+1	; 0x01
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	8e 01       	movw	r16, r28
     e70:	00 5a       	subi	r16, 0xA0	; 160
     e72:	1f 4f       	sbci	r17, 0xFF	; 255
     e74:	bc 01       	movw	r22, r24
     e76:	cd 01       	movw	r24, r26
     e78:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	f8 01       	movw	r30, r16
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	80 83       	st	Z, r24
     e86:	24 c0       	rjmp	.+72     	; 0xed0 <LCD_displayCharacter+0x214>
     e88:	ce 01       	movw	r24, r28
     e8a:	8e 59       	subi	r24, 0x9E	; 158
     e8c:	9f 4f       	sbci	r25, 0xFF	; 255
     e8e:	28 ec       	ldi	r18, 0xC8	; 200
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	fc 01       	movw	r30, r24
     e94:	31 83       	std	Z+1, r19	; 0x01
     e96:	20 83       	st	Z, r18
     e98:	ce 01       	movw	r24, r28
     e9a:	8e 59       	subi	r24, 0x9E	; 158
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	fc 01       	movw	r30, r24
     ea0:	80 81       	ld	r24, Z
     ea2:	91 81       	ldd	r25, Z+1	; 0x01
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <LCD_displayCharacter+0x1e8>
     ea8:	9e 01       	movw	r18, r28
     eaa:	2e 59       	subi	r18, 0x9E	; 158
     eac:	3f 4f       	sbci	r19, 0xFF	; 255
     eae:	f9 01       	movw	r30, r18
     eb0:	91 83       	std	Z+1, r25	; 0x01
     eb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb4:	ce 01       	movw	r24, r28
     eb6:	80 5a       	subi	r24, 0xA0	; 160
     eb8:	9f 4f       	sbci	r25, 0xFF	; 255
     eba:	9e 01       	movw	r18, r28
     ebc:	20 5a       	subi	r18, 0xA0	; 160
     ebe:	3f 4f       	sbci	r19, 0xFF	; 255
     ec0:	f9 01       	movw	r30, r18
     ec2:	20 81       	ld	r18, Z
     ec4:	31 81       	ldd	r19, Z+1	; 0x01
     ec6:	21 50       	subi	r18, 0x01	; 1
     ec8:	31 09       	sbc	r19, r1
     eca:	fc 01       	movw	r30, r24
     ecc:	31 83       	std	Z+1, r19	; 0x01
     ece:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed0:	ce 01       	movw	r24, r28
     ed2:	80 5a       	subi	r24, 0xA0	; 160
     ed4:	9f 4f       	sbci	r25, 0xFF	; 255
     ed6:	fc 01       	movw	r30, r24
     ed8:	80 81       	ld	r24, Z
     eda:	91 81       	ldd	r25, Z+1	; 0x01
     edc:	89 2b       	or	r24, r25
     ede:	a1 f6       	brne	.-88     	; 0xe88 <LCD_displayCharacter+0x1cc>
     ee0:	7b c0       	rjmp	.+246    	; 0xfd8 <LCD_displayCharacter+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee2:	8e 01       	movw	r16, r28
     ee4:	00 5a       	subi	r16, 0xA0	; 160
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
     ee8:	ce 01       	movw	r24, r28
     eea:	84 5a       	subi	r24, 0xA4	; 164
     eec:	9f 4f       	sbci	r25, 0xFF	; 255
     eee:	fc 01       	movw	r30, r24
     ef0:	60 81       	ld	r22, Z
     ef2:	71 81       	ldd	r23, Z+1	; 0x01
     ef4:	82 81       	ldd	r24, Z+2	; 0x02
     ef6:	93 81       	ldd	r25, Z+3	; 0x03
     ef8:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	f8 01       	movw	r30, r16
     f02:	91 83       	std	Z+1, r25	; 0x01
     f04:	80 83       	st	Z, r24
     f06:	ce 01       	movw	r24, r28
     f08:	8c 59       	subi	r24, 0x9C	; 156
     f0a:	9f 4f       	sbci	r25, 0xFF	; 255
     f0c:	9e 01       	movw	r18, r28
     f0e:	20 5a       	subi	r18, 0xA0	; 160
     f10:	3f 4f       	sbci	r19, 0xFF	; 255
     f12:	f9 01       	movw	r30, r18
     f14:	20 81       	ld	r18, Z
     f16:	31 81       	ldd	r19, Z+1	; 0x01
     f18:	fc 01       	movw	r30, r24
     f1a:	31 83       	std	Z+1, r19	; 0x01
     f1c:	20 83       	st	Z, r18
     f1e:	ce 01       	movw	r24, r28
     f20:	8c 59       	subi	r24, 0x9C	; 156
     f22:	9f 4f       	sbci	r25, 0xFF	; 255
     f24:	fc 01       	movw	r30, r24
     f26:	80 81       	ld	r24, Z
     f28:	91 81       	ldd	r25, Z+1	; 0x01
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <LCD_displayCharacter+0x26e>
     f2e:	9e 01       	movw	r18, r28
     f30:	2c 59       	subi	r18, 0x9C	; 156
     f32:	3f 4f       	sbci	r19, 0xFF	; 255
     f34:	f9 01       	movw	r30, r18
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	80 83       	st	Z, r24
     f3a:	4e c0       	rjmp	.+156    	; 0xfd8 <LCD_displayCharacter+0x31c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     f3c:	ce 01       	movw	r24, r28
     f3e:	81 5b       	subi	r24, 0xB1	; 177
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	4f e7       	ldi	r20, 0x7F	; 127
     f48:	53 e4       	ldi	r21, 0x43	; 67
     f4a:	fc 01       	movw	r30, r24
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
     f54:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
     f58:	18 16       	cp	r1, r24
     f5a:	6c f5       	brge	.+90     	; 0xfb6 <LCD_displayCharacter+0x2fa>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     f5c:	8e 01       	movw	r16, r28
     f5e:	0a 59       	subi	r16, 0x9A	; 154
     f60:	1f 4f       	sbci	r17, 0xFF	; 255
     f62:	ce 01       	movw	r24, r28
     f64:	8d 5a       	subi	r24, 0xAD	; 173
     f66:	9f 4f       	sbci	r25, 0xFF	; 255
     f68:	fc 01       	movw	r30, r24
     f6a:	60 81       	ld	r22, Z
     f6c:	71 81       	ldd	r23, Z+1	; 0x01
     f6e:	82 81       	ldd	r24, Z+2	; 0x02
     f70:	93 81       	ldd	r25, Z+3	; 0x03
     f72:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	f8 01       	movw	r30, r16
     f7c:	91 83       	std	Z+1, r25	; 0x01
     f7e:	80 83       	st	Z, r24
     f80:	ce 01       	movw	r24, r28
     f82:	88 59       	subi	r24, 0x98	; 152
     f84:	9f 4f       	sbci	r25, 0xFF	; 255
     f86:	9e 01       	movw	r18, r28
     f88:	2a 59       	subi	r18, 0x9A	; 154
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	f9 01       	movw	r30, r18
     f8e:	20 81       	ld	r18, Z
     f90:	31 81       	ldd	r19, Z+1	; 0x01
     f92:	fc 01       	movw	r30, r24
     f94:	31 83       	std	Z+1, r19	; 0x01
     f96:	20 83       	st	Z, r18
     f98:	ce 01       	movw	r24, r28
     f9a:	88 59       	subi	r24, 0x98	; 152
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	fc 01       	movw	r30, r24
     fa0:	80 81       	ld	r24, Z
     fa2:	91 81       	ldd	r25, Z+1	; 0x01
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <LCD_displayCharacter+0x2e8>
     fa8:	9e 01       	movw	r18, r28
     faa:	28 59       	subi	r18, 0x98	; 152
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	f9 01       	movw	r30, r18
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
     fb4:	28 c0       	rjmp	.+80     	; 0x1006 <LCD_displayCharacter+0x34a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fb6:	8e 01       	movw	r16, r28
     fb8:	09 5a       	subi	r16, 0xA9	; 169
     fba:	1f 4f       	sbci	r17, 0xFF	; 255
     fbc:	ce 01       	movw	r24, r28
     fbe:	81 5b       	subi	r24, 0xB1	; 177
     fc0:	9f 4f       	sbci	r25, 0xFF	; 255
     fc2:	fc 01       	movw	r30, r24
     fc4:	60 81       	ld	r22, Z
     fc6:	71 81       	ldd	r23, Z+1	; 0x01
     fc8:	82 81       	ldd	r24, Z+2	; 0x02
     fca:	93 81       	ldd	r25, Z+3	; 0x03
     fcc:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	f8 01       	movw	r30, r16
     fd6:	80 83       	st	Z, r24
     fd8:	ce 01       	movw	r24, r28
     fda:	86 59       	subi	r24, 0x96	; 150
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	9e 01       	movw	r18, r28
     fe0:	29 5a       	subi	r18, 0xA9	; 169
     fe2:	3f 4f       	sbci	r19, 0xFF	; 255
     fe4:	f9 01       	movw	r30, r18
     fe6:	20 81       	ld	r18, Z
     fe8:	fc 01       	movw	r30, r24
     fea:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fec:	ce 01       	movw	r24, r28
     fee:	86 59       	subi	r24, 0x96	; 150
     ff0:	9f 4f       	sbci	r25, 0xFF	; 255
     ff2:	fc 01       	movw	r30, r24
     ff4:	80 81       	ld	r24, Z
     ff6:	28 2f       	mov	r18, r24
     ff8:	2a 95       	dec	r18
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <LCD_displayCharacter+0x33c>
     ffc:	ce 01       	movw	r24, r28
     ffe:	86 59       	subi	r24, 0x96	; 150
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	fc 01       	movw	r30, r24
    1004:	20 83       	st	Z, r18
	_delay_us(1);/*delay processing RS set time tas=40ns */
	CLEAR_BIT(LCD_CTRL_PORT,READWRITE); /*write data to LCD so READWRITE =0 */
    1006:	82 e3       	ldi	r24, 0x32	; 50
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	22 e3       	ldi	r18, 0x32	; 50
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	f9 01       	movw	r30, r18
    1010:	20 81       	ld	r18, Z
    1012:	2f 7d       	andi	r18, 0xDF	; 223
    1014:	fc 01       	movw	r30, r24
    1016:	20 83       	st	Z, r18
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a0 e8       	ldi	r26, 0x80	; 128
    101e:	bf e3       	ldi	r27, 0x3F	; 63
    1020:	8d 83       	std	Y+5, r24	; 0x05
    1022:	9e 83       	std	Y+6, r25	; 0x06
    1024:	af 83       	std	Y+7, r26	; 0x07
    1026:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1028:	2b ea       	ldi	r18, 0xAB	; 171
    102a:	3a ea       	ldi	r19, 0xAA	; 170
    102c:	4a e2       	ldi	r20, 0x2A	; 42
    102e:	50 e4       	ldi	r21, 0x40	; 64
    1030:	6d 81       	ldd	r22, Y+5	; 0x05
    1032:	7e 81       	ldd	r23, Y+6	; 0x06
    1034:	8f 81       	ldd	r24, Y+7	; 0x07
    1036:	98 85       	ldd	r25, Y+8	; 0x08
    1038:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	8b ab       	std	Y+51, r24	; 0x33
    1042:	9c ab       	std	Y+52, r25	; 0x34
    1044:	ad ab       	std	Y+53, r26	; 0x35
    1046:	be ab       	std	Y+54, r27	; 0x36
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	9e 81       	ldd	r25, Y+6	; 0x06
    104c:	af 81       	ldd	r26, Y+7	; 0x07
    104e:	b8 85       	ldd	r27, Y+8	; 0x08
    1050:	9c 01       	movw	r18, r24
    1052:	ad 01       	movw	r20, r26
    1054:	bc 01       	movw	r22, r24
    1056:	cd 01       	movw	r24, r26
    1058:	0e 94 8a 11 	call	0x2314	; 0x2314 <__addsf3>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	8f ab       	std	Y+55, r24	; 0x37
    1062:	98 af       	std	Y+56, r25	; 0x38
    1064:	a9 af       	std	Y+57, r26	; 0x39
    1066:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e8       	ldi	r20, 0x80	; 128
    106e:	5f e3       	ldi	r21, 0x3F	; 63
    1070:	6b a9       	ldd	r22, Y+51	; 0x33
    1072:	7c a9       	ldd	r23, Y+52	; 0x34
    1074:	8d a9       	ldd	r24, Y+53	; 0x35
    1076:	9e a9       	ldd	r25, Y+54	; 0x36
    1078:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__cmpsf2>
    107c:	88 23       	and	r24, r24
    107e:	1c f4       	brge	.+6      	; 0x1086 <LCD_displayCharacter+0x3ca>
		__ticks = 1;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	8b af       	std	Y+59, r24	; 0x3b
    1084:	0c c1       	rjmp	.+536    	; 0x129e <LCD_displayCharacter+0x5e2>
	else if (__tmp2 > 65535)
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	3f ef       	ldi	r19, 0xFF	; 255
    108a:	4f e7       	ldi	r20, 0x7F	; 127
    108c:	57 e4       	ldi	r21, 0x47	; 71
    108e:	6f a9       	ldd	r22, Y+55	; 0x37
    1090:	78 ad       	ldd	r23, Y+56	; 0x38
    1092:	89 ad       	ldd	r24, Y+57	; 0x39
    1094:	9a ad       	ldd	r25, Y+58	; 0x3a
    1096:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
    109a:	18 16       	cp	r1, r24
    109c:	0c f0       	brlt	.+2      	; 0x10a0 <LCD_displayCharacter+0x3e4>
    109e:	c1 c0       	rjmp	.+386    	; 0x1222 <LCD_displayCharacter+0x566>
	{
		_delay_ms(__us / 1000.0);
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	4a e7       	ldi	r20, 0x7A	; 122
    10a6:	54 e4       	ldi	r21, 0x44	; 68
    10a8:	6d 81       	ldd	r22, Y+5	; 0x05
    10aa:	7e 81       	ldd	r23, Y+6	; 0x06
    10ac:	8f 81       	ldd	r24, Y+7	; 0x07
    10ae:	98 85       	ldd	r25, Y+8	; 0x08
    10b0:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <__divsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	8c af       	std	Y+60, r24	; 0x3c
    10ba:	9d af       	std	Y+61, r25	; 0x3d
    10bc:	ae af       	std	Y+62, r26	; 0x3e
    10be:	bf af       	std	Y+63, r27	; 0x3f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    10c0:	8e 01       	movw	r16, r28
    10c2:	00 5c       	subi	r16, 0xC0	; 192
    10c4:	1f 4f       	sbci	r17, 0xFF	; 255
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	4a ef       	ldi	r20, 0xFA	; 250
    10cc:	54 e4       	ldi	r21, 0x44	; 68
    10ce:	6c ad       	ldd	r22, Y+60	; 0x3c
    10d0:	7d ad       	ldd	r23, Y+61	; 0x3d
    10d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    10d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    10d6:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	f8 01       	movw	r30, r16
    10e0:	80 83       	st	Z, r24
    10e2:	91 83       	std	Z+1, r25	; 0x01
    10e4:	a2 83       	std	Z+2, r26	; 0x02
    10e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10e8:	ce 01       	movw	r24, r28
    10ea:	80 5c       	subi	r24, 0xC0	; 192
    10ec:	9f 4f       	sbci	r25, 0xFF	; 255
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	40 e8       	ldi	r20, 0x80	; 128
    10f4:	5f e3       	ldi	r21, 0x3F	; 63
    10f6:	fc 01       	movw	r30, r24
    10f8:	60 81       	ld	r22, Z
    10fa:	71 81       	ldd	r23, Z+1	; 0x01
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	93 81       	ldd	r25, Z+3	; 0x03
    1100:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__cmpsf2>
    1104:	88 23       	and	r24, r24
    1106:	4c f4       	brge	.+18     	; 0x111a <LCD_displayCharacter+0x45e>
		__ticks = 1;
    1108:	ce 01       	movw	r24, r28
    110a:	8c 5b       	subi	r24, 0xBC	; 188
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	21 e0       	ldi	r18, 0x01	; 1
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	fc 01       	movw	r30, r24
    1114:	31 83       	std	Z+1, r19	; 0x01
    1116:	20 83       	st	Z, r18
    1118:	69 c0       	rjmp	.+210    	; 0x11ec <LCD_displayCharacter+0x530>
	else if (__tmp > 65535)
    111a:	ce 01       	movw	r24, r28
    111c:	80 5c       	subi	r24, 0xC0	; 192
    111e:	9f 4f       	sbci	r25, 0xFF	; 255
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	57 e4       	ldi	r21, 0x47	; 71
    1128:	fc 01       	movw	r30, r24
    112a:	60 81       	ld	r22, Z
    112c:	71 81       	ldd	r23, Z+1	; 0x01
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
    1136:	18 16       	cp	r1, r24
    1138:	0c f0       	brlt	.+2      	; 0x113c <LCD_displayCharacter+0x480>
    113a:	46 c0       	rjmp	.+140    	; 0x11c8 <LCD_displayCharacter+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e2       	ldi	r20, 0x20	; 32
    1142:	51 e4       	ldi	r21, 0x41	; 65
    1144:	6c ad       	ldd	r22, Y+60	; 0x3c
    1146:	7d ad       	ldd	r23, Y+61	; 0x3d
    1148:	8e ad       	ldd	r24, Y+62	; 0x3e
    114a:	9f ad       	ldd	r25, Y+63	; 0x3f
    114c:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	8e 01       	movw	r16, r28
    1156:	0c 5b       	subi	r16, 0xBC	; 188
    1158:	1f 4f       	sbci	r17, 0xFF	; 255
    115a:	bc 01       	movw	r22, r24
    115c:	cd 01       	movw	r24, r26
    115e:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	f8 01       	movw	r30, r16
    1168:	91 83       	std	Z+1, r25	; 0x01
    116a:	80 83       	st	Z, r24
    116c:	24 c0       	rjmp	.+72     	; 0x11b6 <LCD_displayCharacter+0x4fa>
    116e:	ce 01       	movw	r24, r28
    1170:	8a 5b       	subi	r24, 0xBA	; 186
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	28 ec       	ldi	r18, 0xC8	; 200
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	fc 01       	movw	r30, r24
    117a:	31 83       	std	Z+1, r19	; 0x01
    117c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    117e:	ce 01       	movw	r24, r28
    1180:	8a 5b       	subi	r24, 0xBA	; 186
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	fc 01       	movw	r30, r24
    1186:	80 81       	ld	r24, Z
    1188:	91 81       	ldd	r25, Z+1	; 0x01
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	f1 f7       	brne	.-4      	; 0x118a <LCD_displayCharacter+0x4ce>
    118e:	9e 01       	movw	r18, r28
    1190:	2a 5b       	subi	r18, 0xBA	; 186
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	f9 01       	movw	r30, r18
    1196:	91 83       	std	Z+1, r25	; 0x01
    1198:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    119a:	ce 01       	movw	r24, r28
    119c:	8c 5b       	subi	r24, 0xBC	; 188
    119e:	9f 4f       	sbci	r25, 0xFF	; 255
    11a0:	9e 01       	movw	r18, r28
    11a2:	2c 5b       	subi	r18, 0xBC	; 188
    11a4:	3f 4f       	sbci	r19, 0xFF	; 255
    11a6:	f9 01       	movw	r30, r18
    11a8:	20 81       	ld	r18, Z
    11aa:	31 81       	ldd	r19, Z+1	; 0x01
    11ac:	21 50       	subi	r18, 0x01	; 1
    11ae:	31 09       	sbc	r19, r1
    11b0:	fc 01       	movw	r30, r24
    11b2:	31 83       	std	Z+1, r19	; 0x01
    11b4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b6:	ce 01       	movw	r24, r28
    11b8:	8c 5b       	subi	r24, 0xBC	; 188
    11ba:	9f 4f       	sbci	r25, 0xFF	; 255
    11bc:	fc 01       	movw	r30, r24
    11be:	80 81       	ld	r24, Z
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	89 2b       	or	r24, r25
    11c4:	a1 f6       	brne	.-88     	; 0x116e <LCD_displayCharacter+0x4b2>
    11c6:	6b c0       	rjmp	.+214    	; 0x129e <LCD_displayCharacter+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c8:	8e 01       	movw	r16, r28
    11ca:	0c 5b       	subi	r16, 0xBC	; 188
    11cc:	1f 4f       	sbci	r17, 0xFF	; 255
    11ce:	ce 01       	movw	r24, r28
    11d0:	80 5c       	subi	r24, 0xC0	; 192
    11d2:	9f 4f       	sbci	r25, 0xFF	; 255
    11d4:	fc 01       	movw	r30, r24
    11d6:	60 81       	ld	r22, Z
    11d8:	71 81       	ldd	r23, Z+1	; 0x01
    11da:	82 81       	ldd	r24, Z+2	; 0x02
    11dc:	93 81       	ldd	r25, Z+3	; 0x03
    11de:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	f8 01       	movw	r30, r16
    11e8:	91 83       	std	Z+1, r25	; 0x01
    11ea:	80 83       	st	Z, r24
    11ec:	ce 01       	movw	r24, r28
    11ee:	88 5b       	subi	r24, 0xB8	; 184
    11f0:	9f 4f       	sbci	r25, 0xFF	; 255
    11f2:	9e 01       	movw	r18, r28
    11f4:	2c 5b       	subi	r18, 0xBC	; 188
    11f6:	3f 4f       	sbci	r19, 0xFF	; 255
    11f8:	f9 01       	movw	r30, r18
    11fa:	20 81       	ld	r18, Z
    11fc:	31 81       	ldd	r19, Z+1	; 0x01
    11fe:	fc 01       	movw	r30, r24
    1200:	31 83       	std	Z+1, r19	; 0x01
    1202:	20 83       	st	Z, r18
    1204:	ce 01       	movw	r24, r28
    1206:	88 5b       	subi	r24, 0xB8	; 184
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	fc 01       	movw	r30, r24
    120c:	80 81       	ld	r24, Z
    120e:	91 81       	ldd	r25, Z+1	; 0x01
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	f1 f7       	brne	.-4      	; 0x1210 <LCD_displayCharacter+0x554>
    1214:	9e 01       	movw	r18, r28
    1216:	28 5b       	subi	r18, 0xB8	; 184
    1218:	3f 4f       	sbci	r19, 0xFF	; 255
    121a:	f9 01       	movw	r30, r18
    121c:	91 83       	std	Z+1, r25	; 0x01
    121e:	80 83       	st	Z, r24
    1220:	3e c0       	rjmp	.+124    	; 0x129e <LCD_displayCharacter+0x5e2>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	4f e7       	ldi	r20, 0x7F	; 127
    1228:	53 e4       	ldi	r21, 0x43	; 67
    122a:	6b a9       	ldd	r22, Y+51	; 0x33
    122c:	7c a9       	ldd	r23, Y+52	; 0x34
    122e:	8d a9       	ldd	r24, Y+53	; 0x35
    1230:	9e a9       	ldd	r25, Y+54	; 0x36
    1232:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
    1236:	18 16       	cp	r1, r24
    1238:	4c f5       	brge	.+82     	; 0x128c <LCD_displayCharacter+0x5d0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    123a:	8e 01       	movw	r16, r28
    123c:	06 5b       	subi	r16, 0xB6	; 182
    123e:	1f 4f       	sbci	r17, 0xFF	; 255
    1240:	6f a9       	ldd	r22, Y+55	; 0x37
    1242:	78 ad       	ldd	r23, Y+56	; 0x38
    1244:	89 ad       	ldd	r24, Y+57	; 0x39
    1246:	9a ad       	ldd	r25, Y+58	; 0x3a
    1248:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	f8 01       	movw	r30, r16
    1252:	91 83       	std	Z+1, r25	; 0x01
    1254:	80 83       	st	Z, r24
    1256:	ce 01       	movw	r24, r28
    1258:	84 5b       	subi	r24, 0xB4	; 180
    125a:	9f 4f       	sbci	r25, 0xFF	; 255
    125c:	9e 01       	movw	r18, r28
    125e:	26 5b       	subi	r18, 0xB6	; 182
    1260:	3f 4f       	sbci	r19, 0xFF	; 255
    1262:	f9 01       	movw	r30, r18
    1264:	20 81       	ld	r18, Z
    1266:	31 81       	ldd	r19, Z+1	; 0x01
    1268:	fc 01       	movw	r30, r24
    126a:	31 83       	std	Z+1, r19	; 0x01
    126c:	20 83       	st	Z, r18
    126e:	ce 01       	movw	r24, r28
    1270:	84 5b       	subi	r24, 0xB4	; 180
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	fc 01       	movw	r30, r24
    1276:	80 81       	ld	r24, Z
    1278:	91 81       	ldd	r25, Z+1	; 0x01
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	f1 f7       	brne	.-4      	; 0x127a <LCD_displayCharacter+0x5be>
    127e:	9e 01       	movw	r18, r28
    1280:	24 5b       	subi	r18, 0xB4	; 180
    1282:	3f 4f       	sbci	r19, 0xFF	; 255
    1284:	f9 01       	movw	r30, r18
    1286:	91 83       	std	Z+1, r25	; 0x01
    1288:	80 83       	st	Z, r24
    128a:	1c c0       	rjmp	.+56     	; 0x12c4 <LCD_displayCharacter+0x608>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    128c:	6b a9       	ldd	r22, Y+51	; 0x33
    128e:	7c a9       	ldd	r23, Y+52	; 0x34
    1290:	8d a9       	ldd	r24, Y+53	; 0x35
    1292:	9e a9       	ldd	r25, Y+54	; 0x36
    1294:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	8b af       	std	Y+59, r24	; 0x3b
    129e:	ce 01       	movw	r24, r28
    12a0:	82 5b       	subi	r24, 0xB2	; 178
    12a2:	9f 4f       	sbci	r25, 0xFF	; 255
    12a4:	2b ad       	ldd	r18, Y+59	; 0x3b
    12a6:	fc 01       	movw	r30, r24
    12a8:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12aa:	ce 01       	movw	r24, r28
    12ac:	82 5b       	subi	r24, 0xB2	; 178
    12ae:	9f 4f       	sbci	r25, 0xFF	; 255
    12b0:	fc 01       	movw	r30, r24
    12b2:	80 81       	ld	r24, Z
    12b4:	28 2f       	mov	r18, r24
    12b6:	2a 95       	dec	r18
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <LCD_displayCharacter+0x5fa>
    12ba:	ce 01       	movw	r24, r28
    12bc:	82 5b       	subi	r24, 0xB2	; 178
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	fc 01       	movw	r30, r24
    12c2:	20 83       	st	Z, r18
	_delay_us(1);/* delay processing R/W set time tas =40ns */
	SET_BIT(LCD_CTRL_PORT,LCD_ENABLE); /* enable LCD so enable =1 */
    12c4:	82 e3       	ldi	r24, 0x32	; 50
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	22 e3       	ldi	r18, 0x32	; 50
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	f9 01       	movw	r30, r18
    12ce:	20 81       	ld	r18, Z
    12d0:	20 64       	ori	r18, 0x40	; 64
    12d2:	fc 01       	movw	r30, r24
    12d4:	20 83       	st	Z, r18
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	a0 e8       	ldi	r26, 0x80	; 128
    12dc:	bf e3       	ldi	r27, 0x3F	; 63
    12de:	89 87       	std	Y+9, r24	; 0x09
    12e0:	9a 87       	std	Y+10, r25	; 0x0a
    12e2:	ab 87       	std	Y+11, r26	; 0x0b
    12e4:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	4a ef       	ldi	r20, 0xFA	; 250
    12ec:	54 e4       	ldi	r21, 0x44	; 68
    12ee:	69 85       	ldd	r22, Y+9	; 0x09
    12f0:	7a 85       	ldd	r23, Y+10	; 0x0a
    12f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12f6:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	89 a7       	std	Y+41, r24	; 0x29
    1300:	9a a7       	std	Y+42, r25	; 0x2a
    1302:	ab a7       	std	Y+43, r26	; 0x2b
    1304:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e8       	ldi	r20, 0x80	; 128
    130c:	5f e3       	ldi	r21, 0x3F	; 63
    130e:	69 a5       	ldd	r22, Y+41	; 0x29
    1310:	7a a5       	ldd	r23, Y+42	; 0x2a
    1312:	8b a5       	ldd	r24, Y+43	; 0x2b
    1314:	9c a5       	ldd	r25, Y+44	; 0x2c
    1316:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__cmpsf2>
    131a:	88 23       	and	r24, r24
    131c:	2c f4       	brge	.+10     	; 0x1328 <LCD_displayCharacter+0x66c>
		__ticks = 1;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	9e a7       	std	Y+46, r25	; 0x2e
    1324:	8d a7       	std	Y+45, r24	; 0x2d
    1326:	3f c0       	rjmp	.+126    	; 0x13a6 <LCD_displayCharacter+0x6ea>
	else if (__tmp > 65535)
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	3f ef       	ldi	r19, 0xFF	; 255
    132c:	4f e7       	ldi	r20, 0x7F	; 127
    132e:	57 e4       	ldi	r21, 0x47	; 71
    1330:	69 a5       	ldd	r22, Y+41	; 0x29
    1332:	7a a5       	ldd	r23, Y+42	; 0x2a
    1334:	8b a5       	ldd	r24, Y+43	; 0x2b
    1336:	9c a5       	ldd	r25, Y+44	; 0x2c
    1338:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
    133c:	18 16       	cp	r1, r24
    133e:	4c f5       	brge	.+82     	; 0x1392 <LCD_displayCharacter+0x6d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e2       	ldi	r20, 0x20	; 32
    1346:	51 e4       	ldi	r21, 0x41	; 65
    1348:	69 85       	ldd	r22, Y+9	; 0x09
    134a:	7a 85       	ldd	r23, Y+10	; 0x0a
    134c:	8b 85       	ldd	r24, Y+11	; 0x0b
    134e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1350:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	bc 01       	movw	r22, r24
    135a:	cd 01       	movw	r24, r26
    135c:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	9e a7       	std	Y+46, r25	; 0x2e
    1366:	8d a7       	std	Y+45, r24	; 0x2d
    1368:	0f c0       	rjmp	.+30     	; 0x1388 <LCD_displayCharacter+0x6cc>
    136a:	88 ec       	ldi	r24, 0xC8	; 200
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	98 ab       	std	Y+48, r25	; 0x30
    1370:	8f a7       	std	Y+47, r24	; 0x2f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1372:	8f a5       	ldd	r24, Y+47	; 0x2f
    1374:	98 a9       	ldd	r25, Y+48	; 0x30
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <LCD_displayCharacter+0x6ba>
    137a:	98 ab       	std	Y+48, r25	; 0x30
    137c:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1380:	9e a5       	ldd	r25, Y+46	; 0x2e
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	9e a7       	std	Y+46, r25	; 0x2e
    1386:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1388:	8d a5       	ldd	r24, Y+45	; 0x2d
    138a:	9e a5       	ldd	r25, Y+46	; 0x2e
    138c:	89 2b       	or	r24, r25
    138e:	69 f7       	brne	.-38     	; 0x136a <LCD_displayCharacter+0x6ae>
    1390:	14 c0       	rjmp	.+40     	; 0x13ba <LCD_displayCharacter+0x6fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1392:	69 a5       	ldd	r22, Y+41	; 0x29
    1394:	7a a5       	ldd	r23, Y+42	; 0x2a
    1396:	8b a5       	ldd	r24, Y+43	; 0x2b
    1398:	9c a5       	ldd	r25, Y+44	; 0x2c
    139a:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	9e a7       	std	Y+46, r25	; 0x2e
    13a4:	8d a7       	std	Y+45, r24	; 0x2d
    13a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    13a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    13aa:	9a ab       	std	Y+50, r25	; 0x32
    13ac:	89 ab       	std	Y+49, r24	; 0x31
    13ae:	89 a9       	ldd	r24, Y+49	; 0x31
    13b0:	9a a9       	ldd	r25, Y+50	; 0x32
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <LCD_displayCharacter+0x6f6>
    13b6:	9a ab       	std	Y+50, r25	; 0x32
    13b8:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1); /*delay for processing Tpw - Tdws = 190ns*/
	PORTC=data; /* out the required data to output data bus D0-->D7 */
    13ba:	85 e3       	ldi	r24, 0x35	; 53
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	9e 01       	movw	r18, r28
    13c0:	25 59       	subi	r18, 0x95	; 149
    13c2:	3f 4f       	sbci	r19, 0xFF	; 255
    13c4:	f9 01       	movw	r30, r18
    13c6:	20 81       	ld	r18, Z
    13c8:	fc 01       	movw	r30, r24
    13ca:	20 83       	st	Z, r18
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	a0 e8       	ldi	r26, 0x80	; 128
    13d2:	bf e3       	ldi	r27, 0x3F	; 63
    13d4:	8d 87       	std	Y+13, r24	; 0x0d
    13d6:	9e 87       	std	Y+14, r25	; 0x0e
    13d8:	af 87       	std	Y+15, r26	; 0x0f
    13da:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	4a ef       	ldi	r20, 0xFA	; 250
    13e2:	54 e4       	ldi	r21, 0x44	; 68
    13e4:	6d 85       	ldd	r22, Y+13	; 0x0d
    13e6:	7e 85       	ldd	r23, Y+14	; 0x0e
    13e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ea:	98 89       	ldd	r25, Y+16	; 0x10
    13ec:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	8f 8f       	std	Y+31, r24	; 0x1f
    13f6:	98 a3       	std	Y+32, r25	; 0x20
    13f8:	a9 a3       	std	Y+33, r26	; 0x21
    13fa:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e8       	ldi	r20, 0x80	; 128
    1402:	5f e3       	ldi	r21, 0x3F	; 63
    1404:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1406:	78 a1       	ldd	r23, Y+32	; 0x20
    1408:	89 a1       	ldd	r24, Y+33	; 0x21
    140a:	9a a1       	ldd	r25, Y+34	; 0x22
    140c:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__cmpsf2>
    1410:	88 23       	and	r24, r24
    1412:	2c f4       	brge	.+10     	; 0x141e <LCD_displayCharacter+0x762>
		__ticks = 1;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	9c a3       	std	Y+36, r25	; 0x24
    141a:	8b a3       	std	Y+35, r24	; 0x23
    141c:	3f c0       	rjmp	.+126    	; 0x149c <LCD_displayCharacter+0x7e0>
	else if (__tmp > 65535)
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	3f ef       	ldi	r19, 0xFF	; 255
    1422:	4f e7       	ldi	r20, 0x7F	; 127
    1424:	57 e4       	ldi	r21, 0x47	; 71
    1426:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1428:	78 a1       	ldd	r23, Y+32	; 0x20
    142a:	89 a1       	ldd	r24, Y+33	; 0x21
    142c:	9a a1       	ldd	r25, Y+34	; 0x22
    142e:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
    1432:	18 16       	cp	r1, r24
    1434:	4c f5       	brge	.+82     	; 0x1488 <LCD_displayCharacter+0x7cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e2       	ldi	r20, 0x20	; 32
    143c:	51 e4       	ldi	r21, 0x41	; 65
    143e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1440:	7e 85       	ldd	r23, Y+14	; 0x0e
    1442:	8f 85       	ldd	r24, Y+15	; 0x0f
    1444:	98 89       	ldd	r25, Y+16	; 0x10
    1446:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	bc 01       	movw	r22, r24
    1450:	cd 01       	movw	r24, r26
    1452:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	9c a3       	std	Y+36, r25	; 0x24
    145c:	8b a3       	std	Y+35, r24	; 0x23
    145e:	0f c0       	rjmp	.+30     	; 0x147e <LCD_displayCharacter+0x7c2>
    1460:	88 ec       	ldi	r24, 0xC8	; 200
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	9e a3       	std	Y+38, r25	; 0x26
    1466:	8d a3       	std	Y+37, r24	; 0x25
    1468:	8d a1       	ldd	r24, Y+37	; 0x25
    146a:	9e a1       	ldd	r25, Y+38	; 0x26
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <LCD_displayCharacter+0x7b0>
    1470:	9e a3       	std	Y+38, r25	; 0x26
    1472:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1474:	8b a1       	ldd	r24, Y+35	; 0x23
    1476:	9c a1       	ldd	r25, Y+36	; 0x24
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	9c a3       	std	Y+36, r25	; 0x24
    147c:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147e:	8b a1       	ldd	r24, Y+35	; 0x23
    1480:	9c a1       	ldd	r25, Y+36	; 0x24
    1482:	89 2b       	or	r24, r25
    1484:	69 f7       	brne	.-38     	; 0x1460 <LCD_displayCharacter+0x7a4>
    1486:	14 c0       	rjmp	.+40     	; 0x14b0 <LCD_displayCharacter+0x7f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1488:	6f 8d       	ldd	r22, Y+31	; 0x1f
    148a:	78 a1       	ldd	r23, Y+32	; 0x20
    148c:	89 a1       	ldd	r24, Y+33	; 0x21
    148e:	9a a1       	ldd	r25, Y+34	; 0x22
    1490:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	9c a3       	std	Y+36, r25	; 0x24
    149a:	8b a3       	std	Y+35, r24	; 0x23
    149c:	8b a1       	ldd	r24, Y+35	; 0x23
    149e:	9c a1       	ldd	r25, Y+36	; 0x24
    14a0:	98 a7       	std	Y+40, r25	; 0x28
    14a2:	8f a3       	std	Y+39, r24	; 0x27
    14a4:	8f a1       	ldd	r24, Y+39	; 0x27
    14a6:	98 a5       	ldd	r25, Y+40	; 0x28
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <LCD_displayCharacter+0x7ec>
    14ac:	98 a7       	std	Y+40, r25	; 0x28
    14ae:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(1);/* delay processing command setup time tdsw=60ns */
	CLEAR_BIT(LCD_CTRL_PORT,6); /* disable LCD so enable pin =0*/
    14b0:	82 e3       	ldi	r24, 0x32	; 50
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	22 e3       	ldi	r18, 0x32	; 50
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	f9 01       	movw	r30, r18
    14ba:	20 81       	ld	r18, Z
    14bc:	2f 7b       	andi	r18, 0xBF	; 191
    14be:	fc 01       	movw	r30, r24
    14c0:	20 83       	st	Z, r18
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a0 e8       	ldi	r26, 0x80	; 128
    14c8:	bf e3       	ldi	r27, 0x3F	; 63
    14ca:	89 8b       	std	Y+17, r24	; 0x11
    14cc:	9a 8b       	std	Y+18, r25	; 0x12
    14ce:	ab 8b       	std	Y+19, r26	; 0x13
    14d0:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	4a ef       	ldi	r20, 0xFA	; 250
    14d8:	54 e4       	ldi	r21, 0x44	; 68
    14da:	69 89       	ldd	r22, Y+17	; 0x11
    14dc:	7a 89       	ldd	r23, Y+18	; 0x12
    14de:	8b 89       	ldd	r24, Y+19	; 0x13
    14e0:	9c 89       	ldd	r25, Y+20	; 0x14
    14e2:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	8d 8b       	std	Y+21, r24	; 0x15
    14ec:	9e 8b       	std	Y+22, r25	; 0x16
    14ee:	af 8b       	std	Y+23, r26	; 0x17
    14f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e8       	ldi	r20, 0x80	; 128
    14f8:	5f e3       	ldi	r21, 0x3F	; 63
    14fa:	6d 89       	ldd	r22, Y+21	; 0x15
    14fc:	7e 89       	ldd	r23, Y+22	; 0x16
    14fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1500:	98 8d       	ldd	r25, Y+24	; 0x18
    1502:	0e 94 f6 11 	call	0x23ec	; 0x23ec <__cmpsf2>
    1506:	88 23       	and	r24, r24
    1508:	2c f4       	brge	.+10     	; 0x1514 <LCD_displayCharacter+0x858>
		__ticks = 1;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	9a 8f       	std	Y+26, r25	; 0x1a
    1510:	89 8f       	std	Y+25, r24	; 0x19
    1512:	3f c0       	rjmp	.+126    	; 0x1592 <LCD_displayCharacter+0x8d6>
	else if (__tmp > 65535)
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	3f ef       	ldi	r19, 0xFF	; 255
    1518:	4f e7       	ldi	r20, 0x7F	; 127
    151a:	57 e4       	ldi	r21, 0x47	; 71
    151c:	6d 89       	ldd	r22, Y+21	; 0x15
    151e:	7e 89       	ldd	r23, Y+22	; 0x16
    1520:	8f 89       	ldd	r24, Y+23	; 0x17
    1522:	98 8d       	ldd	r25, Y+24	; 0x18
    1524:	0e 94 11 13 	call	0x2622	; 0x2622 <__gesf2>
    1528:	18 16       	cp	r1, r24
    152a:	4c f5       	brge	.+82     	; 0x157e <LCD_displayCharacter+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e2       	ldi	r20, 0x20	; 32
    1532:	51 e4       	ldi	r21, 0x41	; 65
    1534:	69 89       	ldd	r22, Y+17	; 0x11
    1536:	7a 89       	ldd	r23, Y+18	; 0x12
    1538:	8b 89       	ldd	r24, Y+19	; 0x13
    153a:	9c 89       	ldd	r25, Y+20	; 0x14
    153c:	0e 94 16 13 	call	0x262c	; 0x262c <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	9a 8f       	std	Y+26, r25	; 0x1a
    1552:	89 8f       	std	Y+25, r24	; 0x19
    1554:	0f c0       	rjmp	.+30     	; 0x1574 <LCD_displayCharacter+0x8b8>
    1556:	88 ec       	ldi	r24, 0xC8	; 200
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9c 8f       	std	Y+28, r25	; 0x1c
    155c:	8b 8f       	std	Y+27, r24	; 0x1b
    155e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1560:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <LCD_displayCharacter+0x8a6>
    1566:	9c 8f       	std	Y+28, r25	; 0x1c
    1568:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156a:	89 8d       	ldd	r24, Y+25	; 0x19
    156c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	9a 8f       	std	Y+26, r25	; 0x1a
    1572:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1574:	89 8d       	ldd	r24, Y+25	; 0x19
    1576:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1578:	89 2b       	or	r24, r25
    157a:	69 f7       	brne	.-38     	; 0x1556 <LCD_displayCharacter+0x89a>
	_delay_ms(1); /* delay for processing hold time th =10ns*/
}
    157c:	14 c0       	rjmp	.+40     	; 0x15a6 <LCD_displayCharacter+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157e:	6d 89       	ldd	r22, Y+21	; 0x15
    1580:	7e 89       	ldd	r23, Y+22	; 0x16
    1582:	8f 89       	ldd	r24, Y+23	; 0x17
    1584:	98 8d       	ldd	r25, Y+24	; 0x18
    1586:	0e 94 6d 12 	call	0x24da	; 0x24da <__fixunssfsi>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	9a 8f       	std	Y+26, r25	; 0x1a
    1590:	89 8f       	std	Y+25, r24	; 0x19
    1592:	89 8d       	ldd	r24, Y+25	; 0x19
    1594:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1596:	9e 8f       	std	Y+30, r25	; 0x1e
    1598:	8d 8f       	std	Y+29, r24	; 0x1d
    159a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    159c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <LCD_displayCharacter+0x8e2>
    15a2:	9e 8f       	std	Y+30, r25	; 0x1e
    15a4:	8d 8f       	std	Y+29, r24	; 0x1d
    15a6:	00 00       	nop
    15a8:	c5 59       	subi	r28, 0x95	; 149
    15aa:	df 4f       	sbci	r29, 0xFF	; 255
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	08 95       	ret

000015c0 <LCD_displayString>:
void LCD_displayString(uint8 *str)
{
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <LCD_displayString+0x6>
    15c6:	1f 92       	push	r1
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	9b 83       	std	Y+3, r25	; 0x03
    15ce:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0 ;str[i]!='\0';i++)
    15d0:	19 82       	std	Y+1, r1	; 0x01
    15d2:	0e c0       	rjmp	.+28     	; 0x15f0 <LCD_displayString+0x30>
	LCD_displayCharacter( str[i]);
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	2a 81       	ldd	r18, Y+2	; 0x02
    15dc:	3b 81       	ldd	r19, Y+3	; 0x03
    15de:	82 0f       	add	r24, r18
    15e0:	93 1f       	adc	r25, r19
    15e2:	fc 01       	movw	r30, r24
    15e4:	80 81       	ld	r24, Z
    15e6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <LCD_displayCharacter>
	CLEAR_BIT(LCD_CTRL_PORT,6); /* disable LCD so enable pin =0*/
	_delay_ms(1); /* delay for processing hold time th =10ns*/
}
void LCD_displayString(uint8 *str)
{
	for(uint8 i=0 ;str[i]!='\0';i++)
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	8f 5f       	subi	r24, 0xFF	; 255
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	88 2f       	mov	r24, r24
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	2a 81       	ldd	r18, Y+2	; 0x02
    15f8:	3b 81       	ldd	r19, Y+3	; 0x03
    15fa:	82 0f       	add	r24, r18
    15fc:	93 1f       	adc	r25, r19
    15fe:	fc 01       	movw	r30, r24
    1600:	80 81       	ld	r24, Z
    1602:	88 23       	and	r24, r24
    1604:	39 f7       	brne	.-50     	; 0x15d4 <LCD_displayString+0x14>
	LCD_displayCharacter( str[i]);
}
    1606:	00 00       	nop
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	08 95       	ret

00001614 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{	/* first of all calculate the required address */
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	00 d0       	rcall	.+0      	; 0x161a <LCD_goToRowColumn+0x6>
    161a:	1f 92       	push	r1
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	8a 83       	std	Y+2, r24	; 0x02
    1622:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	88 2f       	mov	r24, r24
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	91 05       	cpc	r25, r1
    162e:	79 f0       	breq	.+30     	; 0x164e <LCD_goToRowColumn+0x3a>
    1630:	82 30       	cpi	r24, 0x02	; 2
    1632:	91 05       	cpc	r25, r1
    1634:	1c f4       	brge	.+6      	; 0x163c <LCD_goToRowColumn+0x28>
    1636:	89 2b       	or	r24, r25
    1638:	39 f0       	breq	.+14     	; 0x1648 <LCD_goToRowColumn+0x34>
    163a:	15 c0       	rjmp	.+42     	; 0x1666 <LCD_goToRowColumn+0x52>
    163c:	82 30       	cpi	r24, 0x02	; 2
    163e:	91 05       	cpc	r25, r1
    1640:	51 f0       	breq	.+20     	; 0x1656 <LCD_goToRowColumn+0x42>
    1642:	03 97       	sbiw	r24, 0x03	; 3
    1644:	61 f0       	breq	.+24     	; 0x165e <LCD_goToRowColumn+0x4a>
    1646:	0f c0       	rjmp	.+30     	; 0x1666 <LCD_goToRowColumn+0x52>
	{
	case 0:
		address=col;
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	89 83       	std	Y+1, r24	; 0x01
		break;
    164c:	0c c0       	rjmp	.+24     	; 0x1666 <LCD_goToRowColumn+0x52>
	case 1:
		address=0x40+col;
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	80 5c       	subi	r24, 0xC0	; 192
    1652:	89 83       	std	Y+1, r24	; 0x01
		break;
    1654:	08 c0       	rjmp	.+16     	; 0x1666 <LCD_goToRowColumn+0x52>
	case 2:
		address=0x10+col;
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	80 5f       	subi	r24, 0xF0	; 240
    165a:	89 83       	std	Y+1, r24	; 0x01
		break;
    165c:	04 c0       	rjmp	.+8      	; 0x1666 <LCD_goToRowColumn+0x52>
	case 3:
		address=0x50+col;
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	80 5b       	subi	r24, 0xB0	; 176
    1662:	89 83       	std	Y+1, r24	; 0x01
		break;
    1664:	00 00       	nop
		}
	/* pass the specific address to the LCD
	 * to change the address you should add 0x80 to address
	 */
	LCD_sendCommand(address|0x80);
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	80 68       	ori	r24, 0x80	; 128
    166a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <LCD_sendCommand>
}
    166e:	00 00       	nop
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	08 95       	ret

0000167c <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row, uint8 col ,uint8 *str)
{
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	00 d0       	rcall	.+0      	; 0x1682 <LCD_displayStringRowColumn+0x6>
    1682:	00 d0       	rcall	.+0      	; 0x1684 <LCD_displayStringRowColumn+0x8>
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	6a 83       	std	Y+2, r22	; 0x02
    168c:	5c 83       	std	Y+4, r21	; 0x04
    168e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn( row, col);/* go to the required position*/
    1690:	6a 81       	ldd	r22, Y+2	; 0x02
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	0e 94 0a 0b 	call	0x1614	; 0x1614 <LCD_goToRowColumn>
	LCD_displayString(str);/* display the string*/
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_displayString>
}
    16a0:	00 00       	nop
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	08 95       	ret

000016b0 <LCD_clearScreen>:
void LCD_clearScreen()
{
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);/* clear display*/
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	0e 94 58 04 	call	0x8b0	; 0x8b0 <LCD_sendCommand>
}
    16be:	00 00       	nop
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	08 95       	ret

000016c6 <LCD_intgerToString>:
void LCD_intgerToString(int data)
{
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	62 97       	sbiw	r28, 0x12	; 18
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	9a 8b       	std	Y+18, r25	; 0x12
    16dc:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];/* buffer to hold acii result */
	itoa(data,buff,10); /* 10 for decimal base */
    16de:	89 89       	ldd	r24, Y+17	; 0x11
    16e0:	9a 89       	ldd	r25, Y+18	; 0x12
    16e2:	4a e0       	ldi	r20, 0x0A	; 10
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	9e 01       	movw	r18, r28
    16e8:	2f 5f       	subi	r18, 0xFF	; 255
    16ea:	3f 4f       	sbci	r19, 0xFF	; 255
    16ec:	b9 01       	movw	r22, r18
    16ee:	0e 94 97 13 	call	0x272e	; 0x272e <itoa>
	LCD_displayString(buff);
    16f2:	ce 01       	movw	r24, r28
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_displayString>
}
    16fa:	00 00       	nop
    16fc:	62 96       	adiw	r28, 0x12	; 18
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	08 95       	ret

0000170e <__vector_19>:

#include"timer.h"
static volatile  void(*g_callBackPtr)(void)= NULL_PTR;
static volatile TIMER_configurationType * configPtr;
ISR(TIMER0_COMP_vect)
{
    170e:	1f 92       	push	r1
    1710:	0f 92       	push	r0
    1712:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1716:	0f 92       	push	r0
    1718:	11 24       	eor	r1, r1
    171a:	2f 93       	push	r18
    171c:	3f 93       	push	r19
    171e:	4f 93       	push	r20
    1720:	5f 93       	push	r21
    1722:	6f 93       	push	r22
    1724:	7f 93       	push	r23
    1726:	8f 93       	push	r24
    1728:	9f 93       	push	r25
    172a:	af 93       	push	r26
    172c:	bf 93       	push	r27
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    173a:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <g_callBackPtr>
    173e:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <g_callBackPtr+0x1>
    1742:	89 2b       	or	r24, r25
    1744:	31 f0       	breq	.+12     	; 0x1752 <__vector_19+0x44>
		g_callBackPtr();
    1746:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <g_callBackPtr>
    174a:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <g_callBackPtr+0x1>
    174e:	fc 01       	movw	r30, r24
    1750:	09 95       	icall

}
    1752:	00 00       	nop
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	ff 91       	pop	r31
    175a:	ef 91       	pop	r30
    175c:	bf 91       	pop	r27
    175e:	af 91       	pop	r26
    1760:	9f 91       	pop	r25
    1762:	8f 91       	pop	r24
    1764:	7f 91       	pop	r23
    1766:	6f 91       	pop	r22
    1768:	5f 91       	pop	r21
    176a:	4f 91       	pop	r20
    176c:	3f 91       	pop	r19
    176e:	2f 91       	pop	r18
    1770:	0f 90       	pop	r0
    1772:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1776:	0f 90       	pop	r0
    1778:	1f 90       	pop	r1
    177a:	18 95       	reti

0000177c <__vector_9>:
ISR(TIMER0_OVF_vect)
{
    177c:	1f 92       	push	r1
    177e:	0f 92       	push	r0
    1780:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1784:	0f 92       	push	r0
    1786:	11 24       	eor	r1, r1
    1788:	2f 93       	push	r18
    178a:	3f 93       	push	r19
    178c:	4f 93       	push	r20
    178e:	5f 93       	push	r21
    1790:	6f 93       	push	r22
    1792:	7f 93       	push	r23
    1794:	8f 93       	push	r24
    1796:	9f 93       	push	r25
    1798:	af 93       	push	r26
    179a:	bf 93       	push	r27
    179c:	ef 93       	push	r30
    179e:	ff 93       	push	r31
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    17a8:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <g_callBackPtr>
    17ac:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <g_callBackPtr+0x1>
    17b0:	89 2b       	or	r24, r25
    17b2:	31 f0       	breq	.+12     	; 0x17c0 <__vector_9+0x44>
		g_callBackPtr();
    17b4:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <g_callBackPtr>
    17b8:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <g_callBackPtr+0x1>
    17bc:	fc 01       	movw	r30, r24
    17be:	09 95       	icall

}
    17c0:	00 00       	nop
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	ff 91       	pop	r31
    17c8:	ef 91       	pop	r30
    17ca:	bf 91       	pop	r27
    17cc:	af 91       	pop	r26
    17ce:	9f 91       	pop	r25
    17d0:	8f 91       	pop	r24
    17d2:	7f 91       	pop	r23
    17d4:	6f 91       	pop	r22
    17d6:	5f 91       	pop	r21
    17d8:	4f 91       	pop	r20
    17da:	3f 91       	pop	r19
    17dc:	2f 91       	pop	r18
    17de:	0f 90       	pop	r0
    17e0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    17e4:	0f 90       	pop	r0
    17e6:	1f 90       	pop	r1
    17e8:	18 95       	reti

000017ea <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    17ea:	1f 92       	push	r1
    17ec:	0f 92       	push	r0
    17ee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    17f2:	0f 92       	push	r0
    17f4:	11 24       	eor	r1, r1
    17f6:	2f 93       	push	r18
    17f8:	3f 93       	push	r19
    17fa:	4f 93       	push	r20
    17fc:	5f 93       	push	r21
    17fe:	6f 93       	push	r22
    1800:	7f 93       	push	r23
    1802:	8f 93       	push	r24
    1804:	9f 93       	push	r25
    1806:	af 93       	push	r26
    1808:	bf 93       	push	r27
    180a:	ef 93       	push	r30
    180c:	ff 93       	push	r31
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
    1816:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <g_callBackPtr>
    181a:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <g_callBackPtr+0x1>
    181e:	89 2b       	or	r24, r25
    1820:	31 f0       	breq	.+12     	; 0x182e <__vector_6+0x44>
			g_callBackPtr();
    1822:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <g_callBackPtr>
    1826:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <g_callBackPtr+0x1>
    182a:	fc 01       	movw	r30, r24
    182c:	09 95       	icall
}
    182e:	00 00       	nop
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	ff 91       	pop	r31
    1836:	ef 91       	pop	r30
    1838:	bf 91       	pop	r27
    183a:	af 91       	pop	r26
    183c:	9f 91       	pop	r25
    183e:	8f 91       	pop	r24
    1840:	7f 91       	pop	r23
    1842:	6f 91       	pop	r22
    1844:	5f 91       	pop	r21
    1846:	4f 91       	pop	r20
    1848:	3f 91       	pop	r19
    184a:	2f 91       	pop	r18
    184c:	0f 90       	pop	r0
    184e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1852:	0f 90       	pop	r0
    1854:	1f 90       	pop	r1
    1856:	18 95       	reti

00001858 <TIMER_init>:
void TIMER_init( TIMER_configurationType * config)
{configPtr=config;
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	00 d0       	rcall	.+0      	; 0x185e <TIMER_init+0x6>
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	9a 83       	std	Y+2, r25	; 0x02
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	9a 81       	ldd	r25, Y+2	; 0x02
    186a:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <configPtr+0x1>
    186e:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <configPtr>
	if(config->timerNumber==0)
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	9a 81       	ldd	r25, Y+2	; 0x02
    1876:	fc 01       	movw	r30, r24
    1878:	80 81       	ld	r24, Z
    187a:	88 23       	and	r24, r24
    187c:	09 f0       	breq	.+2      	; 0x1880 <TIMER_init+0x28>
    187e:	22 c1       	rjmp	.+580    	; 0x1ac4 <TIMER_init+0x26c>
	{
		TCCR0=0;
    1880:	83 e5       	ldi	r24, 0x53	; 83
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	fc 01       	movw	r30, r24
    1886:	10 82       	st	Z, r1
	switch(config->prescaler)
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	9a 81       	ldd	r25, Y+2	; 0x02
    188c:	fc 01       	movw	r30, r24
    188e:	85 89       	ldd	r24, Z+21	; 0x15
    1890:	96 89       	ldd	r25, Z+22	; 0x16
    1892:	80 34       	cpi	r24, 0x40	; 64
    1894:	91 05       	cpc	r25, r1
    1896:	c1 f0       	breq	.+48     	; 0x18c8 <TIMER_init+0x70>
    1898:	81 34       	cpi	r24, 0x41	; 65
    189a:	91 05       	cpc	r25, r1
    189c:	18 f4       	brcc	.+6      	; 0x18a4 <TIMER_init+0x4c>
    189e:	08 97       	sbiw	r24, 0x08	; 8
    18a0:	49 f0       	breq	.+18     	; 0x18b4 <TIMER_init+0x5c>
    18a2:	30 c0       	rjmp	.+96     	; 0x1904 <TIMER_init+0xac>
    18a4:	81 15       	cp	r24, r1
    18a6:	f1 e0       	ldi	r31, 0x01	; 1
    18a8:	9f 07       	cpc	r25, r31
    18aa:	c1 f0       	breq	.+48     	; 0x18dc <TIMER_init+0x84>
    18ac:	81 15       	cp	r24, r1
    18ae:	94 40       	sbci	r25, 0x04	; 4
    18b0:	f9 f0       	breq	.+62     	; 0x18f0 <TIMER_init+0x98>
    18b2:	28 c0       	rjmp	.+80     	; 0x1904 <TIMER_init+0xac>
	{
	case 8:
		TCCR0|=(1<<CS01);
    18b4:	83 e5       	ldi	r24, 0x53	; 83
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	23 e5       	ldi	r18, 0x53	; 83
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	f9 01       	movw	r30, r18
    18be:	20 81       	ld	r18, Z
    18c0:	22 60       	ori	r18, 0x02	; 2
    18c2:	fc 01       	movw	r30, r24
    18c4:	20 83       	st	Z, r18
		break;
    18c6:	27 c0       	rjmp	.+78     	; 0x1916 <TIMER_init+0xbe>
	case 64:
			TCCR0|=(1<<CS00)|(1<<CS01);
    18c8:	83 e5       	ldi	r24, 0x53	; 83
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	23 e5       	ldi	r18, 0x53	; 83
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	f9 01       	movw	r30, r18
    18d2:	20 81       	ld	r18, Z
    18d4:	23 60       	ori	r18, 0x03	; 3
    18d6:	fc 01       	movw	r30, r24
    18d8:	20 83       	st	Z, r18
			break;
    18da:	1d c0       	rjmp	.+58     	; 0x1916 <TIMER_init+0xbe>
	case 256:
			TCCR0|=(1<<CS02);
    18dc:	83 e5       	ldi	r24, 0x53	; 83
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	23 e5       	ldi	r18, 0x53	; 83
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	f9 01       	movw	r30, r18
    18e6:	20 81       	ld	r18, Z
    18e8:	24 60       	ori	r18, 0x04	; 4
    18ea:	fc 01       	movw	r30, r24
    18ec:	20 83       	st	Z, r18
			break;
    18ee:	13 c0       	rjmp	.+38     	; 0x1916 <TIMER_init+0xbe>
	case 1024:
			TCCR0|=(1<<CS00)|(1<<CS02);
    18f0:	83 e5       	ldi	r24, 0x53	; 83
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	23 e5       	ldi	r18, 0x53	; 83
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	f9 01       	movw	r30, r18
    18fa:	20 81       	ld	r18, Z
    18fc:	25 60       	ori	r18, 0x05	; 5
    18fe:	fc 01       	movw	r30, r24
    1900:	20 83       	st	Z, r18
			break;
    1902:	09 c0       	rjmp	.+18     	; 0x1916 <TIMER_init+0xbe>
	default:
			TCCR0|=(1<<CS00);
    1904:	83 e5       	ldi	r24, 0x53	; 83
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	23 e5       	ldi	r18, 0x53	; 83
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	f9 01       	movw	r30, r18
    190e:	20 81       	ld	r18, Z
    1910:	21 60       	ori	r18, 0x01	; 1
    1912:	fc 01       	movw	r30, r24
    1914:	20 83       	st	Z, r18

		}

	if(!strcmp(config->mode,"compare"))
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	9a 81       	ldd	r25, Y+2	; 0x02
    191a:	01 96       	adiw	r24, 0x01	; 1
    191c:	67 e4       	ldi	r22, 0x47	; 71
    191e:	71 e0       	ldi	r23, 0x01	; 1
    1920:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    1924:	89 2b       	or	r24, r25
    1926:	09 f0       	breq	.+2      	; 0x192a <TIMER_init+0xd2>
    1928:	62 c0       	rjmp	.+196    	; 0x19ee <TIMER_init+0x196>
	{	TCCR0|=(1<<FOC0)|(1<<WGM01);
    192a:	83 e5       	ldi	r24, 0x53	; 83
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	23 e5       	ldi	r18, 0x53	; 83
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	f9 01       	movw	r30, r18
    1934:	20 81       	ld	r18, Z
    1936:	28 68       	ori	r18, 0x88	; 136
    1938:	fc 01       	movw	r30, r24
    193a:	20 83       	st	Z, r18

		if(!strcmp(config->compareMatchMode,"toggle"))
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	9a 81       	ldd	r25, Y+2	; 0x02
    1940:	47 96       	adiw	r24, 0x17	; 23
    1942:	6f e4       	ldi	r22, 0x4F	; 79
    1944:	71 e0       	ldi	r23, 0x01	; 1
    1946:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    194a:	89 2b       	or	r24, r25
    194c:	99 f4       	brne	.+38     	; 0x1974 <TIMER_init+0x11c>
		{
		TCCR0|=(1<<COM00);
    194e:	83 e5       	ldi	r24, 0x53	; 83
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	23 e5       	ldi	r18, 0x53	; 83
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	f9 01       	movw	r30, r18
    1958:	20 81       	ld	r18, Z
    195a:	20 61       	ori	r18, 0x10	; 16
    195c:	fc 01       	movw	r30, r24
    195e:	20 83       	st	Z, r18
		SET_BIT(DDRB,3);
    1960:	87 e3       	ldi	r24, 0x37	; 55
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	27 e3       	ldi	r18, 0x37	; 55
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	f9 01       	movw	r30, r18
    196a:	20 81       	ld	r18, Z
    196c:	28 60       	ori	r18, 0x08	; 8
    196e:	fc 01       	movw	r30, r24
    1970:	20 83       	st	Z, r18
    1972:	37 c0       	rjmp	.+110    	; 0x19e2 <TIMER_init+0x18a>
		}
		else if(!strcmp(config->compareMatchMode,"clear"))
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	9a 81       	ldd	r25, Y+2	; 0x02
    1978:	47 96       	adiw	r24, 0x17	; 23
    197a:	66 e5       	ldi	r22, 0x56	; 86
    197c:	71 e0       	ldi	r23, 0x01	; 1
    197e:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    1982:	89 2b       	or	r24, r25
    1984:	99 f4       	brne	.+38     	; 0x19ac <TIMER_init+0x154>
			{
			TCCR0|=(1<<COM01);
    1986:	83 e5       	ldi	r24, 0x53	; 83
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	23 e5       	ldi	r18, 0x53	; 83
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	f9 01       	movw	r30, r18
    1990:	20 81       	ld	r18, Z
    1992:	20 62       	ori	r18, 0x20	; 32
    1994:	fc 01       	movw	r30, r24
    1996:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    1998:	87 e3       	ldi	r24, 0x37	; 55
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	27 e3       	ldi	r18, 0x37	; 55
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	f9 01       	movw	r30, r18
    19a2:	20 81       	ld	r18, Z
    19a4:	28 60       	ori	r18, 0x08	; 8
    19a6:	fc 01       	movw	r30, r24
    19a8:	20 83       	st	Z, r18
    19aa:	1b c0       	rjmp	.+54     	; 0x19e2 <TIMER_init+0x18a>

			}
		else if(!strcmp(config->compareMatchMode,"set"))
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	9a 81       	ldd	r25, Y+2	; 0x02
    19b0:	47 96       	adiw	r24, 0x17	; 23
    19b2:	6c e5       	ldi	r22, 0x5C	; 92
    19b4:	71 e0       	ldi	r23, 0x01	; 1
    19b6:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    19ba:	89 2b       	or	r24, r25
    19bc:	91 f4       	brne	.+36     	; 0x19e2 <TIMER_init+0x18a>
			{
			TCCR0|=(1<<COM01)|(1<<COM00);
    19be:	83 e5       	ldi	r24, 0x53	; 83
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	23 e5       	ldi	r18, 0x53	; 83
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	f9 01       	movw	r30, r18
    19c8:	20 81       	ld	r18, Z
    19ca:	20 63       	ori	r18, 0x30	; 48
    19cc:	fc 01       	movw	r30, r24
    19ce:	20 83       	st	Z, r18
			SET_BIT(DDRB,3);
    19d0:	87 e3       	ldi	r24, 0x37	; 55
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	27 e3       	ldi	r18, 0x37	; 55
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	f9 01       	movw	r30, r18
    19da:	20 81       	ld	r18, Z
    19dc:	28 60       	ori	r18, 0x08	; 8
    19de:	fc 01       	movw	r30, r24
    19e0:	20 83       	st	Z, r18

			}
		//enable interrupt
		TIMSK=(1<<OCIE0);
    19e2:	89 e5       	ldi	r24, 0x59	; 89
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	22 e0       	ldi	r18, 0x02	; 2
    19e8:	fc 01       	movw	r30, r24
    19ea:	20 83       	st	Z, r18
    19ec:	6b c0       	rjmp	.+214    	; 0x1ac4 <TIMER_init+0x26c>

	}
	else if(!strcmp(config->mode,"normal"))
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	9a 81       	ldd	r25, Y+2	; 0x02
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	60 e6       	ldi	r22, 0x60	; 96
    19f6:	71 e0       	ldi	r23, 0x01	; 1
    19f8:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    19fc:	89 2b       	or	r24, r25
    19fe:	79 f4       	brne	.+30     	; 0x1a1e <TIMER_init+0x1c6>
	{
		TCCR0|=(1<<FOC0);
    1a00:	83 e5       	ldi	r24, 0x53	; 83
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	23 e5       	ldi	r18, 0x53	; 83
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	f9 01       	movw	r30, r18
    1a0a:	20 81       	ld	r18, Z
    1a0c:	20 68       	ori	r18, 0x80	; 128
    1a0e:	fc 01       	movw	r30, r24
    1a10:	20 83       	st	Z, r18
		TIMSK=(1<<TOIE0);
    1a12:	89 e5       	ldi	r24, 0x59	; 89
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	21 e0       	ldi	r18, 0x01	; 1
    1a18:	fc 01       	movw	r30, r24
    1a1a:	20 83       	st	Z, r18
    1a1c:	53 c0       	rjmp	.+166    	; 0x1ac4 <TIMER_init+0x26c>
	}
	else if(!strcmp(config->mode,"pwm"))
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	9a 81       	ldd	r25, Y+2	; 0x02
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	67 e6       	ldi	r22, 0x67	; 103
    1a26:	71 e0       	ldi	r23, 0x01	; 1
    1a28:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    1a2c:	89 2b       	or	r24, r25
    1a2e:	09 f0       	breq	.+2      	; 0x1a32 <TIMER_init+0x1da>
    1a30:	49 c0       	rjmp	.+146    	; 0x1ac4 <TIMER_init+0x26c>
	{
		TCCR0 |=(1<<WGM00)|(1<<WGM01);
    1a32:	83 e5       	ldi	r24, 0x53	; 83
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	23 e5       	ldi	r18, 0x53	; 83
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	f9 01       	movw	r30, r18
    1a3c:	20 81       	ld	r18, Z
    1a3e:	28 64       	ori	r18, 0x48	; 72
    1a40:	fc 01       	movw	r30, r24
    1a42:	20 83       	st	Z, r18
		if(!strcmp(config->pwmMode,"inverting"))
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	9a 81       	ldd	r25, Y+2	; 0x02
    1a48:	8b 96       	adiw	r24, 0x2b	; 43
    1a4a:	6b e6       	ldi	r22, 0x6B	; 107
    1a4c:	71 e0       	ldi	r23, 0x01	; 1
    1a4e:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    1a52:	89 2b       	or	r24, r25
    1a54:	e1 f4       	brne	.+56     	; 0x1a8e <TIMER_init+0x236>
				{
				TCCR0|=(1<<COM00);
    1a56:	83 e5       	ldi	r24, 0x53	; 83
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	23 e5       	ldi	r18, 0x53	; 83
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	f9 01       	movw	r30, r18
    1a60:	20 81       	ld	r18, Z
    1a62:	20 61       	ori	r18, 0x10	; 16
    1a64:	fc 01       	movw	r30, r24
    1a66:	20 83       	st	Z, r18
				TCCR0|=(1<<COM01);
    1a68:	83 e5       	ldi	r24, 0x53	; 83
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	23 e5       	ldi	r18, 0x53	; 83
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	f9 01       	movw	r30, r18
    1a72:	20 81       	ld	r18, Z
    1a74:	20 62       	ori	r18, 0x20	; 32
    1a76:	fc 01       	movw	r30, r24
    1a78:	20 83       	st	Z, r18
				SET_BIT(DDRB,3);
    1a7a:	87 e3       	ldi	r24, 0x37	; 55
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	27 e3       	ldi	r18, 0x37	; 55
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	f9 01       	movw	r30, r18
    1a84:	20 81       	ld	r18, Z
    1a86:	28 60       	ori	r18, 0x08	; 8
    1a88:	fc 01       	movw	r30, r24
    1a8a:	20 83       	st	Z, r18
    1a8c:	1b c0       	rjmp	.+54     	; 0x1ac4 <TIMER_init+0x26c>
				}
				else if(!strcmp(config->pwmMode,"non-inverting"))
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	9a 81       	ldd	r25, Y+2	; 0x02
    1a92:	8b 96       	adiw	r24, 0x2b	; 43
    1a94:	65 e7       	ldi	r22, 0x75	; 117
    1a96:	71 e0       	ldi	r23, 0x01	; 1
    1a98:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    1a9c:	89 2b       	or	r24, r25
    1a9e:	91 f4       	brne	.+36     	; 0x1ac4 <TIMER_init+0x26c>
					{
					TCCR0|=(1<<COM01);
    1aa0:	83 e5       	ldi	r24, 0x53	; 83
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	23 e5       	ldi	r18, 0x53	; 83
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	f9 01       	movw	r30, r18
    1aaa:	20 81       	ld	r18, Z
    1aac:	20 62       	ori	r18, 0x20	; 32
    1aae:	fc 01       	movw	r30, r24
    1ab0:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    1ab2:	87 e3       	ldi	r24, 0x37	; 55
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	27 e3       	ldi	r18, 0x37	; 55
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	f9 01       	movw	r30, r18
    1abc:	20 81       	ld	r18, Z
    1abe:	28 60       	ori	r18, 0x08	; 8
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	20 83       	st	Z, r18

	}

	}
	///
	if(config->timerNumber==1)
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	fc 01       	movw	r30, r24
    1aca:	80 81       	ld	r24, Z
    1acc:	81 30       	cpi	r24, 0x01	; 1
    1ace:	09 f0       	breq	.+2      	; 0x1ad2 <TIMER_init+0x27a>
    1ad0:	30 c1       	rjmp	.+608    	; 0x1d32 <TIMER_init+0x4da>
		{
			TCCR1A=0;
    1ad2:	8f e4       	ldi	r24, 0x4F	; 79
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	10 82       	st	Z, r1
			TCCR1B=0;
    1ada:	8e e4       	ldi	r24, 0x4E	; 78
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	fc 01       	movw	r30, r24
    1ae0:	10 82       	st	Z, r1

		switch(config->prescaler)
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	85 89       	ldd	r24, Z+21	; 0x15
    1aea:	96 89       	ldd	r25, Z+22	; 0x16
    1aec:	80 34       	cpi	r24, 0x40	; 64
    1aee:	91 05       	cpc	r25, r1
    1af0:	c1 f0       	breq	.+48     	; 0x1b22 <TIMER_init+0x2ca>
    1af2:	81 34       	cpi	r24, 0x41	; 65
    1af4:	91 05       	cpc	r25, r1
    1af6:	18 f4       	brcc	.+6      	; 0x1afe <TIMER_init+0x2a6>
    1af8:	08 97       	sbiw	r24, 0x08	; 8
    1afa:	49 f0       	breq	.+18     	; 0x1b0e <TIMER_init+0x2b6>
    1afc:	30 c0       	rjmp	.+96     	; 0x1b5e <TIMER_init+0x306>
    1afe:	81 15       	cp	r24, r1
    1b00:	f1 e0       	ldi	r31, 0x01	; 1
    1b02:	9f 07       	cpc	r25, r31
    1b04:	c1 f0       	breq	.+48     	; 0x1b36 <TIMER_init+0x2de>
    1b06:	81 15       	cp	r24, r1
    1b08:	94 40       	sbci	r25, 0x04	; 4
    1b0a:	f9 f0       	breq	.+62     	; 0x1b4a <TIMER_init+0x2f2>
    1b0c:	28 c0       	rjmp	.+80     	; 0x1b5e <TIMER_init+0x306>
		{
		case 8:
			TCCR1B|=(1<<CS11);
    1b0e:	8e e4       	ldi	r24, 0x4E	; 78
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	2e e4       	ldi	r18, 0x4E	; 78
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	f9 01       	movw	r30, r18
    1b18:	20 81       	ld	r18, Z
    1b1a:	22 60       	ori	r18, 0x02	; 2
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	20 83       	st	Z, r18
			break;
    1b20:	27 c0       	rjmp	.+78     	; 0x1b70 <TIMER_init+0x318>
		case 64:
				TCCR1B|=(1<<CS10)|(1<<CS11);
    1b22:	8e e4       	ldi	r24, 0x4E	; 78
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	2e e4       	ldi	r18, 0x4E	; 78
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	f9 01       	movw	r30, r18
    1b2c:	20 81       	ld	r18, Z
    1b2e:	23 60       	ori	r18, 0x03	; 3
    1b30:	fc 01       	movw	r30, r24
    1b32:	20 83       	st	Z, r18
				break;
    1b34:	1d c0       	rjmp	.+58     	; 0x1b70 <TIMER_init+0x318>
		case 256:
				TCCR1B|=(1<<CS12);
    1b36:	8e e4       	ldi	r24, 0x4E	; 78
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	2e e4       	ldi	r18, 0x4E	; 78
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	f9 01       	movw	r30, r18
    1b40:	20 81       	ld	r18, Z
    1b42:	24 60       	ori	r18, 0x04	; 4
    1b44:	fc 01       	movw	r30, r24
    1b46:	20 83       	st	Z, r18
				break;
    1b48:	13 c0       	rjmp	.+38     	; 0x1b70 <TIMER_init+0x318>
		case 1024:
				TCCR1B|=(1<<CS10)|(1<<CS12);
    1b4a:	8e e4       	ldi	r24, 0x4E	; 78
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	2e e4       	ldi	r18, 0x4E	; 78
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	f9 01       	movw	r30, r18
    1b54:	20 81       	ld	r18, Z
    1b56:	25 60       	ori	r18, 0x05	; 5
    1b58:	fc 01       	movw	r30, r24
    1b5a:	20 83       	st	Z, r18
				break;
    1b5c:	09 c0       	rjmp	.+18     	; 0x1b70 <TIMER_init+0x318>
		default:
				TCCR1B|=(1<<CS10);
    1b5e:	8e e4       	ldi	r24, 0x4E	; 78
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	2e e4       	ldi	r18, 0x4E	; 78
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	f9 01       	movw	r30, r18
    1b68:	20 81       	ld	r18, Z
    1b6a:	21 60       	ori	r18, 0x01	; 1
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	20 83       	st	Z, r18

			}
//FOR A
		if(!strcmp(config->mode,"compare"))
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	67 e4       	ldi	r22, 0x47	; 71
    1b78:	71 e0       	ldi	r23, 0x01	; 1
    1b7a:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    1b7e:	89 2b       	or	r24, r25
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <TIMER_init+0x32c>
    1b82:	6b c0       	rjmp	.+214    	; 0x1c5a <TIMER_init+0x402>
		{	TCCR1A|=(1<<FOC1A);
    1b84:	8f e4       	ldi	r24, 0x4F	; 79
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	2f e4       	ldi	r18, 0x4F	; 79
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	f9 01       	movw	r30, r18
    1b8e:	20 81       	ld	r18, Z
    1b90:	28 60       	ori	r18, 0x08	; 8
    1b92:	fc 01       	movw	r30, r24
    1b94:	20 83       	st	Z, r18
			TCCR1B|=(1<<WGM12);
    1b96:	8e e4       	ldi	r24, 0x4E	; 78
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	2e e4       	ldi	r18, 0x4E	; 78
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	f9 01       	movw	r30, r18
    1ba0:	20 81       	ld	r18, Z
    1ba2:	28 60       	ori	r18, 0x08	; 8
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	20 83       	st	Z, r18
			if(!strcmp(config->compareMatchMode,"toggle"))
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bac:	47 96       	adiw	r24, 0x17	; 23
    1bae:	6f e4       	ldi	r22, 0x4F	; 79
    1bb0:	71 e0       	ldi	r23, 0x01	; 1
    1bb2:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    1bb6:	89 2b       	or	r24, r25
    1bb8:	99 f4       	brne	.+38     	; 0x1be0 <TIMER_init+0x388>
			{
			TCCR1A|=(1<<COM1A0);
    1bba:	8f e4       	ldi	r24, 0x4F	; 79
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	2f e4       	ldi	r18, 0x4F	; 79
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	f9 01       	movw	r30, r18
    1bc4:	20 81       	ld	r18, Z
    1bc6:	20 64       	ori	r18, 0x40	; 64
    1bc8:	fc 01       	movw	r30, r24
    1bca:	20 83       	st	Z, r18
			SET_BIT(DDRD,5);
    1bcc:	81 e3       	ldi	r24, 0x31	; 49
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	21 e3       	ldi	r18, 0x31	; 49
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	f9 01       	movw	r30, r18
    1bd6:	20 81       	ld	r18, Z
    1bd8:	20 62       	ori	r18, 0x20	; 32
    1bda:	fc 01       	movw	r30, r24
    1bdc:	20 83       	st	Z, r18
    1bde:	37 c0       	rjmp	.+110    	; 0x1c4e <TIMER_init+0x3f6>
			}
			else if(!strcmp(config->compareMatchMode,"clear"))
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	9a 81       	ldd	r25, Y+2	; 0x02
    1be4:	47 96       	adiw	r24, 0x17	; 23
    1be6:	66 e5       	ldi	r22, 0x56	; 86
    1be8:	71 e0       	ldi	r23, 0x01	; 1
    1bea:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    1bee:	89 2b       	or	r24, r25
    1bf0:	99 f4       	brne	.+38     	; 0x1c18 <TIMER_init+0x3c0>
				{
				TCCR1A|=(1<<COM1A1);
    1bf2:	8f e4       	ldi	r24, 0x4F	; 79
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	2f e4       	ldi	r18, 0x4F	; 79
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	f9 01       	movw	r30, r18
    1bfc:	20 81       	ld	r18, Z
    1bfe:	20 68       	ori	r18, 0x80	; 128
    1c00:	fc 01       	movw	r30, r24
    1c02:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    1c04:	81 e3       	ldi	r24, 0x31	; 49
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	21 e3       	ldi	r18, 0x31	; 49
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	f9 01       	movw	r30, r18
    1c0e:	20 81       	ld	r18, Z
    1c10:	20 62       	ori	r18, 0x20	; 32
    1c12:	fc 01       	movw	r30, r24
    1c14:	20 83       	st	Z, r18
    1c16:	1b c0       	rjmp	.+54     	; 0x1c4e <TIMER_init+0x3f6>

				}
			else if(!strcmp(config->compareMatchMode,"set"))
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1c:	47 96       	adiw	r24, 0x17	; 23
    1c1e:	6c e5       	ldi	r22, 0x5C	; 92
    1c20:	71 e0       	ldi	r23, 0x01	; 1
    1c22:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    1c26:	89 2b       	or	r24, r25
    1c28:	91 f4       	brne	.+36     	; 0x1c4e <TIMER_init+0x3f6>
				{
				TCCR1A|=(1<<COM1A1)|(1<<COM1A0);
    1c2a:	8f e4       	ldi	r24, 0x4F	; 79
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	2f e4       	ldi	r18, 0x4F	; 79
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	f9 01       	movw	r30, r18
    1c34:	20 81       	ld	r18, Z
    1c36:	20 6c       	ori	r18, 0xC0	; 192
    1c38:	fc 01       	movw	r30, r24
    1c3a:	20 83       	st	Z, r18
				SET_BIT(DDRD,5);
    1c3c:	81 e3       	ldi	r24, 0x31	; 49
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	21 e3       	ldi	r18, 0x31	; 49
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	f9 01       	movw	r30, r18
    1c46:	20 81       	ld	r18, Z
    1c48:	20 62       	ori	r18, 0x20	; 32
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	20 83       	st	Z, r18

				}
			//enable interrupt
			TIMSK=(1<<OCIE1A);
    1c4e:	89 e5       	ldi	r24, 0x59	; 89
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	20 e1       	ldi	r18, 0x10	; 16
    1c54:	fc 01       	movw	r30, r24
    1c56:	20 83       	st	Z, r18
    1c58:	6b c0       	rjmp	.+214    	; 0x1d30 <TIMER_init+0x4d8>

		}
		else if(!strcmp(config->mode,"normal"))
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5e:	01 96       	adiw	r24, 0x01	; 1
    1c60:	60 e6       	ldi	r22, 0x60	; 96
    1c62:	71 e0       	ldi	r23, 0x01	; 1
    1c64:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    1c68:	89 2b       	or	r24, r25
    1c6a:	79 f4       	brne	.+30     	; 0x1c8a <TIMER_init+0x432>
		{
			TCCR0|=(1<<FOC0);
    1c6c:	83 e5       	ldi	r24, 0x53	; 83
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	23 e5       	ldi	r18, 0x53	; 83
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	f9 01       	movw	r30, r18
    1c76:	20 81       	ld	r18, Z
    1c78:	20 68       	ori	r18, 0x80	; 128
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	20 83       	st	Z, r18
			TIMSK=(1<<TOIE0);
    1c7e:	89 e5       	ldi	r24, 0x59	; 89
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	21 e0       	ldi	r18, 0x01	; 1
    1c84:	fc 01       	movw	r30, r24
    1c86:	20 83       	st	Z, r18
    1c88:	53 c0       	rjmp	.+166    	; 0x1d30 <TIMER_init+0x4d8>
		}
		else if(!strcmp(config->mode,"pwm"))
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8e:	01 96       	adiw	r24, 0x01	; 1
    1c90:	67 e6       	ldi	r22, 0x67	; 103
    1c92:	71 e0       	ldi	r23, 0x01	; 1
    1c94:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    1c98:	89 2b       	or	r24, r25
    1c9a:	09 f0       	breq	.+2      	; 0x1c9e <TIMER_init+0x446>
    1c9c:	49 c0       	rjmp	.+146    	; 0x1d30 <TIMER_init+0x4d8>
		{
			TCCR0 |=(1<<WGM00)|(1<<WGM01);
    1c9e:	83 e5       	ldi	r24, 0x53	; 83
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	23 e5       	ldi	r18, 0x53	; 83
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	f9 01       	movw	r30, r18
    1ca8:	20 81       	ld	r18, Z
    1caa:	28 64       	ori	r18, 0x48	; 72
    1cac:	fc 01       	movw	r30, r24
    1cae:	20 83       	st	Z, r18
			if(!strcmp(config->pwmMode,"inverting"))
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb4:	8b 96       	adiw	r24, 0x2b	; 43
    1cb6:	6b e6       	ldi	r22, 0x6B	; 107
    1cb8:	71 e0       	ldi	r23, 0x01	; 1
    1cba:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    1cbe:	89 2b       	or	r24, r25
    1cc0:	e1 f4       	brne	.+56     	; 0x1cfa <TIMER_init+0x4a2>
					{
					TCCR0|=(1<<COM00);
    1cc2:	83 e5       	ldi	r24, 0x53	; 83
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	23 e5       	ldi	r18, 0x53	; 83
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	f9 01       	movw	r30, r18
    1ccc:	20 81       	ld	r18, Z
    1cce:	20 61       	ori	r18, 0x10	; 16
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	20 83       	st	Z, r18
					TCCR0|=(1<<COM01);
    1cd4:	83 e5       	ldi	r24, 0x53	; 83
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	23 e5       	ldi	r18, 0x53	; 83
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	f9 01       	movw	r30, r18
    1cde:	20 81       	ld	r18, Z
    1ce0:	20 62       	ori	r18, 0x20	; 32
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	20 83       	st	Z, r18
					SET_BIT(DDRB,3);
    1ce6:	87 e3       	ldi	r24, 0x37	; 55
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	27 e3       	ldi	r18, 0x37	; 55
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	f9 01       	movw	r30, r18
    1cf0:	20 81       	ld	r18, Z
    1cf2:	28 60       	ori	r18, 0x08	; 8
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	20 83       	st	Z, r18
    1cf8:	1b c0       	rjmp	.+54     	; 0x1d30 <TIMER_init+0x4d8>
					}
					else if(!strcmp(config->pwmMode,"non-inverting"))
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfe:	8b 96       	adiw	r24, 0x2b	; 43
    1d00:	65 e7       	ldi	r22, 0x75	; 117
    1d02:	71 e0       	ldi	r23, 0x01	; 1
    1d04:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    1d08:	89 2b       	or	r24, r25
    1d0a:	91 f4       	brne	.+36     	; 0x1d30 <TIMER_init+0x4d8>
						{
						TCCR0|=(1<<COM01);
    1d0c:	83 e5       	ldi	r24, 0x53	; 83
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	23 e5       	ldi	r18, 0x53	; 83
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	f9 01       	movw	r30, r18
    1d16:	20 81       	ld	r18, Z
    1d18:	20 62       	ori	r18, 0x20	; 32
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	20 83       	st	Z, r18
						SET_BIT(DDRB,3);
    1d1e:	87 e3       	ldi	r24, 0x37	; 55
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	27 e3       	ldi	r18, 0x37	; 55
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	f9 01       	movw	r30, r18
    1d28:	20 81       	ld	r18, Z
    1d2a:	28 60       	ori	r18, 0x08	; 8
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	20 83       	st	Z, r18
	//TCCR0=(1<<FOC0)|(1<<COM00)|(1<<CS00)|(1<<CS02);


	//enable

	sei();
    1d30:	78 94       	sei
}
}
    1d32:	00 00       	nop
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	08 95       	ret

00001d3e <TIMER_setCompare>:

void TIMER_setCompare(uint16 compareValue)
{
    1d3e:	cf 93       	push	r28
    1d40:	df 93       	push	r29
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <TIMER_setCompare+0x6>
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	89 83       	std	Y+1, r24	; 0x01
	switch (configPtr->timerNumber)
    1d4c:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <configPtr>
    1d50:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <configPtr+0x1>
    1d54:	fc 01       	movw	r30, r24
    1d56:	80 81       	ld	r24, Z
    1d58:	88 2f       	mov	r24, r24
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	19 f0       	breq	.+6      	; 0x1d66 <TIMER_setCompare+0x28>
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	59 f0       	breq	.+22     	; 0x1d7a <TIMER_setCompare+0x3c>
	case 1:
		TCNT1=0;
		OCR1A=compareValue;
		break;
	}
}
    1d64:	17 c0       	rjmp	.+46     	; 0x1d94 <TIMER_setCompare+0x56>
void TIMER_setCompare(uint16 compareValue)
{
	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=0;
    1d66:	82 e5       	ldi	r24, 0x52	; 82
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	10 82       	st	Z, r1
		OCR0=compareValue;
    1d6e:	8c e5       	ldi	r24, 0x5C	; 92
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	29 81       	ldd	r18, Y+1	; 0x01
    1d74:	fc 01       	movw	r30, r24
    1d76:	20 83       	st	Z, r18
		break;
    1d78:	0d c0       	rjmp	.+26     	; 0x1d94 <TIMER_setCompare+0x56>
	case 1:
		TCNT1=0;
    1d7a:	8c e4       	ldi	r24, 0x4C	; 76
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	fc 01       	movw	r30, r24
    1d80:	11 82       	std	Z+1, r1	; 0x01
    1d82:	10 82       	st	Z, r1
		OCR1A=compareValue;
    1d84:	8a e4       	ldi	r24, 0x4A	; 74
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	29 81       	ldd	r18, Y+1	; 0x01
    1d8a:	3a 81       	ldd	r19, Y+2	; 0x02
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	31 83       	std	Z+1, r19	; 0x01
    1d90:	20 83       	st	Z, r18
		break;
    1d92:	00 00       	nop
	}
}
    1d94:	00 00       	nop
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	08 95       	ret

00001da0 <TIMER_setNormal>:
void TIMER_setNormal(uint8 initValue)

{
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29
    1da4:	1f 92       	push	r1
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	89 83       	std	Y+1, r24	; 0x01

	switch (configPtr->timerNumber)
    1dac:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <configPtr>
    1db0:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <configPtr+0x1>
    1db4:	fc 01       	movw	r30, r24
    1db6:	80 81       	ld	r24, Z
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	19 f0       	breq	.+6      	; 0x1dc6 <TIMER_setNormal+0x26>
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	39 f0       	breq	.+14     	; 0x1dd2 <TIMER_setNormal+0x32>
		TCNT1=initValue;
		break;


}
}
    1dc4:	0f c0       	rjmp	.+30     	; 0x1de4 <TIMER_setNormal+0x44>
{

	switch (configPtr->timerNumber)
	{
	case 0:
		TCNT0=initValue;
    1dc6:	82 e5       	ldi	r24, 0x52	; 82
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	29 81       	ldd	r18, Y+1	; 0x01
    1dcc:	fc 01       	movw	r30, r24
    1dce:	20 83       	st	Z, r18
		break;
    1dd0:	09 c0       	rjmp	.+18     	; 0x1de4 <TIMER_setNormal+0x44>
	case 1:
		TCNT1=initValue;
    1dd2:	8c e4       	ldi	r24, 0x4C	; 76
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	29 81       	ldd	r18, Y+1	; 0x01
    1dd8:	22 2f       	mov	r18, r18
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	fc 01       	movw	r30, r24
    1dde:	31 83       	std	Z+1, r19	; 0x01
    1de0:	20 83       	st	Z, r18
		break;
    1de2:	00 00       	nop


}
}
    1de4:	00 00       	nop
    1de6:	0f 90       	pop	r0
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	08 95       	ret

00001dee <TIMER_setpwm>:
void TIMER_setpwm(uint8 dutyCycle)
{
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	1f 92       	push	r1
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
    1dfa:	82 e5       	ldi	r24, 0x52	; 82
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	fc 01       	movw	r30, r24
    1e00:	10 82       	st	Z, r1
	OCR0=dutyCycle;
    1e02:	8c e5       	ldi	r24, 0x5C	; 92
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	29 81       	ldd	r18, Y+1	; 0x01
    1e08:	fc 01       	movw	r30, r24
    1e0a:	20 83       	st	Z, r18
}
    1e0c:	00 00       	nop
    1e0e:	0f 90       	pop	r0
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	08 95       	ret

00001e16 <TIMER_setCallBackPtr>:
void TIMER_setCallBackPtr(void(*a_ptr)(void))
{
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	00 d0       	rcall	.+0      	; 0x1e1c <TIMER_setCallBackPtr+0x6>
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	9a 83       	std	Y+2, r25	; 0x02
    1e22:	89 83       	std	Y+1, r24	; 0x01
g_callBackPtr=a_ptr;
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	9a 81       	ldd	r25, Y+2	; 0x02
    1e28:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <g_callBackPtr+0x1>
    1e2c:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <g_callBackPtr>
}
    1e30:	00 00       	nop
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	08 95       	ret

00001e3c <TIMER_stop>:
void TIMER_stop()
{
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
	switch (configPtr->timerNumber)
    1e44:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <configPtr>
    1e48:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <configPtr+0x1>
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	80 81       	ld	r24, Z
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	89 2b       	or	r24, r25
    1e56:	51 f4       	brne	.+20     	; 0x1e6c <TIMER_stop+0x30>

{
case 0:
	TCCR0&=~(1<<CS00)&~(1<<CS01)&~(1<<CS02);
    1e58:	83 e5       	ldi	r24, 0x53	; 83
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	23 e5       	ldi	r18, 0x53	; 83
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	f9 01       	movw	r30, r18
    1e62:	20 81       	ld	r18, Z
    1e64:	28 7f       	andi	r18, 0xF8	; 248
    1e66:	fc 01       	movw	r30, r24
    1e68:	20 83       	st	Z, r18
	break;
    1e6a:	01 c0       	rjmp	.+2      	; 0x1e6e <TIMER_stop+0x32>
case 1:
	break;
    1e6c:	00 00       	nop

}
}
    1e6e:	00 00       	nop
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	08 95       	ret

00001e76 <UART_init>:
 */

/* configurate by passing UART  configuration structure */

void UART_init(UART_configurationType * config)
{/* put zeros into all bits in the registers */
    1e76:	0f 93       	push	r16
    1e78:	1f 93       	push	r17
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <UART_init+0xa>
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
UCSRA=0;
    1e88:	8b e2       	ldi	r24, 0x2B	; 43
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	10 82       	st	Z, r1
UCSRB=0;
    1e90:	8a e2       	ldi	r24, 0x2A	; 42
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	fc 01       	movw	r30, r24
    1e96:	10 82       	st	Z, r1
UCSRC=0;
    1e98:	80 e4       	ldi	r24, 0x40	; 64
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	10 82       	st	Z, r1
/* enables */
	if(!strcmp(config->mode,"normal"))
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea4:	05 96       	adiw	r24, 0x05	; 5
    1ea6:	63 e8       	ldi	r22, 0x83	; 131
    1ea8:	71 e0       	ldi	r23, 0x01	; 1
    1eaa:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    1eae:	89 2b       	or	r24, r25
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <UART_init+0x3e>
    1eb2:	60 c0       	rjmp	.+192    	; 0x1f74 <UART_init+0xfe>
	{
CLEAR_BIT(UCSRA,U2X); /* disable double speed bit */
    1eb4:	8b e2       	ldi	r24, 0x2B	; 43
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	2b e2       	ldi	r18, 0x2B	; 43
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	f9 01       	movw	r30, r18
    1ebe:	20 81       	ld	r18, Z
    1ec0:	2d 7f       	andi	r18, 0xFD	; 253
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	20 83       	st	Z, r18
/* store buad rate in register UBRR(16bits) ---> left register 8 bits and right 8bits */
UBRRL=((F_CPU /(16*config->buadRate))-1);
    1ec6:	09 e2       	ldi	r16, 0x29	; 41
    1ec8:	10 e0       	ldi	r17, 0x00	; 0
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ece:	fc 01       	movw	r30, r24
    1ed0:	81 81       	ldd	r24, Z+1	; 0x01
    1ed2:	92 81       	ldd	r25, Z+2	; 0x02
    1ed4:	a3 81       	ldd	r26, Z+3	; 0x03
    1ed6:	b4 81       	ldd	r27, Z+4	; 0x04
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	aa 1f       	adc	r26, r26
    1ede:	bb 1f       	adc	r27, r27
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	aa 1f       	adc	r26, r26
    1ee6:	bb 1f       	adc	r27, r27
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	aa 1f       	adc	r26, r26
    1eee:	bb 1f       	adc	r27, r27
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	aa 1f       	adc	r26, r26
    1ef6:	bb 1f       	adc	r27, r27
    1ef8:	9c 01       	movw	r18, r24
    1efa:	ad 01       	movw	r20, r26
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	92 e1       	ldi	r25, 0x12	; 18
    1f00:	aa e7       	ldi	r26, 0x7A	; 122
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__udivmodsi4>
    1f0c:	da 01       	movw	r26, r20
    1f0e:	c9 01       	movw	r24, r18
    1f10:	81 50       	subi	r24, 0x01	; 1
    1f12:	f8 01       	movw	r30, r16
    1f14:	80 83       	st	Z, r24
UBRRH=((F_CPU /(16*config->buadRate))-1)>>8;
    1f16:	00 e4       	ldi	r16, 0x40	; 64
    1f18:	10 e0       	ldi	r17, 0x00	; 0
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1e:	fc 01       	movw	r30, r24
    1f20:	81 81       	ldd	r24, Z+1	; 0x01
    1f22:	92 81       	ldd	r25, Z+2	; 0x02
    1f24:	a3 81       	ldd	r26, Z+3	; 0x03
    1f26:	b4 81       	ldd	r27, Z+4	; 0x04
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	aa 1f       	adc	r26, r26
    1f2e:	bb 1f       	adc	r27, r27
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	aa 1f       	adc	r26, r26
    1f36:	bb 1f       	adc	r27, r27
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	aa 1f       	adc	r26, r26
    1f3e:	bb 1f       	adc	r27, r27
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	aa 1f       	adc	r26, r26
    1f46:	bb 1f       	adc	r27, r27
    1f48:	9c 01       	movw	r18, r24
    1f4a:	ad 01       	movw	r20, r26
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	92 e1       	ldi	r25, 0x12	; 18
    1f50:	aa e7       	ldi	r26, 0x7A	; 122
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	bc 01       	movw	r22, r24
    1f56:	cd 01       	movw	r24, r26
    1f58:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__udivmodsi4>
    1f5c:	da 01       	movw	r26, r20
    1f5e:	c9 01       	movw	r24, r18
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	a1 09       	sbc	r26, r1
    1f64:	b1 09       	sbc	r27, r1
    1f66:	89 2f       	mov	r24, r25
    1f68:	9a 2f       	mov	r25, r26
    1f6a:	ab 2f       	mov	r26, r27
    1f6c:	bb 27       	eor	r27, r27
    1f6e:	f8 01       	movw	r30, r16
    1f70:	80 83       	st	Z, r24
    1f72:	61 c0       	rjmp	.+194    	; 0x2036 <UART_init+0x1c0>


	}
	else if(!strcmp(config->mode,"double speed"))
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	9a 81       	ldd	r25, Y+2	; 0x02
    1f78:	05 96       	adiw	r24, 0x05	; 5
    1f7a:	6a e8       	ldi	r22, 0x8A	; 138
    1f7c:	71 e0       	ldi	r23, 0x01	; 1
    1f7e:	0e 94 8e 13 	call	0x271c	; 0x271c <strcmp>
    1f82:	89 2b       	or	r24, r25
    1f84:	09 f0       	breq	.+2      	; 0x1f88 <UART_init+0x112>
    1f86:	57 c0       	rjmp	.+174    	; 0x2036 <UART_init+0x1c0>
	{
		SET_BIT(UCSRA,U2X);/* enable double speed bit */
    1f88:	8b e2       	ldi	r24, 0x2B	; 43
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	2b e2       	ldi	r18, 0x2B	; 43
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	f9 01       	movw	r30, r18
    1f92:	20 81       	ld	r18, Z
    1f94:	22 60       	ori	r18, 0x02	; 2
    1f96:	fc 01       	movw	r30, r24
    1f98:	20 83       	st	Z, r18
		/* store buad rate in register UBRR(16bits) ---> left register 8 bits and right 8bits */
		UBRRL=((F_CPU /(8*config->buadRate))-1);
    1f9a:	09 e2       	ldi	r16, 0x29	; 41
    1f9c:	10 e0       	ldi	r17, 0x00	; 0
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	81 81       	ldd	r24, Z+1	; 0x01
    1fa6:	92 81       	ldd	r25, Z+2	; 0x02
    1fa8:	a3 81       	ldd	r26, Z+3	; 0x03
    1faa:	b4 81       	ldd	r27, Z+4	; 0x04
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	aa 1f       	adc	r26, r26
    1fb2:	bb 1f       	adc	r27, r27
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	aa 1f       	adc	r26, r26
    1fba:	bb 1f       	adc	r27, r27
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	aa 1f       	adc	r26, r26
    1fc2:	bb 1f       	adc	r27, r27
    1fc4:	9c 01       	movw	r18, r24
    1fc6:	ad 01       	movw	r20, r26
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	92 e1       	ldi	r25, 0x12	; 18
    1fcc:	aa e7       	ldi	r26, 0x7A	; 122
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	bc 01       	movw	r22, r24
    1fd2:	cd 01       	movw	r24, r26
    1fd4:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__udivmodsi4>
    1fd8:	da 01       	movw	r26, r20
    1fda:	c9 01       	movw	r24, r18
    1fdc:	81 50       	subi	r24, 0x01	; 1
    1fde:	f8 01       	movw	r30, r16
    1fe0:	80 83       	st	Z, r24
		UBRRH=((F_CPU /(8*config->buadRate))-1)>>8;
    1fe2:	00 e4       	ldi	r16, 0x40	; 64
    1fe4:	10 e0       	ldi	r17, 0x00	; 0
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	fc 01       	movw	r30, r24
    1fec:	81 81       	ldd	r24, Z+1	; 0x01
    1fee:	92 81       	ldd	r25, Z+2	; 0x02
    1ff0:	a3 81       	ldd	r26, Z+3	; 0x03
    1ff2:	b4 81       	ldd	r27, Z+4	; 0x04
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	aa 1f       	adc	r26, r26
    1ffa:	bb 1f       	adc	r27, r27
    1ffc:	88 0f       	add	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	aa 1f       	adc	r26, r26
    2002:	bb 1f       	adc	r27, r27
    2004:	88 0f       	add	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	aa 1f       	adc	r26, r26
    200a:	bb 1f       	adc	r27, r27
    200c:	9c 01       	movw	r18, r24
    200e:	ad 01       	movw	r20, r26
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	92 e1       	ldi	r25, 0x12	; 18
    2014:	aa e7       	ldi	r26, 0x7A	; 122
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__udivmodsi4>
    2020:	da 01       	movw	r26, r20
    2022:	c9 01       	movw	r24, r18
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	a1 09       	sbc	r26, r1
    2028:	b1 09       	sbc	r27, r1
    202a:	89 2f       	mov	r24, r25
    202c:	9a 2f       	mov	r25, r26
    202e:	ab 2f       	mov	r26, r27
    2030:	bb 27       	eor	r27, r27
    2032:	f8 01       	movw	r30, r16
    2034:	80 83       	st	Z, r24

	}


/* TO enable writing on Register UCSRC (used for define the frame )as it has the same address with UBRR register */
SET_BIT(UCSRC,URSEL);
    2036:	80 e4       	ldi	r24, 0x40	; 64
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	20 e4       	ldi	r18, 0x40	; 64
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	f9 01       	movw	r30, r18
    2040:	20 81       	ld	r18, Z
    2042:	20 68       	ori	r18, 0x80	; 128
    2044:	fc 01       	movw	r30, r24
    2046:	20 83       	st	Z, r18
/* the UART frame parameters*/
/* character size */

switch(config->character_size)
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	9a 81       	ldd	r25, Y+2	; 0x02
    204c:	fc 01       	movw	r30, r24
    204e:	80 81       	ld	r24, Z
    2050:	88 2f       	mov	r24, r24
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	86 30       	cpi	r24, 0x06	; 6
    2056:	91 05       	cpc	r25, r1
    2058:	f9 f0       	breq	.+62     	; 0x2098 <UART_init+0x222>
    205a:	87 30       	cpi	r24, 0x07	; 7
    205c:	91 05       	cpc	r25, r1
    205e:	1c f4       	brge	.+6      	; 0x2066 <UART_init+0x1f0>
    2060:	05 97       	sbiw	r24, 0x05	; 5
    2062:	39 f0       	breq	.+14     	; 0x2072 <UART_init+0x1fc>
    2064:	5b c0       	rjmp	.+182    	; 0x211c <UART_init+0x2a6>
    2066:	87 30       	cpi	r24, 0x07	; 7
    2068:	91 05       	cpc	r25, r1
    206a:	49 f1       	breq	.+82     	; 0x20be <UART_init+0x248>
    206c:	09 97       	sbiw	r24, 0x09	; 9
    206e:	d1 f1       	breq	.+116    	; 0x20e4 <UART_init+0x26e>
    2070:	55 c0       	rjmp	.+170    	; 0x211c <UART_init+0x2a6>
{
case 5:
	/* UCSZ0 =0, UCSZ1=0,UCSZ2=0 */
	CLEAR_BIT(UCSRC,UCSZ0);
    2072:	80 e4       	ldi	r24, 0x40	; 64
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	20 e4       	ldi	r18, 0x40	; 64
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	f9 01       	movw	r30, r18
    207c:	20 81       	ld	r18, Z
    207e:	2d 7f       	andi	r18, 0xFD	; 253
    2080:	fc 01       	movw	r30, r24
    2082:	20 83       	st	Z, r18
	CLEAR_BIT(UCSRC,UCSZ1);
    2084:	80 e4       	ldi	r24, 0x40	; 64
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	20 e4       	ldi	r18, 0x40	; 64
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	f9 01       	movw	r30, r18
    208e:	20 81       	ld	r18, Z
    2090:	2b 7f       	andi	r18, 0xFB	; 251
    2092:	fc 01       	movw	r30, r24
    2094:	20 83       	st	Z, r18
	break;
    2096:	54 c0       	rjmp	.+168    	; 0x2140 <UART_init+0x2ca>

case 6:
	/* UCSZ0 =0, UCSZ1=1,UCSZ2=0 */
	CLEAR_BIT(UCSRC,UCSZ0);
    2098:	80 e4       	ldi	r24, 0x40	; 64
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	20 e4       	ldi	r18, 0x40	; 64
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	f9 01       	movw	r30, r18
    20a2:	20 81       	ld	r18, Z
    20a4:	2d 7f       	andi	r18, 0xFD	; 253
    20a6:	fc 01       	movw	r30, r24
    20a8:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    20aa:	80 e4       	ldi	r24, 0x40	; 64
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	20 e4       	ldi	r18, 0x40	; 64
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	f9 01       	movw	r30, r18
    20b4:	20 81       	ld	r18, Z
    20b6:	24 60       	ori	r18, 0x04	; 4
    20b8:	fc 01       	movw	r30, r24
    20ba:	20 83       	st	Z, r18
	break;
    20bc:	41 c0       	rjmp	.+130    	; 0x2140 <UART_init+0x2ca>
case 7:
	/* UCSZ0 =1, UCSZ=0,UCSZ2=0 */
	CLEAR_BIT(UCSRC,UCSZ1);
    20be:	80 e4       	ldi	r24, 0x40	; 64
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	20 e4       	ldi	r18, 0x40	; 64
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	f9 01       	movw	r30, r18
    20c8:	20 81       	ld	r18, Z
    20ca:	2b 7f       	andi	r18, 0xFB	; 251
    20cc:	fc 01       	movw	r30, r24
    20ce:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ0);
    20d0:	80 e4       	ldi	r24, 0x40	; 64
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	20 e4       	ldi	r18, 0x40	; 64
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	f9 01       	movw	r30, r18
    20da:	20 81       	ld	r18, Z
    20dc:	22 60       	ori	r18, 0x02	; 2
    20de:	fc 01       	movw	r30, r24
    20e0:	20 83       	st	Z, r18
		break;
    20e2:	2e c0       	rjmp	.+92     	; 0x2140 <UART_init+0x2ca>
case 9:
	/* UCSZ0 =1, UCSZ1=0,UCSZ2=1 */
	SET_BIT(UCSRC,UCSZ0);
    20e4:	80 e4       	ldi	r24, 0x40	; 64
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	20 e4       	ldi	r18, 0x40	; 64
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	f9 01       	movw	r30, r18
    20ee:	20 81       	ld	r18, Z
    20f0:	22 60       	ori	r18, 0x02	; 2
    20f2:	fc 01       	movw	r30, r24
    20f4:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    20f6:	80 e4       	ldi	r24, 0x40	; 64
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	20 e4       	ldi	r18, 0x40	; 64
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	f9 01       	movw	r30, r18
    2100:	20 81       	ld	r18, Z
    2102:	24 60       	ori	r18, 0x04	; 4
    2104:	fc 01       	movw	r30, r24
    2106:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ2);
    2108:	80 e4       	ldi	r24, 0x40	; 64
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	20 e4       	ldi	r18, 0x40	; 64
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	f9 01       	movw	r30, r18
    2112:	20 81       	ld	r18, Z
    2114:	24 60       	ori	r18, 0x04	; 4
    2116:	fc 01       	movw	r30, r24
    2118:	20 83       	st	Z, r18


	break;
    211a:	12 c0       	rjmp	.+36     	; 0x2140 <UART_init+0x2ca>

default :
	/* the default will be 8bits */
	/* UCSZ0 =1, UCSZ1=1,UCSZ2=0 */
	SET_BIT(UCSRC,UCSZ0);
    211c:	80 e4       	ldi	r24, 0x40	; 64
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	20 e4       	ldi	r18, 0x40	; 64
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	f9 01       	movw	r30, r18
    2126:	20 81       	ld	r18, Z
    2128:	22 60       	ori	r18, 0x02	; 2
    212a:	fc 01       	movw	r30, r24
    212c:	20 83       	st	Z, r18
	SET_BIT(UCSRC,UCSZ1);
    212e:	80 e4       	ldi	r24, 0x40	; 64
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	20 e4       	ldi	r18, 0x40	; 64
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	f9 01       	movw	r30, r18
    2138:	20 81       	ld	r18, Z
    213a:	24 60       	ori	r18, 0x04	; 4
    213c:	fc 01       	movw	r30, r24
    213e:	20 83       	st	Z, r18
}

/* enable uart receive and transmit */
SET_BIT(UCSRB,RXEN);
    2140:	8a e2       	ldi	r24, 0x2A	; 42
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	2a e2       	ldi	r18, 0x2A	; 42
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	f9 01       	movw	r30, r18
    214a:	20 81       	ld	r18, Z
    214c:	20 61       	ori	r18, 0x10	; 16
    214e:	fc 01       	movw	r30, r24
    2150:	20 83       	st	Z, r18
SET_BIT(UCSRB,TXEN);
    2152:	8a e2       	ldi	r24, 0x2A	; 42
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	2a e2       	ldi	r18, 0x2A	; 42
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	f9 01       	movw	r30, r18
    215c:	20 81       	ld	r18, Z
    215e:	28 60       	ori	r18, 0x08	; 8
    2160:	fc 01       	movw	r30, r24
    2162:	20 83       	st	Z, r18
}
    2164:	00 00       	nop
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	1f 91       	pop	r17
    2170:	0f 91       	pop	r16
    2172:	08 95       	ret

00002174 <UART_receiveByte>:

uint8 UART_receiveByte(void)
{
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)); /* wait until RXC  flag be 1 it means that there is data not read */
    217c:	00 00       	nop
    217e:	8b e2       	ldi	r24, 0x2B	; 43
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	fc 01       	movw	r30, r24
    2184:	80 81       	ld	r24, Z
    2186:	88 23       	and	r24, r24
    2188:	d4 f7       	brge	.-12     	; 0x217e <UART_receiveByte+0xa>

	return UDR;/* read and return RXC flag to zero */
    218a:	8c e2       	ldi	r24, 0x2C	; 44
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	fc 01       	movw	r30, r24
    2190:	80 81       	ld	r24, Z
}
    2192:	df 91       	pop	r29
    2194:	cf 91       	pop	r28
    2196:	08 95       	ret

00002198 <UART_sendByte>:
void UART_sendByte(const uint8 data)
{
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	1f 92       	push	r1
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	89 83       	std	Y+1, r24	; 0x01
	UDR=data; /*store data in shift register UDR from less significant bit */
    21a4:	8c e2       	ldi	r24, 0x2C	; 44
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	29 81       	ldd	r18, Y+1	; 0x01
    21aa:	fc 01       	movw	r30, r24
    21ac:	20 83       	st	Z, r18
	while(BIT_IS_CLEAR(UCSRA,TXC));/*wait until send data txc =1*/
    21ae:	00 00       	nop
    21b0:	8b e2       	ldi	r24, 0x2B	; 43
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	fc 01       	movw	r30, r24
    21b6:	80 81       	ld	r24, Z
    21b8:	88 2f       	mov	r24, r24
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	80 74       	andi	r24, 0x40	; 64
    21be:	99 27       	eor	r25, r25
    21c0:	89 2b       	or	r24, r25
    21c2:	b1 f3       	breq	.-20     	; 0x21b0 <UART_sendByte+0x18>
	SET_BIT(UCSRA,TXC); /*clear the flag as it doesnt clear automatically as no interrupt or ISR*/
    21c4:	8b e2       	ldi	r24, 0x2B	; 43
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	2b e2       	ldi	r18, 0x2B	; 43
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	f9 01       	movw	r30, r18
    21ce:	20 81       	ld	r18, Z
    21d0:	20 64       	ori	r18, 0x40	; 64
    21d2:	fc 01       	movw	r30, r24
    21d4:	20 83       	st	Z, r18

}
    21d6:	00 00       	nop
    21d8:	0f 90       	pop	r0
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	08 95       	ret

000021e0 <UART_sendString>:
void UART_sendString(uint8 *str)
{
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
    21e4:	00 d0       	rcall	.+0      	; 0x21e6 <UART_sendString+0x6>
    21e6:	1f 92       	push	r1
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    21ec:	9b 83       	std	Y+3, r25	; 0x03
    21ee:	8a 83       	std	Y+2, r24	; 0x02
	/* send byte by byte until end of string (\0)
	 * and at the end of string send # as defined pattern because we cant send null
	 */

	uint8 i = 0;
    21f0:	19 82       	std	Y+1, r1	; 0x01
		while(str[i] != '\0')
    21f2:	0e c0       	rjmp	.+28     	; 0x2210 <UART_sendString+0x30>
		{
			UART_sendByte(str[i]);
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	88 2f       	mov	r24, r24
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	2a 81       	ldd	r18, Y+2	; 0x02
    21fc:	3b 81       	ldd	r19, Y+3	; 0x03
    21fe:	82 0f       	add	r24, r18
    2200:	93 1f       	adc	r25, r19
    2202:	fc 01       	movw	r30, r24
    2204:	80 81       	ld	r24, Z
    2206:	0e 94 cc 10 	call	0x2198	; 0x2198 <UART_sendByte>
			i++;
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	8f 5f       	subi	r24, 0xFF	; 255
    220e:	89 83       	std	Y+1, r24	; 0x01
	/* send byte by byte until end of string (\0)
	 * and at the end of string send # as defined pattern because we cant send null
	 */

	uint8 i = 0;
		while(str[i] != '\0')
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	2a 81       	ldd	r18, Y+2	; 0x02
    2218:	3b 81       	ldd	r19, Y+3	; 0x03
    221a:	82 0f       	add	r24, r18
    221c:	93 1f       	adc	r25, r19
    221e:	fc 01       	movw	r30, r24
    2220:	80 81       	ld	r24, Z
    2222:	88 23       	and	r24, r24
    2224:	39 f7       	brne	.-50     	; 0x21f4 <UART_sendString+0x14>
		{
			UART_sendByte(str[i]);
			i++;
		}
	UART_sendByte('#');
    2226:	83 e2       	ldi	r24, 0x23	; 35
    2228:	0e 94 cc 10 	call	0x2198	; 0x2198 <UART_sendByte>

}
    222c:	00 00       	nop
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	df 91       	pop	r29
    2236:	cf 91       	pop	r28
    2238:	08 95       	ret

0000223a <UART_receiveString>:
void UART_receiveString(uint8 *str)
{ /*
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	00 d0       	rcall	.+0      	; 0x2244 <UART_receiveString+0xa>
    2244:	1f 92       	push	r1
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	9b 83       	std	Y+3, r25	; 0x03
    224c:	8a 83       	std	Y+2, r24	; 0x02
at first receive first byte then check the  pre define pattern # may be empty string ""
then enter the while loop  and receive byte by byte  until reach pre define pattern #
and replace it with null '\0' to make string */

	uint8 i = 0;
    224e:	19 82       	std	Y+1, r1	; 0x01
		str[i] = UART_receiveByte();
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	2a 81       	ldd	r18, Y+2	; 0x02
    2258:	3b 81       	ldd	r19, Y+3	; 0x03
    225a:	89 01       	movw	r16, r18
    225c:	08 0f       	add	r16, r24
    225e:	19 1f       	adc	r17, r25
    2260:	0e 94 ba 10 	call	0x2174	; 0x2174 <UART_receiveByte>
    2264:	f8 01       	movw	r30, r16
    2266:	80 83       	st	Z, r24
		while(str[i] != '#')
    2268:	0f c0       	rjmp	.+30     	; 0x2288 <UART_receiveString+0x4e>
		{
			i++;
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	8f 5f       	subi	r24, 0xFF	; 255
    226e:	89 83       	std	Y+1, r24	; 0x01
			str[i] = UART_receiveByte();
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	88 2f       	mov	r24, r24
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	2a 81       	ldd	r18, Y+2	; 0x02
    2278:	3b 81       	ldd	r19, Y+3	; 0x03
    227a:	89 01       	movw	r16, r18
    227c:	08 0f       	add	r16, r24
    227e:	19 1f       	adc	r17, r25
    2280:	0e 94 ba 10 	call	0x2174	; 0x2174 <UART_receiveByte>
    2284:	f8 01       	movw	r30, r16
    2286:	80 83       	st	Z, r24
then enter the while loop  and receive byte by byte  until reach pre define pattern #
and replace it with null '\0' to make string */

	uint8 i = 0;
		str[i] = UART_receiveByte();
		while(str[i] != '#')
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	88 2f       	mov	r24, r24
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	2a 81       	ldd	r18, Y+2	; 0x02
    2290:	3b 81       	ldd	r19, Y+3	; 0x03
    2292:	82 0f       	add	r24, r18
    2294:	93 1f       	adc	r25, r19
    2296:	fc 01       	movw	r30, r24
    2298:	80 81       	ld	r24, Z
    229a:	83 32       	cpi	r24, 0x23	; 35
    229c:	31 f7       	brne	.-52     	; 0x226a <UART_receiveString+0x30>
		{
			i++;
			str[i] = UART_receiveByte();
		}
		str[i] = '\0';
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	88 2f       	mov	r24, r24
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	2a 81       	ldd	r18, Y+2	; 0x02
    22a6:	3b 81       	ldd	r19, Y+3	; 0x03
    22a8:	82 0f       	add	r24, r18
    22aa:	93 1f       	adc	r25, r19
    22ac:	fc 01       	movw	r30, r24
    22ae:	10 82       	st	Z, r1
}
    22b0:	00 00       	nop
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	df 91       	pop	r29
    22ba:	cf 91       	pop	r28
    22bc:	1f 91       	pop	r17
    22be:	0f 91       	pop	r16
    22c0:	08 95       	ret

000022c2 <__udivmodsi4>:
    22c2:	a1 e2       	ldi	r26, 0x21	; 33
    22c4:	1a 2e       	mov	r1, r26
    22c6:	aa 1b       	sub	r26, r26
    22c8:	bb 1b       	sub	r27, r27
    22ca:	fd 01       	movw	r30, r26
    22cc:	0d c0       	rjmp	.+26     	; 0x22e8 <__udivmodsi4_ep>

000022ce <__udivmodsi4_loop>:
    22ce:	aa 1f       	adc	r26, r26
    22d0:	bb 1f       	adc	r27, r27
    22d2:	ee 1f       	adc	r30, r30
    22d4:	ff 1f       	adc	r31, r31
    22d6:	a2 17       	cp	r26, r18
    22d8:	b3 07       	cpc	r27, r19
    22da:	e4 07       	cpc	r30, r20
    22dc:	f5 07       	cpc	r31, r21
    22de:	20 f0       	brcs	.+8      	; 0x22e8 <__udivmodsi4_ep>
    22e0:	a2 1b       	sub	r26, r18
    22e2:	b3 0b       	sbc	r27, r19
    22e4:	e4 0b       	sbc	r30, r20
    22e6:	f5 0b       	sbc	r31, r21

000022e8 <__udivmodsi4_ep>:
    22e8:	66 1f       	adc	r22, r22
    22ea:	77 1f       	adc	r23, r23
    22ec:	88 1f       	adc	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	1a 94       	dec	r1
    22f2:	69 f7       	brne	.-38     	; 0x22ce <__udivmodsi4_loop>
    22f4:	60 95       	com	r22
    22f6:	70 95       	com	r23
    22f8:	80 95       	com	r24
    22fa:	90 95       	com	r25
    22fc:	9b 01       	movw	r18, r22
    22fe:	ac 01       	movw	r20, r24
    2300:	bd 01       	movw	r22, r26
    2302:	cf 01       	movw	r24, r30
    2304:	08 95       	ret

00002306 <__tablejump2__>:
    2306:	ee 0f       	add	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	05 90       	lpm	r0, Z+
    230c:	f4 91       	lpm	r31, Z
    230e:	e0 2d       	mov	r30, r0
    2310:	09 94       	ijmp

00002312 <__subsf3>:
    2312:	50 58       	subi	r21, 0x80	; 128

00002314 <__addsf3>:
    2314:	bb 27       	eor	r27, r27
    2316:	aa 27       	eor	r26, r26
    2318:	0e 94 a1 11 	call	0x2342	; 0x2342 <__addsf3x>
    231c:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__fp_round>
    2320:	0e 94 c9 12 	call	0x2592	; 0x2592 <__fp_pscA>
    2324:	38 f0       	brcs	.+14     	; 0x2334 <__addsf3+0x20>
    2326:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__fp_pscB>
    232a:	20 f0       	brcs	.+8      	; 0x2334 <__addsf3+0x20>
    232c:	39 f4       	brne	.+14     	; 0x233c <__addsf3+0x28>
    232e:	9f 3f       	cpi	r25, 0xFF	; 255
    2330:	19 f4       	brne	.+6      	; 0x2338 <__addsf3+0x24>
    2332:	26 f4       	brtc	.+8      	; 0x233c <__addsf3+0x28>
    2334:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__fp_nan>
    2338:	0e f4       	brtc	.+2      	; 0x233c <__addsf3+0x28>
    233a:	e0 95       	com	r30
    233c:	e7 fb       	bst	r30, 7
    233e:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__fp_inf>

00002342 <__addsf3x>:
    2342:	e9 2f       	mov	r30, r25
    2344:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__fp_split3>
    2348:	58 f3       	brcs	.-42     	; 0x2320 <__addsf3+0xc>
    234a:	ba 17       	cp	r27, r26
    234c:	62 07       	cpc	r22, r18
    234e:	73 07       	cpc	r23, r19
    2350:	84 07       	cpc	r24, r20
    2352:	95 07       	cpc	r25, r21
    2354:	20 f0       	brcs	.+8      	; 0x235e <__addsf3x+0x1c>
    2356:	79 f4       	brne	.+30     	; 0x2376 <__addsf3x+0x34>
    2358:	a6 f5       	brtc	.+104    	; 0x23c2 <__addsf3x+0x80>
    235a:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__fp_zero>
    235e:	0e f4       	brtc	.+2      	; 0x2362 <__addsf3x+0x20>
    2360:	e0 95       	com	r30
    2362:	0b 2e       	mov	r0, r27
    2364:	ba 2f       	mov	r27, r26
    2366:	a0 2d       	mov	r26, r0
    2368:	0b 01       	movw	r0, r22
    236a:	b9 01       	movw	r22, r18
    236c:	90 01       	movw	r18, r0
    236e:	0c 01       	movw	r0, r24
    2370:	ca 01       	movw	r24, r20
    2372:	a0 01       	movw	r20, r0
    2374:	11 24       	eor	r1, r1
    2376:	ff 27       	eor	r31, r31
    2378:	59 1b       	sub	r21, r25
    237a:	99 f0       	breq	.+38     	; 0x23a2 <__addsf3x+0x60>
    237c:	59 3f       	cpi	r21, 0xF9	; 249
    237e:	50 f4       	brcc	.+20     	; 0x2394 <__addsf3x+0x52>
    2380:	50 3e       	cpi	r21, 0xE0	; 224
    2382:	68 f1       	brcs	.+90     	; 0x23de <__addsf3x+0x9c>
    2384:	1a 16       	cp	r1, r26
    2386:	f0 40       	sbci	r31, 0x00	; 0
    2388:	a2 2f       	mov	r26, r18
    238a:	23 2f       	mov	r18, r19
    238c:	34 2f       	mov	r19, r20
    238e:	44 27       	eor	r20, r20
    2390:	58 5f       	subi	r21, 0xF8	; 248
    2392:	f3 cf       	rjmp	.-26     	; 0x237a <__addsf3x+0x38>
    2394:	46 95       	lsr	r20
    2396:	37 95       	ror	r19
    2398:	27 95       	ror	r18
    239a:	a7 95       	ror	r26
    239c:	f0 40       	sbci	r31, 0x00	; 0
    239e:	53 95       	inc	r21
    23a0:	c9 f7       	brne	.-14     	; 0x2394 <__addsf3x+0x52>
    23a2:	7e f4       	brtc	.+30     	; 0x23c2 <__addsf3x+0x80>
    23a4:	1f 16       	cp	r1, r31
    23a6:	ba 0b       	sbc	r27, r26
    23a8:	62 0b       	sbc	r22, r18
    23aa:	73 0b       	sbc	r23, r19
    23ac:	84 0b       	sbc	r24, r20
    23ae:	ba f0       	brmi	.+46     	; 0x23de <__addsf3x+0x9c>
    23b0:	91 50       	subi	r25, 0x01	; 1
    23b2:	a1 f0       	breq	.+40     	; 0x23dc <__addsf3x+0x9a>
    23b4:	ff 0f       	add	r31, r31
    23b6:	bb 1f       	adc	r27, r27
    23b8:	66 1f       	adc	r22, r22
    23ba:	77 1f       	adc	r23, r23
    23bc:	88 1f       	adc	r24, r24
    23be:	c2 f7       	brpl	.-16     	; 0x23b0 <__addsf3x+0x6e>
    23c0:	0e c0       	rjmp	.+28     	; 0x23de <__addsf3x+0x9c>
    23c2:	ba 0f       	add	r27, r26
    23c4:	62 1f       	adc	r22, r18
    23c6:	73 1f       	adc	r23, r19
    23c8:	84 1f       	adc	r24, r20
    23ca:	48 f4       	brcc	.+18     	; 0x23de <__addsf3x+0x9c>
    23cc:	87 95       	ror	r24
    23ce:	77 95       	ror	r23
    23d0:	67 95       	ror	r22
    23d2:	b7 95       	ror	r27
    23d4:	f7 95       	ror	r31
    23d6:	9e 3f       	cpi	r25, 0xFE	; 254
    23d8:	08 f0       	brcs	.+2      	; 0x23dc <__addsf3x+0x9a>
    23da:	b0 cf       	rjmp	.-160    	; 0x233c <__addsf3+0x28>
    23dc:	93 95       	inc	r25
    23de:	88 0f       	add	r24, r24
    23e0:	08 f0       	brcs	.+2      	; 0x23e4 <__addsf3x+0xa2>
    23e2:	99 27       	eor	r25, r25
    23e4:	ee 0f       	add	r30, r30
    23e6:	97 95       	ror	r25
    23e8:	87 95       	ror	r24
    23ea:	08 95       	ret

000023ec <__cmpsf2>:
    23ec:	0e 94 9c 12 	call	0x2538	; 0x2538 <__fp_cmp>
    23f0:	08 f4       	brcc	.+2      	; 0x23f4 <__cmpsf2+0x8>
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	08 95       	ret

000023f6 <__divsf3>:
    23f6:	0e 94 0f 12 	call	0x241e	; 0x241e <__divsf3x>
    23fa:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__fp_round>
    23fe:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__fp_pscB>
    2402:	58 f0       	brcs	.+22     	; 0x241a <__divsf3+0x24>
    2404:	0e 94 c9 12 	call	0x2592	; 0x2592 <__fp_pscA>
    2408:	40 f0       	brcs	.+16     	; 0x241a <__divsf3+0x24>
    240a:	29 f4       	brne	.+10     	; 0x2416 <__divsf3+0x20>
    240c:	5f 3f       	cpi	r21, 0xFF	; 255
    240e:	29 f0       	breq	.+10     	; 0x241a <__divsf3+0x24>
    2410:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__fp_inf>
    2414:	51 11       	cpse	r21, r1
    2416:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__fp_szero>
    241a:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__fp_nan>

0000241e <__divsf3x>:
    241e:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__fp_split3>
    2422:	68 f3       	brcs	.-38     	; 0x23fe <__divsf3+0x8>

00002424 <__divsf3_pse>:
    2424:	99 23       	and	r25, r25
    2426:	b1 f3       	breq	.-20     	; 0x2414 <__divsf3+0x1e>
    2428:	55 23       	and	r21, r21
    242a:	91 f3       	breq	.-28     	; 0x2410 <__divsf3+0x1a>
    242c:	95 1b       	sub	r25, r21
    242e:	55 0b       	sbc	r21, r21
    2430:	bb 27       	eor	r27, r27
    2432:	aa 27       	eor	r26, r26
    2434:	62 17       	cp	r22, r18
    2436:	73 07       	cpc	r23, r19
    2438:	84 07       	cpc	r24, r20
    243a:	38 f0       	brcs	.+14     	; 0x244a <__divsf3_pse+0x26>
    243c:	9f 5f       	subi	r25, 0xFF	; 255
    243e:	5f 4f       	sbci	r21, 0xFF	; 255
    2440:	22 0f       	add	r18, r18
    2442:	33 1f       	adc	r19, r19
    2444:	44 1f       	adc	r20, r20
    2446:	aa 1f       	adc	r26, r26
    2448:	a9 f3       	breq	.-22     	; 0x2434 <__divsf3_pse+0x10>
    244a:	35 d0       	rcall	.+106    	; 0x24b6 <__divsf3_pse+0x92>
    244c:	0e 2e       	mov	r0, r30
    244e:	3a f0       	brmi	.+14     	; 0x245e <__divsf3_pse+0x3a>
    2450:	e0 e8       	ldi	r30, 0x80	; 128
    2452:	32 d0       	rcall	.+100    	; 0x24b8 <__divsf3_pse+0x94>
    2454:	91 50       	subi	r25, 0x01	; 1
    2456:	50 40       	sbci	r21, 0x00	; 0
    2458:	e6 95       	lsr	r30
    245a:	00 1c       	adc	r0, r0
    245c:	ca f7       	brpl	.-14     	; 0x2450 <__divsf3_pse+0x2c>
    245e:	2b d0       	rcall	.+86     	; 0x24b6 <__divsf3_pse+0x92>
    2460:	fe 2f       	mov	r31, r30
    2462:	29 d0       	rcall	.+82     	; 0x24b6 <__divsf3_pse+0x92>
    2464:	66 0f       	add	r22, r22
    2466:	77 1f       	adc	r23, r23
    2468:	88 1f       	adc	r24, r24
    246a:	bb 1f       	adc	r27, r27
    246c:	26 17       	cp	r18, r22
    246e:	37 07       	cpc	r19, r23
    2470:	48 07       	cpc	r20, r24
    2472:	ab 07       	cpc	r26, r27
    2474:	b0 e8       	ldi	r27, 0x80	; 128
    2476:	09 f0       	breq	.+2      	; 0x247a <__divsf3_pse+0x56>
    2478:	bb 0b       	sbc	r27, r27
    247a:	80 2d       	mov	r24, r0
    247c:	bf 01       	movw	r22, r30
    247e:	ff 27       	eor	r31, r31
    2480:	93 58       	subi	r25, 0x83	; 131
    2482:	5f 4f       	sbci	r21, 0xFF	; 255
    2484:	3a f0       	brmi	.+14     	; 0x2494 <__divsf3_pse+0x70>
    2486:	9e 3f       	cpi	r25, 0xFE	; 254
    2488:	51 05       	cpc	r21, r1
    248a:	78 f0       	brcs	.+30     	; 0x24aa <__divsf3_pse+0x86>
    248c:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__fp_inf>
    2490:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__fp_szero>
    2494:	5f 3f       	cpi	r21, 0xFF	; 255
    2496:	e4 f3       	brlt	.-8      	; 0x2490 <__divsf3_pse+0x6c>
    2498:	98 3e       	cpi	r25, 0xE8	; 232
    249a:	d4 f3       	brlt	.-12     	; 0x2490 <__divsf3_pse+0x6c>
    249c:	86 95       	lsr	r24
    249e:	77 95       	ror	r23
    24a0:	67 95       	ror	r22
    24a2:	b7 95       	ror	r27
    24a4:	f7 95       	ror	r31
    24a6:	9f 5f       	subi	r25, 0xFF	; 255
    24a8:	c9 f7       	brne	.-14     	; 0x249c <__divsf3_pse+0x78>
    24aa:	88 0f       	add	r24, r24
    24ac:	91 1d       	adc	r25, r1
    24ae:	96 95       	lsr	r25
    24b0:	87 95       	ror	r24
    24b2:	97 f9       	bld	r25, 7
    24b4:	08 95       	ret
    24b6:	e1 e0       	ldi	r30, 0x01	; 1
    24b8:	66 0f       	add	r22, r22
    24ba:	77 1f       	adc	r23, r23
    24bc:	88 1f       	adc	r24, r24
    24be:	bb 1f       	adc	r27, r27
    24c0:	62 17       	cp	r22, r18
    24c2:	73 07       	cpc	r23, r19
    24c4:	84 07       	cpc	r24, r20
    24c6:	ba 07       	cpc	r27, r26
    24c8:	20 f0       	brcs	.+8      	; 0x24d2 <__divsf3_pse+0xae>
    24ca:	62 1b       	sub	r22, r18
    24cc:	73 0b       	sbc	r23, r19
    24ce:	84 0b       	sbc	r24, r20
    24d0:	ba 0b       	sbc	r27, r26
    24d2:	ee 1f       	adc	r30, r30
    24d4:	88 f7       	brcc	.-30     	; 0x24b8 <__divsf3_pse+0x94>
    24d6:	e0 95       	com	r30
    24d8:	08 95       	ret

000024da <__fixunssfsi>:
    24da:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__fp_splitA>
    24de:	88 f0       	brcs	.+34     	; 0x2502 <__fixunssfsi+0x28>
    24e0:	9f 57       	subi	r25, 0x7F	; 127
    24e2:	98 f0       	brcs	.+38     	; 0x250a <__fixunssfsi+0x30>
    24e4:	b9 2f       	mov	r27, r25
    24e6:	99 27       	eor	r25, r25
    24e8:	b7 51       	subi	r27, 0x17	; 23
    24ea:	b0 f0       	brcs	.+44     	; 0x2518 <__fixunssfsi+0x3e>
    24ec:	e1 f0       	breq	.+56     	; 0x2526 <__fixunssfsi+0x4c>
    24ee:	66 0f       	add	r22, r22
    24f0:	77 1f       	adc	r23, r23
    24f2:	88 1f       	adc	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	1a f0       	brmi	.+6      	; 0x24fe <__fixunssfsi+0x24>
    24f8:	ba 95       	dec	r27
    24fa:	c9 f7       	brne	.-14     	; 0x24ee <__fixunssfsi+0x14>
    24fc:	14 c0       	rjmp	.+40     	; 0x2526 <__fixunssfsi+0x4c>
    24fe:	b1 30       	cpi	r27, 0x01	; 1
    2500:	91 f0       	breq	.+36     	; 0x2526 <__fixunssfsi+0x4c>
    2502:	0e 94 0a 13 	call	0x2614	; 0x2614 <__fp_zero>
    2506:	b1 e0       	ldi	r27, 0x01	; 1
    2508:	08 95       	ret
    250a:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__fp_zero>
    250e:	67 2f       	mov	r22, r23
    2510:	78 2f       	mov	r23, r24
    2512:	88 27       	eor	r24, r24
    2514:	b8 5f       	subi	r27, 0xF8	; 248
    2516:	39 f0       	breq	.+14     	; 0x2526 <__fixunssfsi+0x4c>
    2518:	b9 3f       	cpi	r27, 0xF9	; 249
    251a:	cc f3       	brlt	.-14     	; 0x250e <__fixunssfsi+0x34>
    251c:	86 95       	lsr	r24
    251e:	77 95       	ror	r23
    2520:	67 95       	ror	r22
    2522:	b3 95       	inc	r27
    2524:	d9 f7       	brne	.-10     	; 0x251c <__fixunssfsi+0x42>
    2526:	3e f4       	brtc	.+14     	; 0x2536 <__fixunssfsi+0x5c>
    2528:	90 95       	com	r25
    252a:	80 95       	com	r24
    252c:	70 95       	com	r23
    252e:	61 95       	neg	r22
    2530:	7f 4f       	sbci	r23, 0xFF	; 255
    2532:	8f 4f       	sbci	r24, 0xFF	; 255
    2534:	9f 4f       	sbci	r25, 0xFF	; 255
    2536:	08 95       	ret

00002538 <__fp_cmp>:
    2538:	99 0f       	add	r25, r25
    253a:	00 08       	sbc	r0, r0
    253c:	55 0f       	add	r21, r21
    253e:	aa 0b       	sbc	r26, r26
    2540:	e0 e8       	ldi	r30, 0x80	; 128
    2542:	fe ef       	ldi	r31, 0xFE	; 254
    2544:	16 16       	cp	r1, r22
    2546:	17 06       	cpc	r1, r23
    2548:	e8 07       	cpc	r30, r24
    254a:	f9 07       	cpc	r31, r25
    254c:	c0 f0       	brcs	.+48     	; 0x257e <__fp_cmp+0x46>
    254e:	12 16       	cp	r1, r18
    2550:	13 06       	cpc	r1, r19
    2552:	e4 07       	cpc	r30, r20
    2554:	f5 07       	cpc	r31, r21
    2556:	98 f0       	brcs	.+38     	; 0x257e <__fp_cmp+0x46>
    2558:	62 1b       	sub	r22, r18
    255a:	73 0b       	sbc	r23, r19
    255c:	84 0b       	sbc	r24, r20
    255e:	95 0b       	sbc	r25, r21
    2560:	39 f4       	brne	.+14     	; 0x2570 <__fp_cmp+0x38>
    2562:	0a 26       	eor	r0, r26
    2564:	61 f0       	breq	.+24     	; 0x257e <__fp_cmp+0x46>
    2566:	23 2b       	or	r18, r19
    2568:	24 2b       	or	r18, r20
    256a:	25 2b       	or	r18, r21
    256c:	21 f4       	brne	.+8      	; 0x2576 <__fp_cmp+0x3e>
    256e:	08 95       	ret
    2570:	0a 26       	eor	r0, r26
    2572:	09 f4       	brne	.+2      	; 0x2576 <__fp_cmp+0x3e>
    2574:	a1 40       	sbci	r26, 0x01	; 1
    2576:	a6 95       	lsr	r26
    2578:	8f ef       	ldi	r24, 0xFF	; 255
    257a:	81 1d       	adc	r24, r1
    257c:	81 1d       	adc	r24, r1
    257e:	08 95       	ret

00002580 <__fp_inf>:
    2580:	97 f9       	bld	r25, 7
    2582:	9f 67       	ori	r25, 0x7F	; 127
    2584:	80 e8       	ldi	r24, 0x80	; 128
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	60 e0       	ldi	r22, 0x00	; 0
    258a:	08 95       	ret

0000258c <__fp_nan>:
    258c:	9f ef       	ldi	r25, 0xFF	; 255
    258e:	80 ec       	ldi	r24, 0xC0	; 192
    2590:	08 95       	ret

00002592 <__fp_pscA>:
    2592:	00 24       	eor	r0, r0
    2594:	0a 94       	dec	r0
    2596:	16 16       	cp	r1, r22
    2598:	17 06       	cpc	r1, r23
    259a:	18 06       	cpc	r1, r24
    259c:	09 06       	cpc	r0, r25
    259e:	08 95       	ret

000025a0 <__fp_pscB>:
    25a0:	00 24       	eor	r0, r0
    25a2:	0a 94       	dec	r0
    25a4:	12 16       	cp	r1, r18
    25a6:	13 06       	cpc	r1, r19
    25a8:	14 06       	cpc	r1, r20
    25aa:	05 06       	cpc	r0, r21
    25ac:	08 95       	ret

000025ae <__fp_round>:
    25ae:	09 2e       	mov	r0, r25
    25b0:	03 94       	inc	r0
    25b2:	00 0c       	add	r0, r0
    25b4:	11 f4       	brne	.+4      	; 0x25ba <__fp_round+0xc>
    25b6:	88 23       	and	r24, r24
    25b8:	52 f0       	brmi	.+20     	; 0x25ce <__fp_round+0x20>
    25ba:	bb 0f       	add	r27, r27
    25bc:	40 f4       	brcc	.+16     	; 0x25ce <__fp_round+0x20>
    25be:	bf 2b       	or	r27, r31
    25c0:	11 f4       	brne	.+4      	; 0x25c6 <__fp_round+0x18>
    25c2:	60 ff       	sbrs	r22, 0
    25c4:	04 c0       	rjmp	.+8      	; 0x25ce <__fp_round+0x20>
    25c6:	6f 5f       	subi	r22, 0xFF	; 255
    25c8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ca:	8f 4f       	sbci	r24, 0xFF	; 255
    25cc:	9f 4f       	sbci	r25, 0xFF	; 255
    25ce:	08 95       	ret

000025d0 <__fp_split3>:
    25d0:	57 fd       	sbrc	r21, 7
    25d2:	90 58       	subi	r25, 0x80	; 128
    25d4:	44 0f       	add	r20, r20
    25d6:	55 1f       	adc	r21, r21
    25d8:	59 f0       	breq	.+22     	; 0x25f0 <__fp_splitA+0x10>
    25da:	5f 3f       	cpi	r21, 0xFF	; 255
    25dc:	71 f0       	breq	.+28     	; 0x25fa <__fp_splitA+0x1a>
    25de:	47 95       	ror	r20

000025e0 <__fp_splitA>:
    25e0:	88 0f       	add	r24, r24
    25e2:	97 fb       	bst	r25, 7
    25e4:	99 1f       	adc	r25, r25
    25e6:	61 f0       	breq	.+24     	; 0x2600 <__fp_splitA+0x20>
    25e8:	9f 3f       	cpi	r25, 0xFF	; 255
    25ea:	79 f0       	breq	.+30     	; 0x260a <__fp_splitA+0x2a>
    25ec:	87 95       	ror	r24
    25ee:	08 95       	ret
    25f0:	12 16       	cp	r1, r18
    25f2:	13 06       	cpc	r1, r19
    25f4:	14 06       	cpc	r1, r20
    25f6:	55 1f       	adc	r21, r21
    25f8:	f2 cf       	rjmp	.-28     	; 0x25de <__fp_split3+0xe>
    25fa:	46 95       	lsr	r20
    25fc:	f1 df       	rcall	.-30     	; 0x25e0 <__fp_splitA>
    25fe:	08 c0       	rjmp	.+16     	; 0x2610 <__fp_splitA+0x30>
    2600:	16 16       	cp	r1, r22
    2602:	17 06       	cpc	r1, r23
    2604:	18 06       	cpc	r1, r24
    2606:	99 1f       	adc	r25, r25
    2608:	f1 cf       	rjmp	.-30     	; 0x25ec <__fp_splitA+0xc>
    260a:	86 95       	lsr	r24
    260c:	71 05       	cpc	r23, r1
    260e:	61 05       	cpc	r22, r1
    2610:	08 94       	sec
    2612:	08 95       	ret

00002614 <__fp_zero>:
    2614:	e8 94       	clt

00002616 <__fp_szero>:
    2616:	bb 27       	eor	r27, r27
    2618:	66 27       	eor	r22, r22
    261a:	77 27       	eor	r23, r23
    261c:	cb 01       	movw	r24, r22
    261e:	97 f9       	bld	r25, 7
    2620:	08 95       	ret

00002622 <__gesf2>:
    2622:	0e 94 9c 12 	call	0x2538	; 0x2538 <__fp_cmp>
    2626:	08 f4       	brcc	.+2      	; 0x262a <__gesf2+0x8>
    2628:	8f ef       	ldi	r24, 0xFF	; 255
    262a:	08 95       	ret

0000262c <__mulsf3>:
    262c:	0e 94 29 13 	call	0x2652	; 0x2652 <__mulsf3x>
    2630:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__fp_round>
    2634:	0e 94 c9 12 	call	0x2592	; 0x2592 <__fp_pscA>
    2638:	38 f0       	brcs	.+14     	; 0x2648 <__mulsf3+0x1c>
    263a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__fp_pscB>
    263e:	20 f0       	brcs	.+8      	; 0x2648 <__mulsf3+0x1c>
    2640:	95 23       	and	r25, r21
    2642:	11 f0       	breq	.+4      	; 0x2648 <__mulsf3+0x1c>
    2644:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__fp_inf>
    2648:	0c 94 c6 12 	jmp	0x258c	; 0x258c <__fp_nan>
    264c:	11 24       	eor	r1, r1
    264e:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__fp_szero>

00002652 <__mulsf3x>:
    2652:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__fp_split3>
    2656:	70 f3       	brcs	.-36     	; 0x2634 <__mulsf3+0x8>

00002658 <__mulsf3_pse>:
    2658:	95 9f       	mul	r25, r21
    265a:	c1 f3       	breq	.-16     	; 0x264c <__mulsf3+0x20>
    265c:	95 0f       	add	r25, r21
    265e:	50 e0       	ldi	r21, 0x00	; 0
    2660:	55 1f       	adc	r21, r21
    2662:	62 9f       	mul	r22, r18
    2664:	f0 01       	movw	r30, r0
    2666:	72 9f       	mul	r23, r18
    2668:	bb 27       	eor	r27, r27
    266a:	f0 0d       	add	r31, r0
    266c:	b1 1d       	adc	r27, r1
    266e:	63 9f       	mul	r22, r19
    2670:	aa 27       	eor	r26, r26
    2672:	f0 0d       	add	r31, r0
    2674:	b1 1d       	adc	r27, r1
    2676:	aa 1f       	adc	r26, r26
    2678:	64 9f       	mul	r22, r20
    267a:	66 27       	eor	r22, r22
    267c:	b0 0d       	add	r27, r0
    267e:	a1 1d       	adc	r26, r1
    2680:	66 1f       	adc	r22, r22
    2682:	82 9f       	mul	r24, r18
    2684:	22 27       	eor	r18, r18
    2686:	b0 0d       	add	r27, r0
    2688:	a1 1d       	adc	r26, r1
    268a:	62 1f       	adc	r22, r18
    268c:	73 9f       	mul	r23, r19
    268e:	b0 0d       	add	r27, r0
    2690:	a1 1d       	adc	r26, r1
    2692:	62 1f       	adc	r22, r18
    2694:	83 9f       	mul	r24, r19
    2696:	a0 0d       	add	r26, r0
    2698:	61 1d       	adc	r22, r1
    269a:	22 1f       	adc	r18, r18
    269c:	74 9f       	mul	r23, r20
    269e:	33 27       	eor	r19, r19
    26a0:	a0 0d       	add	r26, r0
    26a2:	61 1d       	adc	r22, r1
    26a4:	23 1f       	adc	r18, r19
    26a6:	84 9f       	mul	r24, r20
    26a8:	60 0d       	add	r22, r0
    26aa:	21 1d       	adc	r18, r1
    26ac:	82 2f       	mov	r24, r18
    26ae:	76 2f       	mov	r23, r22
    26b0:	6a 2f       	mov	r22, r26
    26b2:	11 24       	eor	r1, r1
    26b4:	9f 57       	subi	r25, 0x7F	; 127
    26b6:	50 40       	sbci	r21, 0x00	; 0
    26b8:	9a f0       	brmi	.+38     	; 0x26e0 <__mulsf3_pse+0x88>
    26ba:	f1 f0       	breq	.+60     	; 0x26f8 <__mulsf3_pse+0xa0>
    26bc:	88 23       	and	r24, r24
    26be:	4a f0       	brmi	.+18     	; 0x26d2 <__mulsf3_pse+0x7a>
    26c0:	ee 0f       	add	r30, r30
    26c2:	ff 1f       	adc	r31, r31
    26c4:	bb 1f       	adc	r27, r27
    26c6:	66 1f       	adc	r22, r22
    26c8:	77 1f       	adc	r23, r23
    26ca:	88 1f       	adc	r24, r24
    26cc:	91 50       	subi	r25, 0x01	; 1
    26ce:	50 40       	sbci	r21, 0x00	; 0
    26d0:	a9 f7       	brne	.-22     	; 0x26bc <__mulsf3_pse+0x64>
    26d2:	9e 3f       	cpi	r25, 0xFE	; 254
    26d4:	51 05       	cpc	r21, r1
    26d6:	80 f0       	brcs	.+32     	; 0x26f8 <__mulsf3_pse+0xa0>
    26d8:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__fp_inf>
    26dc:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__fp_szero>
    26e0:	5f 3f       	cpi	r21, 0xFF	; 255
    26e2:	e4 f3       	brlt	.-8      	; 0x26dc <__mulsf3_pse+0x84>
    26e4:	98 3e       	cpi	r25, 0xE8	; 232
    26e6:	d4 f3       	brlt	.-12     	; 0x26dc <__mulsf3_pse+0x84>
    26e8:	86 95       	lsr	r24
    26ea:	77 95       	ror	r23
    26ec:	67 95       	ror	r22
    26ee:	b7 95       	ror	r27
    26f0:	f7 95       	ror	r31
    26f2:	e7 95       	ror	r30
    26f4:	9f 5f       	subi	r25, 0xFF	; 255
    26f6:	c1 f7       	brne	.-16     	; 0x26e8 <__mulsf3_pse+0x90>
    26f8:	fe 2b       	or	r31, r30
    26fa:	88 0f       	add	r24, r24
    26fc:	91 1d       	adc	r25, r1
    26fe:	96 95       	lsr	r25
    2700:	87 95       	ror	r24
    2702:	97 f9       	bld	r25, 7
    2704:	08 95       	ret

00002706 <strcat>:
    2706:	fb 01       	movw	r30, r22
    2708:	dc 01       	movw	r26, r24
    270a:	0d 90       	ld	r0, X+
    270c:	00 20       	and	r0, r0
    270e:	e9 f7       	brne	.-6      	; 0x270a <strcat+0x4>
    2710:	11 97       	sbiw	r26, 0x01	; 1
    2712:	01 90       	ld	r0, Z+
    2714:	0d 92       	st	X+, r0
    2716:	00 20       	and	r0, r0
    2718:	e1 f7       	brne	.-8      	; 0x2712 <strcat+0xc>
    271a:	08 95       	ret

0000271c <strcmp>:
    271c:	fb 01       	movw	r30, r22
    271e:	dc 01       	movw	r26, r24
    2720:	8d 91       	ld	r24, X+
    2722:	01 90       	ld	r0, Z+
    2724:	80 19       	sub	r24, r0
    2726:	01 10       	cpse	r0, r1
    2728:	d9 f3       	breq	.-10     	; 0x2720 <strcmp+0x4>
    272a:	99 0b       	sbc	r25, r25
    272c:	08 95       	ret

0000272e <itoa>:
    272e:	45 32       	cpi	r20, 0x25	; 37
    2730:	51 05       	cpc	r21, r1
    2732:	20 f4       	brcc	.+8      	; 0x273c <itoa+0xe>
    2734:	42 30       	cpi	r20, 0x02	; 2
    2736:	10 f0       	brcs	.+4      	; 0x273c <itoa+0xe>
    2738:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <__itoa_ncheck>
    273c:	fb 01       	movw	r30, r22
    273e:	10 82       	st	Z, r1
    2740:	cb 01       	movw	r24, r22
    2742:	08 95       	ret

00002744 <__itoa_ncheck>:
    2744:	bb 27       	eor	r27, r27
    2746:	4a 30       	cpi	r20, 0x0A	; 10
    2748:	31 f4       	brne	.+12     	; 0x2756 <__itoa_ncheck+0x12>
    274a:	99 23       	and	r25, r25
    274c:	22 f4       	brpl	.+8      	; 0x2756 <__itoa_ncheck+0x12>
    274e:	bd e2       	ldi	r27, 0x2D	; 45
    2750:	90 95       	com	r25
    2752:	81 95       	neg	r24
    2754:	9f 4f       	sbci	r25, 0xFF	; 255
    2756:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__utoa_common>

0000275a <__utoa_ncheck>:
    275a:	bb 27       	eor	r27, r27

0000275c <__utoa_common>:
    275c:	fb 01       	movw	r30, r22
    275e:	55 27       	eor	r21, r21
    2760:	aa 27       	eor	r26, r26
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	aa 1f       	adc	r26, r26
    2768:	a4 17       	cp	r26, r20
    276a:	10 f0       	brcs	.+4      	; 0x2770 <__utoa_common+0x14>
    276c:	a4 1b       	sub	r26, r20
    276e:	83 95       	inc	r24
    2770:	50 51       	subi	r21, 0x10	; 16
    2772:	b9 f7       	brne	.-18     	; 0x2762 <__utoa_common+0x6>
    2774:	a0 5d       	subi	r26, 0xD0	; 208
    2776:	aa 33       	cpi	r26, 0x3A	; 58
    2778:	08 f0       	brcs	.+2      	; 0x277c <__utoa_common+0x20>
    277a:	a9 5d       	subi	r26, 0xD9	; 217
    277c:	a1 93       	st	Z+, r26
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	79 f7       	brne	.-34     	; 0x2760 <__utoa_common+0x4>
    2782:	b1 11       	cpse	r27, r1
    2784:	b1 93       	st	Z+, r27
    2786:	11 92       	st	Z+, r1
    2788:	cb 01       	movw	r24, r22
    278a:	0c 94 c7 13 	jmp	0x278e	; 0x278e <strrev>

0000278e <strrev>:
    278e:	dc 01       	movw	r26, r24
    2790:	fc 01       	movw	r30, r24
    2792:	67 2f       	mov	r22, r23
    2794:	71 91       	ld	r23, Z+
    2796:	77 23       	and	r23, r23
    2798:	e1 f7       	brne	.-8      	; 0x2792 <strrev+0x4>
    279a:	32 97       	sbiw	r30, 0x02	; 2
    279c:	04 c0       	rjmp	.+8      	; 0x27a6 <strrev+0x18>
    279e:	7c 91       	ld	r23, X
    27a0:	6d 93       	st	X+, r22
    27a2:	70 83       	st	Z, r23
    27a4:	62 91       	ld	r22, -Z
    27a6:	ae 17       	cp	r26, r30
    27a8:	bf 07       	cpc	r27, r31
    27aa:	c8 f3       	brcs	.-14     	; 0x279e <strrev+0x10>
    27ac:	08 95       	ret

000027ae <_exit>:
    27ae:	f8 94       	cli

000027b0 <__stop_program>:
    27b0:	ff cf       	rjmp	.-2      	; 0x27b0 <__stop_program>
